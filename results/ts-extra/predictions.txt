sendKeys(text);
reject(error);
resolve(body);
type.kind === ts.SyntaxKind.UnionType) {
type as any).priority;
if (priorityA < priorityB) {
render) {
await reader);
new RarArchive(uri, false);
any = needle.length;
i = <NUM_LIT>; i < nlen; i++) {
now };
const cacheableGroups = cache.groups;
navigatorSTR_LIT>';
swUrl)
dispose();
return;
JSON.stringify(installingWorker.state));
catch((err) => {
let a = new DeleteYankChangeAction();
return new StartVisualModeAction();
key in src) {
return false;
i]) {
return true;
m.RightBrancket = "<STR_LIT>";
m.LeftBrancket = "<STR_LIT>";
m.Count = num > <NUM_LIT> ? num : <NUM_LIT>;
new FindCharacterMotion(null);
Count = num > <NUM_LIT> ? num : <NUM_LIT>;
FindCharacterMotion(Direction.Right);
IAction = <IRequireMotionAction>action;
let a = <IRequireMotionAction>action;
FindCharacterMotion;
RightBrancket = "<STR_LIT>";
m.RightBrancket = "<STR_LIT>";
RightBrancket = "<STR_LIT>";
"<STR_LIT>";
if (code === <NUM_LIT>) {
obj === undefined || obj === null;
return {
added) {
if (!props.postConstructMethods) {
httpRequest.onreadystatechange = () => {
this, eventName);
() => {
return Observable.fromEvent(window, '<STR_LIT>');
return Observable.fromEvent(el, '<STR_LIT>');
fromEvent(window, '<STR_LIT>');
'<STR_LIT>');
Subject();
'<STR_LIT>');
setAttribute('<STR_LIT>', '<STR_LIT>');
vRatio: any = scaleSubject.map(verticalRatioOf(options.height));
scaleSubject,
setAttribute(attribute, value);
number;
result === null) {
if (str === '<STR_LIT>') {
NUMBER_REGEXP)) {
null) {
vscode.TextEditor = window.activeTextEditor;
Editorposition = position;
architecture;
context.process = myProcess;
}
pid,
argv,
notice.context.osVersion = os.release();
url,
url: url,
url = req.url;
handler: ServerOptions = {
<NUM_LIT>],
req.route.component,
response: any = {
attr];
<NUM_LIT>) {
frames = [err];
catch (e) {
fileName || '<STR_LIT>',
err.message) {
else {
...args: any[]) => {
if (typeof resp === '<STR_LIT>') {
e) {
resp.id;
resp.error) {
return;
HTMLScriptElement = document.getElementsByTagName('<STR_LIT>')[<NUM_LIT>];
const
curLine)) !== null) {
exec(curLine);
commands.registerTextEditorCommand('<STR_LIT>', HeaderFunctions.demoteLine);
promotemoteLineCmd: any = vscode.commands.registerTextEditorCommand('<STR_LIT>', HeaderFunctions.demoteLine);
insert
let
commands.registerTextEditorCommand('<STR_LIT>', MarkupFunctions.underline);
any = vscode.commands.registerTextEditorCommand('<STR_LIT>', MarkupFunctions.butterfly);
insertTimestampCmd);
"<STR_LIT>", "<STR_LIT>");
textEditor, edit, "<STR_LIT>");
textEditor, edit, {
getHours();
datetime.year) && Boolean(datetime.month) && Boolean(datetime.day);
curLinePrefix: any = Utils.getLinePrefix(curLine);
delete(curlineStart);
headerPrefix);
curlineStart));
vscode.DateTime = {
curOffset = <NUM_LIT>;
activeTextEditor.document;
trim();
<NUM_LIT>;
errorMessage);
minSaturation && s <= maxSaturation) {
value > maxValue) {
new Vibrant(h, s, l);
targetDarkLuma;
if (vnode._tag === "<STR_LIT>") {
<NUM_LIT>) {
return
'<STR_LIT>';
let (max < min) {
if (l < <NUM_LIT>) {
else {
max) {
break;
DragDropService();
config);
by.css(selector(i)));
badgeEl: any = element(by.css(selector(i)));
for (let i: number = <NUM_LIT>; i < badges.length; i++) {
push({
color,
elementNumber++;
cssValue, <NUM_LIT>);
options);
else {
});
return new tokenClass(token);
code === '<STR_LIT>') {
new Js2Xml(options).convert(data);
Math.pow(p1.x - p2.x, <NUM_LIT>) + Math.pow(p1.y - p2.y, <NUM_LIT>));
every(point => {
map(groupToMatrix));
<NUM_LIT>];
item;
break;
break;
ctx
<NUM_LIT>, <NUM_LIT>, Math.PI * <NUM_LIT>);
restore();
ctx.fill();
textBounds = ctx.measureText(text);
sanitizer = TestBed.get(DomSanitizer);
[mX1, mY1, mX2, mY2]
i < kSplineTableSize; ++i) {
intervalEnd: number = mX1;
return intervalStart;
initialSlope === <NUM_LIT>) {
x === sampleValues[sampleValues.length - <NUM_LIT>]) {
return <NUM_LIT>;
if (currentSlope === <NUM_LIT>) {
layerId === '<STR_LIT>' ?
const result = `<STR_LIT>`;
return vl;
subPathState));
return pm.unconvertSubPaths(to);
a) * t;
block.layerId] = blocksByProperty;
push(block);
forEach(blocksByProperty, (block: any): void => {
<NUM_LIT> });
documentElement;
nodeType + '<STR_LIT>';
if (clipPathIdMap.has(clipPathId)) {
constructor(...args: any[]) {
elem.content[<NUM_LIT>].value;
this, '<STR_LIT>', {
round) {
data.attr('<STR_LIT>', data.join('<STR_LIT>'));
applyTransforms) {
<NUM_LIT>));
circle.center[<NUM_LIT>] + curve[<NUM_LIT>]],
i] = Math.round(data[i]);
function (value: any) {
'<STR_LIT>') {
set
i];
<NUM_LIT>] += currentPoint[<NUM_LIT>];
currentPoint[<NUM_LIT>] = itemData[<NUM_LIT>];
<NUM_LIT>] - v2[<NUM_LIT>], v1[<NUM_LIT>] - v2[<NUM_LIT>]];
y + matrix[<NUM_LIT>]];
METADATA_KEY);
shape = item.attr('<STR_LIT>');
fill == '<STR_LIT>'
'<STR_LIT>'
fill))) {
'<STR_LIT>',
push({
<NUM_LIT>) * Math.sqrt(data[<NUM_LIT>] * data[<NUM_LIT>] + data[<NUM_LIT>] * data[<NUM_LIT>]);
rotate[<NUM_LIT>])
cos) * x + sin * y) / denom);
<NUM_LIT>]) {
svgText);
pretty: true,
new VectorLayer(),
finalReducers[key] = reducers[key];
combinedReducers = finalReducers;
nextState[key] = nextStateForKey;
animation: new Animation(),
return prevState.timestamp - action.payload.timestamp;
as any);
mutatorPath);
op) {
case '<STR_LIT>':
<NUM_LIT>]];
if (subIdx > <NUM_LIT>) {
<NUM_LIT>;
<NUM_LIT>]);
'<STR_LIT>':
i += <NUM_LIT>;
<NUM_LIT>;
<NUM_LIT>;
case '<STR_LIT>':
i += <NUM_LIT>;
'<STR_LIT>']);
i + <NUM_LIT>]);
break;
'<STR_LIT>':
<NUM_LIT>]);
<NUM_LIT>;
typeof value === '<STR_LIT>';
call(promise) === '<STR_LIT>';
props.x) || getVerticalSizeModifiers(props.y);
HTMLLIElement | null = null;
lastIndex = <NUM_LIT>;
return;
i])) {
return string.replace(/-(.)/g, function (match, chr) {
replace(/[\-\\\{
ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;
LineCommentTrivia:
_scanner.getPosition();
return _format(str, ...args);
str, ...args);
number = <NUM_LIT>; i < count; i++) {
s) => s.fileName === fileName);
else {
mimetypes: ['<STR_LIT>'],
onLanguage('<STR_LIT>', () => {
'<STR_LIT>',
mimetypes: ['<STR_LIT>']
{
from, codeEdit.to, codeEdit.newText);
return model.getOffsetAt(position);
value);
value) !== -<NUM_LIT>) {
push(value);
filePath } = parse(url);
arguments);
ext));
limited > num) {
now = Date.now();
null;
}
arg);
return;
filePath.startsWith(projectDir))) {
length > <NUM_LIT>) {
err) {
var stat = fs.statSync(data.src);
err) {
clear();
return new URL(relativeUrl).href;
<NUM_LIT>] === '<STR_LIT>') {
toString() });
'<STR_LIT>' || err.code == '<STR_LIT>')) {
m;
true;
InsertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;
typeof config.insertSpaceAfterFunctionKeyword === "<STR_LIT>") {
options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets;
placeOpenBraceOnNewLineForControlBlocks;
m;
return filePath = sourceFile.fileName;
subItems,
icon = types.IconType.InterfaceConstructor;
subItems,
sourceFile);
subItems,
node.kind);
depth + <NUM_LIT>);
kind: kind,
};
value) {
return value;
moduleNameExpr.kind === ts.SyntaxKind.StringLiteral) {
moduleExpr.pos + <NUM_LIT>, end: moduleExpr.end + <NUM_LIT> }
ts.SyntaxKind.ModuleDeclaration) {
child).name) {
replace(/^\s*\}[^\}]*\{
line: string): string {
line.trim();
refs = refs.map(r => {
var
result === undefined) {
ts.SyntaxKind.StringLiteral ||
types.UMLClassMember = {
lifetime: types.UMLClassMemberLifetime.Instance,
filePath)
TypedEvent<{
return new AbandonedBaby().hasPattern(data);
hasPattern(data);
new BearishHaramiCross().hasPattern(data);
BearishMarubozu().hasPattern(data);
data);
data);
return config[key];
if (input.reversedInput) {
level);
else {
return calculated > <NUM_LIT> ? calculated : <NUM_LIT>;
reversedInput) {
reversedInput) {
apply(self, arguments);
push(statements);
focus();
originalText.slice(insertionPosition)];
return i.get('<STR_LIT>');
name: '<STR_LIT>',
'<STR_LIT>',
useValue: '<STR_LIT>' },
provide: Router, useClass: MockRouter },
mode = mode;
days)) / <NUM_LIT>;
l.order > r.order ? <NUM_LIT> : -<NUM_LIT>;
catKey;
content };
attr === '<STR_LIT>' ?
svg = document.createElementNS(svgNamespaceUri, "<STR_LIT>");
{
'<STR_LIT>':
`<STR_LIT>`;
if (appConfig.plugins) {
return {
return Promise.resolve(import("<STR_LIT>"));
if {
Promise.resolve()
join('<STR_LIT>', '<STR_LIT>'));
stdout)) {
'<STR_LIT>')
await writeFile('<STR_LIT>', mainTs);
css, content)
}
webpackGoodRegEx);
<NUM_LIT>] = '<STR_LIT>';
join(process.cwd(), '<STR_LIT>'), `<STR_LIT>`))
Path.resolve(__dirname, "<STR_LIT>", "<STR_LIT>", "<STR_LIT>")));
then((): Promise<import("<STR_LIT>").ProcessOutput> => ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>'))
'<STR_LIT>') {
componentDir))
oneLine `<STR_LIT>`);
`<STR_LIT>`);
new Promise((resolve, reject) => {
'<STR_LIT>')
ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'))
new Promise((resolve, reject) => {
module, '<STR_LIT>', '<STR_LIT>'))
'))
then((): Promise<import("<STR_LIT>").ProcessOutput> => ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'))
return new Promise<void>((resolve, reject) => {
process.cwd(), '<STR_LIT>'), '<STR_LIT>'))
process.cwd(), '<STR_LIT>'), '<STR_LIT>'))
'<STR_LIT>'));
oneLine `<STR_LIT>`);
return writeFile(fileName, nestedConfigContent);
then((): Promise<void> => expectFileToExist('<STR_LIT>'))
'<STR_LIT>': '<STR_LIT>',
path(__dirname, '<STR_LIT>'));
}
path
path.join(__dirname, '<STR_LIT>'), '<STR_LIT>');
ng('<STR_LIT>', '<STR_LIT>');
ng('<STR_LIT>');
tsconfig.compilerOptions.paths = {
<NUM_LIT>))
return {
Error(`<STR_LIT>`);
fs.copy(from, to, err => {
Error(`<STR_LIT>`));
keys(fs).map(fileName => {
true }, '<STR_LIT>', args);
then(() => ng('<STR_LIT>', '<STR_LIT>'));
packages;
json['<STR_LIT>'] = {
Object.keys(devkitPackages)) {
hasOwnProperty(packageName)) {
range);
args: args,
process.chdir(path);
jsonSchema);
let source: ElectronMessageBusSource = new ElectronMessageBusSource(electron.ipcMain);
app);
new AngularFireDatabase(app);
any;
query.orderByField) {
hasKey(query, "<STR_LIT>")) {
}
utils.hasKey(query.orderBy, "<STR_LIT>")) {
else {
else {
query.limitToLast)) {
queried.limitToLast(query.limitToLast);
value: number) => new LimitToSelection(key, value));
return pathRef as DatabaseReference;
url);
return typeof value.set === '<STR_LIT>';
Observable<SnapshotAction> = events
item)[operation](value),
else if (isNumber(item)) {
snapshotCase!();
'<STR_LIT>';
events [];
describe('<STR_LIT>', () => {
describe('<STR_LIT>', () => {
data = emptyTable;
tree.data = emptyTree;
NodeFlags.None, null, null, <NUM_LIT>, '<STR_LIT>', null, null, null, TreeComponent_0),
E(<NUM_LIT>, '<STR_LIT>');
}
ctx, <NUM_LIT>);
tree = new TreeNode();
'<STR_LIT>' },
describe('<STR_LIT>', () => {
ExampleModule);
ExampleModule);
describe('<STR_LIT>', () => {
AnimationAstBuilderVisitor(driver).build(metadata, errors);
hasOwnProperty('<STR_LIT>')) {
ɵStyleData = styles asɵStyleData;
options['<STR_LIT>']);
delete options.duration;
'<STR_LIT>');
errors);
rhs;
FALSE_BOOLEAN_VALUES.has(rhs);
ast);
node.parentNode.removeChild(node);
totalTime, disabled };
in _CACHED_BODY!.style;
AnimationPlayer[] = [];
<NUM_LIT>;
else {
classes[className];
'<STR_LIT>';
<NUM_LIT>];
prop)) {
missingStyleProps.length) {
i];
'<STR_LIT>':
m: any[]) => m[<NUM_LIT>].toUpperCase());
expect(parseElementAnimationStyle(element).duration).toEqual(duration);
CONFIG.TAG_NAME);
body.clientWidth;
if (timestamp) {
element, property, value);
timings, styles };
return _group(steps, options);
name, styles, options };
`<STR_LIT>`);
outDir, options.target.replace(/\\/g, path.sep) + '<STR_LIT>');
name, time);
name, time, args);
return {
'<STR_LIT>',
"<STR_LIT>":
case '<STR_LIT>':
_;
body instanceof Blob) {
new Blob([body]);
i === <NUM_LIT> && v === <NUM_LIT>)
if (i === <NUM_LIT> || i === <NUM_LIT>)
const minutes: number = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);
floor(hours), <NUM_LIT>, minusSign);
case ZoneWidth.Long:
ZoneWidth.LongGMT:
minusSign) +
locale, NumberSymbol.MinusSign));
if (match) {
'<STR_LIT>') {
const data = findLocaleData(locale);
map((rule) => getLocaleExtraDayPeriodRule(rule));
LocaleDataIndex.MonthsStandalone]];
substr(baseHref.length) : url;
value.valueOf());
result = inner(date, locale);
locale: string): string {
len === <NUM_LIT>) {
result[prop] = '<STR_LIT>';
platformId === PLATFORM_ID.browser;
return platformId === PLATFORM_SERVER_ID;
PLATFORM_WORKER_APP_ID;
set: {
return TestBed.overrideComponent(TestComponent, {
overrideComponent(TestComponent, {
TestBed.overrideComponent(TestComponent, {
!!s.valueDeclaration.getText();
parent = parent;
ts.Identifier = <ts.Identifier>name;
}
name.kind == ts.SyntaxKind.Identifier) {
empty;
if (context) {
return Object(value) !== value;
case '<STR_LIT>':
value.__symbolic === '<STR_LIT>';
value.__symbolic === '<STR_LIT>';
kind === '<STR_LIT>';
value && value.__symbolic === '<STR_LIT>';
return formatDiagnosticsOrig(diags);
`<STR_LIT>`;
`<STR_LIT>`;
`<STR_LIT>`;
return `<STR_LIT>`;
ts.DiagnosticCategory.Error);
sourceFile.getAllReferences();
value.name);
modifier => {
chain.messageText,
sourceFile;
return [];
Error,
throw new Error(`<STR_LIT>`);
<NUM_LIT>,
replace(/\\/g, '<STR_LIT>');
expect
`<STR_LIT>` : `<STR_LIT>`;
string = module.filename.replace(/\\/g, '<STR_LIT>');
const fullName: string = `<STR_LIT>`;
node;
null,
className,
symbol);
return;
isNgSymbol = true;
context: any): any {
context: any): any {
mergeAnalyzedFiles(files));
for (const route of routes) {
{
else {
typeof o !== '<STR_LIT>');
outputCtx, reference.valueDeclaration);
`<STR_LIT>`;
'<STR_LIT>' : srcFileSuffix;
'<STR_LIT>');
fileName), forceSourceFile);
isArray(value)) {
new Error(`<STR_LIT>`);
code >= $TAB && code <= $SPACE) || code == $NBSP;
if (!obj) {
invalidCharacterRegex, '<STR_LIT>');
Expression) {
props(...args) : {
ngMetadataName: string): boolean => {
index >= input.length ? chars.$EOF : input.charCodeAt(index);
previous;
if (target == chars.$BACKSLASH) {
templateUrl:
default:
arr[i])) {
chars.$PLUS;
code) || (code == chars.$_) ||
<NUM_LIT>, text);
escapeRegExp(config.end);
return `<STR_LIT>`;
sha1(serializeNodes(message.nodes).join('<STR_LIT>') + `<STR_LIT>`);
index < <NUM_LIT>) {
<NUM_LIT>];
num >>> <NUM_LIT>) {
implicitAttrs);
value, quoted: false };
moduleName
array));
toLowerCase()];
return attrs.some((attr: html.Attribute) => attr.name === PRESERVE_WS_ATTR_NAME);
new ParseTreeResult(htmlAstWithErrors.rootNodes, htmlAstWithErrors.errors);
if new html.Element('<STR_LIT>', {
chars.$A || chars.$Z < code) &&
return `<STR_LIT>`;
<NUM_LIT>] === '<STR_LIT>';
_TAG_DEFINITION;
externalReferences: ExternalReference[] = [];
_ReadVarVisitor();
null, typeParams, sourceSpan);
ReadVarExpr(name, type, sourceSpan);
args: any[]) => {
statements, ctx);
fnArgValues.push(vars[argName]);
fnText = sourceUrl;
{
name) {
templateFactory2 = createFactory(pipe.type, outputCtx, reflector);
pipeMapValues[<NUM_LIT>].key),
case <NUM_LIT>:
<NUM_LIT>:
args);
case <NUM_LIT>:
forcontext = ctx;
return input.match(_commentWithHashRe) || [];
false;
value.trim().length === <NUM_LIT>;
error.msg] || <NUM_LIT>) + <NUM_LIT>;
RegExpExecArray = url.match(SshProtocolMatcher);
split_REG);
ERROR_SYNTAX_ERROR];
defaultValues);
'<STR_LIT>', defaultValues);
const high: number = str.charCodeAt(index + <NUM_LIT>);
codePoint);
<NUM_LIT>, (codePoint & <NUM_LIT>) | <NUM_LIT>);
`<STR_LIT>`;
boolean;
data === '<STR_LIT>';
BehaviorSubject(hook, directive), directive);
token, index);
index);
interpolationConfig);
errors.length > <NUM_LIT>) {
el.query(By.css(cssSelector)).nativeElement.innerHTML);
return b64.toByteArray(s).reduce((s: string, c: number) => s + String.fromCharCode(c), '<STR_LIT>');
tokenize(input, true, tokenizeExpansionForms);
interpolationConfig);
UrlResolver();
return _group(steps);
name, styles);
timings, styles };
AnimationMetadataType.Group, steps, options };
Missing("<STR_LIT>"));
e));
ngZone.runOutsideAngular(() => errorHandler.handleError(e));
has(marker)) {
else {
if (platformRef) {
return;
new NoopNgZone();
if (index > -<NUM_LIT>) {
fromCharCode(<NUM_LIT> + Math.floor(Math.random() * <NUM_LIT>));
false;
fn(item.value);
typeof type;
matches.push(node);
forwardRefFn).__forward_ref__ = forwardRef;
opts;
objWithPropertyToExtract.hasOwnProperty(key)) {
token);
RecursivelyProcessProviders(records, provider[i], records);
provider.provide);
if (!multiProvider) {
RecursivelyProcessProviders(records, multiProvider);
if (record) {
<NUM_LIT>].token);
return [];
new Error(`<STR_LIT>`);
if (existing) {
if (actual == null) {
typeof actual !== '<STR_LIT>') {
component) },
getOrCreateContainerRef(getOrCreateNodeInjector());
initHooks, creationMode);
index, '<STR_LIT>');
bindingUpdated(value);
attrs: attrs,
assertDataInRange(template.data, templateIndex);
const
directiveIndex);
finally {
template.ngPrivateData = new TView());
different = bindingUpdated(v2) || different;
isCapture) {
wrappedListener);
outputs = [];
LViewFlags.Dirty;
begin();
oldView);
leaveView(oldView);
text(value) :
renderer.createText(stringify(value)) :
renderer = currentView.renderer;
<NUM_LIT>];
next = viewOrContainer.child;
next = viewOrContainer.next;
null) {
viewOrContainer.parent;
const (views.indexOf(newView) === -<NUM_LIT>) {
newView);
if (containerNextNativeNode) {
false;
selector[<NUM_LIT>] === '<STR_LIT>') {
string = selector[i];
}
return false;
NOT_SUPPORTED);
const child = query(nodeInjector);
null) {
null) {
i++) {
any = readFromNodeInjector(nodeInjector, node, selector[i], predicate.read || type);
i = <NUM_LIT>; i < localNames.length; i++) {
dirty);
return this;
const meta = new TypeDecoratorMetadata(cls);
METADATA_KEY) ? cls[METADATA_KEY] : [];
annotations.push(annotationInstance);
TypeDecorator;
}
string = keys[i];
null); });
values.length; i++) {
index, eventName, event);
flags & DepFlags.Optional) {
return data._parent.get(depDef.token, notFoundValue);
if (providerInstance) {
throw notFoundValue;
token,
index] =
lifecycles) {
allowPrivateServices, deps[<NUM_LIT>]));
elDef, allowPrivateServices, deps[<NUM_LIT>]), resolveDep(view, elDef, allowPrivateServices, deps[<NUM_LIT>]), resolveDep(view, elDef, allowPrivateServices, deps[<NUM_LIT>]));
i = <NUM_LIT>; i < len; i++) {
while (compView.parent) {
new Provider(view, def);
prop];
nonMinifiedName,
outputs) {
createNgModuleRef: debugCreateNgModuleRef,
debugCheckAndUpdateView,
nodeIndex)
return overrideComponentView;
return callWithDebugContext(DebugAction.handleEvent, view, nodeIndex, eventName, event);
if (DEV) {
nodeDef.flags & NodeFlags.CatRenderNode) !== <NUM_LIT>) {
v2, v3, v4, v5, v6, v7, v8, v9);
value);
bindings[i] = {
null,
return {
parent: null,
bindingFlags: <NUM_LIT>,
queryqueryId >> <NUM_LIT>) & <NUM_LIT>;
parent === renderHost) ||
Component);
const def = compView.def;
hostElDef!.childCount;
nodeDef.flags & NodeFlags.TypeElement) {
ngContentIndex];
nodeDef.flags & NodeFlags.CatRenderNode)) {
BindingFlags.CatSyntheticProperty | BindingFlags.CatPureExpression)) {
binding & NodeFlags.ComponentView) {
embeddedViews.length; k++) {
NodeFlags.TypeNgContent)) {
return;
template._projectedViews = [];
removeFromArray(embeddedViews, newViewIndex);
return {
pop();
null);
return checkAndUpdateTextDynamic(view, nodeDef, values);
checkAndUpdatePureArrayDynamic(view, nodeDef, values);
if (bindLen > <NUM_LIT>)
checkBindingNoChanges(view, nodeDef, <NUM_LIT>, v2);
bindLen > <NUM_LIT>)
if (bindLen > <NUM_LIT>)
if (rendererType) {
zone._nesting--;
if (value) {
constructor;
T;
) {
returnValue = blockReturn;
<NUM_LIT>] = undefined;
return _describe(jsmDescribe, ...args);
type: Component,
PublicFeature]
return typeof window !== '<STR_LIT>';
EC = ExpectedConditions;
getDOM().getUserAgent() : '<STR_LIT>';
throw Error('<STR_LIT>');
parent.path!, name];
'<STR_LIT>');
dir, '<STR_LIT>');
'<STR_LIT>';
CookieXSRFStrategy();
jsonpBackend, requestOptions);
'<STR_LIT>':
Delete;
return RequestMethod.Head;
value.isArray(value)) {
param: string) => {
new RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>')
'<STR_LIT>')
end);
return {
push(ast);
ast = ast.ast;
if (tail.type === '<STR_LIT>') {
if
ast: AST) {
ast) {
visitArrayLiteral(ast) {
visitPropertyAccess(ast) {
ast) {
result) {
hover = symbol.text;
sort();
sort();
SchemaInformation.instance.propertiesOf(elementName);
ngOptions: ts.CompilerOptions = {
start: node.getStart(), end: node.getEnd() };
a);
selector);
else {
span.startSourceSpan) {
children.length - <NUM_LIT>])!.end
`<STR_LIT>` : '<STR_LIT>';
return {
return value.replace(referenceMarker, '<STR_LIT>');
existsSync(fileName)) {
return new WebAnimationsStyleNormalizer();
_;
ErrorHandler();
;
'<STR_LIT>': '<STR_LIT>',
'<STR_LIT>': '<STR_LIT>',
target);
componentShortId);
else
srcset = String(srcset);
eventType));
message;
moduleFactory)(req, res);
url)) {
const platformFactory(extraProviders) as PlatformRef;
const new Promise<string>((resolve, reject) => {
Error('<STR_LIT>');
target.checked };
`<STR_LIT>`;
PostMessageBusSource(_postMessage);
WorkerDomAdapter.makeCurrent();
return window.document;
const secondChannels: {
thirdChannels: {
return route.outlet || PRIMARY_OUTLET;
obs.error(new Error(`<STR_LIT>`)));
return Observable.of(true);
Route[] = [];
return {
return command.outlets.map(getPath);
qp[name] = value;
fragment);
) {
node) => {
if (router.back) {
Object.assign(new ParamMap(), params);
new UrlTree(new UrlSegmentGroup([], {
any = params[name];
return [].concat(...arr);
false;
false;
value)) {
value));
ActivatedRouteSnapshot as any)(args);
provide: token,
events.length; i++) {
config, url, callback, paramsInheritanceStrategy);
any[] = [];
regex += `<STR_LIT>`;
else {
segments.length > <NUM_LIT>) {
wrap(fn));
setAngularJSGlobal(ng);
wildcardNgContentIndex = i + <NUM_LIT>;
i);
if ngContentIndices.indexOf(wildcardNgContentIndex);
replace(DIRECTIVE_PREFIX_REGEXP, '<STR_LIT>')
console.error(e);
CompileService);
IInjectorService);
<Thenable<any>>obj).then);
error(e);
const div = document.createElement('<STR_LIT>');
IRootScopeService);
p)) {
p);
push(_findAllPackageJson(p, exclude));
join(__dirname, '<STR_LIT>'));
end();
return value;
kind === kind) {
{
const regex: RegExp = new RegExp('<STR_LIT>', '<STR_LIT>');
exportVarSetter, multiLineComment, newLine,
multiLineComment,
moduleSpecifier
newRegex, '<STR_LIT>')
node)) !== -<NUM_LIT>;
tslibImports, checker)) {
arguments[<NUM_LIT>].kind !== ts.SyntaxKind.Identifier) {
ts.CallExpression = decorateArray.elements[<NUM_LIT>] as ts.CallExpression;
const expr = exprStmt.expression as ts.BinaryExpression;
propAccess.name.kind !== ts.SyntaxKind.Identifier) {
return false;
supportES2015 ? ['<STR_LIT>'] : []),
'<STR_LIT>',
target: '<STR_LIT>',
false,
wco.supportES2015 ? ['<STR_LIT>'] : []),
catch (e) {
boLoader = [
/\.ts$/;
string = path.parse(from).root;
names) {
return nodeModuleP;
resolve.sync(moduleName, {
string = path.resolve(swModule, '<STR_LIT>');
`<STR_LIT>`);
new);
writeFileSync(path.resolve(outputPath, '<STR_LIT>'), manifest);
return `<STR_LIT>`;
bom, '<STR_LIT>');
_resolveHook = hook;
const value: string = context.original[line - <NUM_LIT>];
line++;
null) {
key = _peek(context);
else {
context);
'<STR_LIT>',
others);
schema, refResolver, context);
columns || null;
raw(strings, ...values);
'<STR_LIT>');
if (drive) {
return p2;
null) {
return;
content)) {
TreeSymbol in inner)) {
return observableOf(inputTree);
'<STR_LIT>';
return '<STR_LIT>';
else {
`<STR_LIT>`;
return schematic(collectionName, schematicName, options)(input, context);
host, options);
strings,
chain([
const moduleSource = host.read(modulePath)!.toString('<STR_LIT>');
modulePath);
'<STR_LIT>';
.kind === ts.ChangeKind.Add) {
host, options);
endsWith("<STR_LIT>"),
strings,
return chain([
'<STR_LIT>'); },
branchAndMerge(chain([mergeWith(templateSource)], context),
updateTsConfig(options),
formatMissingAppMsg('<STR_LIT>', options.clientApp));
if (!bootstrapCall) {
bootstrapCallText: string = null;
currentCall.parent;
beginUpdate(mainPath);
modulePath, '<STR_LIT>', classifiedName, importPath);
parseJsonConfigFileContent(tsConfig);
compiler: ts.CompilerOptions = {
message = ts.flattenDiagnosticMessageText(result.diagnostics, '<STR_LIT>');
file) {
dirname(to));
name.localeCompare(r.name);
toUpperCase() ? <NUM_LIT> : -<NUM_LIT>;
category = catKey;
subKey,
as SubCategory;
getAttrs(el), attr), def);
Constants.ENV_TRAVIS_Master_BUILD] !== '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
GanttBodyColumns = GanttBodyColumns;
'<STR_LIT>';
'<STR_LIT>';
controller = function ($scope, $element) {
rowGroups) {
rowGroups };
enabledValue) {
updateTaskGroup();
directive.$$phase) {
'<STR_LIT>';
$element) {
'<STR_LIT>';
$scope.maxHeight = hScrollBarHeight;
gantt.options.maxHeight;
return css;
'<STR_LIT>';
'<STR_LIT>';
if new ElementFinder(el);
{
indexOf('<STR_LIT>') > -<NUM_LIT>);
hasOtherTheme) {
host);
throw new SchematicsException(`<STR_LIT>`);
shift();
prefix) {
configBuffer === null) {
split(NormalizedSep);
pop();
if (relativePath) {
pathPrefix = `<STR_LIT>`;
filter(node => {
string[] = [];
{
forEach((node: any): boolean => {
fallbackPos: any;
const close: string = isDefault ? '<STR_LIT>' : '<STR_LIT>';
version: '<STR_LIT>',
'<STR_LIT>',
});
error(formatDiagnostics(diagnostics, baseDir));
transpiled.diagnostics) {
prNumber) {
data.map((file: any) => {
createElement('<STR_LIT>');
status: <NUM_LIT>,
HTML, key);
return `<STR_LIT>`;
replace(/\\/g, '<STR_LIT>');
document.createElement('<STR_LIT>');
serverNode);
i = <NUM_LIT>; i < optionSets.length; i++) {
if (source.hasOwnProperty(nextKey)) {
funcName];
const
NATIVE_TARGET_EVENTS;
ReactNativeWrapperImpl],
provide: ElementSchemaRegistry, useExisting: ReactNativeElementSchemaRegistry },
customProviders || []));
varModuleRef.injector.get(RendererFactory2).destroy();
obj !== null;
return (state: any, action: any) => {
name), {
const name of providers) {
const initializer: ts.Expression = null;
sourceFile, sourceMapper).process();
return [];
match('<STR_LIT>')) {
Set<string>();
required: boolean = false;
tag.parameterName);
texts.add(tag.text);
true;
return {
tag.attributes) {
serialize(tags, true, escapeExtraTags);
let result = "<STR_LIT>";
for (const arg of parsedArgs) {
case '<STR_LIT>':
tscArgs = parsedArgs[flag];
tsConfigPath = parsedArgs[flag];
true;
const
match(/@/)) {
source) > <NUM_LIT>;
sources = [sourceName];
if (value == null) {
return [];
for (const comment of leadingComments) {
sourceFile, comment.pos);
else
lastCommentLine: number = getLineOfPos(sourceFile, detachedComments[detachedComments.length - <NUM_LIT>].end);
lastStmtTrailingComments.length) {
pos);
commentStmt: ts.Statement = detachedComments[detachedComments.length - <NUM_LIT>];
push(value);
return BuiltinLibDTS.has(fileName);
test(fileName);
throw e;
uiStateOpts.events];
event, hookFn);
'<STR_LIT>' : '<STR_LIT>';
if (paramsOnly) {
const `<STR_LIT>`;
{
rootLength === <NUM_LIT>) {
in map) {
Class;
return CompletionItemKind.Method;
return CompletionItemKind.Method;
return
len = word.length;
found) {
case "<STR_LIT>":
i = <NUM_LIT>; i < names.length; i++) {
current {
}
chalk.underline('<STR_LIT>'));
default:
'<STR_LIT>';
case '<STR_LIT>':
'<STR_LIT>', ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT
`<STR_LIT>`;
map(level => {
map((arch: string): string => {
BrowserDomAdapter.makeCurrent();
outputDir, fileName);
currentDownload) {
binaryPath.last = currentDownload;
let
method == '<STR_LIT>'));
hasContent) {
'<STR_LIT>';
reason: '<STR_LIT>' });
res.statusCode !== <NUM_LIT>) {
function (chunk: any) {
'<STR_LIT>', message: '<STR_LIT>' });
cmd += '<STR_LIT>';
cmd += '<STR_LIT>';
stdio = Array.isArray(stdio) ? stdio : [stdio];
args, opts);
obj[unconfigurablesKey][prop];
api);
(event: any) => {
source;
elt) {
onproperty] = bound;
supportsWebSocket) {
`
}
any = window;
}
}
evtName) {
throw new Error(`<STR_LIT>`);
function;
<NUM_LIT>:
<NUM_LIT>:
break;
break;
instance as any)[prop] = function () {
else {
function () {
args);
else {
count + '<STR_LIT>');
return new Error('<STR_LIT>');
return supportsPassive;
indexOf('<STR_LIT>') !== -<NUM_LIT>) {
test, block);
toLowerCase();
return {
parse(readIDL(filepath));
return root;
root);
continue;
changedValue === undefined)
return parse(ast).directives;
traverseFields(operationAST, fragments, cb);
'<STR_LIT>') {
forEach.keys(fragments).forEach((operationName: any) => {
root, {
FRAGMENT_DEFINITION)
"<STR_LIT>",
return {
payload: {
return {
type: "<STR_LIT>",
type: FOCUS_ELEMENT_DONE,
if (typeGraph === null)
'<STR_LIT>') != null;
return getParent(elem, '<STR_LIT>') != null;
type.kind);
'<STR_LIT>'].indexOf(type.name) !== -<NUM_LIT>;
isString(type) && type.startsWith('<STR_LIT>');
name);
if.setHeader('<STR_LIT>', '<STR_LIT>');
page } = options;
for (let i = <NUM_LIT>; i < $nodes.length; i++) {
'<STR_LIT>');
value,
return value.map(item => addPreviousResultToIdValues(item, previousResult));
forEach(item => {
new Map();
return
return
benchmark;
assign({
then(() => {
try {
finally {
return;
return null;
if (src.hasOwnProperty(srcKey)) {
return {
`<STR_LIT>` +
pass: false
resultKey, node, current, fragmentMap, currentSelectionSet);
node.selectionSet);
constRestDirectivesThenInsertNullsForOmittedFields(resultKey, current, mainDefinition, fragmentMap, node.selectionSet);
typeDef);
calledFunctionRefs.indexOf(typeDef) !== -<NUM_LIT>) {
throw new Error(`<STR_LIT>`);
const.forEach(array => {
setContext,
transformOperation(validateOperation(operation))));
info: {
args.forEach(arg => {
null;
type.ofType);
name, type);
Kind.FLOAT:
field) => {
LIST: {
backcompatOptions),
values,
result[type.name.value] = node.value;
return definition;
const
const operations: OperationDefinitionNode[] = [];
kind === '<STR_LIT>');
tag + '<STR_LIT>');
push(result[<NUM_LIT>]);
new MockLink(mockedResponses);
query.bindVars);
return new Collection(connection, data);
Boolean(collection && collection.isArangoCollection);
i: number): string => `<STR_LIT>`);
Encoding.UTF8);
DI: any;
if (typeof elementOrConfig === '<STR_LIT>') {
<STR_LIT>];
if
role = Role.APPLICATION;
return
numOldSamples = property.Samples.length;
i = <NUM_LIT>; i < parts.length; i++) {
while {
if (isValid) {
if while (!isValid);
toString.call(f));
JSON.stringify(right);
href = inURL;
protocol: urlParser.protocol,
search,
frame = referenceFrame as Entity;
if (hasClass(obj, cls))
return new Promise<Buffer>((resolve, reject) => {
options;
const new Pool(options);
type: '<STR_LIT>',
case MessageType.Error: return '<STR_LIT>';
editor, '<STR_LIT>');
spy(),
sendNotification: sinon.spy(),
object instanceof MarkdownPreviewView;
if (!editor) {
detector.dispose();
'<STR_LIT>';
doc.head.appendChild(script);
try {
removeAttribute("<STR_LIT>");
"<STR_LIT>",
'<STR_LIT>',
'<STR_LIT>',
'<STR_LIT>',
error);
dismissable: true,
command: command,
finally {
reg(i));
else {
LanguageConfiguration = new LanguageConfiguration();
propertyParser);
callback(config);
localStorage.getItem(tokenName);
type instanceof GraphQLEnumType;
title
state);
filter = payload;
<NUM_LIT>];
filterAlreadyPresent = true;
Object;
{
default:
if (removeIndex !== -<NUM_LIT>) {
ensureDirExists(AutorestHome);
requestedVersion
if
version;
if (requestedVersion) {
console.log(`<STR_LIT>`);
args.debug) {
'<STR_LIT>';
any = {
pkg<STR_LIT>`));
}
selectedVersion);
replace(/^# (.*)/gm, addStyle("<STR_LIT>", '<STR_LIT>')).
replace(/^>(.*)/gm, addStyle("<STR_LIT>", '<STR_LIT>')).
`<STR_LIT>`).
chalk.cyan(styleStack.join("<STR_LIT>"));
RegExp = new RegExp(`<STR_LIT>`, "<STR_LIT>");
number = i.index;
startIndex);
addListener("<STR_LIT>", reject);
r: Array<string> = [];
autorestArgs);
return await currentMain(autorestArgs);
catch (e) {
.code === '<STR_LIT>') {
}
case "<STR_LIT>":
case "<STR_LIT>":
default:
const autorest.Process();
result;
config of configs) {
ProxifyConfigurationView) {
ReadYaml();
if (node.kind === Kind.MAPPING) {
value = mappingNode.value;
result.length = endIdx - startIdx;
config.DataDir)) {
Text: `<STR_LIT>`,
"<STR_LIT>") {
DataHandle[] = [];
as any));
for (const file of files) {
result: DataHandle | null = null;
x of source) {
readdir(path, (error: any, files: string[]) => error ? j(error) : r(files)), () => null);
err ? j(err) : r(data), (reason: any): void => j(reason));
jsonPathComponent === "<STR_LIT>"
sep) ? <NUM_LIT> : <NUM_LIT>);
ParseToAst(FastStringify(object));
const output: any = {
packageManager: any = await ExtensionManager.Create(join(homedir(), "<STR_LIT>"));
ensureCoreLoaded();
index > selectedStepIndex) {
payloadSegment), '<STR_LIT>').toString();
const crypto = require('<STR_LIT>');
if (normalizedKey.indexOf(functionInfo.name) === <NUM_LIT>) {
args);
action();
catch (err) {
version);
versionFile)) {
else {
render('<STR_LIT>', {
authenticated) {
return;
const.set('<STR_LIT>', '<STR_LIT>');
},
send(err.response);
req.body.url);
let stateKey: string = '<STR_LIT>';
return;
'<STR_LIT>',
headers['<STR_LIT>']);
return false;
return templateConfig;
i = <NUM_LIT>; i < <NUM_LIT>; i++) {
pwdChar < <NUM_LIT>) {
}
num2) | <NUM_LIT>;
return (num1 ^ num2) ^ num3;
num1) ^ num3;
return encF5(num1, ~num2, num3);
"<STR_LIT>",
i: number = <NUM_LIT>; i < <NUM_LIT>; i++) {
<NUM_LIT>) {
onErrorMethod]);
platform.flushSync = function () {
...state,
case RESET:
res.ok) {
else {
GET_SUCCESS:
GET_FAILURE:
true,
NODE_ENV !== '<STR_LIT>') {
'<STR_LIT>' &&
store);
animalFlags & AnimalFlags.Cat) {
Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
i = length - <NUM_LIT>; i >= <NUM_LIT>; i--) {
if (index >= <NUM_LIT>) {
`<STR_LIT>`
'<STR_LIT>')
contents = fs.readFileSync(filename, '<STR_LIT>');
processed.set(ast, ast);
type: '<STR_LIT>',
params, (_: AST) => {
name) {
return '<STR_LIT>';
schema.oneOf)
return '<STR_LIT>';
'<STR_LIT>';
type) {
'<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>': return '<STR_LIT>';
'<STR_LIT>';
if (key) {
equals(b);
a
match(/ +/g) || [])
await analyticsService.start();
return;
chronoDB = new ChronoDB(path);
configPath)) {
createHmac(algo, secret)
sort();
b;
line) {
new Promise<ProcessOutput>((resolve, reject) => {
if('<STR_LIT>', () => {
replica };
return result: EditorMode[] = [];
[];
func();
clearTimeout(timeoutId);
const text1b: string = text1.substring(x);
let
pointermid) !== text2.substring(pointerstart, pointermid + <NUM_LIT>)) {
else {
msRequestAnimationFrame, window.cancelAnimationFrame || window.msCancelRequestAnimationFrame);
hash[key] = value[key];
keys(tiles).map(key => ({
null) {
Array.isArray(arrayToCheck);
b: number;
c.a = <NUM_LIT>;
i;
cell
for (let i = <NUM_LIT>; i < count; i++) {
<NUM_LIT>) {
name, ['<STR_LIT>', '<STR_LIT>']);
'<STR_LIT>';
null) {
tag = "<STR_LIT>";
tag = "<STR_LIT>";
IBobrilCacheNode | null = null;
i < events.length; i++) {
ctx)[bSelectionStart] = start;
endPosition: end
isArray(el)) {
c);
}
el) {
isArray(result)) {
return null;
node.component = methods;
p: string = null;
}
var = u + "<STR_LIT>" + name;
}
r.isOptional) {
if (cur) {
ctx) {
false;
ctx, node), createBefore);
ngOnDestroy && ngOnDestroy.apply(this, args);
Subject();
next('<STR_LIT>');
value;
str;
push(str);
return err.toString().match(regExp);
rv[name] = obj.installInfo;
callback(false);
$
FtpRemotes.length > <NUM_LIT>,
<NUM_LIT>])
format("<STR_LIT>", scopeName));
catch((err: any): void => {
uri.password("<STR_LIT>");
scopeArgs, ...usernameArgs, ...passwordArgs)
io, io + <NUM_LIT>) === "<STR_LIT>") {
return result;
trackOrigin) {
then(() => {
homePrefix, "<STR_LIT>")]);
branchName) {
matchBranch = branchName.split("<STR_LIT>")[<NUM_LIT>];
return m[<NUM_LIT>];
return null;
if logOut.trim();
TAG_REGEX);
"<STR_LIT>"]).then((stdout) => {
return str[<NUM_LIT>] === '<STR_LIT>';
if (hash != null)
allowGlobal) {
updateIndex) {
return git(["<STR_LIT>", remote, branch], {
catch(() => true);
return
splice(idx, <NUM_LIT>);
any = Strings.own_format;
return;
commit.url.indexOf("<STR_LIT>") === <NUM_LIT>) {
}
break;
relativeDate: any = date.fromNow();
shown = date.fromNow();
on("<STR_LIT>", (): any => {
false,
currentDocument) {
projectMenuState: any = Menus.getContextMenu(Menus.ContextMenuIds.PROJECT_MENU);
projectCmenu;
addMenuItem(CMD_REMOVE_FROM_IGNORE);
projectCmenu.removeMenuItem(CMD_ADD_TO_IGNORE);
cwd: directory,
stderr, stdout, stderr);
opts, callback);
exists = stats.isFile();
return spawnSync('<STR_LIT>', ['<STR_LIT>']);
refresh();
}
git
REFRESH_ALL);
remove();
$resetBtn: any = $gitPanel.find("<STR_LIT>");
clearCounts();
ahead > <NUM_LIT>) {
any = {
name;
ErrorHandler.showError(err, "<STR_LIT>");
remoteName);
}
$icon = $dialog.find("<STR_LIT>");
$.close();
Date());
true);
name];
data;
console console;
r);
context),
<NUM_LIT> }),
Log.info('<STR_LIT>');
run
}
return;
Log.info('<STR_LIT>');
Log.info('<STR_LIT>');
workers[addr].cpuNum = cpu;
async (channel) => {
true) {
RunStressType, function* (action: any) {
getUrl('<STR_LIT>'));
return;
FindPasswordSuccessType, body.message));
action.value;
id;
else {
...
provideStore(APP_REDUCERS)
getProductEntities(), getProductState());
return obj;
state.entities, {
APP_REDUCERS)
dispose();
Class;
Default;
return CompletionItemKind.Function;
declaration instanceof VariableDeclaration:
PropertyDeclaration:
CompletionItemKind.Variable;
'<STR_LIT>') {
ms));
toLowerCase();
SyntaxKind[kind]);
return require.resolve(`<STR_LIT>`);
clone) {
concat(() => videoElement.clientWidth * pixelRatio)
return isIE;
preferredTextTrack === null) {
undefined) {
normalizedLanguage || "<STR_LIT>") === adaptation.normalizedLanguage &&
Infinity;
content,
if (ksName.toLowerCase() ===ksType.toLowerCase()) {
bufferType === "<STR_LIT>" || bufferType === "<STR_LIT>";
if (time < cue.end) {
child.removeChild(element);
if (!parser) {
if (!periodItem) {
period,
periodItem.buffers.has(type)) {
const onItemRemove$ = removePeriodBuffer$
return;
periodItem);
map(([addPeriodItem, removePeriodItem]) => {
timeOffset = <NUM_LIT>;
startTime :
Observable<never> = updateTimeOffset$
createObjectURL(mediaSource);
});
case <NUM_LIT>:
case <NUM_LIT>:
break;
errorDetail = "<STR_LIT>";
valid) {
return;
"<STR_LIT>",
value: {
"<STR_LIT>",
"<STR_LIT>",
else {
message;
let endTime: any;
timescale;
maxDuration: number;
<NUM_LIT>;
trunDuration;
number = _sidxSegments[<NUM_LIT>].timescale;
<NUM_LIT>), <NUM_LIT>);
undefined;
if (startTime == null) {
false;
case "<STR_LIT>":
attribute.value;
childNodes),
i++) {
attribute.name) {
framesRate = attribute.value;
frameRate = frameRate;
frameRate;
height;
else {
const minPlayoutRate: number = parseFloat(attribute.value);
max: number = parseFloat(attribute.value);
qualityRanking = qualityRanking;
value;
break;
value, <NUM_LIT>);
let width = widthStr ? widthStr.length : <NUM_LIT>;
nextSegments.length; i++) {
"<STR_LIT>"] = /(\d+)/.exec(codecPrivateData);
oldmooflen: number = oldmoof.length;
getElementsByTagName("<STR_LIT>")[<NUM_LIT>].getAttribute("<STR_LIT>");
if += <NUM_LIT>;
getBox(buf, <NUM_LIT> );
IBifFileFormat = {
pos += <NUM_LIT>;
number = buf[pos];
patchVersion].join('<STR_LIT>');
pos);
pos);
<NUM_LIT>;
length) {
if
currentOffset: number = currentImage.offset;
throw new Error("<STR_LIT>");
version,
i = <NUM_LIT>; i < lines.length; i++) {
let
lines[i].split('<STR_LIT>'));
timeOffset);
if (element.hasAttribute(attribute)) {
Element[] = [];
Node = _element.parentNode;
children: HTMLElement[] = [];
const child = childNodes[i];
elements.push({
backgroundColor;
childNodes;
currentNode.nodeName === "<STR_LIT>") {
trimmed.replace(/\s+/g, "<STR_LIT>");
loop(currentNode);
let ch = linified[i];
for (let i = <NUM_LIT>; i < len; i++) {
i = Math.min(n, fromIndex);
k], searchElement)) {
<NUM_LIT>) +
str).replace(/\=+$/, "<STR_LIT>");
if (!range) {
b) < EPSILON;
parse(data);
if (isPending) {
len) {
const if (len === <NUM_LIT>) {
"<STR_LIT>") {
part)) {
else {
<NUM_LIT>] !== "<STR_LIT>") {
undefined;
message.messageType === MESSAGE_RESPONSE);
messageType === MESSAGE_REQUEST;
subscriber;
if (typeof match === '<STR_LIT>') {
observable);
"<STR_LIT>") {
undefined;
undefined) ? null : value;
key);
return (options.defaultLogger) {
getPrototypeOf(operator ? operator : observable);
l) && !exists(r)) {
r)) {
null && t !== undefined;
'<STR_LIT>') {
idx < a.length; idx++) {
'<STR_LIT>';
ipcTestResult = '<STR_LIT>';
Contact = contactList[i];
info('<STR_LIT>', `<STR_LIT>`);
contact: Contact = contactList[i];
length; i++) {
await wait;
`<STR_LIT>`);
if (!room) {
async (data) => {
await room.save();
silly('<STR_LIT>', '<STR_LIT>', data);
<NUM_LIT>;
PuppetWebEvents.LOGIN_TIMEOUT);
if
getHTML();
emit('<STR_LIT>', this.user);
e.message);
P.userId, this.user);
oneLine `<STR_LIT>`);
prototype && component.parent.name) {
if
component.name + '<STR_LIT>');
'<STR_LIT>');
error('<STR_LIT>' + component.name + '<STR_LIT>');
<NUM_LIT>]['<STR_LIT>']) {
component.data) {
component.name + '<STR_LIT>');
val];
obj == null)
v.path === path) {
writeSync(text);
as {
if (!absoluteAPIUrl) {
else
fd
else {
res(undefined);
res(undefined);
value;
const videoChannel: VideoChannelModel = res.locals.videoChannel;
serverActor = await getServerActor();
ActorActor = await getServerActor();
as UserModel;
password,
avatarPhysicalFile.directory, avatarName);
transaction: t });
return res.status(<NUM_LIT>).end();
videoChannel: {
const resultList = await VideoChannelModel.listForApi(req.query.start, req.query.count, req.query.sort);
t) => {
res.json({
createVideoComment({
res.json(VIDEO_CATEGORIES);
query.maxHeight, <NUM_LIT>);
'<STR_LIT>' + video.uuid + '<STR_LIT>' + maxHeight + '<STR_LIT>' + maxWidth;
width: number = null;
maxHeight;
maxWidth !== undefined && maxWidth < PREVIEWS_SIZE.width)) {
embed = new Blob([html], {
VideoChannel.name,
new Promise<void>((resolve, reject) => {
string[] = [];
'<STR_LIT>');
'<STR_LIT>' &&
return isBaseActivityValid(activity, '<STR_LIT>') &&
activity.id) &&
true;
isActivityPubUrlValid(activity.object);
return exists(signatureCreator) && signatureCreator.length > <NUM_LIT>;
return isBaseActivityValid(activity, '<STR_LIT>') &&
validator.isInt(data.identifier, {
'<STR_LIT>', {
VIDEO.indexOf(url.mimeType) !== -<NUM_LIT> &&
return isBaseActivityValid(activity, '<STR_LIT>') &&
isActivityPubUrlValid(video.url) &&
isence || video.licence === '<STR_LIT>') &&
video.commentsEnabled) &&
icon) &&
return exists(value) && validator.isUUID(value);
'<STR_LIT>');
exists(value) && validator.isLength(value, CONSTRAINTS_FIELDS.USERS.DESCRIPTION));
number = USERS_CONSTRAINTS_FIELDS.USERNAME.max;
isLength(value, VIDEO_CHANNELS_CONSTRAINTS_FIELDS.DESCRIPTION);
return value === null || (exists(value) && validator.isLength(value, VIDEOS_CONSTRAINTS_FIELDS.SUPPORT));
else {
Status.NOT_FOUND)
return false;
value) && validator.isInt('<STR_LIT>' + value, {
false;
false;
if (err)
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>',
actual: string[] = [];
push(key);
getModel.countTotal();
delete require.cache[fileName];
cacheDir;
'<STR_LIT>' + CONFIG.WEBSERVER.PORT);
createDirectoriesIfNotExist();
logger.error('<STR_LIT>', err);
new Error('<STR_LIT>');
data);
new Error('<STR_LIT>');
options.message);
utils.queryInterface.dropTable('<STR_LIT>');
throw new Error('<STR_LIT>');
options.message);
new Error('<STR_LIT>');
utils.queryInterface.dropTable('<STR_LIT>');
query);
changeColumn('<STR_LIT>', '<STR_LIT>', data);
file
actor;
result.support,
privateKey);
err);
followersCount);
set('<STR_LIT>', attributes.outbox);
new Error('<STR_LIT>');
actor = await getOrCreateActorAndServerAndModel(activity.actor);
id) {
if (!targetActor)
throw new Error('<STR_LIT>');
targetActorId: targetActor.id
id,
transaction: t
actorFollow.save();
ActorModel = await getOrCreateActorAndServerAndModel(activity.actor);
continue;
new Error('<STR_LIT>');
await Promise.all([
id,
string[] = [];
toActorSharedOutboxesSet: Set<string> = new Set(actorsException.map((a: ActorModel): string => a.sharedInboxUrl || a.inboxUrl));
to: [
'<STR_LIT>',
byActor, t);
Account.Actor;
'<STR_LIT>',
const audience = getObjectFollowersAudience(accountsInvolvedInVideo);
'<STR_LIT>';
originalUrl + '<STR_LIT>' + updatedAt;
videoChannelUUID;
video.id + '<STR_LIT>' + JSON.stringify(videoComment);
uuid);
sendUpdateVideo(video, undefined);
if (!user) {
token.destroy();
c) => `<STR_LIT>`);
return checkEmailExist(email, res)
errorCodes.UNAUTHORIZED)
'<STR_LIT>' })
false;
end();
'<STR_LIT>' })
'<STR_LIT>' })
false;
'<STR_LIT>' })
if (!req.files[imageField])
status(<NUM_LIT>)
false;
typeof value !== '<STR_LIT>') {
forEach(video => {
language;
});
'<STR_LIT>';
const video2: Video of video2) {
return `<STR_LIT>`;
videoFile2.size) {
attribute1.length !== attribute2.length) {
rate(servers, numServer, '<STR_LIT>');
new Promise(resolve => setTimeout(resolve, milliseconds));
url)
return makeGetRequest({
http.ClientResponse = await request('<STR_LIT>', path, undefined, followingHosts);
get(path)
path)
path)
get(path)
get(path)
request(url)
path)
makeGetRequest({
start })
req.set('<STR_LIT>', '<STR_LIT>')
return request(url)
uuid);
'<STR_LIT>')
if (categoryString.toLowerCase() === categoryServer.toLowerCase())
return <NUM_LIT>;
return nativeEl.querySelector('<STR_LIT>')!;
false;
titleSelector)!;
shift();
string[] = from.split(NormalizedSep);
const
if (relativePath) {
pathPrefix = `<STR_LIT>`;
NG_START)) {
mt);
currentWindow: true });
search({
number = window.innerHeight;
Completions.StackCompletionSource(completionsDiv),
element));
observable = true;
any = {
length; i++) {
'<STR_LIT>':
element.role === '<STR_LIT>':
excmd) {
"<STR_LIT>":
"<STR_LIT>");
urls[<NUM_LIT>] + "<STR_LIT>", "<STR_LIT>");
Constant.PROGRAM_NAME, "<STR_LIT>");
break;
os.EOL);
boolean = tl.getBoolInput("<STR_LIT>");
null;
catch {
decodeURIComponent(args[<NUM_LIT>]);
'<STR_LIT>')
return url.href;
history(n);
endCmd);
SshProtocolMatcher);
all === "<STR_LIT>") {
mode
tabclose();
<NUM_LIT>);
<NUM_LIT>);
true });
in s);
{
window.location.href = newUrl;
window.location.href = rootUrl.href;
DOM.isVisible]);
messageActiveTab('<STR_LIT>', '<STR_LIT>', [inBackground]);
key]);
else {
true;
number = <NUM_LIT>;;) {
elementswithtext(), hint => {
hintPage(hintables(), hint => {
start = <NUM_LIT>;
in iter) {
return;
undefined) {
res: any = iter.next();
Array(n).fill(<NUM_LIT>);
cb);
await activeTab()).id;
string = await browser.runtime.getBrowserVersion();
number;
divisor) + divisor) % divisor;
keys: [], ex_str: '<STR_LIT>' };
keys: [], ex_str: '<STR_LIT>' };
let
return `<STR_LIT>`;
replace(/\//g, "<STR_LIT>")
b64 + "<STR_LIT>") : "<STR_LIT>") + filename;
paths.pop();
url.search) {
protocol)) {
if (!options.includes(opt)) {
return true;
side;
return !!msg.type;
const req = authRequest(auth, {
path: '<STR_LIT>', fields: details });
publicAPIInstance = new CCXTExchangeWrapper(logger);
return {
MIN_VALUE),
depth: bookDepth || <NUM_LIT>,
forEach(product => {
});
order: Order = {
order);
'<STR_LIT>',
command,
transports.Console({
true
pad = '<STR_LIT>';
returnTicker.close;
newLine;
file);
file);
log('<STR_LIT>', target);
filter);
return url;
map(state => state.user)
`<STR_LIT>`.toLowerCase();
userId, '<STR_LIT>');
state);
{
actionsById[keys[i++]]);
getState(), args), args);
prev: any, next: any) => prev.concat(next), []);
Object.keys(actions)
new Error(`<STR_LIT>`);
document.globalId,
queryResult.result : {
nodesMap);
data)) {
data[prop];
`<STR_LIT>`;
const directive of directives) {
if (!variables) {
key in value) {
return true;
return false;
field.arguments && field.arguments.length);
isStatic = field.flags & FieldNodeFlags.Static;
map[definition.name.value] = definition;
Number.isNaN(value);
return typeof value === '<STR_LIT>' && value !== null;
return false;
});
if (node['<STR_LIT>'] === '<STR_LIT>') {
ONE_SECOND);
Bounds = yield select();
const state: ApplicationState = yield select();
function* () {
done = false;
info.type === "<STR_LIT>") {
}
window.location.host + "<STR_LIT>" + curl;
blob);
Buffer[] = [];
select(getThread);
window);
inputEditorSaga);
yield take(RESOURCE_URI_CHANGED)) as ResourceUriChanged;
translateMousePositions;
event.type)) {
true,
event = clonedEvent.target;
value.toFixed(<NUM_LIT>);
if
yield call(nextAction);
if
cancelable: true,
value === "<STR_LIT>") {
value
"<STR_LIT>" || key === "<STR_LIT>") {
value;
"<STR_LIT>",
"<STR_LIT>",
open, <NUM_LIT>);
offsetRange = document.offsetAt(offset);
if (open) {
if (open) {
inStartTagEnd: boolean = node.StartTagEnd && offset < node.StartTagEnd;
return false;
false;
definition = getTagDefinition(node.tag, getTagDefinition(node.name, getTagDefinition(node.EndTagEnd, getTagDefinition(node.startTagEnd))));
getTokenEnd()),
if definition: Definition = {
tabSize);
return initialIndent = generateIndent(options);
yield select();
function* () {
}
fork(handleLoadedArtboards);
handleSearch);
}
art: ApplicationState = yield select();
yield cancel(resizeChan);
take(ARTBOARD_CREATED);
ARTBOARD_CREATED);
handleDocumentChange);
deltaY: number) {
top: <NUM_LIT>,
while (true) {
state = yield select();
const event: any = yield take( Stage_TOOL_OVERLAY_MOUSE_PANNING);
while (<NUM_LIT>) {
ApplicationState = yield select();
put({
fork(windowSaga);
mt.add(keyCombo, action, options);
return () => {
handleComponentsPaneAddClicked);
{
dropRef.length) {
event);
continue;
component componentId } = component;
continue;
component: ApplicationState = yield select();
OpenExternalWindowButtonClicked = yield take(OPEN_EXTERNAL_WINDOW_BUTTON_CLICKED);
workspace) {
type) {
}
left: bounds.left + <NUM_LIT>, top: bounds.top + <NUM_LIT> }));
break;
const take(KEY_UP);
server.resourcePath), "<STR_LIT>")));
(req, res, next) => {
yield wrapRoute(getComponentsScreenshot));
wrapRoute(getComponentsScreenshotPreview));
PUBLIC_SRC_DIR_PATH, yield wrapRoute(getFile));
const
const
return res.send(targetComponent.htmlPreview);
ApplicationState = yield select();
return;
res content;
else {
req.on("<STR_LIT>", chunk => buffer.push(chunk));
return res.json(data).end();
url = uri;
fork(handleExpressServerStarted);
yield fork(handleExpressServerStarted);
continue;
error(e);
yield put(saveScreenshot(screenshots));
uri, name } = screenshots[i];
entries.length);
previewName)] = {
previewUrl);
clippings));
yield fork(handleExpressServerStarted);
state: ExtensionState = yield select();
ExpressServerStarted = yield take(EXPRESS_SERVER_STARTED);
fork(handleExpressServerStarted);
yield fork(handleExpressServerStarted);
handleExpressServerStarted);
app: express.Application;
err: any) => {
handleExpressServerStarted);
break;
break;
vscode.window.showWarningMessage(text);
take(OPEN_EXTERNAL_WINDOW_EXECUTED);
yield take(OPEN_EXTERNAL_WINDOW_EXECUTED);
ExtensionState = yield select();
return;
true) {
tandemEditorStatus === TandemEditorReadyStatus.DISCONNECTED) {
DISCONNECTED) {
yield fork(function* () {
source of sinks) {
else if (node.type === '<STR_LIT>') {
'<STR_LIT>'),
'<STR_LIT>'),
Errors.InvalidState), '<STR_LIT>']),
href: '<STR_LIT>',
if.returnValue = false;
'<STR_LIT>') {
typeof param === '<STR_LIT>';
sink
source.select(scope) as S;
result = options.useCapture(eventType);
isArray(modules)) {
anyRequestHandler = null;
length('<STR_LIT>'))
selectors;
if (id) {
id) {
`<STR_LIT>`,
{
]),
channel)) {
channel]);
outerSinks[channel] = innerSinks[channel];
drivers);
name);
obj).length === <NUM_LIT>;
process.env.NODE_ENV !== "<STR_LIT>") {
i = <NUM_LIT>;
as Function)();
queue.push(fn);
process.nextTick;
'<STR_LIT>';
const.next(scheduledEntry);
{
},
next(entries);
currentTime() });
LOAD_FAIL):
default: {
switchMap(() => {
action, state]) => {
EntityActions.LoadSuccess<Entity> = {
UPDATE)) {
entities: {
break;
break;
actions.AddToLocal))
PATCH:
default:
BlogPage: initialBlogPageLayout,
return layout = action.payload;
state.talksPage, watched } };
slices.REBUTTAL, actions.PATCH):
entityFunctions.update<Rebuttal>(state, <any>action);
state;
return httpToRemote$('<STR_LIT>', actions$, slice, dataService, triggerAction, successAction, errorAction, responseTransform);
null };
r.payload);
throw new Error(message);
true) {
push(`<STR_LIT>`);
`<STR_LIT>`);
node_fetch.Response;
dsl = JSON.stringify(output, null, <NUM_LIT>);
GitJSONDSL = {
content);
return fnOrPromise(results);
return fnOrPromise();
markdowns: results.markdowns
number = <NUM_LIT>; i < length; i++) {
<NUM_LIT>;
<NUM_LIT>;
const g: number = Math.max(<NUM_LIT>, Math.min(<NUM_LIT>, color.g / <NUM_LIT>));
max - min;
if (g == max) {
mapView.infoWindowTemplates;
return vs.SymbolKind.Class;
"<STR_LIT>":
return vs.SymbolKind.Class;
"<STR_LIT>":
vs.SymbolKind.Variable;
"<STR_LIT>":
case "<STR_LIT>":
return vs.SymbolKind.Method;
vs.SymbolKind.Class;
min);
get("<STR_LIT>")
analyzerMaxSize
"<STR_LIT>";
enable, projectType);
return false;
false;
false;
localize('<STR_LIT>', "<STR_LIT>"));
unlinkSync(triggerFile);
}
<NUM_LIT>,
return false;
doOpenURL.emit({
stagger === '<STR_LIT>'
state = states[stateKey];
IPathsMap = {
fromPathId] || [];
}
`<STR_LIT>`
body: string | null = null;
statusCode === <NUM_LIT>) {
packageInfo.name);
const {
let (!options.filename) {
e) {
Error('<STR_LIT>');
}
console.log('<STR_LIT>');
log('<STR_LIT>');
log('<STR_LIT>');
exe);
log('<STR_LIT>');
exe);
log('<STR_LIT>');
console.log('<STR_LIT>');
console.log();
log();
pkg.version);
parsed = parse(source, options);
filename).endsWith('<STR_LIT>');
stage.name === runToStage);
originalNewlineStr;
return result;
for (let stage of stages) {
comment = '<STR_LIT>';
`<STR_LIT>`),
commentLines[<NUM_LIT>])) {
codeLines.slice(<NUM_LIT>),
env['<STR_LIT>'];
string = '<STR_LIT>';
. IdentifierPatcher)) {
expression,
program, context);
`<STR_LIT>`);
return [];
bindings;
any[] = [];
node instanceof ArrayInitialiser) {
start);
child) => child instanceof SoakedDynamicMemberAccessOp ||
commonIndent = commonIndent.concat(indent);
node.type === "<STR_LIT>";
type) !== -<NUM_LIT>;
strings) {
if (skipNodeCheck) {
processExec = require('<STR_LIT>');
error);
if (isNaN(portNumber)) {
EVENT[action] !== undefined;
action: error,
argv.tsconfig ||
expectedType) !== '<STR_LIT>') {
TOPIC.RECORD,
else {
message.name
as any).name;
return '<STR_LIT>';
'<STR_LIT>':
'<STR_LIT>':
nativeSep)) {
if (!pr) {
entry);
console
const changelog: any = JSON.parse(changelogText);
releases;
value = releases[prop];
return [];
event, args);
return [
value, '<STR_LIT>');
createCompiler();
STATE_DONE;
return node.state === STATE_IN_PROGESS;
entry: opts.entryFile,
opts.licensePath,
transformed = transformers.map(t => t(source));
tsConfig.rootNames],
return
node.type === TYPE_ENTRY_POINT;
return value.startsWith(URL_PROTOCOL_FILE);
return `<STR_LIT>`;
sources as string[]).map(mapFn);
text: replacement
globPattern, {
arg1;
get() {
global
set(globalState.currentReaction, {
value);
try {
inAction;
joinPointOrTarget, <JoinPointAfterAdvice<T>>methodNameOrAdvice);
result) {
function (value) {
previousValue.push(result);
allowFunctionValues);
any = comparableA[name];
call(b, name);
patchRecords.push({
if
else {
options)) {
return value && value.type === '<STR_LIT>';
Object || value.constructor === undefined));
Boolean(isArray(value) && value.length && isSpliceRecord(value[<NUM_LIT>]));
TypeError('<STR_LIT>');
patchConstruct(target, record)
new Error('<STR_LIT>');
return Promise.resolve(true);
create(Object.getPrototypeOf(source));
prototype.toString.call(value) === '<STR_LIT>';
as T[];
typeof value.load === '<STR_LIT>';
object.subscribe !== undefined;
options);
'<STR_LIT>';
if (!isAborted) {
return;
target);
response);
request);
request, reject);
setRequestHeader('<STR_LIT>', '<STR_LIT>');
requestHeaders.has('<STR_LIT>');
let key in requestHeaders) {
'<STR_LIT>');
ArrayBuffer) {
'<STR_LIT>');
timeoutReject) {
noop;
url, (err, text) => {
number = entry.indexOf('<STR_LIT>');
indexOfFirstEquals > -<NUM_LIT>) {
key = entry;
'<STR_LIT>' + this.hz + '<STR_LIT>');
return current + value;
args) => {
Test();
authorization;
timerHandle.destroy();
advise(getDispatcher(target, methodName), '<STR_LIT>', advice);
<NUM_LIT>).join('<STR_LIT>');
`<STR_LIT>`;
return = String(id);
value = map[key];
else {
else {
id;
IGitCommandExecutor, GitCommandExecutor);
addSingleton<IConfigurationProvider>(IConfigurationProvider, ConfigurationProvider);
extension = path.extname(file.fsPath);
slice(-<NUM_LIT>);
return undefined;
any = {
error, files) => {
null, failures));
IModuleInstaller, NpmInstaller);
'<STR_LIT>') {
openCommand = '<STR_LIT>';
console.error(`<STR_LIT>`);
HKCU;
valueOf();
pos);
}
new Range(startAt, endAt));
true || obj === false;
typeof (obj) === _typeof.undefined;
obj) || obj === null;
const
pop();
return;
line.indexOf("<STR_LIT>"));
ex.length === <NUM_LIT>) {
attachRequestOptions, debugSession);
let paths: string[] = [];
}
F);
Char.LineFeed;
RegExpExecArray = compiledRegexp.exec(data);
GoObjectDefinitionProvider(jediFactory);
number = tokens.indexOf(tokens[tokens.length - <NUM_LIT>]);
fsPath : undefined;
name;
string = getModuleName(testProvider);
mergeStdOutErr === '<STR_LIT>';
'<STR_LIT>') {
const
{
options.product),
stdErr: string = '<STR_LIT>';
(err: any): void => {
testHelper: ITestsHelper = serviceContainer.get<ITestsHelper>(ITestsHelper);
reject(new Error(`<STR_LIT>`));
if (isNaN(num)) {
return;
string = '<STR_LIT>';
outputChannel.appendLine(`<STR_LIT>`);
statusText.push(`<STR_LIT>`);
string = args[indexOfPattern];
args[indexOfPattern + <NUM_LIT>];
startTestDiscoveryDirectory)) {
some((arg: string): boolean => arg.trim() === '<STR_LIT>');
depth));
pyPath);
documentPath);
log('<STR_LIT>', action);
setting]) {
code === <NUM_LIT>);
else {
message = `<STR_LIT>`;
error as any).innerException;
innerException.name) === -<NUM_LIT>) {
files.forEach(file => {
push(fullPath);
number = <NUM_LIT>;
let start = document.positionAt(pos);
offsetDiff - readBlock;
text = document.getText(new Range(startAt, endAt));
def.resolve(port);
const notebooks: Notebook[] = [];
Math.floor(min);
dir(`<STR_LIT>`));
push(model);
isInlineFragmentNode(item)) {
push(model);
<NUM_LIT>) {
splitted.length - <NUM_LIT>].split('<STR_LIT>')[<NUM_LIT>],
<NUM_LIT>];
return {
fields = [];
parts = name.split('<STR_LIT>');
DEBUG) {
introspectionQuery);
f.detectChanges();
subPieces: string[] = promptResponse.slice(<NUM_LIT>);
subcommand) {
return false;
return;
return;
formatPatchApplictionFailureError({
if (!caseSensitive) {
console defaultValue;
for (const packageName of Object.keys(dependencies)) {
return version;
path, {
path: tmpDir.name,
return (packageManager === "<STR_LIT>") {
"<STR_LIT>") {
false,
i], cloningNamespaces[i].getClasses());
type, isMatch) != null;
TypeSTR_LIT>');
"<STR_LIT>";
case "<STR_LIT>":
case "<STR_LIT>":
-<NUM_LIT>) {
'<STR_LIT>';
case "<STR_LIT>":
case SyntaxKind.CaseClause:
value);
Base.prototype, this, structure);
scope);
this) != null;
null)
unwrap() {
getStructure(node, structure);
nls.localize('<STR_LIT>', "<STR_LIT>"));
syntaxKind)
value !== expectedType)
null)
FormattingKind.Newline;
parent, child);
FormattingKind.Newline;
getFullText();
if
openBraceToken.getEnd();
return {
return {
return {
structure.name = node.name.getText();
fromMethod(node));
structures.length, startChildren.length);
opts,
return opts.structures.slice(<NUM_LIT>, index);
}
getSiblingFormatting: getStatementedNodeChildFormatting,
null || b == null)
continue;
text, SyntaxKind.JsxAttribute, {
{
true });
const result: {
SyntaxKind.JsxSpreadAttribute, {
text, SyntaxKind.JsxText, {
text, SyntaxKind.BreakStatement).descendant;
SyntaxKind.DefaultClause).descendant;
descendant;
getInfoFromTextWithDescendant<LabeledStatement>(text, SyntaxKind.LabeledStatement).descendant;
return getInfoFromTextWithDescendant<TryStatement>(text, SyntaxKind.TryStatement).descendant;
WhileStatement).descendant;
SRC_ROOT, fileName),
typeof nameOrFindFunc === '<STR_LIT>') {
'<STR_LIT>') {
return new RegExp(regexpContent, '<STR_LIT>');
return new RegExp(regexpContent);
msg);
sm[i + crypto_sign_BYTES] = msg[i];
result: string[] = [];
lines) {
"<STR_LIT>");
push(entry);
key of keys) {
BRANCH_FACTOR);
`<STR_LIT>`;
simpleValue(question, property, conf[property], conf, function (input: string) {
property], conf, function (input: any) {
blockstampTime: tx.blockstampTime,
signatures: tx.signatures,
tx.time,
m) => m.public.port);
port);
let (let key of keys) {
family !== family) {
RegExp = new RegExp('<STR_LIT>');
/^enp\d+s\d+/,
find(res, it => !interfacePriorityRegCatcher.some(it => it.test(family)));
remoteport;
key of keys) {
number = await getAvailablePort(client);
NetworkConfDTO = {
host: '<STR_LIT>',
logger: logger,
null,
if conf;
<NUM_LIT>];
configs.get("<STR_LIT>");
get("<STR_LIT>");
`<STR_LIT>`] = userId;
node as any).commit.type === '<STR_LIT>';
editor = window.activeTextEditor;
tsDocument = getTSDocument(document);
version;
get<boolean>('<STR_LIT>');
return;
const.log(`<STR_LIT>`);
gitVersion);
return {
}
e) {
expression.split('<STR_LIT>');
notifications.add(notification));
if
UIApplicationDidStartLaunchingNotification, (appNotification: any): void => {
connect();
firebase._messagingConnected) {
connect();
g, () => {
try {
p] = b[p];
TAG, "<STR_LIT>");
source.length; i++) {
if
if (step === <NUM_LIT>) {
index, '<STR_LIT>');
instance) || isEnumerable(instance);
disposable);
p;
p.then(onFulfilled, onRejected);
v);
ex);
value)
Error.stringify(source));
Error("<STR_LIT>");
<NUM_LIT>
replace(/[\-\\\{
throw
onMessage;
const
if (decodeValues) {
entryHandler(key, value);
HASH) !== <NUM_LIT> ? HASH : EMPTY) + fragment);
'<STR_LIT>') + query);
'<STR_LIT>');
if (uri.port) {
result += '<STR_LIT>' + uri.port;
return fs
dir: string) => {
dirPath);
forEach((file: string): void => {
count; i++) {
if ((_flags & SchedulerFlags.OutputMeasured) !== <NUM_LIT>) {
Collection
<NUM_LIT>,
<NUM_LIT>,
Parallel
<NUM_LIT>)
number = start + max; i < stop; ++i) {
for (let v of c.toArray()) {
"<STR_LIT>");
number = c.count - count;
length, c.count, "<STR_LIT>");
TEST_FLOAT, () => {
equal(Integer.assert(TEST_FLOAT), false, '<STR_LIT>');
err) {
path.dirname(modulePath);
name)) {
name);
UuidEncoding.BASE64:
buffer.toString("<STR_LIT>");
<NUM_LIT>;
buffer[<NUM_LIT>]] + byte2hex[buffer[<NUM_LIT>]] +
"<STR_LIT>":
default:
new Error('<STR_LIT>');
if (checksum) {
filter(it => it.startsWith('<STR_LIT>'))
"<STR_LIT>";
if (debug7z.enabled) {
command == null) {
stdio: "<STR_LIT>",
"<STR_LIT>", "<STR_LIT>"]
data: Buffer) => {
data;
log.debug(`<STR_LIT>`);
pid,
resolve(out);
cwd;
( => {
err: Error): void => {
toString());
args.unshift(exePath);
LogLevel.Debug);
`<STR_LIT>`;
asyncTaskManager.awaitTasks();
args.push("<STR_LIT>");
null) {
path.join(root, "<STR_LIT>");
nb.toString(<NUM_LIT>))).slice(-<NUM_LIT>);
name.startsWith(prefix)) {
artifactPaths.add(event.file);
if
artifactCreated((event: import("<STR_LIT>").ArtifactCreated): void => {
process.exit, sigIntHandler);
version,
return /^[0-9A-Za-z._-]+$/.test(name);
value === '<STR_LIT>') {
result : null;
string = `<STR_LIT>`;
url: routerUrl }, `<STR_LIT>`);
setTimeout () => {
Error("<STR_LIT>"));
"<STR_LIT>",
e) {
err: any): void => {
push("<STR_LIT>");
return match;
const
p1);
type === "<STR_LIT>") {
`<STR_LIT>`,
licensePage);
else {
item.lang);
file,
{
item);
StageDir(await createStageDirPath(target, packager, arch));
}
publish.listOnDisk;
null) {
const
if (errors != null) {
new Promise<Dependency>((resolve, reject) => {
arch: any = options.arch || process.arch;
args: string[] = [];
execPath);
push("<STR_LIT>");
dep.path, execArgs);
<NUM_LIT> : <NUM_LIT> });
push("<STR_LIT>");
on("<STR_LIT>", reject);
on("<STR_LIT>", resolve);
license: string = options.license || `<STR_LIT>`;
args.arch }, `<STR_LIT>`);
configureInstallAppDepsCommand())
format(value).slice(<NUM_LIT>, <NUM_LIT>);
}
return false;
`<STR_LIT>`;
isDirectory(),
throws();
path.delimiter)
return {
packagerOptions.config as any).cscParameters = {
buildimraf(TEST_TMP_DIR),
await
C_DIR)) {
testPatterns[<NUM_LIT>]);
pathNodeIndex);
circleNodeIndex);
push("<STR_LIT>");
testPatterns.push("<STR_LIT>");
testPatterns.join("<STR_LIT>"));
log(`<STR_LIT>`);
"<STR_LIT>";
"<STR_LIT>") {
transformIgnorePatterns.push("<STR_LIT>");
config
silent: rootDir,
<NUM_LIT>) {
itSTR_LIT>` : it);
return appPath;
removed: []
for (const item: string of newList) {
REMOVED) {
item, d);
component;
downloadResult: any = await downloadPromise;
expect(fileInfo.name).toBeDefined();
arch];
if (runInDebugMode) {
filter(names.map(name => {
! assertThatExpr(actual);
run = resolve;
trim();
os.EOL);
configuration);
resolve, reject);
stats.hasErrors()).toBe(true);
localName;
attributes, namespaceURI, localName);
undefined) {
parentNode.removeChild(oldChild);
CHAR.length > <NUM_LIT> ? `<STR_LIT>` : char;
name];
state('<STR_LIT>', style({
json));
dataset = datasets[<NUM_LIT>];
featureSet);
if (featureSet) {
push(feature);
feature) => {
functionscope: TableScope<T>, $element: IAugmentedJQuery, $attrs: InputAttributes) => {
const ngTable = $scope.ngTable;
newColumns || []) as ColumnDef[];
'<STR_LIT>': '<STR_LIT>',
link: function (scope, element, attrs, ctrl) {
constcompile(templateUrl)(scope);
key] = srcVal;
customVal !== undefined) {
destination[key] = srcVal;
return true;
"<STR_LIT>": {
key in value) {
{
rawValue] = paramString.split('<STR_LIT>');
push(currToken);
finalizeToken();
}
'<STR_LIT>') {
scopedParam)) {
type === '<STR_LIT>') {
toResource);
type];
resources
if (invalid) {
title: "<STR_LIT>",
isArray(attrOrAttrPart)) {
modelName);
Object.keys(o).map(key => o[key]);
contains('<STR_LIT>');
return t * t * (t * (t * <NUM_LIT> - <NUM_LIT>) + <NUM_LIT>);
value === '<STR_LIT>')) {
throw new Error('<STR_LIT>');
'<STR_LIT>') +
debug(`<STR_LIT>`);
method;
if (descriptor.set) {
side === Side.Left) {
return Side.Left;
`<STR_LIT>`), fetchConfig).then((response) => response.json());
;
else {
date as Promise<posts>;
if (!localConfig) {
localConfig);
_. (prev.length !== next.length)
indexOf(requiredIncludeToRun) !== -<NUM_LIT>;
return typeInformation.name;
function (foundType: AlgebraicType.Type) {
Maybe.match(function (plugin: AlgebraicType.Plugin) {
config.absolutePath));
success: ObjectGenerationSuccess = {
yellow('<STR_LIT>' + time + '<STR_LIT>' + info);
Promise.map(function (result: ConsoleOutputResults) {
mbind(function (success: Logging.Context<Either.Either<Error.Error[], ObjectGenerationSuccess>>) {
configFileName, configPathFromArguments);
state, io));
href;
void window.history.replaceState(extend<Pick<State, State.title>>(window.history.state || {
drop((key) => scope[key] !== undefined)
pattern, path.dest)
Config(scope[pattern], option))
map(seq)
map(dispatch)
expectedContentType.length)
trim())
double_REG) || [])
case RouterEventType.popstate:
return void find(document, '<STR_LIT>')
return false;
dst]))
link.set(null, concat(link.get(null) || [], [src]))
void link.delete(dst))
documentElement.textContent = html;
return (err: UnsafeError) => {
dispatch({
any = getWebAppConfig(store.getState().resources.index);
value }));
new Error("<STR_LIT>");
log = getConfigValue(key);
all.delete(makeKey(uuid));
state) || "<STR_LIT>";
Buffer.from(JSON.stringify(input), '<STR_LIT>');
'<STR_LIT>', payload };
getDevice()
actual_major === _EXPECTED_MAJOR && actual_minor === _EXPECTED_MINOR) {
_EXPECTED_MINOR);
shortenedBy: <NUM_LIT> };
moment(start_time),
if
items: Moment[] = [];
farmEvent => {
return {
return {
body
x }),
<NUM_LIT>;
slug
sowing_distance: <NUM_LIT>,
isUndefined(v)) {
lang = `<STR_LIT>`;
parseInt(x, <NUM_LIT>));
<SafeError>x).error);
for (const env of ENV_LIST) {
getState (dispatch, getState) {
type: Actions.PUSH_WEEK,
ms));
return {
regimenState,
c:perimentsState,
farmwareState,
id: '<STR_LIT>',
FarmwareImage: [],
Point: [],
WebConfig: [],
return x;
findAll(index, name).map(x => {
return p;
ts;
byKind
uuid);
return {
index)
const findAll(index, "<STR_LIT>") as TaggedRegimen[];
"<STR_LIT>") as TaggedSequence[];
findAll(index, "<STR_LIT>") as TaggedTool[];
x &&
type: "<STR_LIT>",
"<STR_LIT>",
body = defensiveClone(step);
status: <NUM_LIT>,
routerdispatcher,
bot,
created_by: "<STR_LIT>",
firmware_error_log: false,
auto_sync: false,
"<STR_LIT>",
meta: {
idCounter++,
fakeResource("<STR_LIT>", {
id,
pageName = "<STR_LIT>";
if (!elToScroll) {
<NUM_LIT>);
id);
'<STR_LIT>' && candidate !== null && typeof candidate[Symbol.iterator] === '<STR_LIT>';
alloc().init();
height: number = size.height;
style += `<STR_LIT>`;
css.hasOwnProperty(attribute))
"<STR_LIT>";
"<STR_LIT>")
"<STR_LIT>";
"<STR_LIT>";
}
border;
values[<NUM_LIT>]);
join("<STR_LIT>");
source) {
return;
'<STR_LIT>':
string = `<STR_LIT>`;
SLUG_REGEXP, '<STR_LIT>');
return true;
number = <NUM_LIT>; i < input.length; i++) {
length; i++) {
substring;
'<STR_LIT>';
type: '<STR_LIT>',
name: typeName };
util.prettyJSON(data));
TokenGenerator(secret);
debug;
prop in v) {
scope[prop] = fn(v[prop], prop, scope);
sort((a, b) => {
if (obj[prop].name === name) {
}
return fileName + '<STR_LIT>' + extension;
in obj)) {
obj) === '<STR_LIT>';
if type === '<STR_LIT>' || type === '<STR_LIT>';
s);
replace(new RegExp(`<STR_LIT>`, "<STR_LIT>"), extension);
return `<STR_LIT>`;
MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');
}
threadId: '<STR_LIT>',
delete aps['<STR_LIT>'];
JSON.parse(JSON.stringify(value));
!value.includes("<STR_LIT>");
nock('<STR_LIT>')
mock = mock.matchHeader('<STR_LIT>', `<STR_LIT>`);
data,
typedEvent.data = dataConstructor(event);
promise === '<STR_LIT>') {
catch (e) {
provider,
string;
new Error(`<STR_LIT>`);
throw new Error('<STR_LIT>');
join("<STR_LIT>");
else
Query,
},
val;
base64Available) {
'<STR_LIT>']);
case UserDataSource.Update:
default:
const.createObjectStore(DbOwnerStore, {
let
return _documentVersionMap;
tag in obj);
return Error(`<STR_LIT>`);
numberOfArgs, '<STR_LIT>') +
argument === undefined) {
if (val === input) {
`<STR_LIT>`, argument);
<NUM_LIT>) {
else
else {
call(obj, key) ? obj[key] : null;
value) &&
false,
defaultDatabase), null);
prefix + IndexedDbPersistence.MAIN_DATABASE);
;
builder();
specJSONHandlers.set(writer);
SpecBuilder();
op());
push({
NONE);
doc) => {
const key of keys) {
version(testVersion), null);
'<STR_LIT>' + op);
return emptyByteString();
from(serverTimestampFields))));
const[messagingName] = factoryMethod;
.endpoint || '<STR_LIT>');
value: endpoint,
options as any).sub
'<STR_LIT>':
break;
Blob ||
minArgs++;
throw new Error(`<STR_LIT>`);
let arg = passed[i];
name, e.message);
const
domainBase = domainBase;
FirebaseStorageError(Code.CANNOT_ slice_Blob, '<STR_LIT>');
"<STR_LIT>" +
return new FirebaseStorageError(Code.INVALID_EVENT_NAME, "<STR_LIT>" + name + "<STR_LIT>");
name +
return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, '<STR_LIT>');
return new FirebaseStorageError(Code.UNAUTHORISED, "<STR_LIT>" + path + "<STR_LIT>" +
hasOwnProperty.call(obj, prop);
function (resolve, reject) {
newErr = err;
path);
const (string) {
decodeURIComponent(string);
case InternalTaskState.PAUSED:
FAILURE:
ERROR;
p !== undefined && p !== null;
typeof Blob !== '<STR_LIT>';
p) && p !== null;
p === '<STR_LIT>';
p === '<STR_LIT>';
value: any, key: string) {
as Reference;
(value: any, key: string) => {
return () => {
function () {
pr;
any = captureFake;
return
constructor === Object;
return value >= <NUM_LIT>;
decimal, <NUM_LIT>);
date2.getHours()) -
node.firstChild) {
return fd.entries || [];
__typename);
return `<STR_LIT>`;
true };
return `<STR_LIT>`;
codeManager.runByLanguage();
undefined) {
else {
i = <NUM_LIT>;
id) {
query: {
default: {
resolve(JSON.stringify({
charAt(startPos++) !== "<STR_LIT>") {
endPos: any = state.pos;
content);
markup;
true;
rules.push({
path.length) {
convertObject(value);
iterator in value) {
list);
listRange(index, index + <NUM_LIT>, list);
size;
view = modify(list);
return empty<T>();
list = modify(list);
OFFSET_ANCHOR.RIGHT ? OFFSET_ANCHOR.LEFT : OFFSET_ANCHOR.RIGHT;
return (value & shift) | <NUM_LIT>;
size, index < <NUM_LIT> ? size + index : index));
slots.length;
<NUM_LIT>;
lastOffset = <NUM_LIT>;
var right: Position<T> = makePosition(nodes[<NUM_LIT>], <NUM_LIT>);
left);
right, nodes);
recompute, right.upper.recompute);
number = startIndex; i < rslots.length; i++) {
length;
slot;
subcountMoved;
subcount -= slotsToMove;
length = <NUM_LIT>;
lowerIndex: <NUM_LIT>,
Slot: slot,
CONST.BRANCH_INDEX_BITCOUNT) + <NUM_LIT>);
list._right);
anchor === OFFSET_ANCHOR.LEFT
OFFSET_ANCHOR.LEFT
isNone()) {
<NUM_LIT>];
slot = right.slot;
view, map);
<NUM_LIT>);
Array.from(values);
Slot)
initialSize);
arrayValues(list, values);
slot.size;
length;
map._root);
node.key, node.value];
_filter(map, fn);
const key = keys[i];
change.release();
number = _hash(key);
nodeKeys);
node.key;
return (hash >>> shift) & MASK;
length; i++) {
V = get(child.value);
value) {
list, i);
newValue: V = get(key);
if (cancelOnFalse) {
node];
const child of children) {
return new NodeIterator(node, f);
NodeType.COLLISION:
default:
true;
var c = compare(key, node.key);
node = node._left;
iterateFromIndex<K, V>(reverse, index, tree));
iterateFrom(op, reverse, key, tree));
tree));
Error('<STR_LIT>');
c === <NUM_LIT>) {
else if (c > <NUM_LIT>) {
parent;
child === BRANCH.NONE) {
node._count = node._left._count + node._right._count;
child);
pctx), compare, <NUM_LIT>);
isObject(arg) && arg instanceof RedBlackTreeStructure;
any;
value] : [value, represent(node._right, set)];
key, entry.value];
values);
arg);
return main;
set);
iteratePairs(map);
getFirstItem(map._sorted);
while (!(current = it.next()).done) {
break;
iterateKeys(map);
index = <NUM_LIT>;
return keys(map._sorted);
return [item.key.key, item.value];
return set._sorted;
isObject(arg) && arg instanceof SortedMapStructure;
getLastItemByKey(sorted.key);
key.localeCompare(b.key);
index, set._tree);
tree = outputSet._tree;
other)) {
main;
outputSet);
MappableIterator<SortedSetItem<T>, T>(keys(set._tree), valueOf);
a - b;
<NUM_LIT>, l.root!.array.length), node));
incrementDepth(l.bits, depth);
depth - <NUM_LIT>);
newAffix[path];
if (child === undefined) {
newAffix[path];
if (child) {
suffix =Affix;
l;
newAffix.length, l.bits);
const
newRoot.bits);
else {
decrement: any = decrementClick.mapTo(-<NUM_LIT>);
strings.split("<STR_LIT>");
replace(/\t/g, '<STR_LIT>')
classList.add('<STR_LIT>');
textContent = errorOutput;
outputBundleErrors();
other {
node.object.type === "<STR_LIT>"
return node.type === "<STR_LIT>" && node.object && node.object.type === "<STR_LIT>";
return fn(node.expression.left);
name;
referencedVariable);
id.name;
packageJSONPath);
new Error(`<STR_LIT>`);
version;
any = matched[<NUM_LIT>];
addonName = "<STR_LIT>";
else if (type === "<STR_LIT>") {
resetAddon();
addonName);
version = finalVersion;
colors.underline.white("<STR_LIT>"));
return "<STR_LIT>";
path.join(__dirname, '<STR_LIT>'));
extname(str);
if ensureFuseBoxPath(path.join(...any));
raw) {
i++) {
new RegExp("<STR_LIT>", "<STR_LIT>"), "<STR_LIT>");
uglifyOpts = Object.assign({
worker);
WorkerMessage.type, msg => {
code], code);
});
'<STR_LIT>'].forEach(signal => {
return obj !== null && typeof obj === '<STR_LIT>';
y
{
'<STR_LIT>':
fa.position);
chain(st => uf(mfun(st)));
readFileSync(s, '<STR_LIT>'), s);
validation.isRight());
number = <NUM_LIT>;
currentX = <NUM_LIT>;
writeUint8(value);
preheaderPrefix);
<NUM_LIT>)
return <NUM_LIT> * numberOfBlocks;
return specifier.indexOf('<STR_LIT>') !== -<NUM_LIT>;
positional.at(<NUM_LIT>));
parse(glimmerPrecompile(template, options));
string = `<STR_LIT>`;
r_PROJECT_ROOT, '<STR_LIT>');
strip(str, ...args);
join("<STR_LIT>");
strings.delimiter)
module,
<NUM_LIT>];
call(obj, key);
obj, META)) {
propertyDidChangeCallback = cb;
create();
return {
return '<STR_LIT>';
value;
return symbols && symbols.has(parts[<NUM_LIT>]);
namespaceRegistry[attrName];
return new CheckOption(checker);
return opcode >> <NUM_LIT>;
<NUM_LIT>;
new ComputedBlueprint(last, deps);
new AliasBlueprint(name.split('<STR_LIT>'));
return extension;
<NUM_LIT>] = func['<STR_LIT>'] || <NUM_LIT>;
if
obj[key];
Blueprint = Object.keys(desc);
if (let operand ofoperands) {
case "<STR_LIT>":
case '<STR_LIT>':
operand.value;
case '<STR_LIT>':
name] = {
if (tag === '<STR_LIT>') {
tag);
new MapperReference<T, U>(reference, mapper);
return new SingleNodeBounds(parent, node);
capability);
`<STR_LIT>`;
return hasCapability(capabilities, Capability.DynamicLayout) === true;
CurriedComponentDefinitionSymbol]);
getCapabilities(state).dynamicLayout === true;
if (nextSibling !== null) {
'<STR_LIT>';
let vm.dynamicVar.get(args);
SafeDynamicAttribute;
tagName, name)) {
OptionSelectedDynamicAttribute;
if (array[i].name === name) {
boundsDepth[<NUM_LIT>] as string);
return node.nodeType === <NUM_LIT>;
candidate.tagName === tag;
floor(primitive);
begin();
else
tagName, attrs, contents] = [args[<NUM_LIT>], {
args;
attributes || [],
children: children || [],
type,
"<STR_LIT>",
delimiter);
loc.end.line + "<STR_LIT>";
normalized = handler(normalizedVisitor);
'<STR_LIT>') {
if (Array.isArray(keys)) {
keyHandler.enter : null,
'<STR_LIT>') {
"<STR_LIT>";
i++) {
i];
join('<STR_LIT>') === actual);
`<STR_LIT>`;
module,
assert.equal(matched[<NUM_LIT>], expected);
result: actualHTML === html,
while (node !== null) {
attrs, contents] = [args[<NUM_LIT>], {
args.length === <NUM_LIT>) {
contents] = args;
p: []
let delegate = new Delegate();
shouldSkip = true;
klass();
instance.skip = !shouldSkip;
test.skip) {
tests[prop] = test;
createTest(prop, test, false));
prop, test));
true));
switch (kind) {
prop, test));
kind === '<STR_LIT>') {
kind === '<STR_LIT>') {
tests.glimmer.push(createTest(prop, test));
_.module(name, klass, options);
any[] = [];
peek();
newNew) > -<NUM_LIT>)) {
nextOld);
return object._guid;
'<STR_LIT>', name };
'<STR_LIT>', name };
'<STR_LIT>', name };
return {
name };
toLowerCase()) {
'<STR_LIT>':
case '<STR_LIT>':
'<STR_LIT>':
case '<STR_LIT>':
'<STR_LIT>':
'<STR_LIT>':
case '<STR_LIT>':
nodeValue, message);
textNode)) {
try {
catch (e) {
'<STR_LIT>';
string[] = ['<STR_LIT>', '<STR_LIT>'];
customChromePath);
'<STR_LIT>' +
inst, suffix);
weight: -<NUM_LIT> },
weight: <NUM_LIT> });
argumentsRegex);
toString().trim();
process.env.LOCALAPPDATA);
case '<STR_LIT>':
default:
'<STR_LIT>',
join(rootDir, nodule);
as string[]).concat(globs);
if (!file) {
'<STR_LIT>',
'<STR_LIT>',
await import('<STR_LIT>'));
if (uid !== <NUM_LIT>) {
destroyNamespace(TRACE_NAMESPACE);
URL(authority);
api.constants.TRACE_AGENT_REQUEST_HEADER];
wrap(next) : next);
return (propagateContext) {
string[] = [];
const = str.trim();
matches[<NUM_LIT>],
get();
span.startTime);
new Map();
config, baseImage, dockerfile, dockerignore);
'<STR_LIT>');
return loc.path === location.path &&
run('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>', tag, baseDir], {
if (!params.has(param)) {
obj.read === '<STR_LIT>';
url.list)({
nock('<STR_LIT>')
obj }, (err: NodeJS.ErrnoException) => {
null);
const res = await pify(drive.files.delete)({
GCPEnv.Cloud;
else
host).get(instancePath).replyWithError({
args: any[]) {
undefined)) {
cancellationToken);
pendingCredentials = new Promise<CredentialsWithGeneration<Credentials>>(resolve => {
pendingCancellationToken = undefined;
viewer),
Axes.X, <NUM_LIT>],
4, true);
chunk.children) {
fragmentSize, <NUM_LIT>);
null) {
TileDataInstanceInfo = {
return {
type: '<STR_LIT>',
match === null) {
undefined) {
let {
<NUM_LIT>));
if (matchObj['<STR_LIT>']) {
i], qId));
let i: number = <NUM_LIT>; i < all convertedCoordinates.length; i++) {
match === null) {
if (typeof stackIdObj === '<STR_LIT>') {
stackIdObj);
buffer));
drop;
event.preventDefault();
}
getData('<STR_LIT>'));
event.stopPropagation();
layerSpecification.finalize(event);
false);
of dropLayers.layers.keys()) {
assign(element, attributes);
let (numPrimitives !== undefined) {
String(indices));
<NUM_LIT>;
alpha;
<NUM_LIT>] = rgb[<NUM_LIT>];
<NUM_LIT>;
; value < array.length; value++) {
chunkManager.memoize.getUncounted({
endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges);
chunk.data = new Uint8Array(response);
let (flatDimension === <NUM_LIT>) {
formatError(`<STR_LIT>`, `<STR_LIT>`));
channel, channelOutputLength * (channel + <NUM_LIT>)), data, baseOffset + data[channel], chunkDataSize, blockSize);
baseOffset, chunkDataSize, blockSize, dataPosition, <NUM_LIT>) + baseOffset;
<NUM_LIT>];
<NUM_LIT>];
dataPosition[<NUM_LIT>] = y;
out[outputOffset++] = data[outputValueOffset];
factory);
viewportHeight: number = document.documentElement.clientHeight;
return dragSource;
handle);
handle = requestAnimationFrame(flush);
number = v;
number = v * s;
case <NUM_LIT>:
val1;
<NUM_LIT>] = val2;
<NUM_LIT>] = val1;
true;
return true;
<NUM_LIT>;
setElements(x));
if (!child) {
parentElement) {
source !== target) {
from(arrayBuffer);
string | undefined;
'<STR_LIT>':
modifiers |= Modifiers.ALT;
META;
SHIFT;
else {
options);
m2 * m2 + m3 * m3);
options.clientId,
approvalPrompt,
},
resolve(token);
promise
dispatch(new Window({
AuthHandler();
setAttribute('<STR_LIT>', '<STR_LIT>');
zlib.gunzipSync(byteView);
m) {
replacement = '<STR_LIT>';
m.index, m.index + m[<NUM_LIT>].length);
replacement = singleQuoteString;
m[<NUM_LIT>], replacement);
vec3.create(), obj, verifyFiniteFloat);
if enumType[obj];
if (Number.isNaN(x)) {
obj;
throw new Error(`<STR_LIT>`);
majorVersion === <NUM_LIT> && minorVersion === <NUM_LIT>) {
DataView(x, <NUM_LIT>);
const (majorVersion === <NUM_LIT>) {
throw new Error(`<STR_LIT>`);
format Error(`<STR_LIT>`));
numElements;
handler);
delete(handler);
PREFETCH_PRIORITY_MULTIPLIER);
super.initializeCounterpart(rpc, options);
verifyString);
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
return (x % y + y) % y;
<NUM_LIT> : <NUM_LIT>;
start
textContent = iconText;
"<STR_LIT>": "<STR_LIT>",
};
script];
no) {
readFilep(jsonPath));
model: '<STR_LIT>',
scope, elem: any, attrs: any) {
document.createTextNode(String(content)));
className.replace(/\s+/g, '<STR_LIT>');
controller: NavbarCtrl,
'<STR_LIT>') {
target.tagName === '<STR_LIT>') {
lastPos = elem[<NUM_LIT>].scrollTop;
text: scope.getText(),
scope.clipboard.on('<STR_LIT>', () => {
clipboard.destroy();
attrs.change + '<STR_LIT>' : '<STR_LIT>';
input: any = {
'<STR_LIT>' +
'<STR_LIT>' +
color } = element;
scopedVars;
prop instanceof Array
if (typeof color === '<STR_LIT>') {
const (typeof color === '<STR_LIT>') {
sortBy(sortedHSLColors, '<STR_LIT>');
function (datapoints) {
abs(hash % TAG_COLORS.length)];
'<STR_LIT>',
iconClass: '<STR_LIT>',
iconClass: '<STR_LIT>',
case '<STR_LIT>': {
'<STR_LIT>',
bindToController: true,
'<STR_LIT>'
type) {
fillColor = defaultColor;
region.source.x, to: region.source.y },
id === event.regionId;
template,
meta: {
false,
updated: '<STR_LIT>',
description: '<STR_LIT>',
'<STR_LIT>',
hideControls: true,
current: true,
<NUM_LIT>,
current: true,
false,
false,
sort: <NUM_LIT>,
'<STR_LIT>',
values: false,
yaxes: {
'<STR_LIT>',
show: true,
'<STR_LIT>',
time: {
list: [],
from: null,
null,
'<STR_LIT>'],
SubmenuCtrl,
'<STR_LIT>',
TimePickerCtrl,
'<STR_LIT>',
template,
Tracker = function () {
restrict: '<STR_LIT>',
'<STR_LIT>');
throw undefined;
defaultParams = funcDef.defaultParams || [];
graphiteVersion, obj.version);
}
return;
selectParts.pop();
'<STR_LIT>');
if (elem.legend) {
range([<NUM_LIT>, legendWidth]);
legendValueScale)
y: any = d3
x: posX, y: posX)
minValue, maxValue])
d3
minValue, maxValue]);
'<STR_LIT>',
forEach(values, (value: any, key: any) => {
bucketNum, val, points[index], bounds);
a);
ticks(axisSelector))
backendSrv,
registerPanel = function (): void {
<NUM_LIT>,
rsp;
rsp.id);
current = <NUM_LIT>;
x) as Lens<T, T>;
in template) {
props });
get.val, newVal);
expression,
return result;
const (nameOrQuery) {
return filteredCookies;
process.env['<STR_LIT>'];
`<STR_LIT>`;
getS3BucketName() && getS3BucketUrl();
Page } = client;
return dirname(path) === path;
'<STR_LIT>') {
{
d.name.value);
collectPool.push(...collectedTypedDefinitions);
new Error(`<STR_LIT>`);
importsString] : importsString.split('<STR_LIT>');
EOL)
};
type = type.ofType;
getFields();
field.path;
const client = new GraphQLClient(url);
context RegExp('<STR_LIT>'), '<STR_LIT>');
string = path.resolve(__dirname, '<STR_LIT>', typeDefinitions);
schemaPath);
else if (Array.isArray(typeDefs)) {
typeDefs.name;
log(`<STR_LIT>`);
functions || {
endpoints = {
{
current),
Math.ceil(len / <NUM_LIT>))
error(`<STR_LIT>`);
JSON.stringify(result, null, <NUM_LIT>));
resolve()
text: string) => {
"<STR_LIT>",
testAttr2: {
spy("<STR_LIT>", arg);
arg);
attributes: {
default: "<STR_LIT>"
default: "<STR_LIT>"
"<STR_LIT>",
arg) {
$unmount: function (arg) {
GrimoireInterface.registerNode("<STR_LIT>", ["<STR_LIT>"]);
ensureDestinationDirectoryExists(options);
options.cropwidth;
push("<STR_LIT>", `<STR_LIT>`);
info: IInfoResult = {
temp[<NUM_LIT>],
options.cropWidth = options.cropwidth;
constDefaultsToDestinationOptions(options);
options.dst) {
"<STR_LIT>";
err) {
string = await getOpamVersion();
init(options);
HaikuGlobal.HaikuGlobalAnimationHarness;
if template;
else {
typeof value === '<STR_LIT>';
case
i < pieces.length; i++) {
node.type === '<STR_LIT>') {
return [];
any = group[output];
max (key > max) {
propertyName)
len) {
const [
case '<STR_LIT>':
sizeProportional][sizeDifferential];
break;
if (parsedValue.type === '<STR_LIT>') {
};
value / <NUM_LIT>,
value: parsedValue.value,
<NUM_LIT>] =
FORMAT) {
transform,
transform[<NUM_LIT>],
else {
if (t1 !== t2) {
<NUM_LIT>] ||
<NUM_LIT>;
return surrogates[value];
value];
return function (name: any, element: any, value: any) {
name || '<STR_LIT>') +
'<STR_LIT>' +
'<STR_LIT>');
else {
constructor && object.constructor.name === '<STR_LIT>';
options.hasOwnProperty(key)) {
component) {
haiku.element.attributes[oldKey];
typeof newValue === '<STR_LIT>') {
key === STYLE) {
component);
haiku && domElement.haiku.element) {
if
if
target = domElement;
component.registerListenerOnElement(virtualElement, eventName, listener, target);
FUNCTION) {
thing === null;
<NUM_LIT>];
script.src = `<STR_LIT>`;
prototype || {
const
FUNCTION;
}
<NUM_LIT>;
component._context.getDeterministicTime())
any[] = [];
Math.min(Math.max(min, num), max);
<NUM_LIT>] = <NUM_LIT>;
out[<NUM_LIT>] = a[<NUM_LIT>];
<NUM_LIT>] = a[<NUM_LIT>];
a[<NUM_LIT>];
out[<NUM_LIT>] = <NUM_LIT>;
<NUM_LIT>] = <NUM_LIT>;
out[<NUM_LIT>] = <NUM_LIT>;
any = a[<NUM_LIT>];
const a10: any = a[<NUM_LIT>];
any = a[<NUM_LIT>];
any = a[<NUM_LIT>];
const a33: any = a[<NUM_LIT>];
const b04: any = a01 * a13 - a03 * a11;
a33 - a23 * a31;
det;
a12 * b09) * det;
a02 * b05 - a30 * b02 + a33 * b03) * det;
return a01;
a03: any = a[<NUM_LIT>];
const a20: any = a[<NUM_LIT>];
a02;
out[<NUM_LIT>] = a13;
a[<NUM_LIT>];
<NUM_LIT>] = a[<NUM_LIT>];
<NUM_LIT>][<NUM_LIT>] = mat4x4[<NUM_LIT>];
out false;
i] * scale;
any;
let j: any = me.length;
for (i = <NUM_LIT>; i < key.length; i++) {
s[i] = i++;
me.i = <NUM_LIT>);
i + count)];
typeof v === '<STR_LIT>';
typeof v === '<STR_LIT>';
toLowerCase();
prop) {
thing !== null && thing !== undefined;
DEFAULT_UNitless;
for (prepend) {
Object (prepend) {
propName : propName);
propName;
propValue.toString();
else {
propValue !== '<STR_LIT>' &&
continue;
propType === '<STR_LIT>' || propType === '<STR_LIT>') &&
style
return
pos);
propIsNumber) {
prefix);
}
}
type: ActionConstants.app.SET_APP_LAST_POLL,
notificationFilter.REMOVE_FILTER,
length === <NUM_LIT>) {
if (unmutedNotifications.length === <NUM_LIT>) {
accountId,
repositoryMuteFilters.SETUP_FILTER,
return {
period));
return;
accountId, notifications);
title: '<STR_LIT>',
message: '<STR_LIT>',
return;
array.length > min;
typeof Audio !== '<STR_LIT>';
Moment(date).fromNow(false);
a);
dateTwo)
message: message,
actionParams.stickyActionParams || {
sticky, actionParams);
sticky, actionParams);
Alerts;
let (!token) {
return {
repo.html_url,
return {
login,
return getState<IState>().repositoryMuteFilters[accountId] || {
return getState<IState>().settings.soundSettings.alertErrorEnabled;
soundSettings.newItemsEnabled;
HawkEyeConfig.github.scopes;
HawkEyeConfig.github.webUrl;
GitHubNotification.Repository.url, '<STR_LIT>');
ELECTRON_MAIN) as Electron.ElectronMainAndRenderer;
isEnv(productionEnv);
['<
params === '<STR_LIT>') {
return accountState[repoId] || {
cancel();
if {
depsDescriptorMap: IPackageDescriptorMap = {
file);
fs.realpathSync(p);
e) {
p;
dirname(filePath));
case '<STR_LIT>':
break;
if (!processor) {
PROP_KEY] || [];
console.log(`<STR_LIT>`);
defaultPrompt);
endPattern) || []).length;
parseConfigFileTextToJson(configFile, configText);
options);
dummyFile];
result = '<STR_LIT>';
src) {
min);
onDidChangeConfiguration);
return process.env['<STR_LIT>'] === '<STR_LIT>';
Debug.info("<STR_LIT>");
var valid = myrea.test(control.value);
boolean = myrea.test(control.value);
'<STR_LIT>',
EmbedRegex) !== null;
image: HTMLImageElement) => {
vineRegex);
constStyles(options.props, content);
descriptor.value = function (...args: any[]) {
options)
key];
enumerable: true,
addEvent(target, eventName, (ev: any) => {
ifPlugins[pluginName] = P;
options[pluginName] = instance;
return;
return {
<NUM_LIT>));
return arr;
if (ignoreCase) {
':STR_LIT>', (done) => {
debugElement.componentInstance.viewChild instanceof Infragistics.IgMapComponent)
done) => {
componentInstance.viewChild instanceof Infragistics.IgPivotGridComponent)
STOP_LOADING:
default:
case variables.SET_VARIABLE:
method);
split('<STR_LIT>').length;
name.toLowerCase();
str.length);
ret.push(bufferToString(stdin));
ret.push(chunk);
pkg.length) : name;
tertiaryTemplate = true;
tertiaryTemplate) : '<STR_LIT>';
tertiaryActor) {
string[] = [];
return arr.indexOf(item) !== -<NUM_LIT>;
actors[Math.floor(Math.random() * world.actors.length)];
return [];
ChangeEditor, editor };
ActionType.ChangeKeybinding, keybinding };
urlStr, {
SetPage, page: '<STR_LIT>' };
return Mode.Debug;
FORMAT_FAILED, error };
CompileAssemblyRequest };
return {
type: ActionType.CompileWasmRequest };
...state.configuration,
state.configuration.processAssembly,
actions.GIST_LOAD_SUCCEEDED: {
case actions.FORMAT_FAILED:
actions.CRATES_REQUEST:
CompileMirSucceeded: {
default:
CompileWasmSucceeded: {
default:
params
metadata)) {
paramOrPropertyMetadata = [paramOrPropertyMetadata];
targetKey, metadata);
index === "<STR_LIT>") {
name);
interfaces.Context = {
baseConstructor);
{
return dependencyCount;
return
platformDir);
await runTask('<STR_LIT>', async (): Promise<void> => {
null;
if (err) {
<NUM_LIT>));
ios.platformDir, config.ios.nativeProjectName, '<STR_LIT>');
replace(/<key>CFBundleDisplayName<\/key>[\s\S]?\s+<string>([^\<]*)<\/string>/, `<STR_LIT>`);
path;
else {
return {
iosPath
plugin.xml) {
await
platforms && platforms[platform]) {
Plugin[] = [];
<NUM_LIT>) {
rootPath, '<STR_LIT>');
return null;
name,
};
platformrc) {
version,
type: '<STR_LIT>',
if (answers.foundExternalConfig()) {
logFatal(`<STR_LIT>`);
chalk `<STR_LIT>`, async () => {
type: '<STR_LIT>',
return;
log(`<STR_LIT>`);
log(`<STR_LIT>`);
pop();
func) => {
const ngTools2.compileTs(tsConfig, angularCompilerHost);
host: angularCompilerHost,
angularCompiler: any = ngTools2.createCompilerHost({
diagnostics: Diagnostic[] = [];
TypeScript, diagnostics);
options,
return `<STR_LIT>`;
'<STR_LIT>');
string[] = [];
return hasConfigValue(context, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', false);
globResult.absolutePath,
string[] = [];
finish();
true;
arguments[<NUM_LIT>];
const
const (filePath.startsWith('<STR_LIT>')) {
url: string;
functionCall.arguments = functionCall.arguments || [];
i < updatedArgs.length; i++) {
expression.expression
return functionCall;
node as Decorator, sourceFile);
node, sourceFile, sourceFilePath);
(transformContext) => {
if (classDeclaration.decorators) {
as Identifier).text === '<STR_LIT>') {
hasDeepLinkDecorator = true;
push(decorator);
'<STR_LIT>') {
'<STR_LIT>') {
kind) {
default:
node, sourceFile);
transformed.emitNode,
return
servePlatformResource);
'<STR_LIT>');
if
return context.directivesDir;
type === Constants.CONFIG) {
hydrated.bodyText = request.body;
request.type === '<STR_LIT>') {
importStatement = `<STR_LIT>`;
languages);
tsLint = getTsLintConfig(tsLintConfig);
return linter.getResult();
resolve(typeCheckImpl(context, program, linterOptions));
`<STR_LIT>`;
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>);
finally {
buildDir, `<STR_LIT>`);
for (const key of keys) {
JSON.stringify(process.memoryUsage()));
return [];
Diagnostic = {
toString(),
sassError.message,
column) {
d.lines.push(d);
srcLines: string[] = splitLineBreaks(srcLines);
line,
errorLength = j;
<NUM_LIT>;
errorLine.errorLength === <NUM_LIT>) {
<NUM_LIT>,
d.lines.push(previousLine);
lineIndex + <NUM_LIT>],
lineIndex + <NUM_LIT>],
nextLine.text, true).value;
e: any) {
'<STR_LIT>',
messageText, '<STR_LIT>'),
lines: []
text;
if (sourceText) {
line: posData.line,
highlight(d.language, errorLine.html, true).value;
rootDir);
srcLines[errorLine.lineIndex],
errorCharStart: errorLine.character,
header.push(previousLine);
lineIndex + <NUM_LIT>],
errorLine.lineIndex + <NUM_LIT>],
if (nextLine.html && nextLine.html.indexOf('<STR_LIT>') === -<NUM_LIT>) {
return
configFile)
content);
ENV_VAR_GENERATE_HTML)) {
promises.push(removeUnusedFonts(context));
logger.finish();
siblingFiles = [componentPath];
actualSassFile: any = replacePathVars(context, sassConfig.directoryMaps[k]);
siblingFiles.length) {
context, sassConfig);
configFile);
context, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', false);
concat(platformOption(context) ? [platformOption(context)] : []);
false);
newContent !== existingHtmlTemplatePath) {
fileCache.set(javascriptFile.path, javascriptFile);
}
deepLinkFiles.forEach(deepLinkFile => {
};
workerConfig));
finish();
defaultNgModuleContent);
typeof window !== '<STR_LIT>') {
string = processArgv[i + <NUM_LIT>];
globTasks) {
globResult);
promises).then(() => resultSet);
ext;
slice(match.index + match[<NUM_LIT>].length);
'<STR_LIT>';
hexTable);
_context;
const result = process.env[propertyName];
name = nonTypedBuildError.name;
if (err) {
replace(NON_WORD_REGEXP, replace);
input.substring(<NUM_LIT>, input.length - suffix.length);
return [];
reject(err);
port, reject);
close();
filePath, fileContent, ScriptTarget.Latest, false);
obj, '<STR_LIT>') as PropertyAssignment);
else {
sourceFile, sourceFile, SyntaxKind.CallExpression, true) as CallExpression[];
languageVersion, setParentNodes);
a.pos);
if (!configFile) {
return
return
postileState = BuildState.RequiresBuild;
logger.finish();
err;
debug(`<STR_LIT>`);
platform === '<STR_LIT>') {
rootDir, backPath);
splice(i, <NUM_LIT>);
if (includeSeparated) {
otherArgs[<NUM_LIT>]);
abs(d - cwd);
p;
else {
return '<STR_LIT>';
err: any, stdout: string, stderr: string) => {
false;
ctx.project.directory, details.platform);
any = j['<STR_LIT>'];
ctx.project.dir, '<STR_LIT>');
err) {
ns, pargv, env);
typeof ailment.treat === '<STR_LIT>';
c;
typeof key.id === '<STR_LIT>'
`
warn(`<STR_LIT>`);
'<STR_LIT>';
namespace === ns)),
`<STR_LIT>`;
`<STR_LIT>`;
else {
ERROR_UNKNOWN_CONTENT_TYPE;
options = {
true });
return (type) {
message: `<STR_LIT>`,
prompt({
'<STR_LIT>',
name: '<STR_LIT>',
configPath;
entry);
'<STR_LIT>', userId);
`<STR_LIT>`;
process.env[envvar]) {
'<STR_LIT>') {
err.code === '<STR_LIT>') {
else {
close();
version: distTag });
env['<STR_LIT>'] = PATH;
delimiter),
try {
});
options.stderrPipe) {
else {
if (Buffer.isBuffer(chunk)) {
reject(err);
if (code === <NUM_LIT>) {
host: Tree, context: SchematicContext) => {
new SchematicsException(`<STR_LIT>`);
const source = ts.createSourceFile(module.fileName, sourceText, ts.ScriptTarget.Latest, true);
`<STR_LIT>`);
change instanceof InsertChange) {
if (!env.NODE_ENV) {
get(`<STR_LIT>`, await createDevServerHandler(options));
gulp.hasTask(name);
mount, config));
watch);
enumerable: true
true
return pluginObj.constructor[methodName] !== undefined;
return Observable.fromEvent(element, event);
error);
else {
return Promise.all(functions.map((fn: any) => {
`<STR_LIT>`,
commonjs(),
main: true,
onwarn: () => {
globals: {
let.forEach(function (file) {
button.classList.contains(className);
number[] | PromiseLike<number[]> = [];
resolve(data);
const input: TextInput = {
elementRef, renderer, dom, null);
return node;
nested++;
LABEL_ATTRIBUTE, label);
ARIA_DISABLE_ATTRIBUTE, '<STR_LIT>');
'<STR_LIT>');
number = parseInt(indexStr, <NUM_LIT>);
if
ev.type === '<STR_LIT>';
'<STR_LIT>' + CLS.swipe)) {
if
ev.defaultPrevented) {
if (var i = <NUM_LIT>; i < s._slides.length; i++) {
<NUM_LIT>] === '<STR_LIT>') {
<NUM_LIT>] - (s._slidesGrid[i + <NUM_LIT>] - s._slidesGrid[i]) / <NUM_LIT>) {
activeIndex) {
slidesedSlides - s.currentPage) / <NUM_LIT>) : <NUM_LIT>;
i);
sSTR_LIT>';
CLS
percent: number = s._duration;
looping = false;
progress = Math.min(translatesDiff, <NUM_LIT>);
emit();
if (typeof speed === '<STR_LIT>')
if (slideIndex >= s._snapIndex) {
el = plt.getElement(slideIndex);
plt);
plt, speed);
false;
translate);
setWrapperTranslate(s, plt, translate);
ionSlideTransitionEnd.emit(s);
ele.previousSibling) !== null) {
direction === '<STR_LIT>';
ele.style;
unReg();
gesture.slide, "<STR_LIT>");
return src;
if (Array.isArray(value)) {
resolve(data);
expectedHeight = Math.ceil(totalRecords / lastCell.size);
return newHeight;
i].nodeType === <NUM_LIT>) {
nodes[i];
data.height;
right = bounds.left + cell.width;
arguments);
forEach(iterator, context);
call(context, obj[i], i, obj);
}
clientY)
pointersLength) {
INPUT_END | INPUT_CANCEL)) {
target.id] = true;
targetIds: any = {
identifier] = true;
if (type === INPUT_END) {
return [];
options = options || {
null;
enable();
this.element = element;
item[<NUM_LIT>])(item[<NUM_LIT>]));
pointerWin;
evWin = SINGLE_TOUCH_WINDOW_EVENTS;
arguments);
handler = bindFn(this.handler, this);
random() * maxAngle) - maxAngle;
PROVIDERS_KEY, platformLocationStrategy);
segment.id = navId;
navLinks);
id: navLink.id,
navLink),
year, d1.month, d1.day);
month, data.day, data.hour, data.minute);
month === <NUM_LIT> ? <NUM_LIT> : <NUM_LIT>);
'<STR_LIT>')).slice(-<NUM_LIT>);
FORMAT_DDDD) {
e) {
FORMAT_A) {
return '<STR_LIT>';
format === FORMAT_hh) {
return {
length > <NUM_LIT>) {
pageY };
mockConfig();
c.platform = platform;
content = new Content();
MockRenderer();
platform);
if
loadChildren));
config);
repeat-- > <NUM_LIT>) {
if (Array.isArray(rules)) {
win, rules, callback);
const(dynamicImportTest);
docScripts.push(x);
type === '<STR_LIT>') {
false;
return true;
document) {
return true;
set(rootElm, true);
domApi.$createElement(srVNodeId);
domApi, elm.childNodes[j], ssrVNode);
Diagnostics: new Diagnostics(),
any = jsdom.JSDOM.fragment(html);
new TestingSystem();
node.childNodes[i]);
precision <= <NUM_LIT>) {
test(new Date(obj).toString());
obj !== null;
if (parentModule) {
type,
"<STR_LIT>" });
"<STR_LIT>",
game) {
action);
true;
});
if (canBeBought) {
downloadKey));
key];
else if (colType === Column.JSON) {
Column.DateTime) {
anyType = columns[key];
keys(newFields);
switch (type) {
return newValue ? <NUM_LIT> : <NUM_LIT>;
if (!table) {
info(`<STR_LIT>`);
getDB()
case Column.Float:
Column.DateTime:
return "<STR_LIT>";
AND);
commons.caves.length > <NUM_LIT>) {
}
else {
Date(time).toISOString();
file);
return process.versions[key];
if '<STR_LIT>';
release();
const parsed = urlParser.parse(url);
return Reflect.getMetadata(INJECT_PATH, name);
getPlatform(),
process.arch === "<STR_LIT>";
renamedMenuItem(payload.id) });
case "<STR_LIT>":
return {
actions.openUrl({
case "<STR_LIT>":
"<STR_LIT>" });
openUrl({
node;
node.type === "<STR_LIT>") {
IMenuAction = {
node.submenu) {
detail: ["<STR_LIT>"],
id: "<STR_LIT>",
widgetParams: null,
keys(items).length;
downloads: {
number = numDbItems - numItems;
return;
return {
await installFolderExists()) && seed < <NUM_LIT>) {
button: IModalButtonSpec;
description || "<STR_LIT>" },
actionOption.type],
modalButton("<STR_LIT>", {
buttons,
lang).replace(/\\/g, '<STR_LIT>');
return;
{
JSON.parse(contents);
e.code !== "<STR_LIT>") {
else {
const
Logger = opts.logger;
cave = db.caves.findOneById(caveId);
new Error(`<STR_LIT>`);
store.dispatch(actions.queueLaunchStarted({
gameId,
cave, game, runtime, logger);
errorMessage: string;
store.dispatch(actions.statusMessage({
t(e);
message: errorMessage },
},
label: ["<STR_LIT>"],
where(equalTerm)
all())
const {
queueCaveUninstall(watcher, db);
watcher, db);
store.getState().preferences;
fetchGame(gameId);
catch (e) {
db => {
uninstall(ctx), shortcut.uninstall(ctx)]);
return await butler(opts, "<STR_LIT>", []);
const {
opts;
string[] = [];
path];
opts;
opts = {
val.path);
os.platform() === "<STR_LIT>" ? "<STR_LIT>" : "<STR_LIT>";
return (!hasTaggedPlatform) {
if (second) {
'<STR_LIT>') {
const item = items[i];
hooks = [];
property);
EventSourceActiveWheel.eventSource, handler, capture);
capture);
eventSource, handler, capture);
handler, capture);
createEventHandler<SyntheticDragEvent>(EventSourceDrop.eventSource, handler, capture);
capture);
return createEventHandler<SyntheticKeyboardEvent>(EventSourceKeyUp.eventSource, handler, capture);
createEventHandler<SyntheticNativeEvent<Event>>(EventSourceLoadedMetadata.eventSource, handler, capture);
eventSource, handler, capture);
capture);
EventSourcePointerLeave.eventSource, handler, capture);
return createEventHandler<SyntheticNativeEvent<Event>>(EventSourceTimeUpdate.eventSource, handler, capture);
else {
handler);
return ((flags & NativeEventSourceFlags.Passive) !== <NUM_LIT>) {
GestureArenaFlags.PrimaryPointerReleased;
undefined ? <NUM_LIT> : flags) |
if (item.id === id) {
if (item.id === id) {
const.push({
id === id) {
if {
estimate === null) {
<NUM_LIT>) & INDEX_MASK;
offset };
VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
className === undefined ? null : className, null);
null);
className, null);
null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
null);
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
null);
VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
className === undefined ? null : className, null);
null);
null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
null : className, null);
undefined ? null : className, null);
null);
className === undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Text, null, null, null, content);
className, null);
null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
Element | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
<NUM_LIT>];
operand, v.y / operand);
y };
vec2(v.x * operand, v.y * operand);
lhs.x - rhs.x, lhs.y - rhs.y);
nextPath === path) {
pathname);
StoppedPropagation)) === <NUM_LIT>) {
ev.preventDefault();
Read;
task);
_flags |= SchedulerFlags.MicrotaskPending;
TaskPending;
if fn.displayName || fn.name || '<STR_LIT>';
try {
return true;
AncestorFlags.All) !== <NUM_LIT>) {
result.push("<STR_LIT>");
push("<STR_LIT>");
Anchor) !== <NUM_LIT>) {
validChildren !== undefined) {
throw new Error(`<STR_LIT>`);
`<STR_LIT>` + REPORT_MSG);
<NUM_LIT>) {
_pushNestingState(childTagName);
toLowerCase();
if ((flags & VNodeFlags.Component) !== <NUM_LIT>) {
<NUM_LIT>) {
vnode;
VNodeFlags.Connect) !== <NUM_LIT>) {
type = ComponentStackFrameType.Connect;
}
ComponentStackFrameType.KeepAlive;
tag,
throw new Error(`<STR_LIT>`);
ComponentClass<any> = vnode._tag as ComponentClass<any>;
if {
ConnectData = vnode._tag as ConnectData;
<NUM_LIT>) {
vnode, context);
if
if ((bParentFlags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
b[i], context, syncFlags);
b as string;
);
as string;
else {
b as string;
textContent = "<STR_LIT>";
context, syncFlags);
{
bParentFlags & VNodeFlags.SvgElement) !== <NUM_LIT>);
syncFlags);
<NUM_LIT>; i < b.length; ++i) {
a.length; ++i) {
i < a.length; ++i) {
syncFlags);
syncFlags);
bParentFlags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
i;
if (next) {
vNodeRenderIntoAndAttach(parent, null, node, context, syncFlags);
syncFlags);
parent, null, b[i], context, syncFlags);
b, context, syncFlags);
isIOS) {
node, container);
<NUM_LIT>;
b[key]);
node, key);
const key = keys[i];
<NUM_LIT>) {
props as P | null;
return node._style;
return node._key;
VNodeFlags.Text) !== <NUM_LIT>;
null, "<STR_LIT>");
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null : className, null, "<STR_LIT>");
Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, "<STR_LIT>");
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, `<STR_LIT>`, null, className === undefined ? null : className, null, null);
null : className, null, null);
null, className === undefined ? null : className, null, null);
null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, null);
new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, null, null, content);
undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>");
undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
context) :
ChildrenArray) !== <NUM_LIT>) {
ChildrenArray) !== <NUM_LIT>) {
children.length = <NUM_LIT>;
BlueprintNode(childrenInstances, flags);
props);
connect);
undefined && o.prototype.render !== undefined;
return s
oldProps, newProps)) {
if (value !== null) {
result += `<STR_LIT>`;
throw new Error("<STR_LIT>");
node._flags & VNodeFlags.Component) !== <NUM_LIT>);
flags & VNodeFlags.Element) !== <NUM_LIT>;
style(node._style !== null ?
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
className, null, "<STR_LIT>");
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
undefined ? null : className, null, "<STR_LIT>");
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
undefined ? null : className, null);
VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
_container);
n) === true) {
_resetTasks = [];
flags: <NUM_LIT>,
task);
_currentFrameStartTime;
requestNextFrame();
}
<NUM_LIT>;
SchedulerFlags.MicrotaskPending;
TaskPending;
split('<STR_LIT>')
source === eventSource) {
eventSource);
b._tag) {
props, b.props) === false) {
false) {
VNodeWrapper = wrapper.vnode;
number = <NUM_LIT>; i < children.length; i++) {
flags & VNodeFlags.Autofocused) !== <NUM_LIT>);
if ((flags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
<NUM_LIT>) {
children[i], context), visitor)) {
{
p1 as ComponentHooks<LifecycleTesterProps>,
{
id,
className, null);
undefined ? null : className, null);
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
"<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
null : className, null);
null : className, null);
null);
VNodeFlags.Element | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
null : className, null);
"<STR_LIT>", null, className === undefined ? null : className, null);
value;
node);
const func(node.left);
selections: mapOverAST(func, node.selections)
"<STR_LIT>": {
func({
"<STR_LIT>": {
case "<STR_LIT>": {
"<STR_LIT>": {
node);
func({
typetype.flags & TypeFlags.List) > <NUM_LIT>;
case "<STR_LIT>":
case "<STR_LIT>":
Contract = {
Operation[] = [];
map(toContractParameter);
type,
location.start;
"<STR_LIT>" +
errorMessage =
case '<STR_LIT>':
node;
Error("<STR_LIT>");
forEach(compile);
BugError("<STR_LIT>");
"<STR_LIT>": {
condition);
node;
"<STR_LIT>": {
type });
"<STR_LIT>": {
firstType, secondType);
throw new IvyTypeError("<STR_LIT>" +
firstType));
new IvyTypeError("<STR_LIT>" +
instanceof ArrayDecl) {
else {
type.name + '<STR_LIT>' +
map(typeToString).join('<STR_LIT>') + '<STR_LIT>';
return '<STR_LIT>' + str + '<STR_LIT>';
pipe);
if {
length);
catch (err) {
case '<STR_LIT>': return "<STR_LIT>";
if `<STR_LIT>`;
case '<STR_LIT>':
break;
elmType = new ElmTypeName('<STR_LIT>');
instanceof GraphQLUnionType) {
else if (type instanceof GraphQLNonNull) {
ElmTypeApp('<STR_LIT>', fields);
type);
textContent = message;
'<STR_LIT>';
const = queryString.trim();
<NUM_LIT>];
to;
StepInterface.PROMISE:
default:
setTimeout(cb, timeout);
return new Promise(resolve => setTimeout(resolve, timeout));
new ChildProcessReporter();
sceneFrom(event.value), event.timestamp);
event.timestamp);
pathToScript, args, options);
setTimeout(cb, timeout);
Promise(resolve => setTimeout(resolve, timeout));
parser = new HtmlParser();
FileReader();
if (newTabs != null) {
true });
k]);
else {
const later = () => {
timeout = setTimeout(later, wait);
target, initializeMethodName, {
Object
return `<STR_LIT>`;
getRandomString(identifierLength);
return `<STR_LIT>`;
const action = yield take(LOGIN_REQUEST);
token }: ShowLock = yield take(LOGIN_SUCCESS);
baseDir: '<STR_LIT>',
e) {
ex;
'<STR_LIT>',
if (!stat) {
return `<STR_LIT>`;
globs = argv.glob;
argv.globs = globs;
isNull()) {
return;
Stream, '<STR_LIT>'));
fileSettings, ['<STR_LIT>', '<STR_LIT>']);
fileSettings);
return;
fileSettings,
'<STR_LIT>': {
const lines = document.lines;
number = <NUM_LIT>;
lastIndentSize = document.lines.length;
lastLeadingSpacesLength = <NUM_LIT>;
document.lines.forEach((line) => {
document.lines.forEach((line: doc.Line): void => {
length;
softTabCount > <NUM_LIT>) {
floor( softTabCount / indentSize);
tab;
return line;
number: options.number || <NUM_LIT>,
locals),
proxy = new Proxy({
for (const key of allKeys) {
prop;
locals[name];
keys() {
true,
register({
join(__dirname, '<STR_LIT>')
trim());
err;
return await fn();
text);
Promise.resolve(null)),
Promise.resolve(packageFile)),
name: '<STR_LIT>',
'<STR_LIT>': '<STR_LIT>'
'<STR_LIT>'
seen.indexOf(s) === -<NUM_LIT>) {
end);
clear();
escapeRegExpPattern, '<STR_LIT>');
pathToNodeModules = join(pluginSettings.rootPath, relativePathToNodeModules);
return normalize(join(cliPath, '<STR_LIT>'));
return paths[i];
isTypeScriptRegex);
return {
mock.mock('<STR_LIT>', () => {
keyframes([
style({
style({
offset: <NUM_LIT>,
string[] = [];
else {
index)] < queue[index];
cuts = bestFirstCuts;
let (let i = <NUM_LIT>; i < length; i++) {
else {
cutPrice;
length] = maxCutPrice;
rightMost !== null) {
undefined, createNode(<NUM_LIT>, createNode(<NUM_LIT>)))), createNode(<NUM_LIT>, createNode(<NUM_LIT>), createNode(<NUM_LIT>)));
let
<NUM_LIT>];
buildStatusItem.text = '<STR_LIT>';
addr,
data.line, <NUM_LIT>),
data.value,
};
data.expression,
return process.env['<STR_LIT>'] || '<STR_LIT>';
"<STR_LIT>":
"<STR_LIT>":
case "<STR_LIT>":
case "<STR_LIT>":
case "<STR_LIT>":
"<STR_LIT>":
Variable;
case "<STR_LIT>":
Variable;
"<STR_LIT>":
"<STR_LIT>":
server.skProtocolProcessAsShellCmd;
sourcekiteInitialized === false) {
case '<STR_LIT>':
position) {
};
findNonVoidReturnInCurrentScope(returnNode.getChildren()[<NUM_LIT>]);
ts.SyntaxKind.FunctionExpression) {
returnNode) {
timeout);
observer: any) {
observer.observe(found, {
document.body, {
installingWorker);
break;
case '<STR_LIT>':
createInvalidNode(node)] }
invalidNodes.length) {
myInvalidNodes = myInvalidNodes.concat(...invalidCheckNodes);
node.kind === ts.SyntaxKind.FunctionExpression)) {
key];
describe("<STR_LIT>", function () {
for(nfeContainer);
store),
ActionTypes.ADD_QUOTE,
case Actions.TOGGLE_BUILTIN_QUOTES:
true) {
if (!token) {
console.push(undefined);
indexOf(v) === -<NUM_LIT>);
obj) {
obj.toJSON();
for (let i = <NUM_LIT>; i < obj.length; i++) {
obj = obj[i];
value.path);
value) {
obj[key]) {
if (value) {
if (!is_cloned) {
obj = obj.slice();
key] = new_value;
Math.floor(Math.random() * (Date.now() - <NUM_LIT>)) + '<STR_LIT>';
push(unpack_models(sub_value, manager));
unpacked);
unpack_models(value[key], manager);
log) {
element.textContent = text;
'<STR_LIT>',
manager = htmlmanager.get();
if (!failedId) {
'<STR_LIT>';
return true;
callBack);
<NUM_LIT>, index2);
return rootItem;
return {
else {
null) {
}
keyNames.length; i++) {
if (tempInfo != null) {
var = new vscode.Position(<NUM_LIT>, <NUM_LIT>);
position));
var token = lpt.Read();
EOF) {
isValidToken(token)) {
endCount === <NUM_LIT>) {
token, token, TokenTypes.Keyword)) {
if (!mimeType) {
any = path.join(projectRoot, '<STR_LIT>', '<STR_LIT>', dirName);
fs.removeSync(destination);
Error(`<STR_LIT>`);
return '<STR_LIT>';
Error(`<STR_LIT>`);
null) {
case '<STR_LIT>':
p.startsWith('<STR_LIT>'));
tab.id;
const (frameId != null) {
}
kee.loginEditor(msg.loginEditor);
dataUrl.indexOf("<STR_LIT>") + <NUM_LIT>);
saveData.newLoginUUID);
item: persistentViewItem): boolean => item.itemType == "<STR_LIT>");
host);
android.net.NetworkAuth();
return kfl;
document.getElementById("<STR_LIT>")).focus();
preventDefault();
e.preventDefault();
preventDefault();
e.preventDefault();
ifBox.checked = enabled;
"<STR_LIT>";
searchTerm;
document.getElementById("<STR_LIT>").style.display = "<STR_LIT>";
"<STR_LIT>";
constSite(resultIndex);
isValid = false;
else {
constSTR_LIT>").click((): void => localStorage.setItem("<STR_LIT>", "<STR_LIT>"));
statusBar.hide();
if (idx === <NUM_LIT>) {
`<STR_LIT>`;
return;
showInformationMessage('<STR_LIT>');
if (!wordRange) {
region.end.line - <NUM_LIT>, issue.region.end.column - <NUM_LIT>);
detector.dispose();
if (writeToRepl) {
clear();
actual = stdout.trim();
undefined;
forEach(key => {
F_OK);
return
baseDir = newBaseDir;
<NUM_LIT>];
headings.push({
promise: Q.Promise<RepoEntity[]>;
yield fork(function* () {
notifications('<STR_LIT>');
Range = selectionRange(sel);
subscription) {
null) {
}
c);
EnabledMounting;
microtasks = [];
}
SchedulerFlags.EnabledMounting;
if ((vnode._flags & VNodeFlags.Component) !== <NUM_LIT>) {
VNodeDebugFlags.Attached)) !== <NUM_LIT>) {
VNodeDebugFlags.Disposed;
vnode._flags & VNodeFlags.Component) !== <NUM_LIT>) {
vnode._children !== null) {
appendChild(newNode);
refNode.flags & VNodeFlags.Element) !== <NUM_LIT>) {
ref!);
return Math.floor(Math.random() * (max - min + <NUM_LIT>)) + min;
bx);
children(bx).disableChildrenShapeError();
const bDiv: HTMLDivElement = document.createElement("<STR_LIT>");
cref!.state;
erc20Approve(mainnetEosAddr, order2Owner, delegateAddr, <NUM_LIT>, <NUM_LIT>);
at(tokenAddr);
args.Swagger) {
host = args.host;
args. basePath);
return
return; };
const dataType = tags[<NUM_LIT>].toLowerCase();
case '<STR_LIT>':
for (let i = <NUM_LIT>; i < validators.length; i++) {
errorMsg;
message = validators.isDouble.errorMsg;
number = parseFloat(String(value));
validators.minimum.value) {
validators.maximum.value) {
if (!tags) {
path !== '<STR_LIT>') {
normalised;
match(/\"/g) || []).length;
convertStatelessFunctionToArrowFunction(statelessFunc);
propAssignmentStatement = propTypeAssignment as ts.ExpressionStatement;
newSourceFile = funcComponent;
'<STR_LIT>',
'<STR_LIT>',
'<STR_LIT>': '<STR_LIT>'
'<STR_LIT>': '<STR_LIT>',
'<STR_LIT>',
update(data).digest('<STR_LIT>');
resolve(obj);
undefined);
o !== undefined;
return process.hrtime();
day: endOfDay,
day: startOfDay,
return new ConfirmationPopoverOptions(userOptions);
string;
SaveType.NEW_SRC:
join(dirname, savePath));
session;
state);
}
name
return provide(identifier).done();
<NUM_LIT>, <NUM_LIT>]
Ns: '<STR_LIT>',
Repository
{
imports: [FormsModule],
it('<STR_LIT>', (done) => {
nativeElement;
RouterTestingModule],
RouterComponent,
then(() => {
test(d.src))
listen();
error += '<STR_LIT>';
let high: number = array.length - <NUM_LIT>;
midValue, value)) {
if lineStarts[line] + character;
languageServiceHost.getLineAndCharacterOfPosition(sourceFile, position);
switch (code) {
return (error as any)[ERROR_TOKEN];
TAB) {
chars.$RPAREN:
default:
delimiters) > <NUM_LIT>;
case chars.$COMMA:
return COLON_DELIM_FLAG;
case chars.$LBRACE:
chars.$SPACE:
chars.$TILDA:
return expr && expr.kind === kinds.ArrayLiteralExpression;
expr.expression && expr.expression.kind === ts.SyntaxKind.CallExpression;
directory, ruleName);
error)(...values);
error as any)[ERROR_DEBUG_CONTEXT];
return type;
mixingMultiProvidersError(provider1, provider2));
push('<STR_LIT>');
'<STR_LIT>' +
keys[<NUM_LIT>].token);
throw new Error(`<STR_LIT>`);
length; j++) {
else {
provider.useClass);
else {
provider.multi || false);
Object.create(clsDef.extends);
else {
'<STR_LIT>') {
if (Array.isArray(t)) {
src)).map((dep: import("<STR_LIT>").InjectableDependency): string => dep.src);
DEPENDENCIES
files,
Config.CSS_PROD_BUNDLE));
const server = express();
Config.getProxy()) {
x, <NUM_LIT>);
bold(message));
listen(<NUM_LIT>);
result.push({
file, '<STR_LIT>')
{
case Models.Side.Bid: return "<STR_LIT>";
pxStr);
split.length !== <NUM_LIT>) {
ceil(x / minTick) * minTick;
getConfiguration("<STR_LIT>");
token.username || !config.token.password) {
"<STR_LIT>": "<STR_LIT>",
commands.registerCommand("<STR_LIT>", () => {
openNoteInBrowser);
push(openDevPageCmd);
searchNoteCmd);
if
return;
forEach(res => {
init();
note = editor.document.getText();
placeHolder: '<STR_LIT>',
return;
string = null;
mime,
mime,
fileName] = cache[fileName] || [];
await
new Error('<STR_LIT>');
if (!noteLists) {
map(note => {
selectedNote);
Guid;
}
vscode.window.showQuickPick( chooseNote);
event.data.id] = undefined;
"<STR_LIT>";
"<STR_LIT>";
x, x, <NUM_LIT>),
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
return new NumberResultTuple(value, value);
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
<NUM_LIT>; ++i) {
trueValue;
outer_block: {
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
<NUM_LIT>) {
result += i;
while (i < <NUM_LIT>) {
getOwnPropertyNames(CodeGenerationContextMixin.prototype).forEach(name => {
PercentEqualsToken;
SyntaxKind.CommaEqualsToken ||
return '<STR_LIT>';
"<STR_LIT>";
type.flags & ts.TypeFlags.StringLike) {
return unionType = type as ts.UnionType;
parameter.type) {
values.push(argumentValue);
parameters,
sourceFile,
return typeChecker.getTypeAtLocation(declaration);
if input
true;
declaration.kind === ts.SyntaxKind.FunctionDeclaration
CodeGenerationDiagnostics.optionalEntryFunctionNotSupported(fun);
return (context: ts.TransformationContext) => {
return useCaseSensitiveFileNames
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>];
int[] = [];
<NUM_LIT>, <NUM_LIT>];
"<STR_LIT>";
<NUM_LIT>;
number = <NUM_LIT>;
number = <NUM_LIT>;
number = <NUM_LIT>;
<NUM_LIT>;
"<STR_LIT>";
intProduct: number = <NUM_LIT>;
"<STR_LIT>";
<NUM_LIT>) {
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
Test();
for (let i = <NUM_LIT>; i < <NUM_LIT>; ++i) {
"<STR_LIT>";
return true;
a < b) {
undefined;
return arg;
"<STR_LIT>";
result = -<NUM_LIT>;
<NUM_LIT>;
"<STR_LIT>";
intValue = <NUM_LIT>;
"<STR_LIT>";
for (let i = <NUM_LIT>; i < tour.length - <NUM_LIT>; i += <NUM_LIT>) {
Point.Zero, <NUM_LIT>),
Point.PI * <NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
"<STR_LIT>";
while (i < <NUM_LIT>) {
keys(attributes).forEach(key => {
d = `<STR_LIT>`;
return index < <NUM_LIT> ? null : arr[index];
if (!matches) {
`<STR_LIT>`;
`<STR_LIT>`;
if (typeof input === '<STR_LIT>') {
element, css);
newElement<SVGGElement>("<STR_LIT>", {
newElement<SVGRectElement>("<STR_LIT>", {
className, {
const title = document.createElement('<STR_LIT>');
return makeLegendInternal();
output.push({
title: "<STR_LIT>",
url: entry.url,
description: "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
output.push({
<NUM_LIT>] : harData) as Log;
"<STR_LIT>",
x: <NUM_LIT>,
y,
string = indicators[<NUM_LIT>].title;
i.type !== "<STR_LIT>");
}
push(pluralize("<STR_LIT>", warnings.length) + "<STR_LIT>" + warnings.map((w: import("<STR_LIT>").WaterfallEntryIndicator): string => w.title).join("<STR_LIT>"));
icon = "<STR_LIT>";
height,
const rectY: string = misc.roundNumber(rectData.y / rectData.unit) + "<STR_LIT>";
rectHeight,
x: rectX,
holder.appendChild(makeLabel(rectData.label));
foreignElLazy = svg.newG("<STR_LIT>");
if (showDelayTimeOut) {
targetRect, "<STR_LIT>");
"<STR_LIT>";
endline.x3.baseVal.valueAsString = xPosStart;
};
SVGRectElement = evt.target as SVGRectElement;
number = Math.ceil(durationMs / <NUM_LIT>) * <NUM_LIT>;
secValue, isMarkerStep);
holder.appendChild(svg.newRect({
showAppSettings();
activeBotId;
else {
add(Severity.debug, message, ...args);
message, ...args);
ParsedArgs = minimist(process.argv, options);
}
conversationID].push(activity);
result) => {
logMessage += "<STR_LIT>";
}
command.appName)
null;
else {
isFile();
false;
'<STR_LIT>') {
Error(`<STR_LIT>`);
plistFile: string = path.resolve(projectName, command.plistFilePrefix);
string[] = [
e) {
isValidVersion(parsedPlist.version)) {
version) {
buildGradlePath) {
Q("<STR_LIT>");
"<STR_LIT>") {
versionName === "<STR_LIT>") {
{
appVersion);
appPath, propertyName),
one
throw new Error(`<STR_LIT>`);
propertyName: string = "<STR_LIT>";
appxManifest: any = fs.readFileSync(appxManifestFileName).toString();
then(Authenticated => {
else {
headers = ["<STR_LIT>"];
push("<STR_LIT>");
forEach(deployment => {
row.push("<STR_LIT>");
buildKey: command.aiKey,
then((): void => {
getSpaces()
case "<STR_LIT>":
demand( <NUM_LIT>, <NUM_LIT>)
USAGE_PREFIX + "<STR_LIT>" + commandName + "<STR_LIT>")
'<STR_LIT>') : content;
floor(new Date().getTime() + Math.random() * <NUM_LIT>)).toString();
eventData,
createEvent('<STR_LIT>');
number = findIndex(predicate, xs);
"<STR_LIT>",
return drives.filter(d => {
return false;
path.join(__dirname, '<STR_LIT>'));
postArguments == "<STR_LIT>") {
console.log(str));
dat == null)
then((resp: any): void => {
flags["<STR_LIT>"]) {
"<STR_LIT>",
"<STR_LIT>": "<STR_LIT>",
"<STR_LIT>": "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>": "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>": "<STR_LIT>",
p)
resolve();
app.getPath("<STR_LIT>"), "<STR_LIT>");
fs.existsSync(p)) {
{
console.log("<STR_LIT>" + msg);
<NUM_LIT>];
lineNumber, brkMatch.columnNumber).join("<STR_LIT>"));
if (!pkgDir) {
if (tsFiles.length === <NUM_LIT>) {
output = parsed.flags["<STR_LIT>"];
fileMode) {
getTopLevelFiles()
let output: any = JSON.parse(input);
null) {
err: any) => {
f);
console.log("<STR_LIT>");
snippets.push({
index++;
throw new Error("<STR_LIT>");
args, preApply));
uf2buf);
return path.join(process.env["<STR_LIT>"] || process.env["<STR_LIT>"], "<STR_LIT>");
msg);
console.log(`<STR_LIT>`);
msg);
return usage("<STR_LIT>");
error("<STR_LIT>");
resolve();
string = path.join(targetDir, "<STR_LIT>");
log(`<STR_LIT>`);
CompileType.Native) {
pxt.log(`<STR_LIT>`);
log(`<STR_LIT>`);
<NUM_LIT>]) {
else {
pxt.appTarget.id, account, password);
data)
return pxt.appTarget.id == "<STR_LIT>" ?
saveConfigWithKey();
opts;
log(res.errorMessage);
});
buildDir = parsed.flags["<STR_LIT>"];
ghpages) {
process();
license)) {
exec(readme);
dependencies)) {
`<STR_LIT>`;
label,
str + char;
browserPath = "<STR_LIT>";
"<STR_LIT>":
case "<STR_LIT>":
"<STR_LIT>";
browserPath = "<STR_LIT>";
fn, '<STR_LIT>'));
args);
false;
t2s(t0) + "<STR_LIT>" + t2s(t1) + "<STR_LIT>";
find(t.union);
if (v)
par.fields && par.fields[n])
null;
n: n,
}
let (nn.name)
v as py.Call).args.length == <NUM_LIT>;
if (v)
while (s);
n.length == <NUM_LIT>)
return;
appTarget.serial.log.enabled) {
serial = pxt.appTarget.serial;
e) {
log("<STR_LIT>");
port);
port: info.comName,
info);
info: SerialPortInfo): boolean {
productFilter == parseInt(info.productId, <NUM_LIT>));
string = null;
return;
resolve();
string = m[<NUM_LIT>];
kind: "<STR_LIT>" };
uri: parts[<NUM_LIT>] };
false, msg);
lf("<STR_LIT>"));
<NUM_LIT>);
if (!AudioContext) {
return fetchTextAsync(e)
e) => e.id == id)[<NUM_LIT>];
resp);
`<STR_LIT>`;
lf("<STR_LIT>"),
pxt.tickEvent(`<STR_LIT>`);
new Promise((resolve, reject) => {
err = new Error(v.message);
else {
Promise.resolve();
resolve(cachedBlocks)
true).css('<STR_LIT>', '<STR_LIT>');
let new Promise<unknown>((resolve, reject) => {
undefined);
actionList;
main src = `<STR_LIT>`;
return
flatClone(e.text);
map(h => h.header);
if (!e)
targetDone = false;
filter(e => e.id == id)[<NUM_LIT>];
pkg => {
Serial.connected) {
appTarget.serial) {
onOOB(v);
if = {
return newOne;
return getEditorPackage(mainPkg);
pxt.appTarget.simulator.invalidatedClass;
type: "<STR_LIT>",
editor = editor;
translations;
return;
if (!isShown) {
brk) {
name));
SimulatorState.Running) {
state == pxsim.SimulatorState.Running) {
`<STR_LIT>`);
break;
sv = "<STR_LIT>";
type == "<STR_LIT>")
throw
frameView;
vars("<STR_LIT>", brk));
on("<STR_LIT>", (e: any) => {
checkSession();
origCallback.call(this);
new Error('<STR_LIT>'));
function (this: FocusableComponentInternal, origCallback: Function) {
if
origCallback.call(this);
if (this[methodName] === undefined) {
origCallback) {
function () {
duration: number = <NUM_LIT>;
property;
undefined ? <NUM_LIT> : transition.delay;
delay;
done();
longestDurationProperty, onTransitionEnd);
() => {
timeoutId);
element.dataset['<STR_LIT>'];
finish, longestDurationPlusDelay);
value;
existingMethod;
getText());
spyRefCount === <NUM_LIT>) {
decorated
originalThen;
currentAction;
prototype && target.prototype.isReactComponent;
strDeps + '<STR_LIT>' + factory + '<STR_LIT>';
number = value.charCodeAt(i);
break;
case '<STR_LIT>':
'<STR_LIT>':
result.push('<STR_LIT>');
ch);
any = JSON.parse(file.contents.toString());
file, json, this);
file.isBuffer()) {
FILE_FAILED, `<STR_LIT>`);
lower,
<NUM_LIT>;
if (lines.length > <NUM_LIT>) {
return;
return;
return node && node.kind === ts.SyntaxKind.StringLiteral;
match) {
log(util.colors.cyan('<STR_LIT>'), message, ...rest);
c()));
err);
log(`<STR_LIT>`);
log(e);
'<STR_LIT>');
app.getPath("<STR_LIT>"), "<STR_LIT>");
position));
'<STR_LIT>',
as string, onLookup))
err;
vs = new Git(config);
if (choice === '<STR_LIT>') {
case Operation.GetCommitTemplate:
Operation.CheckIgnore:
ref,
disposables));
e)) {
didRun) {
numberHash(b ? <NUM_LIT> : <NUM_LIT>, initialHashVal);
if (!contributes) {
return
(<Prefix.length);
args);
args);
BuildTaskUpload(args);
if (!maxProp) {
partName.substr(<NUM_LIT>);
args);
return new Reset(args);
exists) => {
exists) {
commandModulePath, "<STR_LIT>");
if (exists) {
throw e;
promise, wait(delayMs)]))[<NUM_LIT>];
log("<STR_LIT>", msg, colors.bgRed, replacements);
colors.green, replacements);
if (color) {
join(common.APP_ROOT, "<STR_LIT>"));
functionName);
return `<STR_LIT>`;
return `<STR_LIT>`;
`<STR_LIT>`;
case '<STR_LIT>':
return `<STR_LIT>`;
return '<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
typeAttribute) {
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
code, ts.ScriptTarget.ES2015, true);
Error('<STR_LIT>');
ts.SyntaxKind.JsxAttribute;
SyntaxKind.JsxSelfClosingElement;
return;
boardid: boardid,
boardid,
image);
new Sphere(new Vector(-<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), <NUM_LIT>, Surfaces.shiny)],
new Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) }],
AppDispatcher.dispatch(new NewGreetingChanged(newGreeting));
const (visiblelen < len)
ts.SyntaxKind.ParenthesizedExpression;
await detectChanges(options);
string[] = await allNpmPackages();
await writeDataFile("<STR_LIT>", allTyped);
in obj) {
sort((a, b) => {
push(`<STR_LIT>`);
link => `<STR_LIT>`));
blobPrefix) + <NUM_LIT>);
filename);
for (const file of ls) {
const hash = await Promise.all([
fetcher);
startsWith('<STR_LIT>')) {
`<STR_LIT>`);
SyntaxKind.ImportDeclaration:
true;
string = dirname(full);
any[] = [];
isPrerelease);
if (!semver) {
alpha[<NUM_LIT>]);
else {
return true;
log.error(`<STR_LIT>`);
data);
if (dry) {
detailedLog);
typesPath = path.join(options.typesPath, packageName);
await (const packageName of packageNames) {
workerProcesses,
constings[packageName] = data;
description: "<STR_LIT>",
npmPath)).trim();
parts;
subDirName === "<STR_LIT>") {
if (!majorVersion) {
if (!versions) {
dep.majorVersion);
await new Error(`<STR_LIT>`);
`<STR_LIT>`;
"<STR_LIT>"
writeProcesses > <NUM_LIT>
return {
new Promise<string>((resolve, reject) => {
push(text);
body += data.toString();
path, content, {
... infos, ...errors]) : infos;
await new Promise((resolve, reject) => {
output = zlib.createGunzip();
resolve, reject) => {
moment().format("<STR_LIT>");
i < length; i++) {
comparer);
log.error(`<STR_LIT>`);
return true;
log.stripIndent `<STR_LIT>`);
validatePackageJson(packageDirectory);
true;
e.stack);
resolveSysLib.resolveArduinoPath();
"<STR_LIT>"));
await pathExistsSync(pathString)) {
catch (e) {
number.toString(<NUM_LIT>), width, "<STR_LIT>");
number = <NUM_LIT>;
fs.openSync(src, "<STR_LIT>");
filter(function (file) {
if (directoryExistsSync(dirname)) {
else {
for (const line of lines) {
trim();
set(key, value);
return arduinoPath;
prototype.toString.call(item) === '<STR_LIT>');
traceError(errorCode, error, {
telemetry: true });
undefined) {
return {
type: EXAMPLES_FAILURE,
EXAMPLES_SUCCESS,
librariesSuccess(libraries));
if (callback) {
type: INSTALLED_BOARDS_FAILURE,
return {
type: INSTALLED_BOARDS_SUCCESS,
return {
state,
selectedBoard: action.payload.boardName,
item) => {
[selectedBoard],
"<STR_LIT>",
CONFIGITEMS_REQUEST:
action.configitems,
return {
true,
BOARD_PACKAGES_REQUEST:
platforms.forEach((element: any): void => {
INSTALL_BOARD_SUCCESS:
return {
boardName,
uninstallingBoardName: "<STR_LIT>",
actions.UNINSTALL_BOARD_FAILURE:
'<STR_LIT>',
let key in messages) {
new File({
then(parsed => {
innoSetupConfig);
function () {
let
'<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';
else {
status('<STR_LIT>', new Error(`<STR_LIT>`)));
if (!source) {
root) {
emit('<STR_LIT>', new Error(`<STR_LIT>`));
gulpUtil.colors.cyan('<STR_LIT>' + prefix + '<STR_LIT>'), message);
init({
include
push(err);
errors.length > <NUM_LIT>;
errors.length = <NUM_LIT>;
onEnd();
return;
return;
toGlob('<STR_LIT>')];
includeGlobs)));
split(/[\/\\]/);
end);
'<STR_LIT>');
sourceFile;
SRC, moduleId);
cp.execSync(`<STR_LIT>`);
Promise((resolve, reject) => {
dir({
console.log('<STR_LIT>', '<STR_LIT>');
console.log('<STR_LIT>', '<STR_LIT>');
colors.underline.white("<STR_LIT>"));
push(vscode.commands.registerCommand('<STR_LIT>', (): any => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));
name: project.name });
selectProject()
stdout.on("<STR_LIT>", (data: any) => {
deferred.resolve(exitCode);
deferred.resolve();
`<STR_LIT>`;
if (initialized) {
return.logLanguageServerEvent("<STR_LIT>");
realActivation();
languageId === "<STR_LIT>") {
onActivationEvent();
}
disposables.push(vscode.commands.registerCommand('<STR_LIT>', onOpenConfiguration));
vscode.commands.registerCommand('<STR_LIT>', onShowReleaseNotesWithDetails));
key) {
endPatterns: string[] = [];
vscode.OnEnterRule[] = [];
beginPatterns.push(r.begin);
begin);
true;
end);
insert.startsWith("<STR_LIT>")) {
return {
RegExp(beforePattern),
trimRight());
info.platformId);
setInstallationStage('<STR_LIT>');
"<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
return util.touchInstallLockFile();
dir).isDirectory();
dir);
return;
if (!disabledFolders.length) {
Window.showInformationMessage('<STR_LIT>');
if (folders.length > <NUM_LIT>) {
get('<STR_LIT>', true);
return true;
null;
undefined;
as ESLintError;
string(error.message)) {
tracer.log(message, verbose);
return {
tooltip: string;
any = workspace.workspaceFolders[<NUM_LIT>];
`<STR_LIT>`;
'<STR_LIT>'], {
Latest, true);
SyntaxKind.TaggedTemplateExpression) {
toLowerCase() !== '<STR_LIT>') {
position = offset + template.template.pos;
rootPath + '<STR_LIT>', () => {
node: any): any => vscode.window.showInformationMessage('<STR_LIT>'));
Position(line, char), new Position(line, char));
char + '<STR_LIT>',Motion, {
'<STR_LIT>' + char : char;
edit.insert(vscode.workspace.rootPath, "<STR_LIT>");
offset + length;
length: number): void {
positionAt(lastEndOfSomething);
vscode.CompletionItemKind.Value;
if (!request) {
pendingValidationRequests[textDocument.uri] = setTimeout(() => {
end.isEqual(nodeToBalance.end)
close) {
end)) {
max(emptyAttrIndex, emptyTagIndex);
else if (emptyTagIndex > -<NUM_LIT>) {
m = numString.match(/\.(\d+)$/)) {
'<STR_LIT>');
value => {
path.resolve(basePath, filePath));
else {
if (!startNodeToUpdate) {
string = '<STR_LIT>';
start).translate(<NUM_LIT>, <NUM_LIT>);
return;
return undefined;
startOffset.isBefore(currentNode.start)) {
singlePropertyValue) {
if (!completionPromise) {
assert.equal(<NUM_LIT>, <NUM_LIT>, `<STR_LIT>`);
CompletionItem = completionList.items[<NUM_LIT>];
writeFileSync(tmpFile, contents);
if false;
return url;
edits: TextEdit[] = [];
widthProp.value, <NUM_LIT>, widthProp.value + separator.length), TextEdit.replace(srcProp.name, '<STR_LIT>', before));
if (widthProp) {
else {
isBefore(position)
open.end.isBefore(position)
buffer);
let
syntax].hasOwnProperty('<STR_LIT>')) {
<NUM_LIT>],
path.join(__dirname, '<STR_LIT>'));
includeLanguagesConfig);
start)) {
else {
stats.isFile());
reason);
document, position, token) {
else if (/Repository not found/.test(stderr)) {
BadConfigFile;
return GitErrorCodes.CannotCreatePipe;
else {
return GitErrorCodes.NoRemoteRef;
Operation.GetCommitTemplate:
CheckIgnore:
originalStartLineNumber,
<NUM_LIT>) {
Range[] = [last];
return [merge, ...result];
, err => void(err));
args]);
didRun) {
detector.dispose();
file, (value) => {
if (match) {
'<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
b.range.end);
let endOffset: any = document.offsetAt(e.range.end);
return content.charCodeAt(offset) === <NUM_LIT>;
NL;
<NUM_LIT>) {
dispose();
if (name.indexOf(buildName) !== -<NUM_LIT>) {
url = schema.schema.id;
path.join(rootPath, url))).toString();
numberHash(b ? <NUM_LIT> : <NUM_LIT>, initialHashVal);
hashVal, <NUM_LIT>);
obj, hashVal);
obj, hashVal);
case '<STR_LIT>':
reduce((hashVal, key) => {
jsonDocument, documentSettings).then(diagnostics => {
return typeof value === '<STR_LIT>';
extension.exports.MarkdownIt) {
return {
context);
'<STR_LIT>');
packageManager).get('<STR_LIT>', true)) {
return `<STR_LIT>`;
if
script,
script.startsWith('<STR_LIT>') || script.startsWith('<STR_LIT>'));
plugins, commandManager, logDirectoryProvider);
typeof value !== '<STR_LIT>';
true,
experimentalDecorators = config.experimentalDecorators;
<NUM_LIT>;
writeFileSync(tmpFile, contents);
console.log(...args);
'<STR_LIT>' ?
localize('<STR_LIT>', "<STR_LIT>"));
showAllPkgsIfPkgNotFound) {
return
name: any = matches[<NUM_LIT>];
result: vscode.Diagnostic[] = [];
if (!goRuntimePath) {
Promise.resolve([]);
let {
ifPromise = Promise.resolve(true);
args.push('<STR_LIT>');
false,
show();
'<STR_LIT>';
fileUri, goConfig, goConfig['<STR_LIT>'] === '<STR_LIT>'));
if (!!goConfig['<STR_LIT>']) {
return [];
if
createReadStream(coverProfilePath),
on('<STR_LIT>');
if (!fileRange) {
<NUM_LIT>], <NUM_LIT>),
fileRange[<NUM_LIT>]) - <NUM_LIT>);
<NUM_LIT>]] = coverage;
resolve(coverage);
endsWith('<STR_LIT>')) {
if (found) {
reject('<STR_LIT>');
if (token) {
resolve, reject) => {
missingToolMsg + '<STR_LIT>');
lines);
if (!match) {
string = '<STR_LIT>';
'<STR_LIT>',
code === '<STR_LIT>') {
searchSignature) {
string = null;
process.platform === '<STR_LIT>') {
runtimePathFromGoRoot;
runtimePathCache = envPath;
let
statusBarEntry.text = message;
testEnvFile) {
string[] = [];
return telemtryReporter.dispose();
activeTextEditor.document.uri).uri;
workspace = vscode.workspace.Workspace.fromUri(workspaceUri);
replace(/\\/g, '<STR_LIT>') : '<STR_LIT>';
currentFilePath;
match(preludeRegExp);
start: i, end: -<NUM_LIT> });
target[key] = {
return toString.call(value) === '<STR_LIT>';
result = child_process.execSync(`<STR_LIT>`, {
cwd;
err) {
toString.call(value) === '<STR_LIT>';
return toString.call(value) === '<STR_LIT>';
if (tracer) {
return typeof value !== '<STR_LIT>';
toString.call(value) === '<STR_LIT>';
return value && typeof value.then === '<STR_LIT>';
`<STR_LIT>`;
password) {
<NUM_LIT>;
false;
text = (<IConnectionProfile>creds).profileName;
else {
text, creds.database);
user);
length === <NUM_LIT>) {
index] : match;
str);
server
profileName === currentProfile.profileName;
showErrorMessage(Constants.extensionName + '<STR_LIT>' + msg);
object !== undefined && object !== null;
INSTANCE.onDidChangeZoomLevel(callback);
WindowManager.INSTANCE.setAccessibilitySupport(accessibilitySupport);
return !!element[MS_DATA_KEY];
minimumTimeMs);
innerWidth - parseFloat(cssPx);
preventDefault();
node;
createStyleSheet();
getMarginTop(element) + sizeUtils.getMarginBottom(element);
true;
parentFocusable.focus();
i = <NUM_LIT>; node && node.nodeType === node.ELEMENT_NODE; i++) {
e.preventDefault();
result.push(other[j++]);
one[i++]);
j++;
range.start) {
if (!intersection) {
intersection,
const before = target.slice(<NUM_LIT>, insertIndex);
array.filter((element: T, position: number): boolean => {
currentGroup = result;
compare);
array.splice(from, <NUM_LIT>)[<NUM_LIT>]);
const (compare(element, result[n - <NUM_LIT>]) < <NUM_LIT>) {
key];
push(element);
from, key)) {
elementAPrefixMatch = strings.startsWith(elementAName, lookFor);
elementBSuffixMatch) {
<NUM_LIT>) {
other.toLowerCase();
function (this: any, ...args: any[]) {
exception.stack || exception.stacktrace;
let (let i = position.length - <NUM_LIT>; i >= <NUM_LIT>; i--) {
ret.push(last);
return fuzzyScoreWithPermutations(pattern, word, true, patternMaxWhitespaceIgnore);
row.push(i);
push(thisRow);
code === CharCode.Tab
head.end === tail[<NUM_LIT>].start) {
head);
isWhitespace(c)) {
number = -<NUM_LIT>;
const basenames = basenamePatterns.map((parsedPattern: ParsedStringPattern | ParsedExpressionPattern): string[] => {
result) {
return patterns;
basename: string;
path);
data,
false;
newText, begin, end, formattingOptions);
newText, edit);
length;
if (ch === '<STR_LIT>') {
tabSize;
break;
ch === CharacterCodes.formFeed ||
if (key === undefined) {
ctrlKey);
result.push(labels.metaKey);
labelPattern, '<STR_LIT>');
'<STR_LIT>';
result: V[] = [];
text = fs
if (configuredMime) {
if (registeredMime) {
const firstlineMime: string = guessMimeTypeByFirstline(firstLine);
i = <NUM_LIT>; i < array.length; i++) {
caseInsensitive) {
function (word) {
path);
lastIndex = <NUM_LIT>;
name === '<STR_LIT>') {
getuid() === <NUM_LIT>);
candidate.fsPath, ignoreCase);
function (completion: number): number {
<NUM_LIT> - easeInCubic(<NUM_LIT> - t);
length > str.length) {
escapeRegExpCharacters(searchString);
charAt(<NUM_LIT>))) {
if (!/\B/.test(searchString.charAt(searchString.length - <NUM_LIT>))) {
if (options.multiline) {
i);
return true;
if (diff !== <NUM_LIT>) {
codeB).toLowerCase()) {
else {
targetLen) {
code >= $a && code <= $z || code >= $A && code <= $Z;
str);
chCode !== CharCode.Tab) {
'<STR_LIT>', nfcCache);
normalize(str, '<STR_LIT>', nfdCache);
EL, '<STR_LIT>');
value).every(elem => isString(elem));
_encode;
if (authority) {
path) {
parts.push(authority);
idx !== -<NUM_LIT>) {
idx !== -<NUM_LIT>) {
path) {
substr(<NUM_LIT>);
else {
number;
break;
<NUM_LIT>;
{
else {
new SimpleWorkerServer(postMessage);
return `<STR_LIT>`;
`<STR_LIT>`;
color('<STR_LIT>'), color('<STR_LIT>')];
`<STR_LIT>`, color('<STR_LIT>'), color('<STR_LIT>'), color('<STR_LIT>')];
encodeStream(toNodeEncoding(encoding), options);
replace(/[^a-zA-Z0-9]/g, '<STR_LIT>');
if (error) {
isDirectory()) {
error, null), copiedSources);
paths.sep);
return path;
const (name === '<STR_LIT>') {
prefix + '<STR_LIT>' + name;
error) {
else {
return nfcall(extfs.statLink, path);
platform.isMacintosh) {
return nfcall(fs.unlink, path);
const port = Math.floor(Math.random() * <NUM_LIT>);
process.platform === '<STR_LIT>') {
try {
const targetPathRegex: RegExp = new RegExp(options.targetPath ? `<STR_LIT>` : '<STR_LIT>');
zipfile.once('<STR_LIT>', () => {
entry.fileName)) {
options.targetPathRegex.test(fileName)) {
`<STR_LIT>`;
serverName: '<STR_LIT>',
if
getName();
resourceA && resourceB) {
start;
<NUM_LIT>].start;
if (hasDescriptionMatches) {
if
CharCode.Backslash:
SingleQuote:
case CharCode.Pipe:
scorer.score(target, query, query.toLowerCase(), fuzzy);
return {
startHandshake()
configs.forEach(each => {
name = `<STR_LIT>`;
`<STR_LIT>`;
indent * <NUM_LIT>)
return;
postLogs(endpoint, outZip, requestService);
"<STR_LIT>",
MenuItem({
arg);
pathCandidate = parsedPath.path;
realpathSync(pathCandidate);
gotoLineMode) {
previous = folder;
extensionDevelopmentPath)) {
return true;
DomCharWidthReader = new DomCharWidthReader(bareFontInfo, requests);
get(IEditorService);
EditorContributionRegistry.INSTANCE.registerEditorContribution(new ctor());
control)) {
diffEditor: null
control,
containsRTL, containsForeignElements);
if (renderMinimap === RenderMinimap.LargeBlocks) {
new HorizontalRangeWithStyle(item);
`<STR_LIT>`;
<NUM_LIT>;
TextEditorCursorBlinkingStyle.Blink;
Phase;
'<STR_LIT>':
switch (visibility) {
default:
return defaultValue;
id === '<STR_LIT>';
tabs: number = <NUM_LIT>;
CharCode.CarriageReturn) {
rLength++] = crlf;
}
isBasicASCII = false;
v << <NUM_LIT>;
maxEnd = leftMaxEnd;
maxEnd = rightMaxEnd;
Constants.ColorOffset);
IsInOverviewRulerMask) >>> Constants.IsInOverviewRulerOffset) === <NUM_LIT>;
node = node.left;
y.left;
y;
else {
y = z.left;
delta;
else {
T.requestNormalizeDelta = true;
x.delta;
x.left === SENTINEL) {
root = y;
Black);
yWasRed) {
T.root) {
setNodeColor(x, NodeColor.Black);
parent;
root = x;
else {
right.parent = y;
z === T.root) {
}
z) {
parent);
parent;
w = x.parent.left;
w = x.parent.left;
root;
parent.left;
rightRotate(T, x.parent);
else {
Red);
Black);
node = node.left;
x.piece.lineFeedCnt : <NUM_LIT>);
y.left.parent = x;
tree.root = y;
else {
SENTINEL.parent = SENTINEL;
node = node.right;
return {
index === start) {
end + <NUM_LIT>
null;
i];
number = <NUM_LIT>;
startOffset = endIndex;
toString();
new MonacoWebWorkerImpl<T>(modelService, opts);
<NUM_LIT>) {
for (let i = <NUM_LIT>; i < input.lineDecorations.length; i++) {
containsForeignElements = true;
const themeType = theme.type;
{
<NUM_LIT>; i >= <NUM_LIT>; i--) {
let i = <NUM_LIT>; i < tabSize; i++) {
builder line = content[i];
builder.insertSpaces(tabsToSpaces ? spaces.length : <NUM_LIT>, lastIndentationColumn);
{
sel) => new CopyLinesCommand(sel, false), expectedLines, expectedSelection);
range.isEmpty()) {
varController(accessor, controller => controller.closeWidget());
{
return <NUM_LIT>;
const instantiationService: InstantiationService = new InstantiationService();
domNode, options);
DiffNavigator(diffEditor, opts);
standaloneThemeService.get().defineTheme(themeName, themeData);
return tokenizationSupport;
startup.initStaticServicesIfNecessary();
ModesRegistry.registerLanguage(language);
provider);
if (!languageIdentifier) {
if (!languageIdentifier) {
'<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>') {
false;
obj.hasOwnProperty(idx)) {
MonarchTokenizer(modeService, standaloneThemeService, modeId, lexer);
setSelections('<STR_LIT>', selections);
select: select });
Up, by: CursorMove.RawUnit.WrappedLine, value: noOfLines, select: select });
cursor.trigger(overwriteSource || '<STR_LIT>', command, extraData);
CoreNavigationCommands.CursorTopSelect.runCoreEditorCommand(cursor, {
selection]);
};
pinged);
shouldIgnoreTrimWhitespace: shouldIgnoreTrimWhitespace || false
i < expectedChanges.length ? expectedChanges[i] : null)));
originalEndLineNumber,
modifiedEndLineNumber,
hasOriginal ? change.originalStartLineNumber : <NUM_LIT>,
<NUM_LIT>,
return {
charChanges: charChanges,
originalStartLineNumber,
ch = allText.charAt(offset);
toString());
position);
IIdentifiedSingleEditOperation[] = model.applyEdits(inverseEdits);
left;
getNodeColor(l) === NodeColor.Black);
end + delta) <= <NUM_LIT>);
n.end + delta, r.start + delta, r.end + delta) <= <NUM_LIT>);
return '<STR_LIT>';
Math.random() * (max - min + <NUM_LIT>)) + min;
model.getAllDecorations().length, <NUM_LIT>, '<STR_LIT>');
length)];
<NUM_LIT>;
if (chr !== '<STR_LIT>' && chr !== '<STR_LIT>') {
startLineNumber: <NUM_LIT>,
string = '<STR_LIT>';
breakingLengths)), wrappedLinesPrefix);
contextMenuService);
i];
case '<STR_LIT>':
default:
typeof curr === '<STR_LIT>') {
return;
value !== '<STR_LIT>') {
delete valueTree[first];
'<STR_LIT>') {
test(key)) {
overrideRaw, conflictReporter)
text.lastIndexOf('<STR_LIT>', columns);
if
args['<STR_LIT>'], process) || path.resolve(args['<STR_LIT>']);
matches) {
return flags.indexOf('<STR_LIT>') !== -<NUM_LIT>;
p: IGalleryExtensionProperty) => p.key === type);
if (results.length > <NUM_LIT>) {
return null;
fallbackUri: null };
{
uri.value,
version);
if (version.hasCaret) {
false;
minorBase: minorBase,
List) {
'<STR_LIT>':
k]);
experimentsConfig) {
event.source],
flattenValues(event.sourceConfig)
return [];
setup('<STR_LIT>')
setOfflineMode(true);
sendTelemetryEvent('<STR_LIT>', {
colorValue === '<STR_LIT>') {
typeof colorValue === '<STR_LIT>') {
attachStyler(themeService, {
selectForeground) || selectForeground,
listHoverBackground,
folder.uri.toString() : folder.uri.toString().toLowerCase());
if
useSlashesForPath) {
ctor);
editor.getModel() === model) {
range),
column === <number>types.ViewColumn.Two) {
ViewColumn.Active) {
bearing.name, SymbolKind.to(bearing.kind), bearing.containerName, location.to(bearing.location));
options. pinned,
position === EditorPosition.ONE) {
EditorPosition.THREE) {
if
model) {
handler: (accessor, args) => moveActiveEditor(args, accessor),
constraint: isActiveEditorMoveArg
isWritableCodeEditor(getEditorWidget(e));
_setDisplay(el, '<STR_LIT>');
SIDE_BAR_SECTION_HEADER_FOREGROUND,
WorkbenchState.EMPTY: return '<STR_LIT>';
wordWrap,
updateOptions({
...state,
configuredWordWrapMinified,
null
if (actualWrappingInfo) {
forceWordWrapMinified: false
transientState = {
(
container, '<STR_LIT>');
type);
addClass(container, '<STR_LIT>');
'<STR_LIT>';
const
'<STR_LIT>', description: '<STR_LIT>' }, properties);
join(lineDelimiter);
return
encodingOfSource = '<STR_LIT>';
resource.scheme === Schemas.text) {
text: any;
if (encodingOfSource) {
state;
resource;
save(resource).then((result: boolean): URI => {
true;
getResource();
file(paths.join('<STR_LIT>', Buffer.from(self.test.fullTitle()).toString('<STR_LIT>'), path));
const element = (<MarkersPanel>activePanel).getFocusElement();
{
replace(/\\/g, '<STR_LIT>');
replace(/[\\/+\-&|!"~*?:(){
remoteSetting.key,
remoteSetting.extensionName
Added:
element as ISCMResource).sourceUri;
ReplaceService);
`<STR_LIT>`,
searchPaths) {
searchPath, expectedSearchPath.searchPath);
key];
if (uri.authority) {
catch (e) {
match = domain.match(SecondLevelDomainMatcher);
<NUM_LIT>] === '<STR_LIT>') {
value);
configuredProps);
source[key] !== void <NUM_LIT>) {
TaskIdentifier.from(value);
path.join(basePath, relativePath) : basePath;
name === name) {
inputBackground).toString(),
theme.getColor(inputValidationErrorBorder).toString(),
buttonHoverForeground: theme.getColor(buttonHoverForeground) && theme.getColor(buttonHoverForeground).toString(),
DEBUG) {
IResolvedKeybinding = mapper.resolveKeyboardEvent(keyboardEvent);
map(toIResolvedKeybinding);
str, '<STR_LIT>');
expectedResultCount)
path));
continue;
'<STR_LIT>') {
rule.scope)) {
else {
result)) {
fields: {
title
color: {
n'<STR_LIT>', '<STR_LIT>'),
'<STR_LIT>'
color: {
str.charAt(<NUM_LIT>).match(/[0-9\-]/)) {
elStyle.type = '<STR_LIT>';
else {
anyOf: [
{
isDirectory: false,
thing;
'<STR_LIT>');
for (let fix of fixes) {
TextEdit;
exclude) {
return true;
testForExclusionPattern(path, '<STR_LIT>')) {
errorMessage = err.message;
buildFolder);
buildFolder: any = tl.getVariable('<STR_LIT>');
return <NUM_LIT>;
options = tl.getInput('<STR_LIT>', true);
true);
apiVersion;
userAgent.toLowerCase();
apiServer];
let (symbolsType) {
case '<STR_LIT>':
symbolVariableName = "<STR_LIT>";
releaseNotesSelection;
release: string[] = [];
effectiveApiVersion, appSlug, apiToken, userAgent);
if (booleanArg) {
if (utils.checkAndFixFilePath(systemPath, "<STR_LIT>")) {
cliPath;
if (!endpoint) {
if (!endpoint) {
process: string[] = [];
cliPath);
false);
string = tl.getInput('<STR_LIT>', true);
debug, app, artifactsDir);
err) {
finally {
if (data) {
await plistTool.exec();
err) {
jdkVersion.indexOf("<STR_LIT>") + <NUM_LIT>);
jdkArch);
undefined, envName));
string;
tl.debug(`<STR_LIT>`);
debug(`<STR_LIT>`);
tl.loc("<STR_LIT>", thisVariant));
if (credentialProviderOverrideFlag) {
return
hasCommand(NuGetQuirkName.CredentialProvider)) {
NuGetToolRunner = new NuGetToolRunner(nuGetExePath, settings);
new Promise(function (resolve, reject) {
}
file);
auth.scheme === '<STR_LIT>') {
publishingProfile) {
}
os.sep)) {
debug('<STR_LIT>' + warFile);
warExt;
"<STR_LIT>";
removeAdditionalFilesFlag) {
excludeFilesFromAppDataFlag)) {
isFolderBasedDeployment) {
boolean;
tl.debug('<STR_LIT>' + listDirFile);
tl
inFile]);
setResult(tl.TaskResult.Succeeded, tl.loc('<STR_LIT>'));
then(images => {
connection, imageName);
dockerfilepath, buildFolder);
else {
matchingFiles: string[] = tl.match(allFiles, dockerfilepath, buildFolder);
else {
if (configFile) {
configFile);
verbosity) {
parameters['<STR_LIT>'];
sevenZip: tr.ToolRunner = tl.tool(winSevenZipLocation);
versionVersion(version);
getInput('<STR_LIT>', true);
boolean = tl.getBoolInput('<STR_LIT>', false);
additionalFiles: string = tl.getInput('<STR_LIT>', false);
'<STR_LIT>', true);
string = tl.getVariable('<STR_LIT>');
loc('<STR_LIT>'));
isFolderBasedDeployment, webDeployPkg);
hostType) : tl.getVariable('<STR_LIT>'),
agentVersion: tl.getVariable('<STR_LIT>')
if (err) {
err) {
resolve(null);
err)) };
<NUM_LIT>) {
const.debug('<STR_LIT>');
tl
parsedBody.executable.options);
clusterConnection.close();
debug("<STR_LIT>");
}
tl.debug("<STR_LIT>");
isCodeCoverageOpted) {
else {
arg("<STR_LIT>");
fail(function (err) {
pomJson.projects.forEach(function (project) {
Q;
pomJson.collectionUrl);
string = tl.getVariable("<STR_LIT>");
let collectionPath: string = url.parse(collectionUrl).path;
length > <NUM_LIT>) {
url);
repo,
) {
{
return Q.resolve(repos);
tl.loc('<STR_LIT>', npmRegistries.length)));
tl.debug(tl.loc('<STR_LIT>'));
endpointRegistries);
arg("<STR_LIT>");
arg("<STR_LIT>");
var.arg("<STR_LIT>");
result.stderr);
'<STR_LIT>', true);
boolean = tl.getBoolInput('<STR_LIT>');
var
resolvedSummaryFile, resolvedReportDirectory, additionalFileMatches);
tl.getVariable('<STR_LIT>'),
releaseuri: null,
null,
getInput('<STR_LIT>');
useVsTestConsole) {
dtaConfiguration.vsTestLocationMethod = utils.Constants.vsTestVersionString;
dtaConfiguration.vsTestLocationMethod === utils.Constants.vsTestVersionString && dtaConfiguration.vsTestVersion === '<STR_LIT>') {
testInParallel = true;
log(tl.loc('<STR_LIT>'));
tl.loc('<STR_LIT>'));
VSTestLocationMethod.VSTest) {
undefined, "<STR_LIT>"));
dtaConfiguration.vsTestLocationMethod = utils.Constants.vsTestVersionString;
return dtaConfiguration;
loc('<STR_LIT>'));
dtaConfiguration.useVsTestConsole = false;
tl.getInput('<STR_LIT>');
getVariable('<STR_LIT>');
v1() + '<STR_LIT>');
useNewCollector = true;
tl.getVariable('<STR_LIT>')) {
tl.warning(tl.loc('<STR_LIT>'));
setTIA = true;
'<STR_LIT>' || vstestConfig.vsTestVersionDetails === '<STR_LIT>')) {
catch (err) {
if
disable);
lines = textStatus.split('<STR_LIT>');
"<STR_LIT>":
case "<STR_LIT>":
break;
once(event)(c));
console.log("<STR_LIT>");
keys.serialNumber;
now.toISOString();
now2: Date = new Date();
return certificate;
name: '<STR_LIT>',
value: '<STR_LIT>'
serverDecipherment: true,
pki.privateKeyPem);
'<STR_LIT>';
certificateStore.certificateData);
{
string = path.join(os.tmpdir(), '<STR_LIT>');
generatedCertificate.pemKey;
else {
parentTask);
process
certutilExePath: string = _ensureCertUtilExePath(parentTask);
boolean;
string[] = line.match(/^ snbr: (.*)$/);
break;
<NUM_LIT>) {
toString());
default:
i])) {
return _buildConfig;
}
merged = Object.assign({
fileLog(error, taskName, filePath, line, column, errorCode, message);
'<STR_LIT>';
else {
return e.err.toString();
else {
isVerbose()) {
if (isVerbose()) {
if (!ENABLE_PROFILING) {
_log.info(value);
timepart;
exitCode;
write;
process.stderr.write = function (data: any) {
false;
if (!wiredUpErrorHandling) {
'<STR_LIT>');
error('<STR_LIT>');
if (!localCache.wroteSummary) {
ifProcess(<NUM_LIT>);
null, Array(count))
styleRecordKey = styleRecord.key;
loadStyles = loadStylesFn;
runState: {
Run,
state.registeredThemableStyles = [];
`<STR_LIT>`;
if (err) {
data, data.error);
timeout);
join(getAppLogDir(appName), logName + '<STR_LIT>');
process;
any = date.getDate();
shouldThrow)
y: <NUM_LIT> },
if (!cond) {
clearTimeout(timeoutHandle);
disposer();
return className.replace(/\s+/g, '<STR_LIT>');
type === '<STR_LIT>') {
type, object);
position, line, column };
return statements;
{
intersection: {
return {
const.writeFileSync(`<STR_LIT>`, JSON.stringify({
msg);
console.log();
log(msg);
<NUM_LIT>;
as {
IItem[] = [];
positive,
getNegativePatterns(patterns);
filter.bind(this);
pattern);
slice(<NUM_LIT>, -<NUM_LIT>) : pattern;
isNativeWebAnimationsSupported()) {
'<STR_LIT>';
dialog;
TypeKeys.CONFIG_CHANGE_LANGUAGE,
CONFIG_NODE_CHANGE,
CONFIG_NODE_WEB3_SET,
payload: {
offset || <NUM_LIT>
return {
SWAP_CHANGE_PROVIDER,
TypeKeys.SWAP_DESTINATION_SWAP,
return {
return {
type: TypeKeys.SWAP_ORDER_TIME,
payload };
return {
return {
return {
response;
return new Promise((resolve, reject) => {
return Buffer.concat([decipher.update(data), decipher.final()]);
ciphertext.length, <NUM_LIT>),
salt: ciphertext
address.createHash('<STR_LIT>').update(address).digest('<STR_LIT>').toString('<STR_LIT>') === address;
return false;
isValidEtherAddress(address);
true;
KeystoreTypes.crypt;
parsed.password) {
KeystoreTypes.v2;
Wallet = ev.data as Wallet;
reject(e);
return = [...state];
return startSession(state, action);
state,
state,
return {
action);
txData,
state.balance, isPending: true } };
state,
state,
Web3Wallet;
yield all([
all([
swap);
}
catch (e) {
}
const loadShapeshiftRatesTask = yield fork(loadShapeshiftRates);
validGasLimit: boolean = yield call(gasLimitValidator, payload);
const validGasPrice: boolean = yield call(gasPriceValidator, priceFloat);
gasLimit) {
ETHER_TO_TOKEN_SET,
isOfflineOffline: boolean = yield select(getOffline);
if (invalidField) {
put(reset());
message, <NUM_LIT>));
call(computeIndexingHash, serializedTransaction);
IWallet = yield select(getWalletInst);
wallet, balances);
state).pending;
address;
KEY_chain,
includes(f as DPathFormat);
customTokens;
if (!walletConfig) {
state.wallet.isUnlocked;
return null;
<NUM_LIT>;
checkingObject);
exportV3(password);
return;
else {
round(Math.random() * <NUM_LIT>),
<NUM_LIT>) {
TestBed.compileComponents().then(() => {
TranslateLoaderMock },
state$.select(s => s.multilingual);
'<STR_LIT>';
return new task();
throw new Error(`<STR_LIT>`);
done();
return input ? input.replace(/\r?\n/g, EOL) : input;
testInjector.register("<STR_LIT>", {
any = packageJsonData.dependencies;
extend(currentDevDependencies, devDependencies);
test platformService.preparePlatform(projectData);
options,
"<STR_LIT>"));
testInjector.register("<STR_LIT>", Options);
IService, {
register("<STR_LIT>", SettingsService);
const errors;
register("<STR_LIT>", {
PathsService, {
path: string) => {
[];
configuration.shouldNpmInstallThrow) {
msg);
UnexpectedEndOfInput);
page = view.page;
view.showModal("<STR_LIT>", "<STR_LIT>", closeModal, false);
Analytics.init(packageJson.analyticsAppId);
try
console.log("<STR_LIT>", message);
console (url) {
then(btn => {
navigateBackWithContext({
}
console.log("<STR_LIT>");
log("<STR_LIT>");
log("<STR_LIT>");
result = listenerWrapper.value;
_readArticles = require("<STR_LIT>");
}
<NUM_LIT>];
"<STR_LIT>") {
frame
navigate({
current.siblings
true,
navigator.navigateBackFromExample();
viewModel;
view.bindingContext;
ViewCompat;
navigateBackFromExample();
page.bindingContext = viewModel;
setTimeout(() => {
value = editorValue;
navigateBackFromExample();
any;
style.accessoryArrowStroke = TKStroke.strokeWithColor(value.ios);
<NUM_LIT> };
args.value = editorValue;
unsetValue;
applyAccessoryArrowColor(editor, colorAccent);
editorAccessoryArrowColor(editor, colorAccent);
editor, colorAccent);
args.context;
bindingContext = viewModel;
object;
mainView.getMeasuredHeight(), <NUM_LIT>));
currentView.parent, currentView, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, dimensions.measuredWidth, dimensions.measuredHeight);
object).page;
email: "<STR_LIT>",
});
notify("<STR_LIT>");
const view = args.object as View;
str.charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
toggleDrawerState();
bindingContext;
toggleDrawerState();
closeDrawer();
navigator.navigateToHome();
Color("<STR_LIT>");
let
return mainEntry;
hasNativeApp()) {
NATIVE, null);
value;
key)) {
let b: number = <NUM_LIT>;
parts[<NUM_LIT>] === "<STR_LIT>") {
parseInt(parts[<NUM_LIT>].trim());
toLowerCase();
return _getConnectionType();
number = _getConnectionTypeFromFlags(flags);
true,
_DOM;
css = newCSS;
newDOM;
view) {
view: ViewBase;
target: object) => {
i = <NUM_LIT>; i < callbacks.length; i++) {
Callbacks in callbacks) {
describe("<STR_LIT>", () => {
return new Promise((resolve, reject) => {
try {
options.method) {
content = options.content.toString();
options.timeout;
javaOptions.headers = arrayList;
encoding) {
const (questionMarkPos !== -<NUM_LIT>) {
headers[key])) {
push(value);
JSON_ delimiter) === -<NUM_LIT>) {
ImageSource = new ImageSource();
image = new ImageSource();
case "<STR_LIT>":
break;
enabled = false;
if (info) {
};
info.runCount) {
android) {
run: () => {
runnable;
pair) {
i];
indexOf(name) !== -<NUM_LIT>) {
componentName;
string = fullComponentPathFilePathWithoutExt;
if componentModule: ComponentModule = {
else {
component = require(xmlFilePath);
result.component, attr, attributes[attr]);
else {
componentName);
jsModulePath: string = resolveFileName(fullComponentPathFilePathWithoutExt, "<STR_LIT>");
"<STR_LIT>") {
result === undefined) {
if (parentsMatches) {
"<STR_LIT>") {
lower)) {
i = <NUM_LIT>; i < inheritableCssPropertyValues.length; i++) {
property = pair.property;
if (currentValueSource === ValueSource.Default) {
cssProperty = cssSymbolPropertyMap[symbol]) {
child = false;
continueIteration;
button Button = require("<STR_LIT>").Button;
Label();
callback = arg;
options.neutralButtonText, UIAlertActionStyle.Default, (arg: UIAlertAction): void => {
isString(options.okButtonText)) {
AnimatorAnimator = android.animation.ValueAnimator.ofObject(enter ? android.animation.ValueAnimator.INFERRED : android.animation.ValueAnimator.INFERRED);
break;
popEnterFakeResourceId:
popExitFakeResourceId:
entry)) {
newFragment: android.app.Fragment = newEntry ? newEntry.fragment : null;
<NUM_LIT>) {
Animated, navigationTransition, currentFragment, newFragment);
fragment: android.app.Fragment = null;
if (useLollipopTransition) {
if (useLollipopTransition) {
name = '<STR_LIT>';
'<STR_LIT>';
currentFragment, name);
setupCurrentFragmentFadeTransition(currentFragment, currentEntry, name);
navigationTransition, currentEntry, name);
duration);
<NUM_LIT>) {
name;
fragment = transition;
}
manager);
entry, transition);
navTransition, entry);
const f = framesCache[i];
activity.getClass());
UIViewAnimationTransition.CurlUp:
break;
UIViewAnimationTransition.FlipToBottom:
view,
args.type),
view,
args.view,
UIGestureRecognizerState.Ended) {
UIGestureRecognizerState.Ended) {
super(cacheSize);
if
value) {
EditText) {
UIViewController = controller.presentedViewController;
size > <NUM_LIT>) {
view);
}
return false;
frame.navigationQueueIsEmpty()) {
NavigationQueue = frame.navigationQueue;
if (constantState) {
NativeView = view.nativeViewProtected;
return;
;
scaleY : frame.size.height;
CGIGraphicsGetCurrentContext();
UI = UIGraphicsGetCurrentContext();
else {
h);
UIGraphicsEndImageContext();
throw new Error(`<STR_LIT>`);
e) {
top: <NUM_LIT>, left: <NUM_LIT>, bottom: <NUM_LIT>, right: <NUM_LIT> });
italic: boolean = isItalic(spanStyle.fontStyle);
style.fontFamily;
fontFamily) {
setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
spanStyle)) {
backgroundColor = span.parent.parent.backgroundColor;
valueSource) {
span.parent.parent.style;
underline) {
textDecoration: string = valueSource.textDecoration;
if (strikethrough) {
case "<STR_LIT>":
case "<STR_LIT>":
value <= <NUM_LIT>;
true;
value <= <NUM_LIT>;
components.hour = hour;
new Set(arr));
ApplicationModule);
NestFactory.create(ApplicationModule);
ApplicationModule);
description('<STR_LIT>')
await app.listen(<NUM_LIT>);
app = await NestFactory.create(ApplicationModule);
return {
return {
VoidType()];
name: rawAbiParameter.name,
number = filePath.lastIndexOf('<STR_LIT>');
`<STR_LIT>`;
return {
"<STR_LIT>") {
rawType.length);
PrimitiveType("<STR_LIT>");
"<STR_LIT>":
"<STR_LIT>"));
packageJson = require("<STR_LIT>");
const accounts: string[] = [];
nodeVersion = await compiler.getVersion();
'<STR_LIT>'
result, current) => {
versionMap[version] = true;
push({
bundle) {
if (compiler.options.bundle) {
input = await producer(compiler.options);
const
const.info(`<STR_LIT>`);
e.code === '<STR_LIT>') {
step.log(`<STR_LIT>`);
prettyPlatform;
return statAsync(path)
return Number.isInteger(value);
return `<STR_LIT>`;
private position: Position;
super(htmlEl, position);
}
else
if
visible = false;
}
{
zIndex: string): void {
if (zIndex) {
panels.forEach(panel => {
element.querySelectorAll('<STR_LIT>')[index];
i = <NUM_LIT>; i < active.length; i++) {
active[i]);
number = i;
return a % b;
abs(date1.getTime() - date2.getTime());
getFullYear(), jsDate.getMonth() + <NUM_LIT>, jsDate.getDate());
return <HTMLElement[]>Array.from(element.querySelectorAll('<STR_LIT>'));
expect(pages[i].classList).toContain(resultDef);
i]).not.toHaveCssClass(classIndicator);
}
number[] = [];
buttonSelector) as NodeListOf<Element>;
querySelector('<STR_LIT>');
querySelector('<STR_LIT>');
'<STR_LIT>');
targetElement.classList.contains(obj)) {
bottomVal: number = <NUM_LIT>;
let i = <NUM_LIT>; i < availablePlacements.length; i++) {
index);
max), min);
null;
value !== undefined && value !== null) ? `<STR_LIT>` : '<STR_LIT>';
DebugElement = debugElement;
rootControl.find('<STR_LIT>');
is) {
parent
parentNode) {
if
child;
length;
boolean = prevInjection.length > <NUM_LIT>;
false;
annotation) && annotation instanceof ComponentMetadata;
if (isTypeByDeclaration) {
return;
instanceof ComponentMetadata;
null;
isType(selector)) {
After:
ngAfterContentChecked;
AfterViewChecked:
return !!proto.ngOnDestroy;
ngOnChanges;
instanceofflags & ts.TypeFlags.Directive;
instanceof annotationInstance) {
else {
annotations || [];
prototype);
any[] = [];
parameters.push(annotationInstance);
angular.extend;
'<STR_LIT>' || typeof o === '<STR_LIT>');
typeof obj === '<STR_LIT>';
`<STR_LIT>` : prop;
const inputs: any[] = [];
metaItem)) {
metaItem.type) {
metadataValues.some(value => value instanceof Ng2OutputPropDecoratorFactory);
afterBootstrapEffects);
target)) {
return {
query
query
string[] = util
util
if (util.shouldBundle(config, topLevelName)) {
`<STR_LIT>`;
replace('<STR_LIT>', '<STR_LIT>'), `<STR_LIT>`);
dirs.apply(null, dirs);
item) {
execSync(`<STR_LIT>`, {
return Object.assign({
return {
loading: true,
'<STR_LIT>';
'<STR_LIT>') {
didMutate = mutator(arg, clonedEntityState);
return {
clonedEntityState.entities,
toString();
str.charAt(<NUM_LIT>).toUpperCase() + str.substr(<NUM_LIT>);
sep)
return str.replace(STRING_DECAMELIZE_REGEXP, '<STR_LIT>').toLowerCase();
'<STR_LIT>')
importPath);
syntaxKind) {
Error(`<STR_LIT>`);
create(path || '<STR_LIT>', `<STR_LIT>`);
{
return null;
<NUM_LIT>: liftAction(INIT_ACTION) },
currentStateIndex: <NUM_LIT>,
liftedState;
map(selector => {
const actionType = action.type;
finalReducers[key] = reducers[key];
combinedReducers = finalReducers;
any = reducer(previousStateForKey, action);
{
sync(pattern));
map(param => param.substr(<NUM_LIT>));
pattern).keys;
path = normalize(normalizePath(pathname));
pattern);
pathname,
else {
const payload: RouterMethodCall = {
const devtoolsDispatcher.createReducer(reducer);
'<STR_LIT>';
_reducer, deps: [State] },
useFactory: _initialStateFactory, deps: [
return window;
config.getSettings('<STR_LIT>'),
titleLink: config.getSettings('<STR_LIT>'),
getSettings('<STR_LIT>'),
hasOwnProperty(inject)) {
publicName);
element = $compile(html)(parentScope);
element.controller(selector);
type;
name);
if (typeof maybeT === '<STR_LIT>') {
throw NAME_TAKEN_ERROR('<STR_LIT>');
resolved.push(...flatten(item));
s;
return false;
return target => {
return function (target: Function) {
classMethods: {
!/Invalid|NaN/.test(new Date(obj).toString());
tick();
where;
`<STR_LIT>`;
return `<STR_LIT>`;
return this.groupRows;
rt.appTarget.compile.cleanup);
if {
moduleSource = host.read(modulePath)!.toString('<STR_LIT>');
host.read('<STR_LIT>')!.toString('<STR_LIT>'));
return.path = options.path ? normalize(options.path) : options.path;
const f = TestBed.createComponent(type);
modulePath, moduleSource } = readBootstrapMetadata(host, options.module);
addImport(host, modulePath, '<STR_LIT>'),
const chain([
'<STR_LIT>');
else {
includeKeywordPos + <NUM_LIT>);
'<STR_LIT>', symbolName);
any = allExports[<NUM_LIT>];
class: any = [];
Error(`<STR_LIT>`);
string = fs.readFileSync(file);
`<STR_LIT>`;
return str
return chain([
options),
projects, fileRead);
else {
'<STR_LIT>'));
console.error(`<STR_LIT>`);
migrations.forEach(m => {
config);
')) {
else {
if (dashDashFiles) {
length) {
m.migration.run();
error(`<STR_LIT>`);
path.join(__dirname, '<STR_LIT>'), '<STR_LIT>'));
size === <NUM_LIT>) {
devicePixelRatioSuffix = '<STR_LIT>';
'<STR_LIT>';
i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14].forEach(key => {
if (ruleSet) {
push(part);
return (classNames.length > <NUM_LIT>) {
string[] = val.split('<STR_LIT>');
key,
className = stylesheet.classNameFromKey(key);
constPairs[index + <NUM_LIT>] = value;
}
beakStyle === '<STR_LIT>') {
beakStyleWidth,
height: <NUM_LIT>,
s, v } = rgb2hsv(r, g, b);
g: g,
r,
`<STR_LIT>`;
<NUM_LIT>),
hsl = tinycolor(h).toHsl();
b } = hsv2rgb(h, s, v);
const hsl = rgb2hsl(h, s, v);
c);
rgb[<NUM_LIT>] = c * ((x - <NUM_LIT>) / <NUM_LIT>);
break;
break;
c, x, <NUM_LIT>];
r.toString(<NUM_LIT>),
<NUM_LIT> && color.g === <NUM_LIT> && color.b === <NUM_LIT>;
color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;
Date(date.getTime());
date, weeks * TimeConstants.DaysInOneWeek);
firstDayOfWeek;
date2);
firstWeekOfYear:
default:
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>);
return
animationName,
return {
apply(theme);
name) {
subset) {
fontWeight,
}
toLowerCase();
push(currentValue);
new Error("<STR_LIT>");
length; i < len; i++) {
null;
<NUM_LIT>,
innerHeight
getBoundingClientRect) {
document.activeElement;
rootElement, currentElement, true, false, true, includeElementsInFocusZones);
for (const methodName of methodNames) {
key);
if (!args.length) {
cacheSize = maxCacheSize;
Partial<ISemanticColors> = {
FirstMate.Grammar = new FirstMate.Grammar(grammar);
newGrammar;
true;
factory(item, solutionPath));
return '<STR_LIT>';
text: item,
replacementPrefix,
getFeatures(features);
set('<STR_LIT>', '<STR_LIT>');
undefined, features);
`<STR_LIT>`;
generatorAsset(generator.outputPath),
if (err) {
string = JSON.parse(buffer.toString());
tasksConfiguration = JSON.parse(text);
window.showErrorMessage('<STR_LIT>');
operations.addLaunchJson;
JSON_SPLITTER).map(line => {
if (err) {
if (filePath) {
ChildProcess = spawn(cmd, args);
channel.append(chunk);
err.message);
resolve();
restart();
indent: string = "<STR_LIT>";
displayDocumentationObject).join("<STR_LIT>" + indentSpaces) + newLine;
if (structDoc.ExamplesText) {
documentation += structDoc.ValueText + newLine;
message = `<STR_LIT>`;
extensionId);
context);
runtimeDependenciesExist) {
test(resource.fsPath);
cwd: cwd,
cwd,
process: process,
Array<Package>();
has(command);
Column = where.character + <NUM_LIT>;
line + <NUM_LIT>;
fsPath;
FileName: fileName,
for (let child of node.ChildNodes) {
StartLine, StartColumn, EndLine, EndColumn } = rangeLike;
DebugGetStartInfo, request);
startsWith('<STR_LIT>'));
protocol.Requests.Rename, request, token);
makeRequest<protocol.TypeLookupResponse>(protocol.Requests.TypeLookup, request, token);
window.createOutputChannel('<STR_LIT>');
pipeCwd: "<STR_LIT>",
text.length);
removeChild(element.firstChild);
yandexbrowser) {
return DEVICE_TYPES.FIREFOX;
as any).chromium ||
typeof targetSelectorOrElement === '<STR_LIT>') {
els[i], event, task);
else {
let (let i: number = <NUM_LIT>; i < targetSelectorOrElement.length; i++)
userAgent);
if (!string || typeof string !== '<STR_LIT>') {
null;
resolve([
ctx = canvas.getContext("<STR_LIT>");
<NUM_LIT>) {
styledFunction;
null;
if
switch (op) {
deepSet(record, ['<STR_LIT>', relationship, '<STR_LIT>'], cloneRecordIdentity(relatedRecord));
version } = identity;
Source);
QueryOrExpression = typeof queryOrExpression === '<STR_LIT>'
then(() => {
return !!source[PUSHABLE];
this.hash);
child(child)) {
newChildChild)) {
[newChild];
arrayUpdate(canEdit, frag, newChild, children);
g++] = arr[i++];
out = new Array(len);
map._size + <NUM_LIT>, map._root);
number = <NUM_LIT>; i < edit.length; i++) {
_has(key, map);
return (h >>> shift) & MASK;
map, buildKeys);
<NUM_LIT>);
key), key, value, map);
AttributeFilter = {
throw new Error(`<STR_LIT>`);
timeout) {
const {
length) {
if (ptr[segment] === undefined) {
newVideos = videos.slice(<NUM_LIT>, newMedia);
media: any) => {
previousId: string = state.selectedId;
UserProfileActions.DELETE_PLAYLIST:
default:
UPDATE_USER_METADATA:
number[] = [];
element.nativeElement, axis, isWindow) +
const scrollDownDown: boolean = isScrollingDownwards(container, lastScrollPosition);
scrollState.scrollTop >= totalToScroll && scrollState.scrollTop <= totalToScroll;
mutation, state);
in o)
orig !== dest &&
null,
orig, dest);
unsetPremove(state);
orig];
return piece && state.premovable.enabled &&
orig, dest)) {
false)
true;
state);
dest)
s.draggable.current = undefined;
newPiece) {
s.stats.metaKey = e.metaKey;
delete s.pieces[cur.orig];
drawable.current = undefined;
pos);
state);
stage = stage;
x1, y1, x2, y2) => diff(x1, x2) < <NUM_LIT> && (color === '<STR_LIT>' ? (
`<STR_LIT>`;
for (var i = nodes.length - <NUM_LIT>; i >= <NUM_LIT>; i--) {
tagName);
lineWidth || '<STR_LIT>');
piece.color === '<STR_LIT>' ?
xs !== undefined && xs.indexOf(x) !== -<NUM_LIT>;
if (!v)
generate: hex || "<STR_LIT>",
"<STR_LIT>",
scalar(+inB.value);
gpgpu.setInputMatrixTexture(sourceTex, <NUM_LIT>);
imageSizeLoc, imageSize);
unpackChannelsShader, '<STR_LIT>');
return Math.min(Math.abs(data[i]), data[i + <NUM_LIT>]);
util(`<STR_LIT>`));
height);
j + <NUM_LIT>] = <NUM_LIT>;
'<STR_LIT>':
new ReLULayerBuilder();
break;
layerBuilder = new FlattenLayerBuilder();
if
return `<STR_LIT>`;
true;
forEach((d) => {
replace();
densityControl.value, <NUM_LIT>) || <NUM_LIT>;
window.document.createEvent('<STR_LIT>');
buffer(pitchHistogramEncoding);
sum += hist[i];
value = newHist[i];
Error(`<STR_LIT>`);
as IKssPluginData).css != null;
node, parents);
json: tags.JsonExample,
Component.prototype !== "<STR_LIT>" &&
precision);
return d => d;
case Policy.Always:
RenderPolicies.AnimationFrame();
break;
<NUM_LIT>));
centerPoint, minDomainExtent, maxDomainExtent);
return (value * zoom - center) / (zoom - <NUM_LIT>);
a instanceof Array) {
a instanceof RegExp) {
Array.isArray(a)) {
a.map(s => sign(s)));
range: scale.range(),
updateId: scale.updateId(),
if
top: rect.top - amount,
elem.tagName) {
rotate] = match;
scaleY] = match;
parts = transform.split("<STR_LIT>");
null;
window.requestAnimationFrame(callback);
return Math.sqrt(Math.pow(p1.x - p2.x, <NUM_LIT>) + Math.pow(p1.y - p2.y, <NUM_LIT>));
<NUM_LIT>;
transform, elementTransform);
elem.clientLeft;
typeof n === '<STR_LIT>' && n >= <NUM_LIT> && n <= <NUM_LIT>;
return (typeof key === '<STR_LIT>') {
expectedAreaPathNumbers.length);
new Plottable.Component(), fixedWidth, fixedHeight);
type === '<STR_LIT>') {
forEachChild(node, cb);
}
any = node.getLastToken();
any = secondToken;
Replacement.deleteFromTo(nodeStart, nodeStart, nodeWidth);
failureString === undefined) {
fix: any = Lint.Replacement.appendText(secondToken.getFullStart(), "<STR_LIT>");
if (fix !== undefined) {
ctx.addFailureAt(nodeStart, <NUM_LIT>, failureString, fix);
}
has.initializer && attributes.initializer.kind === ts.SyntaxKind.ObjectLiteralExpression;
length === <NUM_LIT>
expression)
return ts.forEachChild(node, cb);
ctx.options)) {
return `<STR_LIT>`;
fix);
isJSON = producesDef === MediaType.JSON;
get<boolean>("<STR_LIT>");
Array<GSheetsValuesToAppend> = {
auth: auth,
values,
getMessage('<STR_LIT>', formatValues(rangeValues)));
getBodyDOM: (): Element | null => wrapper.querySelector('<STR_LIT>'),
height: <NUM_LIT> }),
};
if {
apply(this, args);
toBe(v);
return A;
(Constraint;
}
true };
A, B);
if (x instanceof ctor)
fields) {
new Lazy<T>(iterable);
command = '<STR_LIT>';
sub1.addItem({
title.mnemonic = <NUM_LIT>;
sub2.addItem({
command: '<STR_LIT>' });
command: '<STR_LIT>' });
map(iter)));
undefined;
object as IIterable<T>).iter();
value);
any = {
rootEpic),
t = this.x + lerp;
ease)
},
return h('<STR_LIT>', {
<NUM_LIT>:
break;
b[i]) {
opcodes.forEach((opcode) => {
arr.map(debug_var);
Log("<STR_LIT>", msgs);
statTraceCloser[op] > <NUM_LIT>) {
trapped_methods.hasOwnProperty(clsName)) {
if (err.code === "<STR_LIT>") {
if (status) {
'<STR_LIT>' ? `<STR_LIT>` : name;
number = <NUM_LIT>;
key: string) => {
opt.type === '<STR_LIT>') {
keys.push(opt.alias);
key) => `<STR_LIT>`).join('<STR_LIT>');
combinedKeys[ckey] = opt;
`<STR_LIT>`;
keyColWidth > <NUM_LIT>) {
testClasses) => {
testClasses);
ThreadStatus.RUNNABLE;
endOffset; i++) {
accessFlags.isProtected()) {
else {
getInitializedClass(thread, '<STR_LIT>', (type: JVMTypes.java_lang_invoke_MethodHandleNatives) => {
push('<STR_LIT>');
array = types;
thread);
case '<STR_LIT>':
endIdx = i + <NUM_LIT>;
break;
charAt(endIdx) === '<STR_LIT>') {
value;
"<STR_LIT>");
<NUM_LIT>) {
a < <NUM_LIT>) {
file.exists(home.JavaHomePath)
home.path);
javap);
ok("<STR_LIT>");
true,
javaHome: IJavaHomeInfo = {
SETUP,
}
tests
err);
cb: cbFunction };
if (allowDefault === false) {
REQUEST_KEY)!;
test(request)) {
cb();
null, request, cb);
prefix += '<STR_LIT>';
prefix = opts.prefix;
string[] = [];
directory;
true).name;
file: string) => {
server) {
keyPath) {
string[] = key.split('<STR_LIT>');
last(parts)] = value;
return {
else {
ArgumentParser = new ArgumentParser({
Error('<STR_LIT>' +
oneLine `<STR_LIT>`);
Error(`<STR_LIT>`);
promiseGetter(value)) {
emitHook('<STR_LIT>');
browser.variant);
skip;
if
await (contextFunction) {
}, options);
apply(context, arguments);
arguments);
test = Date.now();
test.length - <NUM_LIT>) {
runError = error;
'<STR_LIT>') {
exit(<NUM_LIT>);
from, baseFile);
fs.readFileSync(file));
try {
else {
else {
request_id: <NUM_LIT>,
responseText,
undefined,
push({
path: psCoreInstallPath,
versionName: "<STR_LIT>",
exePath: "<STR_LIT>",
versionName: "<STR_LIT>",
exePath:SysNativePowerShellPath,
fs.statSync(path.join(psCoreInstallPath, item)).isDirectory());
return paths;
`<STR_LIT>`;
else {
else {
command = '<STR_LIT>';
outputChannel.show();
message;
filePath));
devDependencies[pkgName])) &&
findPkg(parent, pkgName);
map((link: any) => {
to: link.target
window;
'<STR_LIT>';
return nodeName === '<STR_LIT>' ||
return parentDispatcher || new LiveAnnouncer(liveElement, platform);
boolean = false;
: `<STR_LIT>`;
return parentRuler || new ViewportRuler(scrollDispatcher);
return Error(`<STR_LIT>`);
abs(x - rect.right));
dispatchEvent(node, createKeyboardEvent(type, keyCode)) as KeyboardEvent;
x, y)) as MouseEvent;
type);
i = <NUM_LIT>; i < length; i++) {
value;
extensionContext = ctx;
fsPath);
img.fsPath,
Buffer = "<STR_LIT>";
}));
err);
<);
return fileName;
show();
"<STR_LIT>";
opts.map(o => {
srcLang !== undefined, "<STR_LIT>");
undefined, "<STR_LIT>");
if (srcLang === undefined) {
src,
opts),
noCombineClasses,
out,
options: CLIOptions = {
argv, false);
throw new Error("<STR_LIT>");
source = filesOrUrls.map(url => {
if (unprocessedClasses.length === <NUM_LIT>) {
unprocessedClasses.length; i++) {
clique.members.length > <NUM_LIT>) {
false;
if (visitedTypes.has(t)) {
undefined) {
return queue;
opts, {
number, u: number = s; u < numNodes; ++u) {
has(queryName)) {
OrderedSet(["<STR_LIT>"]));
optionalErrorArray,
source);
start: span.start + lineOffset, end: span.end + lineOffset };
<NUM_LIT>)
let i = <NUM_LIT>;
else {
t: any): StringType[] => [t])
toArray();
const
else {
undefined) {
if (t instanceof UnionType) {
undefined, forwardingRef);
"<STR_LIT>"].indexOf(category) !== -<NUM_LIT>) {
string = t.kind;
string[] = splitIntoWords(original);
return t.kind === "<STR_LIT>" || t.kind === "<STR_LIT>";
codePoint, <NUM_LIT>) + "<STR_LIT>";
mc, "<STR_LIT>");
testWord(mc, "<STR_LIT>");
mc, "<STR_LIT>");
"<STR_LIT>");
return s.toLowerCase();
return modifyFirstChar(c => c.toUpperCase(), str);
str) => {
return isLowerAscii(codePoint) || isUpperAscii(codePoint);
cc >= <NUM_LIT> && cc <= <NUM_LIT>;
return s.charAt(<NUM_LIT>).toUpperCase() + s.slice(<NUM_LIT>);
panic(`<STR_LIT>`);
t.kind === "<STR_LIT>";
false));
modify(attributes, modifier);
if (!maybeNames)
forEach(ta => {
else {
panic("<STR_LIT>");
if (typeRefs.length === <NUM_LIT>) {
t: any) => {
json: any = null;
push(fn);
break;
path.dirname(fullPath), path.basename(fullPath, extension));
length)];
stdout);
boolean;
const.error(`<STR_LIT>`);
chalk.red(message));
dir);
samplesFromPaths(sources[<NUM_LIT>]),
node.kind === ts.SyntaxKind.SourceFile) {
event
const.sender.send("<STR_LIT>", {
token);
recentProjects: any): void => {
err) => {
JSON.stringify(args));
readFileSync(args.path)
err: any) => {
action: args.action,
path: filename,
event.sender.send("<STR_LIT>", {
event.sender.send("<STR_LIT>", {
filename
recentProjects);
for (let i = <NUM_LIT>; i < paths.length; i++) {
FolderIcon;
"<STR_LIT>";
type;
const new Promise((resolve, reject) => {
;
<NUM_LIT>;
io.fileExists(rcPath)) {
{
kind
return {
let result: string[] = [];
{
DEBUG) {
replace(/\\/g, "<STR_LIT>"));
linedOutputOf("<STR_LIT>", ["<STR_LIT>"], directory);
return `<STR_LIT>`;
<NUM_LIT>], position);
selection.addRange(range);
new Error('<STR_LIT>');
str.indexOf('<STR_LIT>') < <NUM_LIT>) {
controller: A1UsingA2,
propertyKey, Decorators.MANYTOMANY, params);
dbEntity[prop] = entity[prop];
toLowerCase()) {
case RepoActions.patch.toUpperCase():
<NUM_LIT>]);
bulk del.toUpperCase():
x['<STR_LIT>']) {
mergeEntities(dbEntities, args[<NUM_LIT>]);
decorator: Decorators.PROCESS_END,
descriptor);
true;
process.send(par);
return new Promise((resolve, reject) => {
BOM);
isFile() && ignoreFile(file)) || (stats.isDirectory() && ignoreDirectory(file, stats));
findByMap: {
'<STR_LIT>';
DESIGNTYPE, target, targetKey);
return (<any>Reflect).getMetadata("<STR_LIT>", target, prop);
Enumerable.from(meta)
securityConf;
serviceMap;
emitters.push(msg);
null) {
modelName) => {
lean());
return prev.concat(current);
<NUM_LIT>];
return result;
Object asyncCalls = [];
res;
i++) {
if (isJsonMap) {
length) {
ids[x.rel].push(x.embedded[<NUM_LIT>]);
ids[x.rel] = ids[x.rel].concat( listOfIds);
concat(props);
if {
i][key]);
return prev.concat(current);
model, obj.getCollectionNameFromSelf());
true;
id];
any = {
keys(parents).length > <NUM_LIT>) {
update({
Types.DateTime:
value === "<STR_LIT>") {
newVal = value;
Mongoose.Types.DateTime:
toString();
newVal)) {
modelName;
<NUM_LIT>)
true;
ifMsgInfo = params;
<NUM_LIT>;
actions = browser.actions();
by.css(selector))));
wait(ExpectedConditions.textToBePresentInElement(element(by.css(selector)), text));
typeof a) !== -<NUM_LIT>;
target as F;
context: Context<E, I, S>) {
engine), this.machine.actions);
WrappedComponent.displayName || WrappedComponent.name || "<STR_LIT>";
typeof p.then === '<STR_LIT>';
contextTypes !== undefined;
source : Ix.AsyncIterable.as(source);
<NUM_LIT>;
source === "<STR_LIT>"
source === '<STR_LIT>' ?
handler(evt);
return {
`<STR_LIT>`;
return `<STR_LIT>`;
`<STR_LIT>`;
editor.edit(editBuilder => {
_context.subscriptions.push(vscode.commands.registerTextEditorCommand("<STR_LIT>", async (editor) => {
AppModuleNgFactory);
if {
<NUM_LIT>) : path;
threshhold) {
last = now;
else {
true;
'<STR_LIT>';
if (hasContents) {
tmpdir(), `<STR_LIT>`);
key);
contributesSection) {
push(path.join(extension.extensionPath, javaExtensionPath));
true;
let b: string = action.meta.b;
'<STR_LIT>':
ReLULayerBuilder();
break;
'<STR_LIT>':
if
notify: event,
return date;
new RegExp('<STR_LIT>' +
return m;
m);
if (type === "<STR_LIT>") {
groupId;
localize('<STR_LIT>', "<STR_LIT>"));
true,
groups: parser.groups,
return new Error('<STR_LIT>');
Errors.DATE);
}
else {
field.name = field.verbatim;
date.year);
if markdownIt.convert(html, {
return JSON.parse(fs.readFileSync(pkg_path, '<STR_LIT>'));
menubar_Broken: menubarBroken,
<NUM_LIT>,
'<STR_LIT>',
n: '<STR_LIT>',
const detail: string = '<STR_LIT>';
webContents.insertCSS(css);
<NUM_LIT>,
icon: icon,
show
false,
debug('<STR_LIT>');
debug('<STR_LIT>');
sandboxFlag(config, account);
}
args);
new Error('<STR_LIT>'));
if (!e) {
label: '<STR_LIT>',
{
type: '<STR_LIT>',
'<STR_LIT>',
label: '<STR_LIT>',
JSON),
if (!uploader) {
null; });
<NUM_LIT>) {
token);
OpenURL,
BigNumber(drops)).dividedBy(<NUM_LIT>).toString();
omitBy(obj, _.isUndefined) as T;
schema, instance, '<STR_LIT>');
counterparty === b.counterparty;
return removeUndefined({
memos: parseMemos(tx),
baseFeeXRP: baseFeeDrops,
is transactions === '<STR_LIT>') {
map(transactions, (tx: any) => parseTransaction(tx, ledgerVersion)),
return removeUndefined({
data.Destination,
data.DestinationTag,
ModifiedNode.LedgerEntryType === '<STR_LIT>');
if
undefined;
new BigNumber(xrpBalance)).greaterThanOrEqualTo(destinationAmount)) {
flagName]) {
any = tx.specification;
return true;
ledger_index || <NUM_LIT>;
'<STR_LIT>');
LedgergerVersionField = '<STR_LIT>';
this.connection.connect();
parts = address.split('<STR_LIT>');
Account: account,
order, instructions });
preparePaymentChannelCreate({
flagName];
else {
prepareTrustline({
map(dependencySizeTree);
let (typeof propertyKey === '<STR_LIT>') {
LocaleService);
propertyKey] = locale.getCurrentPeriod();
zoneName;
function ngOnDestroy(this: any): void {
target.ngOnDestroy = ngOnDestroy;
item));
assign(output, {
output, {
ɵg;
templateCache[filePath] = file;
module) => {
(target: any, propertyName: string) => addAttributeOptions(target, propertyName, {
add.forEntity(target).service();
return Res();
propertyKey);
maximum, exclusiveMaximum);
minimum;
new Error("<STR_LIT>");
args));
store.merge("<STR_LIT>", response);
next();
descriptor;
descriptor;
enumerable: true, configurable: true };
getOwnPropertyDescriptor(target && target.prototype || target, propertyKey)!;
targetSymbol(target);
keys);
((keys.shift()))) {
Array.isArray(target);
return true;
Boolean || target === Boolean;
target)
"<STR_LIT>";
target instanceof Promise;
target instanceof String || target === String;
() => {
targetKey, descriptor);
string;
new RegExp(`<STR_LIT>`, '<STR_LIT>'), '<STR_LIT>');
Audio();
getTracklists())
if.push(trackData.id);
-<NUM_LIT> && v <= <NUM_LIT>);
let i = <NUM_LIT>;
return;
push(vscode.workspace.onDidChangeConfiguration(executeLinting));
lint, globalConfig);
buildName) !== -<NUM_LIT>) {
indexOf(testName) !== -<NUM_LIT>) {
vscode.window.showInformationMessage('<STR_LIT>');
taskProvider = new TaskProvider();
workspaceRoot);
uri);
rakeFiles.delete(uri);
rakePromise = new Promise<vscode.Task[]>((resolve, reject) => {
execFilePromised("<STR_LIT>", ["<STR_LIT>"]);
return telemetryReporter ? telemetryReporter.dispose() : Promise.resolve(null);
return hasToolchain;
showErrorMessage('<STR_LIT>');
stdout);
e.message);
error('<STR_LIT>');
return t;
'<STR_LIT>';
forEach(arg => {
function () {
'<STR_LIT>';
arg;
AjaxObservable<AjaxResponse>({
method: '<STR_LIT>', url, body, headers });
call(sourceObj) === '<STR_LIT>';
return obj;
return <NUM_LIT>;
return;
new BufferCountOperator<T>(bufferSize, startBufferEvery));
}
bufferCreationInterval = arguments[<NUM_LIT>];
<NUM_LIT>) {
subscriptionDelay, delayDurationSelector);
ElementAtOperator(index, defaultValue));
lift(new SwitchFirstOperator());
higherOrderMap(project, resultSelector)(this);
lift(new FilterOperator(predicate, thisArg));
higherOrder()(this) as Observable<T>;
lift.call(mergeStatic(this, ...observables));
lift(new ObserveOnOperator(scheduler, delay));
new Subject<T>(), selector) :
call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));
higherOrder(count)(this) as Observable<T>;
this.lift(new RetryWhenOperator(notifier, this));
lift(new SampleOperator(notifier));
return higherOrder(period, scheduler)(this) as Observable<T>;
higherOrder()(this) as Observable<T>;
Subject<unknown>();
return new EmptyObservable<T>();
new TakeUntilOperator(notifier));
durationSelector, config));
ArrayOperator());
ZipOperator(project));
project === '<STR_LIT>') {
$$observable = Symbol.observable;
observable = $$observable;
else {
typeof x === '<STR_LIT>';
return new Subscriber(emptyObserver);
return location.protocol + '<STR_LIT>' + location.hostname +
'<STR_LIT>'), (value, key) => {
str);
muted ? '<STR_LIT>' : '<STR_LIT>', '<STR_LIT>');
'<STR_LIT>':
'<STR_LIT>':
cursor = '<STR_LIT>';
case '<STR_LIT>':
cursor = '<STR_LIT>';
'<STR_LIT>':
'<STR_LIT>':
htmlChars, '<STR_LIT>')
def += genDefinition(definition, n);
RepetitionMandatoryWithSeparator) {
RepetitionWithSeparator) {
prod, n);
terminalType);
`<STR_LIT>`;
`<STR_LIT>`;
name = func.name;
CLASS_TO_RECIEVED_FOLLOWS);
children[ruleName] = [ruleResult];
allRuleNames: []
push(currTopRuleShortName);
name }) => {
string = null;
Repetition({
textRules: IProduction[] = [];
let
REF);
createOperatorProdRangeParenthesis(text, ProdType.Terminal, terminalRegExGlobal);
nestedRuleGroup) {
methodsCollector);
get(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider);
singleAltPaths, singlePath) => singlePath === singleAltPaths[<NUM_LIT>]);
PROD_TYPE.REPETITION;
RepetitionMandatory) {
ALTERNATION;
definition: repSepProd.definition,
new(`<STR_LIT>`);
return has(tokType, "<STR_LIT>");
has(tokType, "<STR_LIT>");
return tokType in tokenTypes;
obj instanceof Object && obj.hasOwnProperty('<STR_LIT>');
tokType);
string[] = [];
assignNoOverwrite.apply(null, [{
howMuch, arr.length);
null, item)) {
item;
Array.isArray(obj);
Function;
obj !== null && typeof obj === '<STR_LIT>';
undefined;
func];
return (stmtType) {
<NUM_LIT>), err => {
app.use(bodyParser.json());
{
`<STR_LIT>`;
'<STR_LIT>';
margin]);
docs[<NUM_LIT>]).exec(res);
bodyParser.json());
err));
RegExp = /^[\w._-]+@[\w.-]+\.[a-zA-Z]{
injectionService: InjectorService) => {
command.type);
'<STR_LIT>');
id: COMMAND_SET_TAB_WIDTH,
attribute in attributes) {
try {
equals(sc.getAttribute("<STR_LIT>"), "<STR_LIT>");
getAttribute("<STR_LIT>"), "<STR_LIT>");
Object.keys(extraEnv).forEach(key => {
undefined;
const pty = ptyMap.get(key);
username === username);
<NUM_LIT>].homeDir;
homeDir) {
defaultShell,
defaultValue : value;
result.italic.length > <NUM_LIT> ? "<STR_LIT>" : "<STR_LIT>");
postscriptName,
CONFIG, config: undefined };
lf("<STR_LIT>"));
Messages.MessageType.THEME_LIST, themes: [] };
data);
return "<STR_LIT>";
case <NUM_LIT>:
<NUM_LIT>:
userName);
theme: any) => {
contentContents: themeContents
true
ipc.send(Messages.CHANNEL_NAME, msg);
cssFileList: cssFileList,
ipc.on(Messages.CHANNEL_NAME, handleIpc);
data.replace(/[^\x20-\x7E]+/g, '<STR_LIT>');
null;
binDir)) {
if (dotIndex !== -<NUM_LIT>) {
'<STR_LIT>') {
}
mimeTypeTest) {
match = false;
match) {
null);
read();
BULKFileHandle.method, bulkFileHandle.url, true);
cm, /\//g, "<STR_LIT>");
toggleLineNumbers(cm);
toLowerCase();
string = '<STR_LIT>';
label, extraClass));
`<STR_LIT>`;
inflightResentEvent.stopPropagation();
set(ev.target, event);
RightRightPair = splitNodeContentsAtChar(rootNode, endOffset);
endContainer: Node = range.endContainer;
if
startOffset: number;
startContainer);
range.endOffset];
concatName(divElement, "<STR_LIT>");
el.scrollTop = <NUM_LIT>;
const kid of unneededChildrenSet) {
targetChildrenList[i] === el) {
targetChildrenList[i]) {
childIdx = <NUM_LIT>;
lastOffset = charOffset;
newoffset > charOffset) {
createTextNode(kid.nodeValue);
ownerDocument.createTextNode(parts[<NUM_LIT>]);
length = <NUM_LIT>;
return (attr >> <NUM_LIT>) & <NUM_LIT>;
return attr === -<NUM_LIT>;
line: string) => line.length));
test.done();
<NUM_LIT>]), "<STR_LIT>");
activated: false };
if
string = `<STR_LIT>`;
return a.label.localeCompare(b.label);
const.documentElement.style.ScaleFactor = `<STR_LIT>`;
"<STR_LIT>",
if (focusedWindow) {
'<STR_LIT>',
mainWebUi.openAboutWindow();
'<STR_LIT>',
label: '<STR_LIT>',
el).pasteText !== undefined;
<NUM_LIT>;
const
newStateMap: Map<VirtualScrollable, VirtualScrollableState> = new Map<VirtualScrollable, VirtualScrollableState>();
newScrollableState.scrollable);
if (oldScrollableState) {
containerScrollYOffset;
realHeight: newScrollableState.realHeight,
setterState);
markVisibleFunction(newScrollableState.scrollable, false);
scrollable = state.scrollableStates[i];
virtualHeight = realHeight;
virtualHeight = virtualHeight;
posBottom < virtualScrollableBottom) {
realScrollableTop;
virtualScrollYOffset = <NUM_LIT>;
}
virtualScrollYOffset = <NUM_LIT>;
let thumbPosition: number = <NUM_LIT>;
disposeThumbSize: (): number => thumbSize
<NUM_LIT>, right: <NUM_LIT>, left: <NUM_LIT> };
const scrollable: Scrollable = SetupScrollable(vsa, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>);
getScrollOffset(), <NUM_LIT>);
test.equal(scrollbar.getPosition(), <NUM_LIT>);
scrollTo(<NUM_LIT>);
vsa.container.getBoundingClientRect().height);
scrollTo(<NUM_LIT>);
VERTICAL_PADDING), <NUM_LIT>);
const msg: Messages.PtyOutputBufferSize = {
require.toUrl(resourceName);
themeableRegistry.add(themeable);
delete(themeable.id);
'<STR_LIT>');
process.argv);
join(__dirname, '<STR_LIT>'), path.join(__dirname, '<STR_LIT>')]);
console
allThemes);
themeContents.cssFiles[ThemeTypes.cssFileNameBase(item)]);
else {
<NUM_LIT>) {
"<STR_LIT>") && entity.hasOwnProperty("<STR_LIT>")) {
DROPDOWN_COMPONENT)) {
host;
properties.context,
properties.baseTemplate,
properties.properties,
on: properties. readonly,
type: "<STR_LIT>",
payload: {
type: "<STR_LIT>",
type: CLEAR_LISTITEMS,
case "<STR_LIT>":
columnreference.fieldDefinition.InternalName + "<STR_LIT>" + columnreference.fieldDefinition.LookupField);
fieldDefinition.InternalName + "<STR_LIT>");
"<STR_LIT>",
GOT_LISTITEM,
type: REMOVE_LISTITEM_ERROR,
type: "<STR_LIT>",
type: UPDATE_LISTITEM_SUCCESS,
payload: {
newState = _.cloneDeep(state);
item.GUID = action.payload.listItem.GUID;
GET_USER_PROFILES:
return updateSiteUser(state, action);
__
false } };
GET_PAGES_SUCCESS:
return {
tree
true,
payload
option));
const questionService.deleteQuestion(question)
null, getState);
simpleAction(ActionTypes.FOLLOW_QUESTION_START));
dispatch(getSelectedQuestion(question.id));
if (questionId) {
let message = handleHttpError(e);
else if (e.status === <NUM_LIT>) {
{
liAt: null,
followUrls: [],
canEdit: false,
type
ActionTypes.LIKE_QUESTION_START));
id));
"<STR_LIT>", properties };
type === '<STR_LIT>') {
Child {
type === '<STR_LIT>';
section.name);
result.push(`<STR_LIT>`);
else
result.push(`<STR_LIT>`);
content);
packages.reduce((acc, pkg) => {
libConfig && Array.isArray(pkgJson.libConfig.libExtensions)) {
`<STR_LIT>`] = [`<STR_LIT>`];
compilerOptions.outDir = config.compilerOptions.outDir.replace(/\\/g, '<STR_LIT>');
compilerOptions.noEmit = true;
};
let path.join(getNodeModulePath(),dirName, ...args);
size('<STR_LIT>')
modal.prompt()
this.theme)
true;
template) {
keys(defaultValues).forEach(key => {
"<STR_LIT>",
in layer) {
layers &&
postMessage({
type === '<STR_LIT>') {
}
totalLayerCount, layerCount },
<NUM_LIT> + (a.b - b.b));
execArgv: [] };
TransportKind.ipc },
TransportKind.ipc,
};
hasOwnProperty.call(event, '<STR_LIT>');
any = {
width, height } = inner;
replace(STRING_ rem, '<STR_LIT>');
Object.fromEntries(Object.entries(tokenGroup).map(([token, value]) => [token, rem(value)]));
return '<STR_LIT>';
includes('<STR_LIT>')) {
NODE_ENV === '<STR_LIT>') {
return {
number = <NUM_LIT>;
let alpha: number = <NUM_LIT>;
else {
intermediateValue;
red = <NUM_LIT>;
color);
<NUM_LIT>;
return year - <NUM_LIT>;
return date.getTime() > dateToCompare.getTime();
hours) {
minutes) {
durationKey += `<STR_LIT>`;
element.matches(focusableSelector)) {
selected } = useContext(RowContext);
x);
return;
id;
value,
return () => storage.init();
authProvider, injector);
ionViewCanEnter = function () {
accessToken,
then(() => {
getTime() - start.getTime();
times, <NUM_LIT>, <NUM_LIT>);
results[name] - results[compareTo]) / results[compareTo]);
add
"<STR_LIT>", {
any = {
dataKey;
headerRow = headerRow;
});
if (typeof column.style === '<STR_LIT>') {
text.split(splitRegex);
something;
candidate !== null &&
Error;
start: diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start),
return {
diagnostic.severity,
`<STR_LIT>` : value)).join('<STR_LIT>');
Comparison.GreaterThan;
LessThan : result > <NUM_LIT> ? Comparison.GreaterThan : Comparison.EqualTo;
b.toUpperCase();
return true;
if (parent === child)
length !== parentComponents.length)
result !== Comparison) {
contains(charCodes, text.charCodeAt(i))) {
string[] = [];
match, '<STR_LIT>');
version;
) {
shutdownTypeScript();
if (globalTSPattern.test(filename)) {
'<STR_LIT>');
return Math.atan2(y, x);
Math.min(Math.max(n, min), max);
y1);
random() * <NUM_LIT> - <NUM_LIT>;
width;
qz: number = vz % hf.zCount;
}
qy, hf.xCount);
n.y += fnorms[ni + <NUM_LIT>];
ev.keyCode] = true;
display = '<STR_LIT>';
innerHTML = html;
MeshBasicMaterial({
i = <NUM_LIT>;
x + y);
'<STR_LIT>';
{
<NUM_LIT>].substr(<NUM_LIT>);
return new Promise<any>((resolve, reject) => {
a, q);
cmn((b & d) | (~c & (~d)), a, b, x, s, t);
Blob([content], {
cb;
request, sender));
tags.message('<STR_LIT>'));
charAt(i);
break;
case '<STR_LIT>':
case '<STR_LIT>':
result.push('<STR_LIT>');
ch);
lower,
<NUM_LIT>;
if (m1) {
out, moduleId));
substring(node.pos, node.end);
colors.cyan('<STR_LIT>'), message, ...rest);
IDeclarationResult = JSON.parse( recipe);
filePath: DECLARATION_PATH,
documentation = documentation;
Diagnostic[] = [];
get(document);
return;
'<STR_LIT>');
return str;
document.languageId === '<STR_LIT>'
new PHPHoverProvider(), '<STR_LIT>', '<STR_LIT>'));
LanguageConfiguration.create(), validator);
return toString.call(value) === '<STR_LIT>';
if (pluginManager)
<NUM_LIT>) {
clearInterval(interval);
null, err => {
assert.equal(vscode.window.activeTextEditor.document.languageId, '<STR_LIT>');
module.id] = module;
let
includedModule] = true;
loader: any = require('<STR_LIT>');
modules = allMentionedModulesMap[module.name];
modulesMap[m.id] = m;
bundlePointsMap: IEntryPointMap = {
modulesGraph[m.id] = m;
entryPointsMap: IEntryPointMap = {
IBundleInfo = entryPoints[moduleToBundle];
allExcludes).forEach((excludeRoot: string): void => {
result.push({
) {
push({
contents
write);
SyntaxKind.ImportEqualsDeclaration;
return node && node.kind === ts.SyntaxKind.PropertyAssignment;
this._hasCSSAnimationSupport = true;
length; i++) {
break;
element[MS_DATA_KEY] = {
DATA_BINDING_ID);
null, true);
_DisposableListener(node, type, (event: any) => {
type = '<STR_LIT>';
node;
o instanceof HTMLElement;
formatTagType(char) !== FormatType.Invalid;
msg);
range.end - range.start <= <NUM_LIT>;
number = element.getAttribute('<STR_LIT>');
return text;
while (low < high) {
low = mid + <NUM_LIT>;
index = array.indexOf(element);
result: T[] = [];
j, <NUM_LIT>, element);
function () {
this, arguments);
number = Math.min(hsla.l, <NUM_LIT>);
<NUM_LIT>;
return p * t + q * t;
t > <NUM_LIT>) {
t;
other, lookFor);
if (elementASuffixMatch !== elementBSuffixMatch) {
<NUM_LIT>) {
lookFor, lookForNormalizedLower, scorerCache);
prefixCompare) {
scorerCache);
labelA === labelB) {
length) {
descriptor.value;
fnKey = '<STR_LIT>';
if (!fn) {
let memoizeKey = `<STR_LIT>`;
false,
LcsDiff(createStringSequence(original), createStringSequence(modified)).ComputeDiff();
nls.localize('<STR_LIT>', "<STR_LIT>", name));
name
isArray(error)) {
errors[<NUM_LIT>], verbose);
isUndefined(error.message)) {
if (types.isString(detail)) {
error[i].status)) {
exception.status, verbose);
error.message) {
func(arg1);
code);
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>].indexOf(code) !== -<NUM_LIT>;
<NUM_LIT>)))) {
return false;
hashVal);
hashVal);
hashVal);
case '<STR_LIT>':
language: '<STR_LIT>', value: text };
ParseErrorCode.PropertyNameExpected: return localize('<STR_LIT>', '<STR_LIT>');
Locale
attribute: str
text: str
return (mimes.length > <NUM_LIT> && mimes[<NUM_LIT>] === '<STR_LIT>');
trim());
array.length; i++) {
if (caseInsensitive) {
word) {
Types.isObject(source)) {
overwrite) {
destination[key] = source[key];
else {
number = b.length - <NUM_LIT>;
index: number;
push(first.charCodeAt(i));
zeroArray);
case '<STR_LIT>':
escapeRegExpPattern, '<STR_LIT>');
str.charAt(i) !== '<STR_LIT>') {
str.charAt(i) !== '<STR_LIT>' && str.charAt(i) !== '<STR_LIT>') {
code >= $a && code <= $z) || (code >= $A && code <= $Z);
str];
typeof (obj) === _typeof.undefined;
encodeURIComponent(str).replace(/[!'()*]/g, _encode);
v4().asHex();
return new V4UUID();
pipe(hashStream);
removeAllListeners();
decode(buffer, toNodeEncoding(encoding), options);
err, null);
fs.chmod, path, mode);
path);
map(c => dirExists(join(dirPath, c)))).then((exists: boolean) => {
nfcall(fs.readFile, path, encoding);
path);
i = <NUM_LIT>; i < length; i++) {
then(() => new Promise((resolve, reject) => {
e);
filePath) {
FileError.from, e);
return disposable: IDisposable;
serverName: '<STR_LIT>',
i = <NUM_LIT>; i < length; i++) {
number = <NUM_LIT>; i < <NUM_LIT>; i++) {
var kind: SyntaxKind;
var scanner = new Scanner(input);
expectedSegments, '<STR_LIT>');
segments.push(String(parsedPath.line));
const paths = [
number = columns - argLength;
number = <NUM_LIT>;
i = <NUM_LIT>; i < wrappedDescription.length; i++) {
text.lastIndexOf('<STR_LIT>', columns);
`<STR_LIT>`;
<NUM_LIT>);
var modelService = ensureStaticPlatformServices(null).modelService;
initStaticServicesIfNecessary();
startup.initStaticServicesIfNecessary();
keys = Object.keys(obj);
concat(ModesRegistry.getLanguages());
languageId, provider);
DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);
modes.DocumentSymbolProviderRegistry.register(languageId, provider);
context);
a, b) => {
i].lineNumber === cursors[i + <NUM_LIT>].lineNumber) {
min
<NUM_LIT>;
complain) {
INSTANCE.registerEditorContribution(ctor);
idx + <NUM_LIT>);
num];
string[] = [];
parts[num];
'<STR_LIT>';
lines.length; i++) {
rawLineDecorations.length = oldLength;
const lastPart = parts[parts.length - <NUM_LIT>];
characterCode < <NUM_LIT>;
{
lineComment: '<STR_LIT>', blockComment: '<STR_LIT>' });
range1.containsRange(range2);
new CollapsibleRegionsParentHierarchy(surroundingRegion, allRegions, model) : new CollapsibleRegionsChildrenHierarchy(surroundingRegion, allRegions, model);
number;
<NUM_LIT>) + <NUM_LIT>;
i < maxIndent; i++) {
model, model.getFullModelRange(), options);
{
expectedLines, expectedSelection);
model, position, suggestion, token))
EmbeddedCodeEditorWidget) {
ISnippet[] = [];
description: string = snippet['<STR_LIT>'];
'<STR_LIT>') {
body,
};
pinged);
setSelections('<STR_LIT>', [selection]);
cursor.dispose();
setSelections('<STR_LIT>', [selection]);
dispose();
H.CursorMove, args);
select: select });
cursor, {
to: CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter });
position.column
cursorCommand(cursor, H.DeleteWordLeft);
CursorWordLeft);
assert.deepEqual(model.getLineContent(), msg);
applyEdits(edits);
false,
model, lineNumber, []);
len: number = actualDecorations.length; i < len; i++) {
content);
text, msg);
else {
false, expectedTabSize, text, msg);
else {
push({
for (let i = <NUM_LIT>; i < actual.length; i++) {
number[] = [];
rawText += '<STR_LIT>';
}
let mapper = factory.createLineMapping(rawText, tabSize, breakAfter, wrappingIndent);
length; i < len; i++) {
rawText.charAt(i);
currentLine);
number = tokens.getTokenStart(tokenIndex);
var
lineContent.length);
getLineContent: (): string => lineContent,
tokenStart, tokenEnd),
}
return true;
while (tokenIndex >= <NUM_LIT>) {
true;
} while (tokenIndex < tokensOnLine);
<NUM_LIT>;
return false;
return (tokenType) {
return /^\s*$/.test(s);
'<STR_LIT>';
replace(/\n/g, '<STR_LIT>' + indent + '<STR_LIT>');
`<STR_LIT>`;
version.trim();
index.length !== <NUM_LIT>) {
new MultiLineMatcher(matcher);
result;
`<STR_LIT>`] = process.versions && (<any>process).versions['<STR_LIT>'];
firstSessionDate);
lastSessionDate;
value));
return themeId.split('<STR_LIT>')[<NUM_LIT>];
TestConfigurationService());
commands);
require(modulePath);
<NUM_LIT> };
<NUM_LIT>,
r.hoverMessage
fromRange(r)
types.Position(position.lineNumber - <NUM_LIT>, position.column - <NUM_LIT>);
args.value;
case ActiveEditorMovePositioningBy.GROUP:
configuration.workspacePath);
created_at),
renderer = rendererFromMsg(msg);
remoteCom.send(msg.data);
}
socket = remoteCom.open();
reason);
idx, <NUM_LIT>);
reason: any): void {
console.log(`<STR_LIT>`);
}, <NUM_LIT>);
err => {
'<STR_LIT>').replace(/\t/g, '<STR_LIT>') : value;
container, '<STR_LIT>');
addClass(container, '<STR_LIT>' + value);
addClass(container, '<STR_LIT>');
style.display = '<STR_LIT>';
FileStat(toResource(path), undefined, isFolder, hasChildren, name, mtime);
GitDiffEditorInput || input instanceof NativeGitIndexStringEditorInput;
if (range) {
git: IGit = {
env['<STR_LIT>']) {
root = process.env['<STR_LIT>'];
var port: number = argv[<NUM_LIT>].substring(<NUM_LIT>, argv[<NUM_LIT>].length - <NUM_LIT>);
provider) => {
then(() => result);
err) {
c(false);
false);
border
focus();
length; i++) {
new NativeMacUIKeyLabelProvider(remaps);
elStyle.type = '<STR_LIT>';
else {
property: string) => {
target: Object, property: string) => {
return bypassLifecyclehooks ? '<STR_LIT>' : '<STR_LIT>';
getRepository(User);
return (arr === undefined) {
number = <NUM_LIT>; i < arr.length; i++) {
return item;
state) as StateSource<R>;
state;
else {
match = str.match(ProtocolMatcher);
downloadApp(apsPath))
next(data: any) {
select("<STR_LIT>")
NUM_LIT>),
'<STR_LIT>', url: '<STR_LIT>' });
});
RNFS.ExternalStorageDirectoryPath + "<STR_LIT>"))
Menu, {
actions.installApp)
);
src: `<STR_LIT>`,
url: "<STR_LIT>",
"<STR_LIT>"),
version),
styles.installContainer }, [
every(connectedPub => {
invitationUrl);
console.error(err);
action === '<STR_LIT>';
element.nodeName.toLowerCase() == '<STR_LIT>';
<NUM_LIT>) {
nodeName === '<STR_LIT>') {
else {
events('<STR_LIT>')
merge(domSource.select('<STR_LIT>').events('<STR_LIT>'), domSource.select('<STR_LIT>').events('<STR_LIT>')).mapTo(createResizeAction('<STR_LIT>', '<STR_LIT>', -<NUM_LIT>));
colSTR_LIT>')[<NUM_LIT>]).events('<STR_LIT>')
const (!matrixAElem || !matrixBlem) {
return {
return measurements;
sortinitReducer$);
state.step === <NUM_LIT> && state.canInteract) ||
matrixA.values.numberRows + state.matrixB.values.numberColumns - <NUM_LIT>;
prevState,
matrixC,
div(`<STR_LIT>`, '<STR_LIT>'),
div(`<STR_LIT>`, '<STR_LIT>'),
td([
]),([
showResizers ? [renderColsResizer('<STR_LIT>')] : []),
row || <NUM_LIT>);
nextElem.style.top = `<STR_LIT>`;
remove(styles.animatedCell);
top = `<STR_LIT>`;
'<STR_LIT>';
easeInOut;
y: any): string => `<STR_LIT>`));
Stream<string> = state$.map(state => {
attrs: {
h(Text, {
escapeRegExpPattern, '<STR_LIT>');
replace(new RegExp(escapeRegExp(find), '<STR_LIT>'), replace);
clone(),
Text, {
right: <NUM_LIT>,
rotateZ: '<STR_LIT>' },
goToProfile$: source.select('<STR_LIT>').events('<STR_LIT>').mapTo(null),
getFeedReadable,
'<STR_LIT>',
return {
<NUM_LIT>);
EXP_MAX;
return (y - from) / (to - from);
key)) {
string = null;
forEach(callback);
`<STR_LIT>`;
code);
compile(`<STR_LIT>`)["<STR_LIT>"];
return compile(`<STR_LIT>`)["<STR_LIT>"];
a1.valueType, a1, a2);
{
"<STR_LIT>",
newDate = cloneDate(d);
key);
get) {
throw new Error(`<STR_LIT>`);
any = instance[key];
writable: true,
return decorator(arity);
arity);
decorator(wait, options);
return decorator(resolver);
const (const src of srcs) {
decorator();
decorator(start);
from, (value: any, key: string) => to[key] = value);
`<STR_LIT>`;
{
return `<STR_LIT>`;
while (constructor) {
return await glob(pattern, {
CLASS_marker) === <NUM_LIT>);
ix], ix, list);
asyncResolvers) {
const (typeof injection === '<STR_LIT>') {
}
cave = await app.cave();
Console, '<STR_LIT>');
Reflector;
'<STR_LIT>';
if (type === Object) {
return false;
operation('<STR_LIT>', path, spec);
ModelDefinitionSyntax = {
target.definition = modelDef;
propertyDef.type = designType;
paramSpec.name !== '<STR_LIT>')
true;
options && server.options.http ? server.options.http.port : <NUM_LIT>;
num2;
null)
normalizedPath);
TrayMenu);
iconayIcon. MouseEvent, e => {
parseInt(name, <NUM_LIT>));
channelChatTabs[name].addInfo(`<STR_LIT>`);
createServer(app);
on("<STR_LIT>", onWelcome);
onWelcome);
}
chatTab != null)
IChatTab = channelChatTabs[event.target];
for chatTab = channelChatTabs[event.target];
const chatTab = channelChatTabs[channel];
if
chatTab = privateChatTabs[target];
newsElt.innerHTML = html;
start();
start();
if (!text) {
item.pluginName : item.id;
null ? item.pluginName : id;
stdout.on("<STR_LIT>", (data: Buffer) => {
"<STR_LIT>";
systemId;
return;
id === "<STR_LIT>")
null) {
true;
presenceElt.value = settings.presence;
value = value;
any = tabStrip.tabsRoot.children[tabIndex];
null) {
querySelector("<STR_LIT>") as HTMLLIElement);
else {
tabElt == null) {
series([
callback (xhr.status === <NUM_LIT>) {
response);
event.target.error);
"<STR_LIT>";
return valueOrText;
if (err != null) {
ipcCounter++;
"<STR_LIT>":
id).textContent = value;
if (keyCode === <NUM_LIT>) {
case "<STR_LIT>":
break;
case "<STR_LIT>":
"<STR_LIT>":
tabs.open();
type;
badges.byId[newBadge.id] = newBadge;
HTMLLIElement = entriesTreeView.widget.treeRoot.querySelector(`<STR_LIT>`) as HTMLLIElement;
`<STR_LIT>`;
widget.treeRoot.querySelector(`<STR_LIT>`) as HTMLLIElement;
entryElt, nodeType, index);
entryId == null)
entryElt);
entryElt of entryElts) {
toggle("<STR_LIT>");
}
true });
querySelector("<STR_LIT>") as HTMLButtonElement).disabled = true;
document.querySelector("<STR_LIT>") as HTMLDivElement).hidden = true;
hidden = true;
null) ? "<STR_LIT>" : "<STR_LIT>";
liElt);
onActivationEvent();
if (runWindowDestroyTimeout != null) {
tabsRoot.children[tabIndex];
e: Event) {
style.pointerEvents = "<STR_LIT>";
downloadURL, pluginPath, (err) => {
serverConfigPath);
config.server[key] = config.defaults[key];
as any);
sessionSecret = "<STR_LIT>";
getHubUrl());
cookies["<STR_LIT>"]);
err != null) {
sync(`<STR_LIT>`);
stdout, <NUM_LIT>);
filename;
server, cb);
migrateTo2(server, cb);
false;
yellow('<STR_LIT>'));
textContent: label });
null) {
html("<STR_LIT>", {
parent, type: "<STR_LIT>", value }) as HTMLInputElement;
shape.type) {
move(shape);
ui.nodesTreeView.clearSelection();
any = data.projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", dropPoint.parentId, nodeIds);
indexOf(id) === dropPoint.parentId)
const options: any = {
node.name,
newName == null)
true;
THREE.NearestFilter;
else {
name
if (err != null) {
SupClient.i18n.t("<STR_LIT>", {
outputFolder, total: progress.total });
err, null);
null)
HTMLSpanElement = document.createElement("<STR_LIT>");
data.sceneUpdater.setSceneAsset(data.sceneSettingsResource);
prefab) {
name = name;
clearSelection();
value = <NUM_LIT>;
setVisible((event.target as HTMLInputElement).checked);
cameraVerticalAxis = axis;
position.z).toString()
ui.transform.positionElts[i].value = values[i];
componentEditors[componentId].destroy();
hidden = true;
return;
node);
ui
ui.prefabRow);
string[] = [];
new RegExp("<STR_LIT>", "<STR_LIT>"), "<STR_LIT>");
log(`<STR_LIT>`);
checked = data.shaderAsset.pub.light;
vertexEditor.setText(asset.pub.vertexShader.text);
data.vertexShader = vertexShader;
return;
return;
VALUE];
target;
liElt: HTMLButtonElement = document.createElement("<STR_LIT>");
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", nodeId, "<STR_LIT>", (componentId: string) => {
mouseButtons[<NUM_LIT>].wasJustReleased) {
patternBackgroundActor.threeObject.visible = false;
options = {
layer.name,
newName == null)
selectedTileActor.getLocalPosition(x, y)
threeObject.visible = true;
y = <NUM_LIT>; y < height; y++) {
const (let x: number = -tmpScale.x - <NUM_LIT>; x >= <NUM_LIT>; x--) {
return;
texture = new SupEngine.THREE.Texture(img);
callback
null) {
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", name, options, (nodeId: string) => {
string = "<STR_LIT>";
defs;
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", globalDefs);
null;
query.asset],
setTimeout(() => {
asset.id);
name) {
for (let i = <NUM_LIT>; i < results.length; i++) {
else {
tableElt != null)
break;
tableElt.textContent = name;
string;
line: number = -<NUM_LIT>;
}
assetId] = {
rankInLine;
slice();
createElement("<STR_LIT>");
textElt.className = "<STR_LIT>";
"<STR_LIT>", (err, data) => {
runBuildCommand(cmd, args, cwd, sha, tempDir);
subj);
unsubscribe();
argv.help) {
exit(<NUM_LIT>);
type === '<STR_LIT>') {
git(['<STR_LIT>', '<STR_LIT>', sha], targetDirname);
<NUM_LIT>];
tgt);
x.match(/-[a-f0-9A-F]{
new RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>');
return new Promise((resolve, reject) => {
'<STR_LIT>';
return fetchJSON(`<STR_LIT>`, token);
if (fs.statSync(target).isDirectory()) {
acc.push(target);
fs.statSync(file);
dir);
resolve) => {
return <NUM_LIT>;
val: any = arr[name];
res += item[<string>name];
true,
sync('<STR_LIT>');
return;
button === <NUM_LIT>) {
event.button === <NUM_LIT>) {
return;
if
target = window.location.href;
toUpperCase() !== '<STR_LIT>') {
<NUM_LIT>) {
push('<STR_LIT>', schema);
name;
length === <NUM_LIT>) {
schema));
return interfaces;
output += interfacePromises
true,
`<STR_LIT>`;
`<STR_LIT>`;
else {
return retval;
x) {
let (showAxis) {
if (columns === <NUM_LIT>) {
else {
Math.floor(chartWidth);
}
chartWidth -= offset;
return typeof value === '<STR_LIT>';
groups.left),
const column of columns) {
null || value === undefined;
row = rows[i];
diff: number;
reverse) {
end: index + <NUM_LIT>
range = {
selected.splice(selectedIndex, <NUM_LIT>);
args, obj, context);
method.accessType !== '<STR_LIT>') {
acceptingParams.push({
any[] = [];
return params ? `<STR_LIT>` : '<STR_LIT>';
makeId('<STR_LIT>' + cursor);
return method;
modelName;
pager = '<STR_LIT>';
replace('<STR_LIT>', currentPage);
function (currentPage > <NUM_LIT>) {
start(tpl, start);
leftEllipsis = true;
minWidth;
end; p++) {
rightEllipsis) {
arr);
end; start += step) {
number = <NUM_LIT>; i < arr.length; i++) {
"<STR_LIT>"]), {
"<STR_LIT>"]), <NUM_LIT>);
array.flatten([<NUM_LIT>, <NUM_LIT>]), [<NUM_LIT>, <NUM_LIT>]);
<NUM_LIT>],
array.range(<NUM_LIT>, <NUM_LIT>), [<NUM_LIT>, <NUM_LIT>]);
assert.strictEqual(string.unique("<STR_LIT>"), "<STR_LIT>");
setTimeout(() => {
true);
(): void => {
for (let i = <NUM_LIT>; i < value.length; i++) {
<NUM_LIT>) {
c3 < <NUM_LIT>)
i++)) : -<NUM_LIT>;
return /^[-+]?\d+$/.test(value);
value);
strictEqual(Url.format(Url.parse("<STR_LIT>")), "<STR_LIT>");
HSL = toHSL(color);
me = this;
g: number = me.g / <NUM_LIT>;
new Date()), "<STR_LIT>");
strictEqual(currency.sub(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
Date(date.getTime() + value * <NUM_LIT>);
addMonth(date, value * <NUM_LIT>);
Date("<STR_LIT>"), <NUM_LIT>), +new Date("<STR_LIT>"));
addWeek(new Date("<STR_LIT>"), <NUM_LIT>), +new Date("<STR_LIT>"));
new Date("<STR_LIT>")), true);
iv: number = rkey >>> <NUM_LIT>;
<NUM_LIT>), "<STR_LIT>");
value);
neg) {
<NUM_LIT>);
parseInt(b, <NUM_LIT>) * <NUM_LIT> + parseInt(c, <NUM_LIT>) + <NUM_LIT>)));
false, '<STR_LIT>');
func.getSource(function (x) {
<NUM_LIT>);
assert.strictEqual(html.decodeHTML("<STR_LIT>"), "<STR_LIT>");
if
let i = <NUM_LIT>; i < len; i++) {
return binaryToString(raw(value));
<NUM_LIT>;
length === <NUM_LIT>) {
bkey[i] ^ <NUM_LIT>;
'<STR_LIT>';
"<STR_LIT>";
indexOf("<STR_LIT>");
integerPart = char;
<NUM_LIT>; i--) {
max(min, num));
floor(Math.random() * (max - min + <NUM_LIT>)) + min;
null), true);
strictEqual(check.isNumber("<STR_LIT>"), true);
<NUM_LIT>), <NUM_LIT>);
iterable as any)[i] as T;
else {
return i;
obj) {
obj[key] === value) {
Object.prototype.hasOwnProperty.call(obj, key)) {
iterable) {
undefined] }), {
}
assert.strictEqual(all, "<STR_LIT>");
"<STR_LIT>"], (v: string): void => {
<NUM_LIT>, <NUM_LIT>], function (n, i) {
<NUM_LIT>], function (v, i) {
"<STR_LIT>");
strictEqual(object.get({
map({
assert.strictEqual(object.reduce([<NUM_LIT>, <NUM_LIT>], function (x: number, y: number) {
test = require("<STR_LIT>");
"<STR_LIT>");
assert.strictEqual(object.type("<STR_LIT>"), "<STR_LIT>");
strictEqual(object.type(false), "<STR_LIT>", "<STR_LIT>");
strictEqual(object.type(<NUM_LIT>), "<STR_LIT>", "<STR_LIT>");
object.type("<STR_LIT>"), "<STR_LIT>", "<STR_LIT>");
Date()), "<STR_LIT>", "<STR_LIT>");
string[] = splitPath(path);
string = parts[<NUM_LIT>];
string = paths[i];
"<STR_LIT>" }), "<STR_LIT>");
y + rect.height;
height: <NUM_LIT> }), {
return obj instanceof RegExp;
test("<STR_LIT>"), true);
childIndex) {
if match = matchResult[i];
new Date()), "<STR_LIT>");
<NUM_LIT>, <NUM_LIT>].every(function (item) {
<NUM_LIT>, <NUM_LIT>].filter(function (item) {
<NUM_LIT>, <NUM_LIT>].includes("<STR_LIT>"), true);
"<STR_LIT>"].indexOf("<STR_LIT>"), <NUM_LIT>);
x + y; }), <NUM_LIT>);
len = match.index;
return t.join("<STR_LIT>");
string.containsWord("<STR_LIT>", "<STR_LIT>"), true);
null), true);
<NUM_LIT>), "<STR_LIT>");
toCamelCase("<STR_LIT>"), "<STR_LIT>");
"<STR_LIT>");
switch (c) {
push(c);
x - base);
return x;
String.fromCharCode.apply(null, new Uint8Array(value));
decodeUTF8("<STR_LIT>"), "<STR_LIT>");
else {
key in formElem) {
disabled === '<STR_LIT>') {
const value of input.value) {
const value: string = option.value;
"<STR_LIT>":
name, input.value || "<STR_LIT>");
Element) {
const key in result) {
append(key, item);
else
Cookie = getCookie(name);
path.length), expires, secure);
if days: number = start.getDate();
nodeNode(node, content, false);
node, content, false);
if (!node) {
return elem.innerHTML;
indexOf("<STR_LIT>" + className + "<STR_LIT>") >= <NUM_LIT>;
if (listeners[i] === listener) {
offsetParent as HTMLElement) && result.nodeName !== '<STR_LIT>') {
content, false);
elem as any)[attrName] = value;
elem as any)[attrName] = value;
"<STR_LIT>"]) {
string = location.href;
in document) || document.hidden) {
callback();
if (enable) {
mouseEnter(e);
timer != null) {
});
'<STR_LIT>');
scrollable);
y;
width + offset;
<NUM_LIT>) {
y != null) {
(NUM_LIT>;
if
deltaY)) {
}
`<STR_LIT>`;
anchor.href,
location.hostname,
anchor.protocol ? "<STR_LIT>" : "<STR_LIT>",
path: "<STR_LIT>" });
options.method : '<STR_LIT>';
SLASH);
'<STR_LIT>') ? `<STR_LIT>` : uri;
uri;
fetch: Fetch) => definedUri.push(fetch.uri));
result: FetchResult;
setTimeout(resolve, wait);
return new Response(result.response.data, result.response.responseInit);
originalValues;
query),
'<STR_LIT>',
creator: ['<STR_LIT>', '<STR_LIT>']
this.post<null>(`<STR_LIT>`, {
this.delete('<STR_LIT>', _messageId);
this.get<PostSchema>(`<STR_LIT>`, query);
get<ProjectSchema[]>(`<STR_LIT>`, query);
query: {
'<STR_LIT>']
'<STR_LIT>']
post<any>('<STR_LIT>', {
`<STR_LIT>`, patch);
return obj = {
count,
recent;
return myRecent.map(x => {
path.length - <NUM_LIT>) !== '<STR_LIT>') {
JSON.parse(JSON.stringify(a));
new SDKFetch;
<NUM_LIT>) {
temp = array[counter];
boolean = false;
currentLayerIds: number[] = [];
nodeId + "<STR_LIT>";
newNode: Node = network[layerIdx + <NUM_LIT>][j];
any = canvas.getContext("<STR_LIT>");
x, d.y);
parentNode).append("<STR_LIT>")
OFFLINE) {
state.problem === Problem.DATA) {
i];
node() as HTMLAnchorElement;
'<STR_LIT>',
prop, HIDE_SUFFIX)) {
direction);
storedLanguage;
return new D3StyleLayoutAdaptor();
y);
for (a = <NUM_LIT>; a < n; ++a) {
return <NUM_LIT>;
return c;
if (dnC)
else {
else {
var i = <NUM_LIT>; i < a.length; ++i) {
length));
la);
Object.keys(m).length + Object.keys(n).length;
xRect, <NUM_LIT>);
if (!ti)
number = arg.indexOf('<STR_LIT>');
target);
exit(<NUM_LIT>);
stringify(location);
line === b.range.start.line
unbind(Tree);
child.bind(TreeExpansionService).toDynamicValue((ctx: any): any => ctx.container.get(TreeExpansionService));
ITWidget).toSelf();
cancelledMessage);
'<STR_LIT>' : command,
true;
return new RemoteServer(worker, target);
worker, logger);
try {
toSelf();
bind(FileSystem).toDynamicValue(ctx => {
return typeof (error as NodeJS.ErrnoException).code === '<STR_LIT>';
resolve, time));
get(ProblemWidget);
bind(PreferenceContribution).toDynamicValue(ctx => ctx.container.get(PreferenceContribution)).inSingletonScope();
'<STR_LIT>');
for (const key in properties) {
mixin({
constResolve(Environments, available, expected, message);
name, message);
suite = createSuite({
method] = function () {
resolve();
promise;
thrownError;
finished = true;
suite.tests.push(test);
dfd.resolve();
push(test);
Error('<STR_LIT>'));
strictEqual(suite.error!.message, '<STR_LIT>', '<STR_LIT>');
url);
options === '<STR_LIT>') {
url !== '<STR_LIT>') {
typeof options !== '<STR_LIT>') {
method === '<STR_LIT>');
true,
options.maxRedirects,
maxRetries,
err) {
reject(err);
try {
res.body.on('<STR_LIT>', reject);
getBody;
dbName);
`<STR_LIT>`;
addProperty(prop);
result = path;
call(params, key)) {
key + "<STR_LIT>");
PATH_SEGMENT_ENCODINGS, decodeURIComponent);
if (queryParams) {
const;
number = csDragImage.transitionDuration;
return;
const
pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);
touchIdentifier) {
const (cs.getPropertyValue("<STR_LIT>" + i) === "<STR_LIT>") {
setProperty('<STR_LIT>', '<STR_LIT>', '<STR_LIT>');
removeAttribute("<STR_LIT>");
ev, handler);
scrollWidth : el.scrollWidth;
_
height);
<NUM_LIT>);
if
className.includes(cssClassName);
element.className.replace(new RegExp(cssClassName, '<STR_LIT>'), '<STR_LIT>');
false;
id);
return new Deferred();
needle.length) === needle;
constructor, key, transformFn, options);
return classTransformer.classToClassFromExist(object, fromObject, options);
iocContainer;
ValidationTypes.ALLOW,
target: object.constructor,
target: object.constructor,
ValidationTypes.IS_DATE,
constructor,
target: object.constructor,
target: object.constructor,
object.constructor,
object.constructor,
constructor,
ValidationTypes.ValidateNested,
as ValidatorConstraintInterface;
validationArguments);
return `<STR_LIT>`;
return '<STR_LIT>';
options.target,
instance;
throw error;
target: target,
"<STR_LIT>",
if (Array.isArray(exported)) {
};
return [loadFileClasses];
dtsExtension) !== -<NUM_LIT>;
clazz.new();
return {
return a + b;
array[i], result);
<NUM_LIT>) === '<STR_LIT>') {
version = version + <NUM_LIT>;
version =undoVersion;
try {
return {
error.title;
filename);
value === '<STR_LIT>' ? [value] : undefined;
charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
'<STR_LIT>');
<NUM_LIT>) {
unicode }));
i < count; i++) {
file, args), expected);
substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
floor(b + (b * amount)), MAX);
toString(<NUM_LIT>);
undefined;
memoryLocationPlugin);
now();
progress, b, c, d);
key] || "<STR_LIT>";
lang: any) => {
baseLanguagesMap)
`<STR_LIT>`);
if
beautifierOptions) {
beautifierOptions === "<STR_LIT>") {
string[] = [];
options.push({
register({
let result = source;
new Promise<VpnDevice>((resolve, reject) => {
return !state.user.isRegistered;
FULFILLED:
ignoreRemoteUserRequest = true;
break;
true;
break;
Verify(PeerPubKey, delegate);
h = <NUM_LIT>;
Buffer(val, '<STR_LIT>');
delete networks[networkName][userId];
test(lang);
buffer)[<NUM_LIT>];
bytes = new Uint8Array(buffer);
address: info.localAddress,
if (typeof info.remoteAddress == '<STR_LIT>' &&
port: info.peerPort
data);
name, () => {
byteArray[<NUM_LIT>]);
byteArray.subarray(<NUM_LIT>)
<NUM_LIT>) {
(r.command as string) != '<STR_LIT>') {
r).length > <NUM_LIT>) {
index];
return items.reduce((acc, item) => acc + item, <NUM_LIT>);
return {
id));
send('<STR_LIT>');
close();
signal);
borderColor: rgba(colors, <NUM_LIT>),
index];
nodeName || (node.prop && node.attr && node.find)));
return typeof value === '<STR_LIT>';
<NUM_LIT>]
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>'],
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>'],
'<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
}
this, i);
text.replace(/\\(.)/g, `<STR_LIT>`);
return input.replace(tagRe, '<STR_LIT>');
forEach(key => {
'<STR_LIT>' ? [propsToSkip] : propsToSkip;
return value.replace(/\s+/g, '<STR_LIT>');
string[];
return (date: Date) => {
current = last.clone();
current = last;
return {
moment: last,
e => {
styles: {
case '<STR_LIT>':
const
rv)), <NUM_LIT>);
indexOf('<STR_LIT>') > <NUM_LIT>) {
<NUM_LIT>) {
'<STR_LIT>';
as HTMLInputElement;
'<STR_LIT>');
files: FileEntry[]) => {
payload, reqid: uniqId() });
<NUM_LIT>) + <NUM_LIT>;
role && p1.color === p2.color;
state.pieces[key] && state.pieces[key].role === '<STR_LIT>';
dests = undefined;
pieces[dest] ||
state.turnColor = undefined;
if (state.drawable.current) {
state.drawable.current) {
}
config.hasOwnProperty('<STR_LIT>'))
e.preventDefault();
orig === e.target)
cur.started = true;
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
break;
tagName === '<STR_LIT>';
p.role + '<STR_LIT>' + p.color;
style.top = pos[<NUM_LIT>] + '<STR_LIT>';
pos[<NUM_LIT>]) * <NUM_LIT>,
xs.indexOf(x) !== -<NUM_LIT>;
key === key)
askWorker(worker, {
'<STR_LIT>'.replace(/[xy]/g, function (c) {
const filePath = eventData.path;
pieces[<NUM_LIT>]));
const
new Promise<ReadonlyArray<[
return lang;
sound.dong();
LogView.clear();
isPatron };
!analyseable(data);
data);
for (const possibleMove of possibleMoves) {
'<STR_LIT>';
'<STR_LIT>';
withRating ? '<STR_LIT>' : '<STR_LIT>');
status.id === ids.aborted;
Variant = variantMap[key];
key];
redraw();
<NUM_LIT>);
else
any[] = [];
}
window.cordova.plugins.Sentry.setSentryDSN(globalConfig.sentryDSN);
case '<STR_LIT>':
break;
case '<STR_LIT>':
body, `<STR_LIT>`);
}
then((): void => {
<NUM_LIT>) {
catch((err: Error): void => {
redraw();
if (v === false)
else
numValue));
'<STR_LIT>',
'<STR_LIT>',
return Promise.all([
constants.urls.kidMode);
redirect)
encodeURIComponent(obj.cookie.domain),
join('<STR_LIT>');
k);
<NUM_LIT>) {
new Promise<any>((resolve, reject) => {
data: AnalyseDataWithTree) => {
p === p.toLowerCase();
undefined ? mateWinningChances(ev.mate) : cpWinningChances(ev.cp!);
color === e1.color
icon,
'<STR_LIT>': '<STR_LIT>',
attrs: {
retro;
h('<STR_LIT>', {
mo = document.getElementById('<STR_LIT>');
<NUM_LIT>;
a === null;
return data.game.id === '<STR_LIT>';
<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
menu.view(ctrl.menu),
h('<STR_LIT>', [
white = h('<STR_LIT>', {
availTabs),
if h('<STR_LIT>', [
View, {
check) : null
key = '<STR_LIT>';
availableVariants;
key: '<STR_LIT>'
'<STR_LIT>': '<STR_LIT>'
map(v => h('<STR_LIT>', {
h('<STR_LIT>', [
height: <NUM_LIT>,
e, {
'<STR_LIT>') : '<STR_LIT>');
el) {
ply, withDots));
truncate: opts.truncate,
isOpen())
'<STR_LIT>'
h('<STR_LIT>', {
h('<STR_LIT>', [
menu.open);
key: '<STR_LIT>',
key: '<STR_LIT>',
[
color });
'<STR_LIT>' +
cardStyle }, [
key
View
ontap(() => router.set('<STR_LIT>')) }),
const cl in classes) {
'<STR_LIT>' :
{
HTMLElement = (e.target as HTMLElement);
viewportDim().vw >= <NUM_LIT>;
return '<STR_LIT>';
viewportDim: ViewportDim = {
clientHeight
apiILY_Puzzle_URL);
showKeyboard(e);
addEventListener('<STR_LIT>', onKeyboardShow);
})
CloseSlideHandlerState = {
activeX: <NUM_LIT>,
const.addEventListener('<STR_LIT>', (e: Event) => {
on('<STR_LIT>', () => {
e.target.id);
if
maxSlide;
isScrolling) {
const
translateMenu(el, e.deltaX);
resolve();
'<STR_LIT>', '<STR_LIT>', <NUM_LIT>, '<STR_LIT>')
new Promise<void>((resolve, reject) => {
false,
TouchInput,
Hammer.DIRECTION_HORIZONTAL,
threshold: <NUM_LIT>,
target as HTMLElement).classList.contains('<STR_LIT>')) {
target.className.startsWith('<STR_LIT>')) {
state.menuElement.querySelector('<STR_LIT>'));
new Hammer.Chose({
delta: any = e.deltaX;
delta
<NUM_LIT>, onFlag);
'<STR_LIT>'
key: '<STR_LIT>'
plugins.toast.show(i18n('<STR_LIT>'), '<STR_LIT>', '<STR_LIT>');
return (p.loaded / p.total) * <NUM_LIT>;
overflow = overflow;
removeChild(ta.firstChild);
overflow = '<STR_LIT>';
if (chat) {
<NUM_LIT>) {
<NUM_LIT>;
toFixed(length).substr(<NUM_LIT>);
ta) {
return fetchJSON('<STR_LIT>', undefined, true)
<NUM_LIT>] && hasBranching(node.children[<NUM_LIT>], maxDepth - <NUM_LIT>));
node.children[<NUM_LIT>];
return tree.size(path);
fixed,
orientation,
[
t('<STR_LIT>'), {
i18n('<STR_LIT>')
onsubmit: function (e: Event) {
if (exists) {
'<STR_LIT>',
h('<STR_LIT>', [
formError && formError.password ?
className: formError && formError.password ? '<STR_LIT>' : '<STR_LIT>',
'<STR_LIT>' : '<STR_LIT>',
return;
ifd.fen = d.fen;
variant.key) !== -<NUM_LIT>;
width = <NUM_LIT>;
vw * <NUM_LIT>;
if (vw >= <NUM_LIT>)
<NUM_LIT>;
attrs: {
then(res => res.body);
method: '<STR_LIT>',
true);
isLoadingNextPage(true);
false);
res;
loadNextPage,
else
undefined;
method: '<STR_LIT>' });
return fetchJSON(`<STR_LIT>`);
'<STR_LIT>' });
'<STR_LIT>' ? san.slice(<NUM_LIT>) : san;
uci.length)];
uci.indexOf("<STR_LIT>"));
castles: parts[<NUM_LIT>],
halfmove: parts[<NUM_LIT>],
then(value => {
any = {
'<STR_LIT>' : '<STR_LIT>';
while (s.length < size) {
number = Number(s);
string[] = fullName.split('<STR_LIT>');
switch (code) {
storage.set(aiStorageKey, game);
game);
'<STR_LIT>':
case '<STR_LIT>':
navigator).hardwareConcurrency || <NUM_LIT>;
uci960p = setOption('<STR_LIT>', '<STR_LIT>' === variant);
undefined, true);
<NUM_LIT>,
string = config.key;
var deleteId = record[key];
i = <NUM_LIT>;
i) {
key);
any = record[key];
recordMap[recordId] = record;
record);
unsaved: false,
true,
"<STR_LIT>"
"<STR_LIT>"
name: "<STR_LIT>"
"<STR_LIT>"
deps);
current, record);
unsaved: false,
unsaved: true,
return [
str.replace(/^\S/, (s: any) => {
floor(new Date().getTime() + Math.random() * <NUM_LIT>)).slice(-<NUM_LIT>);
if (obj[name] === undefined) {
new = obj[item];
i];
return newConfigs;
item,
guide().line({
style(style[<NUM_LIT>], style[<NUM_LIT>]);
return chart.style(style);
return Math.floor(Math.random() * max);
slot % images.length]];
new DatagridPropertyComparator(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>));
"<STR_LIT>" })).toBeLessThan(<NUM_LIT>);
false);
this.comparator.compare({
this.comparator.compare({
a: null }, {
my: {
beforeEach(function () {
stateDebouncer);
expect(component.clarityDirective).toBeDefined();
open = true;
function () {
filter;
toEqual(true);
filter.active, function () {
context.clarityDirective.activeFilter, function () {
detectChanges();
function () {
trim()).toMatch("<STR_LIT>");
toMatch("<STR_LIT>");
context.testComponent.customFilter = filter;
toggle.textContent.trim()).toBe("<STR_LIT>");
context = this.create(ClrDatagridColumn, HideableTest, PROVIDERS_NEEDED);
expect(context.clarityElement.textContent.trim()).toMatch("<STR_LIT>");
buttons.length).toBe(<NUM_LIT>);
button = new Button();
declarations: [TestComponent] });
afterEach((): void => {
it("<STR_LIT>", () => {
beforeEach(function () {
beforeEach(function () {
null;
expect(testCssClass("<STR_LIT>")).toBe("<STR_LIT>");
"<STR_LIT>";
}
expect(testShape("<STR_LIT>")).toBe("<STR_LIT>");
"<STR_LIT>";
null);
expect(testCssClass(null)).toBe("<STR_LIT>");
function () {
null);
null);
function () {
null);
testShape("<STR_LIT>")).toBe("<STR_LIT>");
toBe("<STR_LIT>");
null);
toBeTruthy("<STR_LIT>");
FormControlService();
true, "<STR_LIT>");
null;
nav).toBeNull();
testVal = val;
toBe(true);
testVal = val;
let testVal: boolean;
configureTestingModule({
fixture.detectChanges();
});
if (direction === "<STR_LIT>") {
function () {
this.fixture.detectChanges();
componentInstance.open;
function () {
true;
open = false;
<NUM_LIT>);
change;
fixture.detectChanges();
expect(nbChanges).toBe(<NUM_LIT>);
fixture.componentInstance;
this.fixture.destroy();
it("<STR_LIT>", function () {
testComponent] });
destroy();
scrollTop;
expect
By.css('<STR_LIT>')).nativeElement;
this.fixture.detectChanges();
remaining -= step;
scrollEvent);
function (this: TestContext) {
Virtual);
this.scroll, () => {
textContent.trim()).toEqual("<STR_LIT>");
<NUM_LIT>, <NUM_LIT>];
fake
this.scroll(<NUM_LIT>);
beforeEach(function () {
pagesAsArray).toEqual([]);
toString();
});
clear();
"<STR_LIT>");
expect(pageCollectionService.lastPage.id).toEqual(context.clarityDirective.pages.last.id);
expect(pageCollectionService.lastPage.id).toEqual(context.clarityDirective.pages.last.id);
slice(<NUM_LIT>, <NUM_LIT>));
});
null, <NUM_LIT>)).toEqual([]);
pageCollectionService.lastPage, pageCollectionService.lastPage))
toEqual(pageCollectionService.pageRange(<NUM_LIT>, <NUM_LIT>));
getPageByIndex(<NUM_LIT>));
expect(pageCollectionService.getCurrentPage()).toBeNull();
nextPageId: any = context.clarityDirective.pages.last.id;
toHaveBeenCalledWith("<STR_LIT>"))
testPage);
false);
true;
testPage.completed).toBe(true);
function () {
context.detectChanges();
completed).toBe(true);
false);
it("<STR_LIT>", function () {
NUM_LIT>));
push(pageCollectionService.getPageByIndex(<NUM_LIT>));
first => {
getPageByIndex(<NUM_LIT>));
push(pageCollectionService.getPageByIndex(<NUM_LIT>));
getPageByIndex(<NUM_LIT>).completed).toBe(true, "<STR_LIT>");
"<STR_LIT>");
updateCompletedStates();
firstPage.completed).toBe(false, "<STR_LIT>");
payload.routerState.root.firstChild;
constants.vscode.iconThemeSetting, constants.extensionName, true);
return;
args;
};
vsicons.projectDetectionAutoReloadSetting, true, true);
message, ...items)
'<STR_LIT>', true);
'<STR_LIT>', true);
models.PresetNames.jsonOfficial, '<STR_LIT>');
folders.default.folder_dark) {
return collection;
key].replace('<STR_LIT>', '<STR_LIT>')
isArray(newValue)
boolean = Array.isArray(oldValue)
lstatSync(curPath).isDirectory()) {
const result: string[] = [];
new Error(`<STR_LIT>`);
toDirName == null) {
throw new Error(`<STR_LIT>`);
posix.join(...paths);
const path.join(os.tmpdir(), `<STR_LIT>`);
action: new action() });
isAtEof) {
optionName === undefined) {
operator) {
optionArgs.operator = node.SetOptionOperator.Append;
case '<STR_LIT>':
break;
break;
parseInt(countStr);
tab: node.Tab.Close,
onDidChangeTextEditorSelection(x => {
editor: vscode.TextEditor) => {
return `<STR_LIT>`;
JSON.stringify({
languageId) === -<NUM_LIT>) {
options.insertSpaces,
sourceFile);
scriptKind;
modifyVueSource(sourceFile);
ScriptKind.TSX : ts.ScriptKind.JS;
isVersion = packageJSON['<STR_LIT>'];
e) {
includes('<STR_LIT>');
const languageService = getLESSLanguageService();
lineno]);
if (!block) {
root.nodes) {
children.concat(root.nodes);
return null;
`<STR_LIT>`;
offset);
tag.trim();
{
number | undefined = node.startOffset;
return false;
return false;
definition: Definition = getTagDefinition(node.tag, getTagDefinition(node.name, getTagDefinition(node.close), open));
positionAt(scanner.getTokenEnd()),
const (inEndTag) {
text = document.getText();
positionAt(<NUM_LIT>));
TokenType.EOS) {
false,
collectTags: collector => collectTagsDefault(collector, routerTags),
tag, attribute, collector, routerTags, [], {
Vue),
vueDirectives);
doc.lineAt(<NUM_LIT>));
documentUri).fsPath;
string[] = [];
request) {
else Promise.reject(err);
err.status);
error) {
files;
shiny)],
Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) }],
arguments);
log("<STR_LIT>", arguments);
new Vector(-<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), <NUM_LIT>, Surfaces.shiny)],
<NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) }],
new Vector(-<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), <NUM_LIT>, Surfaces.shiny)],
new Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) }],
process.env[key] as string;
error;
options) {
removeSuffix(name, '<STR_LIT>'));
return name === '<STR_LIT>' || name === '<STR_LIT>';
typeof instanceof Blob) ? file.name : file.type);
return obj instanceof Blob || obj instanceof File;
Boolean(element);
json, type);
return;
metadata.deserializedType = type;
type)
Number(element);
newCanceledException();
false;
k])
parser.nodeToBoundaries(variable, variableValue);
id, start: blockStart } = block;
node.endOffset];
elem, children] = handleArgs(args);
return !!operationFields[val];
if (value === null)
format.format("<STR_LIT>", expecteds.length, inputs.length));
EAVRCTuple;
transactionNumber++;
| symbol) {
symbol = meta.getSymbol(localSymbol['<STR_LIT>']);
true;
m1Id !== m2Id) {
const generator = require(generatorPath);
absoluteGeneratorPath);
hooks,
diagnosticsManager,
watchHandler.watch(path.resolve(rootDir, projectRoot, identifier), buildOptions);
constlable.config(buildOptions);
diagnosticsManager,
instanceof CssSyntaxError ? error : new Error(error.message);
return Boolean(config?.projects);
const (!rootDir) {
'<STR_LIT>' +
has) {
`<STR_LIT>`;
<NUM_LIT>,
else {
outFilePath = fs.join(outDir, fs.basename(filePath, '<STR_LIT>') + '<STR_LIT>');
options,
atRule) => {
});
value, "<STR_LIT>");
customTypes, boxPrimitive).value;
type);
'<STR_LIT>';
i].type !== '<STR_LIT>') {
as SelectorAstNode;
node) => {
shouldOutput = false;
symbol._kind === '<STR_LIT>')) {
extend) {
undefined;
previousDirectoryPath: string = initialDirectoryPath;
ST as ClassSymbol;
context,
symbol, meta);
statements } = plugableRecord.getUnsafe(data, dataKey);
return STSymbol.getAllByType(meta, `<STR_LIT>`);
resolvedType === `<STR_LIT>`) {
{
handleCSSMixin(context, config, resolvedMixin.symbol);
word: e.message,
type,
ST_SYMBOL(name), {
name] = true;
safeRedeclare) {
getUnsafe(meta.data, dataKey);
Object.values(symbols)) {
name] = flat[name] || [];
word: name,
indexOf('<STR_LIT>') !== -<NUM_LIT>;
replace(/\\(.)/g, `<STR_LIT>`);
entries(keyframes));
as);
if
decl);
type = mixin.type || '<STR_LIT>';
hex RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>');
const arg of node.args) {
args
push('<STR_LIT>');
currentArg +=
type;
pop();
grouped.push(current);
push(n);
length)) {
extensions,
res) {
null;
let (rule.selector) {
forEach(handleReport);
diagnosticsMode === '<STR_LIT>') {
error);
emitError(error);
return !isExternal(url);
url.indexOf(URL_PROTOCOL_FILE) !== -<NUM_LIT>;
first.type === `<STR_LIT>`) {
RegExp = /^[a-zA-Z][a-zA-Z0-9_]*$/;
(decl.source &&
fs, path);
const
const {
if (expectedParams) {
prefix));
if (typeof css === '<STR_LIT>') {
<NUM_LIT>], msg));
assetNames
replace(/[\-\\\{
'<STR_LIT>') {
codeModPath, [...cliArgs, '<STR_LIT>'], {
cli
content);
compiler, cache);
if (!stylable) {
string = text.slice(<NUM_LIT>, posChar);
new(rng.value), '<STR_LIT>');
openParens++;
i] === '<STR_LIT>') {
filePath);
diagnostics
`<STR_LIT>`,
null,
if (requiredHinting) {
node: string | boolean | null = null;
ast = nodes[pos];
requiredHinting: false };
length;
state
stateTypeValidatorToHint) {
statePart.after.length;
return /^\s*[-.:]+\s*$/.test(line);
return lines = src.split('<STR_LIT>');
<NUM_LIT>, null);
new Stylable(fs)
request);
isWhitespace,
getJSnextComment: getJSnextComment,
if (stStates) {
undefined;
of stateEntries.entries()) {
targetName) {
if = cls.sourcePosition;
});
runtime
prevHook) {
prevHook) {
(
type === '<STR_LIT>').length === <NUM_LIT>) {
`<STR_LIT>`;
[],
selectors: exports.selectors,
};
if (renderer) {
ifNames.push(stateClass);
< ||
true) {
if (typeof item === '<STR_LIT>') {
else {
name of classNames) {
if (stateClass) {
classNames.length] = stateClass;
string = '<STR_LIT>';
'<STR_LIT>' + stateName;
return namespace + stateName + param;
param +
'<STR_LIT>' +
stateValue === '<STR_LIT>') {
stateName);
className = arguments[i];
classNames.push(item.toString());
in stateMapping) {
stateClass) {
toBe(key);
symbol?._kind === '<STR_LIT>') {
extractCSSDocsToSymbolMap(meta, node.parent!);
if (!docs) {
fileName), path.basename(importString, '<STR_LIT>'))
else {
`<STR_LIT>`,
node = {
childCompiler);
compilation.tap('<STR_LIT>', () => {
resource) {
out.set(meta, []);
collectDependenciesDeep(stylable, resolved, out);
return {
namespaceMapping,
if (!hash) {
line === ruleA.source?.start?.line &&
value) ? forceState(name) : name;
name, node);
getForceStateAttrContent(name);
name);
moduleClause) {
imported.request.endsWith('<STR_LIT>')) {
length);
if `<STR_LIT>`;
return typeof config === '<STR_LIT>' && typeof config.webpackPlugin === '<STR_LIT>';
namespace) {
module]));
usageacc,
if (!value) {
return '<STR_LIT>';
current)) {
path.unshift(currentId);
}
if (!meta) {
return module.resource?.endsWith('<STR_LIT>');
webpackConfig.exclude = webpackConfig.exclude || [];
if (environment.production) {
name: null }, cb);
"<STR_LIT>";
'<STR_LIT>'
ActionTypes.LOGOUT_SUCCESS:
action.payload
if ($elem.is('<STR_LIT>')) {
elem_margin;
socketserver = true;
wsOptions = {
return dbs[docname];
if {
`<STR_LIT>`;
db = await makeDb(options);
return db;
const (let docname in clients) {
name,
'<STR_LIT>' });
authed = true;
error: '<STR_LIT>' });
respond({
doc = clients[docname];
value });
null });
msg.value);
if (!a) {
findNext(this, term);
if (!addonTerminal.__searchHelper) {
i++) {
if (entry.key === terminal.id) {
entry.config, newConfig)) {
number = <NUM_LIT>; i < charAtlasCache.length; i++) {
height = height;
fontWeight,
terminal.options.devicePixelRatio,
allowTransparency,
<NUM_LIT> + <NUM_LIT>]);
<NUM_LIT>);
el];
removeEventListener(type, handler, capture);
EN_US;
return e.clientY || e.pageY;
localStorage[key]);
stringify(value);
initialMax < includedItems) {
maxWidth > widthPlusOverflow) {
maxWidth / SECTION_WIDTH);
return maxItems;
error: any) => {
now();
dimensionName) => {
date RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>')
bucketedBy[kind];
if (input instanceof TimeRange) {
tickDuration: Duration = getBestBucketUnitForRange(range as NumberRange, true) as Duration;
iter += unit;
checkPoint,
const start = input.start;
i: number) => {
let index = -<NUM_LIT>;
valueOf(cV) > valueOf(arr[currMax]) ? currMax : cIdx, <NUM_LIT>);
varName];
replace(URL_UNSAFE_CHARS, '<STR_LIT>');
n) / Math.LN10));
key] = source[key];
'<STR_LIT>');
replace(/^PT?/, '<STR_LIT>');
Date = new Date();
new Error('<STR_LIT>');
extra.header);
extra.header);
if (measure.unit) {
ch);
guard);
d['<STR_LIT>']);
`<STR_LIT>`;
runtime } = options;
s;
src).listen(type, listener, capture, scope);
return !!(obj && obj[IMPLEMENTED_BY_PROP]);
'<STR_LIT>');
<NUM_LIT>];
reject: reject,
if
argsAsArray.length; i++) {
FiberMgr.isExecutingInFiber())
argsAsArray[argsAsArray.length - <NUM_LIT>] instanceof Function) {
returnValue !== Config.NONE) {
run
false,
propKey: false,
"<STR_LIT>",
path.dirname(configFileName));
declaration;
forEach((actionType: string): void => {
{
else if (action === '<STR_LIT>') {
action === '<STR_LIT>') {
limit: meta.limit,
navigator['<STR_LIT>'](passProps);
passProps ? '<STR_LIT>' : '<STR_LIT>'](passProps);
passProps['<STR_LIT>']](passProps['<STR_LIT>']);
passProps ? '<STR_LIT>' : '<STR_LIT>'](passProps);
put({
response.code === <NUM_LIT>) {
response,
'<STR_LIT>', payload);
<NUM_LIT>).toFixed(<NUM_LIT>);
yield put({
runAfterInteractions);
put(toastAction('<STR_LIT>', '<STR_LIT>'));
AsyncStorage.setItem, '<STR_LIT>', '<STR_LIT>');
yield put({
state: IPlayerState = yield select(playerStateSelector);
put({
put(toastAction('<STR_LIT>', '<STR_LIT>'));
const put(playListRemove(playlist, index));
index - <NUM_LIT> === playlist.length ? index - <NUM_LIT> : index
yield fork(function* () {
stopTrack),
takeLatest('<STR_LIT>', setHisotrySaga),
takeLatest('<STR_LIT>', setLyrcis),
ret = await request
request
user = cookies.get('<STR_LIT>');
await request
request
random() * max);
element.firstChild, html);
else {
try {
await f.align();
Date.now();
await (const face of faceList) {
path.sep)
height);
i18n('<STR_LIT>'));
imageData, <NUM_LIT>, <NUM_LIT>);
if (!ctx) {
compilerOptions.module = module;
return components;
