sendKeys(text);
reject(error);
resolve(body);
type.hasElement()) {
type as any).priority;
if (priorityA < priorityB) {
render) {
await reader.read());
fromReader(new NativeFileReader(uri));
any = needleLC.length;
i: number = <NUM_LIT>; i < nlen; i++) {
now };
const groups: CacheableGroup[] = cache.groups;
navigator.serviceWorkerUrl || '<STR_LIT>';
swUrl)
dispose();
return;
JSON.stringify(installingWorker.state));
subscribe((): void => {
m.Count = <NUM_LIT>;
let a: StartVisualModeAction = new StartVisualModeAction();
key in src) {
return false;
i]) {
return true;
m.RightBrancket = "<STR_LIT>";
m.LeftBrancket = "<STR_LIT>";
m.Count = <NUM_LIT>;
new FindCharacterMotion(null);
IsContainTargetChar = true;
FindCharacterMotion(Direction.Left);
IRequireMotionAction = <IRequireMotionAction>action;
let a: IRequireMotionAction = <IRequireMotionAction>action;
DeleteYankChangeAction = new DeleteYankChangeAction();
RightBrancket = "<STR_LIT>";
m.RightBrancket = "<STR_LIT>";
RightBrancket = "<STR_LIT>";
"<STR_LIT>";
resolve(null);
obj === undefined || obj === null;
let grid: Grid = new Grid();
indexOf('<STR_LIT>') > -<NUM_LIT>) {
if (!props.preconstractions) {
httpRequest.onreadystatechange = (): void => {
this, eventName);
function () {
return Observable.fromEvent(window, '<STR_LIT>');
return Observable.fromEvent(el, '<STR_LIT>');
fromEvent(window, '<STR_LIT>');
'<STR_LIT>');
Subject();
'<STR_LIT>');
style.visibility = '<STR_LIT>';
vRatio: any = scaleSubject.map(verticalRatioOf(options.height));
scaleSubject,
setAttribute(attribute, value);
number = -<NUM_LIT>;
result) {
if (str === '<STR_LIT>') {
primitiveChars)) {
null) {
any = window.activeTextEditor;
if.position = position;
arch();
context.process = myProcess.pid;
}
pid,
argv,
notice.context.os = '<STR_LIT>';
url,
url
message: string = `<STR_LIT>`;
body: any = req.body;
<NUM_LIT>],
req.component
res: any = next(notice);
attr];
<NUM_LIT>) {
cb
catch (e: any) {
file,
err.stack) {
else {
...args: any[]): void => {
if (typeof resp === '<STR_LIT>') {
e: any) {
resp.id;
resp.error) {
return;
HTMLScriptElement = document.createElement('<STR_LIT>');
if (curLine.length === <NUM_LIT>) {
curLine)) !== null) {
exec(curLine);
commands.registerTextEditorCommand('<STR_LIT>', EditorCommands.DemoteLine);
activate: (editor: vscode.TextEditor) => void = (editor: vscode.TextEditor): void => {
Insert
let.subscriptions.push(insertHeadingRespectContentCmd, insertChildCmd, insertSiblingCmd,
commands.registerTextEditorCommand('<STR_LIT>', MarkupFunctions.Underline);
any = vscode.commands.registerTextEditorCommand('<STR_LIT>', MarkupFunctions.butterfly);
insertTimestampCmd);
"<STR_LIT>", "<STR_LIT>");
textEditor, "<STR_LIT>", "<STR_LIT>");
textEditor, edit, true);
getHours();
simpleDateValidator.validate(datetime));
newText: any = curLine.substring(<NUM_LIT>, cursorPos.ch);
replace(curlineStart, '<STR_LIT>');
"<STR_LIT>");
curlineStart));
Date = new Date();
curPos: any = pos;
activeTextEditor.edit;
trim();
<NUM_LIT>;
errorMessage);
maxSaturation) {
value > max) {
{
targetNormalLuma;
if (lastSize === <NUM_LIT>) {
<NUM_LIT>) {
if
'<STR_LIT>';
max (max < min) {
if (l < <NUM_LIT>) {
else {
d) {
break;
DragDropService();
config);
badges[i]);
badgeEl: any = element(by.css(selector(i)));
for (let i: number = <NUM_LIT>; i < badges.length; i++) {
push({
color
elementNumber++;
cssValue, <NUM_LIT>);
options);
else
});
return {
code === '<STR_LIT>') {
_js2xml(data, options);
Math.pow(p1.x - p2.x, <NUM_LIT>) + Math.pow(p1.y - p2.y, <NUM_LIT>));
every(function (point) {
map((group: GroupTransform): {
<NUM_LIT>];
item[params];
break;
break;
ctx
Math.PI / <NUM_LIT>, Math.PI, false);
restore();
ctx.fill();
textBounds: {
sanitizer: any = TestBed.get(DomSanitizer);
new Float32Array(mX1 * mY1 + mX2 * mY2)
i < kSplineTableSize; ++i) {
intervalEnd: number = sampleValues.length;
return intervalStart;
initialSlope === <NUM_LIT>) {
x === <NUM_LIT>) {
return <NUM_LIT>;
const
findSibling(layerId, findParent(vl, layerId), <NUM_LIT>);
let result: string = prefix;
const (vl.children.length > <NUM_LIT>) {
subPathState));
pm.autoUnconvertSubPaths();
a) * t;
block.layerId] = blocksByProperty;
push(block);
forEach(blocksByProperty, (block: any): void => {
<NUM_LIT> });
documentElement;
value + '<STR_LIT>';
clipPathIdMap[clipPathId] = node;
constructor(...args: any[]) {
elem.content[<NUM_LIT>].innerText;
this, '<STR_LIT>', {
float) {
var
makeRelative) {
<NUM_LIT>));
circle.center[<NUM_LIT>] + curve[<NUM_LIT>]],
i] = Math.round(data[i]);
function (node) {
'<STR_LIT>') {
}
i];
<NUM_LIT>] += currentPoint[<NUM_LIT>];
currentPoint[<NUM_LIT>] = itemData[<NUM_LIT>];
<NUM_LIT>] - v2[<NUM_LIT>], v1[<NUM_LIT>] - v2[<NUM_LIT>]];
y + matrix[<NUM_LIT>], matrix[<NUM_LIT>] * x + matrix[<NUM_LIT>] * y + matrix[<NUM_LIT>]];
metadataBlock);
style: {
fill == '<STR_LIT>')) {
'<STR_LIT>'
fill, '<STR_LIT>')
'<STR_LIT>',
push({
<NUM_LIT>) * Math.sqrt(data[<NUM_LIT>] * data[<NUM_LIT>] + data[<NUM_LIT>] * data[<NUM_LIT>]);
rotate[<NUM_LIT>])
cos) * x + sin * y) /denom);
<NUM_LIT>]) {
svgJs.error);
delimiter: '<STR_LIT>',
null,
finalReducers[key] = reducers[key];
nextStateReducer: any = finalReducers[action.type];
nextState[key] = nextStateForKey;
isBeingReset: false,
return prevState.history.indexOf(action);
as any);
A[<NUM_LIT>], A[<NUM_LIT>]);
op) {
case '<STR_LIT>':
<NUM_LIT>], +A[i + <NUM_LIT>]];
if (cmdIdx === <NUM_LIT>) {
<NUM_LIT>;
<NUM_LIT>], +A[i + <NUM_LIT>]);
'<STR_LIT>':
break;
<NUM_LIT>;
<NUM_LIT>;
case '<STR_LIT>':
i += <NUM_LIT>;
'<STR_LIT>', '<STR_LIT>']);
i + <NUM_LIT>], +A[i + <NUM_LIT>]);
break;
'<STR_LIT>':
<NUM_LIT>], +A[i + <NUM_LIT>]);
<NUM_LIT>;
typeof value === '<STR_LIT>';
call(promise) === '<STR_LIT>';
props.container, props.size);
any = history[currentIndex - <NUM_LIT>];
push(error);
return;
i])) {
return string
replace(/[\-\\\{
ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;
LineCommentTrivia:
_scanner.getPosition();
return pad(str, args);
localizeData(key), str, args);
number = <NUM_LIT>; i < count; i++) {
schema: JSONSchema): boolean => schema.resource === fileName);
else {
mimetypes: ['<STR_LIT>'],
onLanguage('<STR_LIT>', (): void => {
'<STR_LIT>',
mimetypes: ['<STR_LIT>']
{
newText);
return model.getPositionAt(position);
value);
value) !== -<NUM_LIT>) {
push(value);
protocol, host, pathname } = url.split('<STR_LIT>');
arguments);
ext));
!isNaN(min) && !isNaN(max)) {
now: number = Date.now();
null;
lastArg = arg;
arg);
return;
filePath.startsWith(projectDir))) {
length) {
err) {
fs.unlinkSync(data.src);
err) {
clear();
return fsu.resolve(projectRoot, relativeUrl);
<NUM_LIT>] === '<STR_LIT>') {
toString() });
"<STR_LIT>" || err.code == "<STR_LIT>") &&
m;
config.insertSpaceAfterCommaDelimiter;
InsertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;
typeof config.insertSpaceAfterFunctionKeyword === "<STR_LIT>") {
options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets;
placeOpenBraceOnNewLineForControlBlocks;
m;
return getDocumentedType(query.filePath, comment, subItems, icon, location);
subItems,
icon: types.IconType = types.IconType.InterfaceConstructor;
subItems,
ts.SyntaxKind.ModuleDeclaration);
subItems,
node.kind);
depth + <NUM_LIT>);
kind,
};
value) {
});
moduleNameExpr.kind === ts.SyntaxKind.StringLiteral) {
moduleExpr.pos, end: moduleExpr.end }
ts.SyntaxKind.ExportDeclaration || node.kind === ts.SyntaxKind.ExportEqualsDeclaration) {
child).name.kind === ts.SyntaxKind.Identifier) {
trim();
line: string): string {
line.trim();
refs.forEach((ref: any): void => {
if
result) {
ts.SyntaxKind.StringLiteral) {
types.UMLClassMember = {
};
filePath)
TypedEvent<{
return new AAbandonedBaby().hasPattern(data);
hasPattern(data);
new BearishHaramiCross().hasPattern(data);
Bearishmaruboyu().hasPattern(data);
data);
data);
return PreferencesManager.get(key);
if (input.reversedInput) {
retracements[level]);
else {
returncalculated > <NUM_LIT> ? calculated : <NUM_LIT>;
reversedInput) {
reversedInput) {
apply(this, arguments);
push(statements);
selection = new Selection(start, end);
originalText.slice(insertionPosition + <NUM_LIT>)].join('<STR_LIT>');
return i.routeParams;
id: <NUM_LIT>,
'<STR_LIT>',
useValue: '<STR_LIT>' },
provide: Router, useFactory: (): Router => new Router() },
enable();
days)) as any;
l.order > r.order ? <NUM_LIT> : -<NUM_LIT>;
catKey;
content };
attr === '<STR_LIT>' ?
svg: SVGElement = document.createElement('<STR_LIT>');
LInjector,
'<STR_LIT>':
`<STR_LIT>`;
if (appConfig.testTsconfig) {
return {
return Promise.resolve();
const
ng('<STR_LIT>', '<STR_LIT>')
Config.PROJECT_NAME)
stdout)) {
'<STR_LIT>')
const appTs: string = await readFile('<STR_LIT>');
css, content)
if
/: Compiled successfully./);
<NUM_LIT>] = '<STR_LIT>';
join('<STR_LIT>', '<STR_LIT>'), /import {
join('<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>')));
then(({
undefined) {
componentDir))
oneLine `<STR_LIT>`);
`<STR_LIT>`);
Promise.resolve()
'<STR_LIT>')
expectFileToMatch(modulePath, /import {
Promise.resolve()
['<STR_LIT>']))
nested
then((): Promise<import("<STR_LIT>").ProcessOutput> => ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'))
return ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>')
SRC_ROOT, '<STR_LIT>'), '<STR_LIT>'))
SRC_ROOT, '<STR_LIT>'), '<STR_LIT>'))
'<STR_LIT>'))
oneLine `<STR_LIT>`);
return Promise.resolve()
then((): Promise<void> => expectFileToMatch('<STR_LIT>', '<STR_LIT>'))
'<STR_LIT>': '<STR_LIT>',
join('<STR_LIT>', '<STR_LIT>'));
await ng('<STR_LIT>');
__
path('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>');
ng('<STR_LIT>', '<STR_LIT>');
ng('<STR_LIT>', '<STR_LIT>');
tsconfig.compilerOptions.paths = {
<NUM_LIT>))
return join(app.getPath("<STR_LIT>"), "<STR_LIT>", assetName);
Error(`<STR_LIT>`);
fs.copy(from, to, (err: any): void => {
Error(`<STR_LIT>`));
keys(fs).map((filePath: string): Promise<void> => {
true }, '<STR_LIT>', args);
then((): Promise<import("<STR_LIT>").ProcessOutput> => ng('<STR_LIT>'));
packages;
json['<STR_LIT>'] = {
Object.keys(devkitPackages)) {
hasOwnProperty(packageName)) {
range);
...args,
return spawn('<STR_LIT>', ['<STR_LIT>', path]);
jsonSchema);
let bus: ElectronMessageBus = new ElectronMessageBus(sink, zone);
app);
new AngularFireDatabase(app);
any;
query.orderByKey) {
hasKey(query.equalTo, "<STR_LIT>")) {
}
utils.hasKey(query.orderBy, "<STR_LIT>")) {
else {
else {
query.limitToLast)) {
queried.limitToLast(query.limitToLast);
x: number): {
return pathRef.ref();
url);
return typeof value.on === '<STR_LIT>';
any = snapshotAction.payload;
item.name).value(),
if (isNumber(item)) {
firebaseDataSnapshotCase();
'<STR_LIT>';
return [];
platformBrowserDynamic().bootstrapModule(ExampleModule);
platformBrowserDynamic().bootstrapModule(ExampleModule);
data = emptyTable;
table.data = emptyTable;
NodeFlags.None, null, null, null, null, TreeComponent_Host),
let
}
ctx);
return {
'<STR_LIT>' },
platformBrowserDynamic().bootstrapModule(ExampleModule);
ExampleModule);
ExampleWorkerUi);
platformBrowserDynamic().bootstrapModule(ExampleModule);
Ast(driver, metadata, errors);
offset) {
ɵStyleData = styles asɵStyleData;
options['<STR_LIT>']);
options = {
"<STR_LIT>');
errors);
lhs;
FALSE_BOOLEAN_VALUES.has(rhs);
ast);
if (node) {
totalTime, disabled };
in _cached_body.style;
AnimationPlayer[] = [];
true;
else {
classes[className];
'<STR_LIT>';
<NUM_LIT>];
prop)) {
missingStyleProps.length) {
i];
'<STR_LIT>':
m: any[]): any => m[<NUM_LIT>].toUpperCase());
expect(element.getAttribute('<STR_LIT>')).toBe(duration);
HTML_TAG_NAME);
body;
if (timestamp) {
property, value);
timings, styles };
return {
name, styles, options };
path);
rootDir, options.manifestFileName);
name, time);
name, time, args);
return new MeasureValues(runIndex, new Date(time), values);
'<STR_LIT>',
"<STR_LIT>":
case '<STR_LIT>':
body;
body instanceof ArrayBuffer) {
body;
i === <NUM_LIT> && v === <NUM_LIT>)
if (i === <NUM_LIT>)
const minutes: number = hours * <NUM_LIT>;
floor(hours), <NUM_LIT>, minusSign);
case ZoneWidth.Long:
ZoneWidth.LongGMT:
minusSign) +
locale, NumberSymbol.MinusSign));
if (match) {
'<STR_LIT>') {
const data: any = findLocaleData(locale);
map((rule: any): {
LocaleDataIndex.MonthsStandalone]];
slice(baseHref.length) : url;
value.valueOf());
result: string = inner(date, locale);
locale: string): string {
len > <NUM_LIT>) {
result[prop] = '<STR_LIT>';
platformId === PLATFORM_BROWSER;
return platformId === PLATFORM_SERVER;
PLATFORM_WORKER_APP_ID;
set: {
return TestBed.overrideComponent(TestComponent, {
overrideComponent(TestComponent, {
TestBed.overrideComponent(TestComponent, {
!!s.initializer;
parent = parent;
ts.Identifier = <ts.Identifier>name;
else if (name.kind == ts.SyntaxKind.BindingPattern) {
name.kind == ts.SyntaxKind.Identifier) {
[];
if (context) {
return Object(value) !== value;
case '<STR_LIT>':
value.__symbolic === '<STR_LIT>';
value.__symbolic === '<STR_LIT>';
type === '<STR_LIT>';
value && value.__symbolic === '<STR_LIT>';
return diags
`<STR_LIT>`;
`<STR_LIT>`;
`<STR_LIT>`;
return {
ts.DiagnosticCategory.Error);
sourceFile.statements.filter((st: any): boolean => st.kind === ts.SyntaxKind.ReturnStatement) as ts.FileReference[];
value.name);
translateModifier);
chain.messageText,
sourceFile;
return [];
Error,
throw new Error(`<STR_LIT>`);
<NUM_LIT>,
replace('<STR_LIT>', '<STR_LIT>');
expectNoDiagnostics(service.getSemanticDiagnosticsDiagnostics());
template : `<STR_LIT>`;
any = module.filename.replace('<STR_LIT>', '<STR_LIT>');
const fileName: string = `<STR_LIT>`;
node;
initializer,
[,
symbol);
injectables.push(resolvedSymbol);
isNgSymbol = true;
context: any): any {
context: any): any {
files.reduce((acc: NgAnalyzedModules, file: NgAnalyzedFile): NgAnalyzedModules => {
for (const route: Route of routes) {
{
return target;
typeof o !== '<STR_LIT>');
reference, (): void => {
`<STR_LIT>`;
'<STR_LIT>' : srcFileSuffix;
'<STR_LIT>');
fileName));
isArray(value)) {
new Error(`<STR_LIT>`);
code >= $TAB && code <= $SPACE) || code == $NBSP;
if (!obj) {
UNRe, '<STR_LIT>');
Expression) {
props(args) : {
type: any): boolean => type.name === name;
index >= input.length ? chars.$EOF : input.charCodeAt(index);
LF;
if (target == chars.$MINUS) {
escape:
default:
arr[i])) {
chars.$PLUS;
code);
<NUM_LIT>, text);
escapeRegExp(config.end);
return `<STR_LIT>`;
'<STR_LIT>';
index > <NUM_LIT>) {
<NUM_LIT>];
num * <NUM_LIT>) {
implicitAttrs);
value };
name
array));
toLowerCase()];
for (let i: number = <NUM_LIT>; i < attrs.length; i++) {
{
return (expansionResult.cases.length === <NUM_LIT>) {
chars.$A || chars.$z < code);
return `<STR_LIT>`;
<NUM_LIT>] === '<STR_LIT>';
defaultTags[tagName.toUpperCase()];
externalReferences: ExternalReference[] = [];
_ReadVarVisitor(stmts);
typeParams, sourceSpan);
_VarExpr(name, type, sourceSpan);
args: any[]): void => {
statements, ctx);
fnArgValues.push(vars[argName]);
fn: any = ts.createSourceFile(sourceUrl, source, ts.ScriptTarget.Latest, true);
TemplateFactory = outputCtx.importExpr(pipe.type.reference);
inputs.length > <NUM_LIT>) {
pipe: o.FunctionExpr = createFactory(pipe.type, outputCtx, reflector);
pipe.type),
case <NUM_LIT>:
<NUM_LIT>:
args);
case <NUM_LIT>:
ctx.securityContext = ctx.securityContext || {
const input.split('<STR_LIT>').map((line: string): string => {
false;
value === '<STR_LIT>';
error.msg] || <NUM_LIT>) + <NUM_LIT>;
RegExpMatchArray | null = url.match(urlSchemeRegex);
splitUriRegex) || [];
ERROR_EXCEPTION] === true;
defaultValues, '<STR_LIT>');
defaultValues, '<STR_LIT>');
const high: number = str.charCodeAt(index + <NUM_LIT>);
codePoint);
<NUM_LIT>, (codePoint & <NUM_LIT>) | <NUM_LIT>);
`<STR_LIT>`;
MockFileOrDirectory | undefined = undefined;
data === '<STR_LIT>';
Hook(hook), directive);
token, index);
index);
interpolationConfig);
errors.length > <NUM_LIT>) {
el.queryAll(By.css(cssSelector)).length).toBe(<NUM_LIT>);
return new Buffer(s, '<STR_LIT>').toString('<STR_LIT>');
tokenizeWithoutErrors(input, tokenizeExpansionForms).errors;
interpolationConfig);
UrlResolver();
return {
name, styles);
timings, styles };
AnimationMetadataType.Group, steps, options };
nls.localize('<STR_LIT>', "<STR_LIT>"));
e));
ngZone.runOutsideAngular((): void => errorHandler.handleError(e));
has(marker)) {
else {
ifisParent = false;
return;
new NgZone({
if (index > -<NUM_LIT>) {
fromCharCode(_randomInt(<NUM_LIT>, <NUM_LIT>));
false;
fn(item.value);
typeof type;
matches.push(node);
forwardRefFn).__forward_ref__ = forwardRef;
{
objWithPropertyToExtract[key] !== undefined) {
'<STR_LIT>' + token);
RecursivelyProcessProviders(records, provider[i]);
provider.provide);
if (multiProvider) {
}
if (record) {
<NUM_LIT>]);
return [];
Error('<STR_LIT>');
if (existing) {
if (actual != null) {
typeof actual !== '<STR_LIT>') {
hostView) },
getOrCreateViewContainerRef(getOrCreateNodeInjector());
initHooksOnCreationMode);
index, '<STR_LIT>');
ngDevMode && assertNotNull(value, '<STR_LIT>');
attrs: attrs || null,
assert(template.data, '<STR_LIT>');
const
elementIndex);
finally {
template.ngPrivateData = {
return = bindingUpdated(v2, v0) || different;
useCapture) {
null);
outputs = [];
LViewFlags.Dirty;
begin();
oldView);
leaveView(oldView);
text(value) :
renderer.createText(value) :
nativeNode: LNode = child as LNode;
<NUM_LIT>];
next = viewOrContainer.child.data;
next = viewOrContainer.next;
null) {
viewOrContainer.parent;
const (views.length === <NUM_LIT>) {
newView);
if (!containerNextNativeNode) {
false;
selector[<NUM_LIT>] === '<STR_LIT>') {
string = selector[i];
}
return false;
ERROR_MSGS.INVALID_PIPE_BIND);
query child: LElementNode | LContainerNode = query.child as LElementNode | LContainerNode;
null) {
null) {
i++) {
any = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);
i: number = <NUM_LIT>; i < localNames.length; i++) {
get);
return this;
returnCtor.call(this, cls);
annotations)
annotations
{
else
string = keys[i];
arguments) });
values.length; i++) {
index, eventName, event);
flags & DepFlags.Lazy) {
const
if (providerInstance) {
not notFoundValue;
token,
index] = providerDef);
NodeFlags.TypeElement) {
allowPrivateServices, ctor));
elDef, allowPrivateServices, deps[<NUM_LIT>]), resolveDep(view, elDef, allowPrivateServices, deps[<NUM_LIT>]), resolveDep(view, elDef, allowPrivateServices, deps[<NUM_LIT>]));
i: number = <NUM_LIT>; i < len; i++) {
let compDef: NodeDef = def;
Services.createProviderInstance(view, def);
prop];
nonMinifiedName,
outputs) {
createNgModuleRef: debugCreateNgModuleRef,
debugCheckAndUpdateView,
nodeIndex),
return overrideComponentView;
if
if (DEV) {
nodeDef.flags & NodeFlags.TypeElement) !== <NUM_LIT>) {
v2, v3, v4, v5, v6, v7, v8, v9);
value);
const[i] = {
null,
return {
parent: null,
bindingIndex: -<NUM_LIT>,
queryId | <NUM_LIT>;
flags & NodeFlags.ComponentViewInverse) === <NUM_LIT>) {
EmbeddedView);
if (compView) {
hostView!.def.nodes.length;
nodeDef.flags & NodeFlags.TypeElement) {
ngContentIndex];
nextSibling || target)) {
NodeFlags.CatPureExpression | NodeFlags.CatPureComponent)) {
childCount) {
embeddedViews.length; k++) {
NodeFlags.TypeVoidElement)) {
return;
template._projectedViews;
removeFromArray(embeddedViews, newViewIndex);
return view;
push(index, <NUM_LIT>);
true);
return checkAndUpdateTextDynamic(view, nodeDef, values);
checkAndUpdatePipeDynamic(view, nodeDef, values);
if (bindLen > <NUM_LIT>)
checkBindingNoChanges(view, nodeDef, <NUM_LIT>, v2);
bindLen > <NUM_LIT>)
if (bindLen > <NUM_LIT>)
switch (rendererType) {
zone._nesting--;
if Object.entries(params)
constructor.name;
T;
) {
returnValue = blockReturn;
<NUM_LIT>] = fn;
let _describe(...args);
name,
NO_FEATURE]
return typeof window !== '<STR_LIT>';
EC: any = ExpectedConditions;
getDOM().getUserAgent().toLowerCase() : '<STR_LIT>';
throw new Error('<STR_LIT>');
parent.querySelectorAll(`<STR_LIT>`), name];
'<STR_LIT>');
dir, '<STR_LIT>');
`<STR_LIT>`;
CookieXSRFStrategy({
jsonpBackend, requestOptions);
'<STR_LIT>':
Patch;
return RequestMethod.Patch;
Array.isArray(value)) {
param: string): void => {
new RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>')
'<STR_LIT>')
end);
let
push(ast);
ast.visit(visitor);
let (tail instanceof AST) {
if
ast: AST): void {
ast) {
visitValue(ast) {
visitLiteralArray(ast) {
ast) {
result) {
children: any = symbol.children;
sort();
sort();
SchemaInformation.instance.propertyNames(elementName);
languageService: any = new LanguageService(ngHost);
start: node.getStart(), end: node.getEnd() };
a);
selector);
else {
span.startSourceSpan) {
children.length - <NUM_LIT>])
`<STR_LIT>` : '<STR_LIT>';
try {
return value.replace(referenceMarker, '<STR_LIT>');
existsSync(fileName)) {
return new WebAnimationsStyleNormalizer();
window;
ErrorHandler();
;
'<STR_LIT>': '<STR_LIT>',
'<STR_LIT>': '<STR_LIT>',
target);
componentShortId);
return
srcset = srcset.trim();
eventType));
message;
moduleFactory, req, res);
url)) {
const platformFactory(extraProviders);
return new Promise<string>((resolve: (value: string | PromiseLike<string>) => void, reject: (reason?: any) => void): void => {
Error('<STR_LIT>');
target.value };
targetSTR_LIT>`;
PostMessageBusSource(_postMessage);
if (isWebWorker) {
return
const secondChannels: {
secondChannelSink: MockMessageBusSink = new MockMessageBusSink(firstChannels);
return route.outlet || PRIMARY_OUTLET;
obs.error(new Error(`<STR_LIT>`)));
return Observable.of(false);
Route[] = [];
return {
return command.outlets;
qp[name] = value;
fragment);
of routes) {
node: TreeNode<ActivatedRouteSnapshot>): void => {
return (router.back) {
Object
new UrlTree();
any = params[name];
const result: T[] = [];
false;
false;
value)) {
value));
ActivatedRouteSnapshot as any)(...args);
provide: token,
pairs.length; i++) {
url, callback, paramsInheritanceStrategy);
any = curr.path;
regex += `<STR_LIT>`;
else {
segments.length > <NUM_LIT>) {
wrap(fn));
angular = ng;
wildcardNgContentIndex = i;
i);
ngContentIndices.sort();
charAt(<NUM_LIT>).toUpperCase() + name.slice(<NUM_LIT>);
console.error(`<STR_LIT>`);
Compile);
IInjectorService);
obj as any).then);
error(`<STR_LIT>`);
return parse(html).nodes;
Ng1Injector);
p)) {
p);
push(_findPackageJson(p, exclude));
join(__dirname, '<STR_LIT>'));
end();
if (value == null) {
kind === kind) {
RegExp = /import {
const source: string = content.replace(exportVarSetter, '<STR_LIT>');
'<STR_LIT>'
newLine,
moduleSpecifier
pureImportPattern, '<STR_LIT>')
node)) !== -<NUM_LIT>;
tslibImports, checker)) {
arguments[<NUM_LIT>].kind !== ts.SyntaxKind.Identifier) {
ts.CallExpression = decorateArray.elements[<NUM_LIT> as ts.CallExpression>;
const expr: ts.BinaryExpression = exprStmt.expression as ts.BinaryExpression;
propAccess.name.text !== '<STR_LIT>') {
return false;
rootConfig || {
{
};
{
wco.supportES2015 ? ['<STR_LIT>'] : ['<STR_LIT>'])
catch (e: any) {
constOptimizer: any = buildOptions.buildOptimizer;
/\.ts$/;
any = from;
names) {
return nodeModuleP;
join(root, moduleName)).default;
any = path.resolve(nodeModules, '<STR_LIT>');
`<STR_LIT>`);
{
writeFileSync(manifest, manifest);
return `<STR_LIT>`;
bom, '<STR_LIT>');
_resolveHook = hook;
const (char === '<STR_LIT>') {
line++;
'<STR_LIT>') {
key = _readString(context);
else {
context);
'<STR_LIT>',
others);
schema, refResolver, context);
columns;
raw(strings, ...values);
'<STR_LIT>');
if (drive) {
return p2;
null) {
}
content)) {
innerSymbol in inner)) {
return observableOf(inputTree);
'<STR_LIT>';
return '<STR_LIT>';
else {
`<STR_LIT>`;
const (!options.export) {
host, options);
strings,
chain([
const sourceFile: import("<STR_LIT>").SourceFile = getSourceFile(host, modulePath);
modulePath);
'<STR_LIT>');
instanceof InsertChange) {
host, options);
endsWith('<STR_LIT>')),
strings,
return chain([
'<STR_LIT>'); },
branchAndMerge(chain([mergeWith(templateSource)])),
]);
formatMissingAppMsg(options.clientApp));
if (!bootstrapCall) {
bootstrapCallNode: ts.Node | null = bootstrapCall as ts.Node;
currentCall.parent;
beginUpdate(mainPath);
modulePath, '<STR_LIT>', classifiedName, importPath);
parseJsonConfigFileContent(tsConfig);
compilerOptions: ts.CompilerOptions = {
message: string = `<STR_LIT>`;
file) {
dirname(to));
name.toUpperCase() > r.name.toUpperCase() ? <NUM_LIT> : -<NUM_LIT>;
toUpperCase() ? <NUM_LIT> : -<NUM_LIT>;
sub = catKey;
subKey,
as SubCategory;
getAttrs(el), attr), def);
Constants.ENV_CI_PULL_REQUEST] === '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
GanttBodyColumns = GanttBodyColumns;
'<STR_LIT>';
'<STR_LIT>';
controller = function ($scope, $element) {
rowGroups) {
rowGroups };
enabled (enabledValue) === '<STR_LIT>') {
updateTaskGroup();
taskGroup) {
'<STR_LIT>';
$element) {
'<STR_LIT>';
$scope.getMaxHeightCss = function () {
gantt.getContainerHeight();
return css;
'<STR_LIT>';
'<STR_LIT>';
return el[<NUM_LIT>] as ElementFinder;
s === themeName);
indexOf(themeName) > -<NUM_LIT>);
hasOtherTheme) {
host);
throw new SchematicsException(`<STR_LIT>`);
shift();
prefix) {
configBuffer === null) {
split(directorySeparator);
pop();
if (relativePath) {
pathPrefix = `<STR_LIT>`;
filter((node: ts.ImportDeclaration): boolean => {
ts.Node[] = findNodes(node, ts.SyntaxKind.ImportEqualsDeclaration);
{
forEach((node: ts.ImportDeclaration): void => {
useText: string = '<STR_LIT>';
const close: string = isDefault ? '<STR_LIT>' : '<STR_LIT>';
});
'<STR_LIT>',
});
error(formatDiagnostics(diagnostics, baseDir));
transpiled.diagnostics) {
'<STR_LIT>') {
data
getElementById('<STR_LIT>')!;
status: <NUM_LIT>,
HTML_NAMESPACE, '<STR_LIT>');
return `<STR_LIT>`;
replace(/\\/g, '<STR_LIT>');
document.createElement('<STR_LIT>');
serverNode);
optionSet: any of optionSets) {
if (source.hasOwnProperty(nextKey)) {
funcName];
return eventRecorderFunctions.join('<STR_LIT>');
'<STR_LIT>';
ReactNativeWrapperImpl],
provide: ReactNativeElementSchemaRegistry, useExisting: ReactNativeElementSchemaRegistry },
customProviders || []));
rendererFactory.createRenderer(ngModuleRef, zone);
obj !== null;
return (state: any, action: any): any => {
name));
const name: string of providers) {
return ts.createProperty(decoratorList[<NUM_LIT>], modifier, ts.createLiteralArray(decoratorList.slice(<NUM_LIT>));
sourceFile, sourceMapper).process();
return [];
startsWith('<STR_LIT>')) {
Set<string>();
default: boolean = false;
tag.parameterName);
texts.add(tag.text);
true;
return {
tag.attributes) {
tags
let result: string = "<STR_LIT>";
for (const arg: any of parsedArgs) {
settings. tscArgs = parsedArgs[flag];
tscArgs = parsedArgs[flag];
tsConfigPath = parsedArgs[flag];
true;
parsed
length > <NUM_LIT> && name.charAt(<NUM_LIT>) === '<STR_LIT>') {
source) > <NUM_LIT>;
sources = [sourceName];
if (value != null) {
return [];
for (let i: number = <NUM_LIT>; i < leadingComments.length; i++) {
sourceFile, comment.start);
else {
lastCommentRange: ts.CommentRange = detachedComments[detachedComments.length - <NUM_LIT>];
lastStmtTrailingComments.length > <NUM_LIT>) {
getStart(sourceFile));
lastCommentEnd: any = detachedComments[detachedComments.length - <NUM_LIT>].end;
push(value);
return /\.d\.ts$/.test(fileName);
test(fileName);
throw e;
events];
event);
'<STR_LIT>' : '<STR_LIT>';
if (paramsOnly) {
const `<STR_LIT>`;
{
rootLength === <NUM_LIT>) {
in map) {
Class;
return CompletionItemKind.Method;
return CompletionItemKind.Method;
return Range.create(lineOffset, lineOffset);
}
found > <NUM_LIT>) {
case "<STR_LIT>":
i: number = <NUM_LIT>; i < names.length; i++) {
if (typeof current[name] === '<STR_LIT>') {
}
chalk.green('<STR_LIT>'));
default:
'<STR_LIT>';
return '<STR_LIT>';
targets, search_all, auto_accept, verbose);
`<STR_LIT>`;
map((level: string): string => `<STR_LIT>`);
map((arch: string): string => {
BrowserWindow.getAllWindows().forEach((window: any): void => {
outputDir, fileName);
currentDownload) {
if
if
method == '<STR_LIT>'));
hasContent) {
'<STR_LIT>';
'<
res.statusCode != <NUM_LIT>) {
buffer, (chunk: any): number => buffer.push(chunk));
'<STR_LIT>', message: '<STR_LIT>' });
return += '<STR_LIT>';
cmd += '<STR_LIT>';
opts = opts || {
args, opts);
obj[unconfigurablesKey][prop];
'<STR_LIT>', {
(event: any): void => {
source;
source) {
onproperty] = bound;
supportsWebSocket) {
EVENT
}
any = window['<STR_LIT>'];
}
}
evtName) {
return;
function () {
<NUM_LIT>:
<NUM_LIT>:
break;
break;
instance as any)[prop] = function () {
else {
function () {
args);
else {
stackTraces.join('<STR_LIT>'));
return Error(`<STR_LIT>`);
return !!(global['<STR_LIT>'] || global['<STR_LIT>']);
indexOf("<STR_LIT>") > -<NUM_LIT>) {
test, block, true);
toLowerCase();
return {
parse(fs.readFileSync(filepath, '<STR_LIT>'));
return root;
root);
continue;
changedValue === undefined)
return getDefinitions(ast, dummyIDL);
visitFields(operationAST, operationName, cb);
'<STR_LIT>') {
Object.keys(fragments).forEach((fragmentName: string): void => {
root, {
OPERATION_DEFINITION)
"<STR_LIT>",
return {
payload: {
return {
type: ActionConstants.focusElement,
type: ActionConstants.focusElementDone,
return `<STR_LIT>`;
'<STR_LIT>') != null;
return (elem.tagName === '<STR_LIT>' ||
type);
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'].indexOf(type) > -<NUM_LIT>;
type === "<STR_LIT>" || type === "<STR_LIT>";
name);
next();
page } = options;
for (let i: number = <NUM_LIT>; i < $nodes.length; i++) {
'<STR_LIT>');
value,
return
forEach((item: any): void => {
item
return idValue.previousResult;
if
benchmark;
assign(ret, {
map((r: any): any => r.value);
try {
finally {
return;
return null;
if (src.hasOwnProperty(srcKey)) {
return {
`<STR_LIT>`,
pass: true
resultKey, current, mainDefinition, fragmentMap, node);
fragment.selectionSet);
findRestDirectivesThenInsertNullsForOmittedFields(resultKey, current, mainDefinition, fragmentMap, node.selectionSet);
typeDef);
calledFunctionRefs.indexOf(typeDef) > -<NUM_LIT>) {
throw new Error(`<STR_LIT>`);
const (const array: Array<string> of arrays) {
operation
operation));
sourceFile?: MergeInfo): void {
args.forEach((arg: any): void => {
null;
type.ofType);
name, type);
Kind.FLOAT: {
field: any): void => {
LIST: {
backcompatOptions),
values,
result[type.name.value] = {
return definition;
let document.key.value;
const operations: OperationDefinitionNode[] = [];
kind === '<STR_LIT>');
tag + '<STR_LIT>' + tag + '<STR_LIT>');
push(result[<NUM_LIT>]);
new MockLink(mockedResponses);
typeof query.query === '<STR_LIT>');
if (isCollection(data)) {
collection.name === '<STR_LIT>';
i: number): string => `<STR_LIT>`);
encoding);
config: any;
if (typeof elementOrConfig === '<STR_LIT>') {
<NUM_LIT>];
return
role = Role.USER;
if (dependencyInjectionContainer) {
samples: any = property.samples;
i: number = <NUM_LIT>; i < parts.length; i++) {
do {
isValid (!f) {
if (isValid) {
toString.call(f));
JSON.stringify(right);
href = inURL;
protocol: urlParser.protocol,
search,
f: ReferenceFrame | Entity = <ReferenceFrame>referenceFrame;
if (obj.classList) {
return path: string = '<STR_LIT>';
await config(options);
const initialize(options);
method: '<STR_LIT>',
case MessageType.Input:
editor, '<STR_LIT>');
spy()
sendNotification: sinon.spy(),
"<STR_LIT>" in object;
const doc: any = editor.document;
}
renderSTR_LIT>';
doc.body.appendChild(script);
return readFileSync(userMacrosPath, '<STR_LIT>');
style.display = "<STR_LIT>";
"<STR_LIT>",
'<STR_LIT>',
'<STR_LIT>',
'<STR_LIT>',
error);
});
cmd: command,
catch {
new UPI.TTextBufferCallback(i));
return reg(cb);
vscode.WorkspaceConfiguration = vscode.workspace.getConfiguration('<STR_LIT>');
propertyParser);
callback(config);
'<STR_LIT>';
type instanceof GraphQLEnumType;
title
state);
filter = payload;
<NUM_LIT>];
filterAlreadyPresent = true;
{
{
default:
return state.merge({
ensureNuGetPath();
versionParser.parse(requestedVersion);
if
version;
if
console.log(`<STR_LIT>`);
args.debug) {
'<STR_LIT>';
any = require(requestedVersion);
chalk.green(`<STR_LIT>`));
}
selectedVersion);
replace(/^# (.*)/gm, addStyle("<STR_LIT>", '<STR_LIT>')).
replace(/^# (.*)/gm, addStyle("<STR_LIT>", '<STR_LIT>')).
(STR_LIT>');
chalk.bold.cyan("<STR_LIT>" + end);
RegExp = new RegExp("<STR_LIT>" + styleStack.join("<STR_LIT>") + "<STR_LIT>", "<STR_LIT>");
number = i[<NUM_LIT>].indexOf("<STR_LIT>");
startIndex);
on('<STR_LIT>', reject);
version: string = m[<NUM_LIT>];
autorestArgs);
return await main(autorestArgs);
catch (e: any) {
.code === "<STR_LIT>") {
}
case "<STR_LIT>":
case "<STR_LIT>":
default:
await autorest.ReadJson(content);
result;
config: AutoRestConfigurationImpl of configs) {
Proxy) {
ReadData();
result.endColumn = endPos.column;
start = mappingNode.key.startPosition;
if
uri)) {
Text: `<STR_LIT>`
undefined) {
DataHandle[] = files.map(processor);
as any), input, sink);
for (const file: string of files) {
result: DataHandle;
value: T of source) {
readdir(path, (err: any, files: any): void => err ? j(err) : r(files)));
err ? j(err) : r(data)));
obj === "<STR_LIT>" ? JSON.parse(obj) : obj;
sep) ? <NUM_LIT> : <NUM_LIT>);
yamlAst.safeDump(object, {
for (let i: number = <NUM_LIT>; i < keys.length; i++) {
pluginPath: any = join(plugin, "<STR_LIT>");
ensureCoreLoaded();
index > selectedStepIndex) {
payloadSegment), '<STR_LIT>').toString('<STR_LIT>');
let password: string = "<STR_LIT>";
let (functionInfo.params.hasOwnProperty(normalizedKey)) {
args);
appInsights.run(action);
catch (error: any) {
get);
defaultFile)) {
else {
json('<STR_LIT>');
authenticated) {
return;
const {
'<STR_LIT>': '<STR_LIT>',
sendStatus(<NUM_LIT>);
req.url + stateKey);
let stateKey: string = '<STR_LIT>';
return;
`<STR_LIT>`,
body.redirUrl);
return false;
return '<STR_LIT>';
i: number = <NUM_LIT>; i < <NUM_LIT>; i++) {
pwdChar === <NUM_LIT>) {
}
num2) | <NUM_LIT>;
return ((num1 ^ num2) & num3) ^ num2;
num1) ^ num1;
return encF5(num1, ~num2, num3);
"<STR_LIT>",
d: number = <NUM_LIT>; d < pwd.length; d++) {
<NUM_LIT>) {
onError]);
return platform;
...state,
case RESET:
res.ok) {
else {
GET_SUCCESS:
GET_FAIL:
action.payload.error,
NODE_ENV !== '<STR_LIT>') {
'<STR_LIT>' &&
store);
animalFlags & AnimalFlags.CanRun) {
Object.getOwnPropertyNames(baseCtor.prototype).forEach((name: string): void => {
i: number = length - <NUM_LIT>; i >= <NUM_LIT>; i--) {
if ~index;
`<STR_LIT>`
'<STR_LIT>')
compiler: any = fs.readFileSync(filename, '<STR_LIT>');
log ast;
type: '<STR_LIT>',
params, (_: AST): string => {
usedNames.has(name)) {
return '<STR_LIT>';
schema.oneOf)
return '<STR_LIT>';
'<STR_LIT>';
type) {
'<STR_LIT>';
return
'<STR_LIT>': return '<STR_LIT>';
'<STR_LIT>';
const result: {
isEqual(b);
a || typeof b === '<STR_LIT>');
indexOf('<STR_LIT>') > -<NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>';
const
return;
ch {
configPath)) {
createHash(algo)
sort((a: T, b: T): number => {
b;
line) {
_exec({
platformBrowserDynamic().bootstrapModule(ExampleModule);
replica };
return modes.filter((m: EditorMode): boolean => availableMimes.indexOf(m.mime) === -<NUM_LIT>);
[];
func();
return;
const text2b: string = text2.substring(y, text1.length);
let
pointermid) !== text2.substring(pointerstart, pointermax)) {
else {
webkitRequestAnimationFrame);
hash[key] = value[key];
keys(tiles).map((key: string): any => {
null) {
Array.isArray(arrayToCheck);
b: number;
c.a = <NUM_LIT>;
i;
cell
for (let i: number = <NUM_LIT>; i < count; i++) {
<NUM_LIT>) {
{
return new World();
null)
render = originalRender;
tag = "<STR_LIT>";
IBobrilCacheNode | null = p && p.pop();
i < events.length; i++) {
ctx)[bSelectionStart] = start;
endPosition: end
el(el)) {
c);
}
isNode(el)) {
result != null) {
return null;
return node;
pathname: string = r.path;
}
url = url + "<STR_LIT>" + name;
if {
u) {
if (cur) {
ctx) {
false;
node.children, element), createBefore, false);
ngOnDestroy && ngOnDestroy.apply(this, args);
Subject();
complete();
value;
str;
push(str);
return regExp.test(err.toString());
rv[name] = obj.installInfo;
callback(false);
other
ftpScopes.length > <NUM_LIT>,
<NUM_LIT>])
format(Strings.INIT_GITFTP_SCOPE_NAME, scopeName), {
then((result: any): any => {
uri.password("<STR_LIT>");
scopeArgs)
io + <NUM_LIT>, io).indexOf("<STR_LIT>") === <NUM_LIT>) {
return result;
trackOrigin) {
then((stdout: any): any => {
upperCasePattern, "<STR_LIT>")]);
branchName) {
currentCurrentBranchName: any = branchName.substring(<NUM_LIT>).trim();
return m[<NUM_LIT>];
return null;
if logOut.trim();
git_REGEX);
"<STR_LIT>"], {
if (str.length > <NUM_LIT>) {
if (hash != null)
allowGlobal) {
fileOrFiles) {
return git(["<STR_LIT>", "<STR_LIT>", remote + "<STR_LIT>" + branch]);
then((stdout: any): any => {
return GitCli.discardFileChanges(file.fullPath);
splice(idx, <NUM_LIT>);
any = Preferences.get("<STR_LIT>");
commit.author = author;
commit.type === "<STR_LIT>") {
}
break;
relative: any = date.getHours();
shown = date.fromNow();
on("<STR_LIT>", (): void => close());
true
currentDocument) {
entriesMenu: any = projectCmenu.current;
projectCmenu;
addMenuItem(CMD_REMOVE_FROM_IGNORE);
projectCmenu.removeMenuItem(CMD_REMOVE_FROM_IGNORE);
cwd: directory,
err, stdout, stderr);
opts, callback);
resolvedPath: string | null = statErr ? path.dirname(_path) : null;
return git(["<STR_LIT>", "<STR_LIT>", "<STR_LIT>"])
setTimeout((): void => {
}
}
REFRESH_ALL);
click();
$resetBtn: any = $gitPanel.find("<STR_LIT>");
remote;
ahead > <NUM_LIT>) {
{
refresh
ErrorHandler.showError(err, "<STR_LIT>");
remoteName);
}
const
$dialog.find("<STR_LIT>").focus();
Date().getTime());
true);
name];
data;
return console;
r);
contextRouter),
<NUM_LIT> }),
Log.info('<STR_LIT>');
run
}
}
Log.info('<STR_LIT>');
Log.info('<STR_LIT>');
worker[addr] = {
(): {
true) {
RunStressType, function* (action: any) {
getUrl('<STR_LIT>'));
return;
LoginPasswordSuccessType, body));
action.value;
name;
return state;
...
provideStore(app),
getProducts(), getProductState());
return obj;
state.entities, {
APP_REDUCERS)
deactivate();
Class;
Default;
return CompletionItemKind.Function;
declaration instanceof TypeDeclaration:
TypeDeclaration:
CompletionItemKind.Variable;
'<STR_LIT>') {
ms));
toLowerCase();
SyntaxKind.IfStatement
return `<STR_LIT>`;
element) {
take(<NUM_LIT>)
if (session && session.mediaKeys && session.mediaKeys.length > <NUM_LIT>) {
preferredTextTrack === null) {
undefined) {
normalizedLanguage || "<STR_LIT>") === adaptation.normalizedLanguage &&
clockTick.currentTime;
clockTick,
if (ksType.indexOf(ksName) !== -<NUM_LIT>) {
hasNativeSourceBufferDefined();
if (time < cue.end) {
element.removeChild(child);
if (!parser) {
if (!periodItem) {
period,
period.type === '<STR_LIT>') {
return onItemRemove$: any = removePeriodBuffer$
return null;
periodItem);
concatMap(([period, buffers]) => {
const
timeOffset : <NUM_LIT>,
Observable<null> = updateTimeOffset$
createObjectURL(video);
return (): void => {
case <NUM_LIT>:
case <NUM_LIT>:
break;
errorDetail = "<STR_LIT>";
isRunning()) {
return;
"<STR_LIT>",
value: {
"<STR_LIT>",
"<STR_LIT>",
else `<STR_LIT>`;
message || `<STR_LIT>`;
let endTime: any;
timescale;
maxDuration: number;
<NUM_LIT>;
segmentDuration;
number = _sidxSegments[sidxStart].time;
<NUM_LIT>), <NUM_LIT>);
segmentStart;
console.log(`<STR_LIT>`);
false;
case "<STR_LIT>":
attribute.value;
childNodes),
i++) {
attribute.name) {
frameRate = attribute.value;
frameRate = frameRate;
frameRate;
height;
else {
const minPlayoutRate: number = parseFloat(attribute.value);
profileName: string = attribute.value;
qualityRanking = qualityRanking;
value;
break;
value, <NUM_LIT>);
let (_match === '<STR_LIT>') {
nextSegments.length; i++) {
null] = codecPrivateData.split('<STR_LIT>');
newof: Uint8Array = newmoof.slice(<NUM_LIT>, newmooflen);
getText().replace(ISML_COMMENT_RE, '<STR_LIT>');
if (flags === <NUM_LIT>) {
(buf[<NUM_LIT>] +
number = buf[pos];
pos += <NUM_LIT>;
number = buf[pos];
patchVersion].join('<STR_LIT>');
pos);
pos);
<NUM_LIT>;
imageCount) {
current (currentImageIndex === <NUM_LIT>) {
ts: number = currentImageOffset;
break;
format,
i: number = <NUM_LIT>; i < lines.length; i++) {
const
lines.slice(startingI, i));
timeOffset);
if (element.hasAttribute(attribute)) {
Element[] = [];
Node | null = _element.parentNode;
children: HTMLElement[] = [];
const child: ChildNode = childNodes[i];
const
backgroundColor;
childNodes;
currentNode.nodeType === <NUM_LIT>) {
trimmed.replace(/\s+/g, "<STR_LIT>");
"<STR_LIT>";
if ch: string = linified[i];
if (fromIndex === undefined) {
fromIndex: boolean = false;
k], searchElement)) {
<NUM_LIT>) +
encodeURIComponent(str));
return range
b) < <NUM_LIT>;
parse(data);
if (!isPending) {
len) {
if (len === <NUM_LIT>) {
"<STR_LIT>") {
part)) {
else {
<NUM_LIT>] !== "<STR_LIT>") {
undefined && message["<STR_LIT>"] !== undefined;
message.messageType === MESSAGE_RESPONSE);
messageType === MESSAGE_REQUEST;
subscriber;
return (typeof match === '<STR_LIT>') {
observable);
"<STR_LIT>") {
observable["<STR_LIT>"];
null || value === undefined) ? null : value;
key);
return {
getPrototypeOf(observable);
l) || !exists(r)) {
r)) {
undefined && t !== null;
'<STR_LIT>') {
idx < a.length; idx++) {
"<STR_LIT>";
}
Contact: Contact = contactList[i];
info('<STR_LIT>', `<STR_LIT>`);
contact: Contact = contactList[i];
length; i++) {
setTimeout wait;
`<STR_LIT>`);
if (!room) {
(): void => {
await.on('<STR_LIT>', (): void => {
silly('<STR_LIT>', '<STR_LIT>', data);
<NUM_LIT>;
P_LOGIN_TIMEOUT);
if (this.userId) {
login(this.userId);
emit('<STR_LIT>', this.user);
e.message);
this.userId, this.user);
component("<STR_LIT>"));
ngOnChanges) {
}
component.name + '<STR_LIT>');
'<STR_LIT>');
error('<STR_LIT>' + component.data + '<STR_LIT>');
<NUM_LIT>]['<STR_LIT>']) {
component.data) {
component.name + '<STR_LIT>');
val] !== undefined;
objobj)
typeof v === '<STR_LIT>') {
writeText(text);
as {
if (!absoluteAPIUrl) {
else
fd
else {
res(JSON.parse(JSON.stringify(channel)));
videoChannels.forEach((channel: any): void => {
value;
const videoChannel: VideoChannelModel = res.locals.videoChannel as VideoChannelModel;
resultList: any = await UserModel.listFollowers(req.query.start, req.query.count, req.query.sort);
ActorModel = res.locals.serverActor as ActorModel;
as UserModel;
password,
CONFIG.STORAGE.AVATARS_DIR, avatarName);
transaction: t });
logger.info('<STR_LIT>', avatarName);
videoChannel: videoChannel
const resultList: any = await VideoChannelModel.listForApi(req.query.start, req.query.count, req.query.sort);
t: any): Promise<void> => {
res.json({
sequelizeTypescript.transaction(async (t: any): Promise<any> => {
res.json(VIDEO_CATEGORIES);
query.maxHeight, <NUM_LIT>);
'<STR_LIT>' + video.id;
width: number = parseInt(req.query.width, <NUM_LIT>);
maxHeight;
maxWidth !== undefined && maxWidth < PREVIEWS_SIZE.width))
options: {
name,
new Promise<void>((resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void): void => {
string[] = [];
'<STR_LIT>');
'<STR_LIT>' &&
return isBaseActivityValid(activity, '<STR_LIT>') &&
activity.id);
true;
isActivityPubUrlValid(activity.object);
return exists(signatureCreator) && signatureCreator.length > <NUM_LIT>;
return isBaseActivityValid(activity, '<STR_LIT>') &&
isUserIdentifierValid(data.id);
'<STR_LIT>' + url.height));
VIDEO.indexOf(url.mimeType) !== -<NUM_LIT> &&
return isBaseActivityValid(activity, '<STR_LIT>') &&
isVideoDescriptionValid(video.description) &&
retweeted || isVideoCommentValid(video.retweeted));
video.privacy) &&
icon) &&
return isUUID(value);
'<STR_LIT>');
exists(value) && validator.isLength(value, USERS_CONSTRAINTS_FIELDS.DESCRIPTION));
number = <NUM_LIT>;
isLength(value, VIDEO_CHANNELS_CONSTRAINTS_FIELDS.DESCRIPTION);
return exists(value) && validator.isLength(value, VIDEO_CHANNELS_CONSTRAINTS_FIELDS.SUPPORT);
else {
status.NOT_FOUND);
return false;
value) && validator.isInt(value + '<STR_LIT>');
false;
false;
if (err) {
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>',
found: string[] = [];
push(key);
clientModel.countTotal();
delete require.cache[fileName];
cacheDir;
'<STR_LIT>' + CONFIG.WEBSERVER.PORT);
createCommand('<STR_LIT>');
logger.error('<STR_LIT>', err);
new Error('<STR_LIT>');
data);
new Error('<STR_LIT>');
t("<STR_LIT>"));
utils.queryInterface.dropTable('<STR_LIT>');
throw new Error('<STR_LIT>');
t("<STR_LIT>"));
new Error('<STR_LIT>');
utils.queryInterface.dropTable('<STR_LIT>');
query);
changeColumn('<STR_LIT>', '<STR_LIT>', data);
file
actor.url;
result.support,
privateKey);
err);
followersCount);
set('<STR_LIT>', attributes.outbox);
new Error('<STR_LIT>');
activityType: string = activity.type;
id) {
if (!targetActor)
await sendFollow(actor, targetActor);
targetActorId: targetActor.id
id,
transaction: t
actorFollow.save({
unknown = await getOrCreateActorAndServerAndModel(activity.object);
continue;
new Error('<STR_LIT>');
const broadcast: any = await ActorModel.findOrCreate({
id,
string[] = toActorFollowers.map((follower: ActorModel): string => follower.url);
actorsExceptionSet: Set<string> = new Set(actorsException);
to: video.url,
'<STR_LIT>',
url, byActor, t);
Account.Actor;
'<STR_LIT>',
const audience: {
'<STR_LIT>';
originalUrl + '<STR_LIT>' + updatedAt;
videoChannelUUID + '<STR_LIT>';
video.id + '<STR_LIT>' + videoComment.id;
id);
video.privacy = VideoPrivacy.PUBLIC;
if (!user) {
await token.destroy();
sortableColumn: string): string => `<STR_LIT>`);
const (!email) {
status.UNAUTHORIZED);
'<STR_LIT>' })
false;
end();
'<STR_LIT>' })
'<STR_LIT>' })
false;
'<STR_LIT>' })
if (!req.files[imageField])
status(<NUM_LIT>)
false;
value === null || value === undefined) {
forEach((video: Video): void => {
url;
});
'<STR_LIT>';
const video2: Video of video2) {
return `<STR_LIT>`;
videoFile2.size) {
attribute1.length !== attribute2.length) {
rate(servers, numServer, '<STR_LIT>');
new Promise((resolve: (value: unknown) => void): number => setTimeout(resolve, milliseconds));
url)
return makeGetRequest({
any = await request.post(path, {
get(path)
path)
path + '<STR_LIT>' + target.id)
get(path)
get(path)
request(url)
path)
makeGetRequest({
start })
req.set('<STR_LIT>', '<STR_LIT>')
return request(url)
name + '<STR_LIT>' +TorrentName);
"<STR_LIT>") {
if category: any = categoryServer[categoryString];
return <NUM_LIT>;
return <Element>nativeEl.querySelector('<STR_LIT>');
false;
By.css('<STR_LIT>'));
shift();
string[] = from.split(directorySeparator);
const
if (relativePath) {
pathPrefix = `<STR_LIT>`;
AngularConstants.JS_NAMESPACE)) {
mt);
lastWindow: true });
items();
number = window.innerHeight;
Completions.StatusBarItem()
element));
Obsolete = false;
any
length; i++) {
'<STR_LIT>':
element.contentEditable.toLowerCase() === '<STR_LIT>':
excmd) {
"<STR_LIT>":
"<STR_LIT>");
urls[<NUM_LIT>], "<STR_LIT>");
excmd, "<STR_LIT>");
break;
os.EOL);
string = "<STR_LIT>";
null;
catch (e: any) {
decodeURIComponent(args[<NUM_LIT>]);
'<STR_LIT>')
return url.href;
}
endCmd);
schemeRegex);
all === "<STR_LIT>") {
mode = "<STR_LIT>";
if(true);
"<STR_LIT>");
"<STR_LIT>");
! });
in s);
{
window.location.href = newUrl;
window.location.href = rootUrl.href;
DOM.isVisible]);
messageActiveTab('<STR_LIT>', '<STR_LIT>', [inBackground]);
key]);
else
true;
number = hintchars.length; taglen > <NUM_LIT>; taglen--) {
hintables(), (hint: any): void => {
hintPage(hintables(), (hint: any): void => {
}
= start; _ < stop; _++) {
break;
undefined) {
res: any = iter.next();
Array(n);
cb);
await activeTab()).id;
string = await firefoxVersion();
any;
divisor) + divisor) % divisor;
keys: [], ex_str: '<STR_LIT>' };
keys: [], ex_str: '<STR_LIT>' };
if
return `<STR_LIT>`;
replace(/\+/g, "<STR_LIT>")
b64 + '<STR_LIT>') : filename)
paths.pop();
url.search) {
pathname)) {
if (!options[opt]) {
return true;
price;
return
const req: Promise<Response> = authRequest(auth, {
path: '<STR_LIT>', fields: details });
publicAPIInstance = CCXTExchangeWrapper.createExchange('<STR_LIT>', {
return `<STR_LIT>`;
<NUM_LIT>),
depth: bookDepth
forEach((product: string): void => {
});
new: string = `<STR_LIT>`;
order);
"<STR_LIT>",
command,
transports.Console,
true
pad: string = '<STR_LIT>';
const `<STR_LIT>`;
'<STR_LIT>';
file);
file);
log(target);
filter);
return url;
let(getCurrentUserId())
`<STR_LIT>`;
userId, '<STR_LIT>');
state);
x.type === action.type);
actionsById[i]);
getState(), args));
promise: any, middleware: any): any => promise.then((): any => middleware(store, action, args)), Orbit.Promise.resolve());
actions;
new Error(`<STR_LIT>`);
document.id.value,
snapshot : null);
nodesMap, editedNodeIds);
data)) {
data[prop];
`<STR_LIT>`;
const directive: any of directives) {
if (!parsed) {
key: string in value) {
}
return false;
field.type && field.type.kind === '<STR_LIT>');
type: any = field.getType();
fragmentMapForDefinition(document, definition);
typeof value === '<STR_LIT>';
return value === null || typeof value !== '<STR_LIT>';
return false;
baz: <NUM_LIT>,
if (node['<STR_LIT>'] === '<STR_LIT>') {
1);
any = getSyntheticBrowserBounds(browser);
const state: ApplicationState = yield select();
function* () {
lastState: SyntheticBrowserRootState = state;
emitChange) {
p = fetchFile(uri);
"<STR_LIT>" + window.location.host + curl;
blob);
any = await p;
fork(handleSyntheticWindowInstance, instance);
window);
linkEditorSaga);
yield take(WINDOW_EXTERNAL_RESOURCE_URI_CHANGED)) as WindowExternalResourceUriChanged;
translateMousePositions !== false;
event.type)) {
false,
event: Event = clonedEvent;
value(value);
if
const take();
const
cancelable: false,
value === "<STR_LIT>") {
continue;
"<STR_LIT>" || key === "<STR_LIT>") {
value;
"<STR_LIT>",
"<STR_LIT>",
initWeb);
definition: any = document.getWordRangeAt(offset);
if (open) {
return comp.definition;
inStartTagEnd: boolean = node.startTagEnd && offset < node.startTagEnd;
return false;
false;
definition: Definition[] = [];
getTokenOffset())
if definition: Definition = getDefinition(tag, range, open);
tabSize);
return initialIndent: string = generateIndent(options);
yield select(expressServerSelector);
handle.toLogin);
}
fork(handleLoadedSavedState);
handleLoadedArtboard);
}
state: ApplicationState = yield select();
yield
take(ARTBOARD_CREATED);
ARTBOARD_CREATED);
handleNewStyleRule);
scrollId: string): Generator<any, void, unknown> {
top: <NUM_LIT>,
while (true) {
state: ApplicationState = yield select();
const event: any = lastPaneEvent = (yield take(STAGE_TOOL_OVERLAY_MOUSE_PANNING)) as StageToolOverlayMousePanning;
while (<NUM_LIT>) {
ApplicationState = yield select();
spawn(function* () {
fork(frontEndSaga);
mt.bind(keyCombo, (): void => {
return (): void => {
handleComponentsPaneAddClicked);
component: any = getSelectedComponent(state);
dropRef[<NUM_LIT>]) {
<NUM_LIT>, event);
continue;
{
continue;
{
OpenExternalWindowButtonClicked = yield take(OPEN_EXTERNAL_WINDOW_BUTTON_CLICKED);
workspace.selectionRefs.length === <NUM_LIT>) {
type) {
break;
left: bounds.left + <NUM_LIT>, top: bounds.top - <NUM_LIT> }));
break;
const {
state.resourcePath), "<STR_LIT>")));
yield wrapRoute(getIndex));
yield wrapRoute(getIndex));
wrapRoute(getIndex));
PUBLIC_SRC_DIR_PATH, yield wrapRoute(getIndex));
server.post("<STR_LIT>", yield wrapRoute(updateComponent));
const document: any = getLatestPreviewDocument(state, componentId, previewName);
res.send(targetComponent.content);
ApplicationState = yield select();
return;
if.send(content);
else {
req.on("<STR_LIT>", (chunk: any): number => buffer.push(chunk));
if (data) {
url = uri;
fork(handleExpressServerStarted);
yield fork(handleIPCRequest);
continue;
error(e);
if
uri } = screenshots.shift();
entries.length);
previewName)] = entry.componentHeight;
previewUrl);
clippings));
yield fork(handleExpressServerStarted);
state: ExtensionState = yield select();
ExpressServerStarted = yield take(EXPRESS_SERVER_STARTED);
fork(handleDevConfigLoaded);
yield fork(handleVisualDevConfigLoaded);
handleVisualDevConfigLoaded);
httpServer: http.Server;
socket: any): void => {
handleAlerts);
break;
break;
vscode.window.showWarningMessage(text);
take(OPEN_EXTERNAL_WINDOW_EXECUTED);
yield take(OPEN_EXTERNAL_WINDOW_EXECUTED);
ExtensionState = yield select();
return;
true) {
tandemEditorStatus !== TandemEditorReadyStatus.DISCONNECTED) {
DISCONNECTED) {
const fork(function* () {
name: string in sinks) {
else if (node.type === '<STR_LIT>') {
'<STR_LIT>'),
'<STR_LIT>' +
TokenType.InvalidState), '<STR_LIT>']),
href: '<STR_LIT>'
event.returnValue = false;
'<STR_LIT>') {
istypeof param === '<STR_LIT>' ||
function (vnode: VNode) {
(source as any)[scope] || source;
result = options.useCapture(eventType);
isArray(modules)) {
CurState = getState();
length > <NUM_LIT>)
selectors;
if (id) {
id) {
`<STR_LIT>`,
{
h2('<STR_LIT>', user.url),
channel)) {
channel]);
outerSinks[channel] = innerSinks[channel];
drivers);
sinkProxies[name]);
obj).length === <NUM_LIT>;
program.dispose) {
observer: MutationObserver = null;
as Function).apply(this, arguments);
queue.push(fn);
function (fn: Function) {
`<STR_LIT>`;
schedule.remove(scheduledEntry);
{
},
error(entries);
currentTime() });
LOAD_FAIL):
default:
switch(toPayload)
entity, actions]) => {
{
DELETE)) {
entities: Object.create(null),
break;
break;
actions.AddToLocal))
PATCH:
default:
BlogPage: initialBlogPageLayout,
const
state.talksPage, watched } };
slices.REBUTTAL, actions.PATCH):
entityFunctions.update<Rebuttal>(state, <any>action);
state;
return actions$
null };
r).snapshot;
throw new Error(message);
"<STR_LIT>") {
push(`<STR_LIT>`);
`<STR_LIT>`);
any = await response;
dangerJSON: DangerJSON = new DangerJSON(output);
any = "<STR_LIT>";
filename, content);
return fnOrPromise(content);
return new Promise((resolve: (value: unknown) => void, reject: (reason?: any) => void): void => {
markdowns: results.markdowns,
number = <NUM_LIT>; i < length; i++) {
<NUM_LIT>;
<NUM_LIT>;
const g: number = Math.max(<NUM_LIT>, Math.min(<NUM_LIT>, color.g / <NUM_LIT>));
max - min;
{
mapView.infoWindowTemplates;
case "<STR_LIT>":
"<STR_LIT>":
return vs.SymbolKind.Interface;
"<STR_LIT>":
vs.SymbolKind.Variable;
"<STR_LIT>":
case "<STR_LIT>":
return vs.SymbolKind.Class;
vs.SymbolKind.Class;
min);
get("<STR_LIT>")
analyzerOverride;
"<STR_LIT>";
enable, projectType);
return false;
false;
false;
localize('<STR_LIT>', "<STR_LIT>"));
unlinkSync(triggerFile);
return false;
<NUM_LIT>,
return false;
executeCommand('<STR_LIT>', url);
stagger === '<STR_LIT>'
node: StateNode = states[stateKey];
IPath[] = [];
fromPathId] || [];
}
event
version: any;
statusCode === <NUM_LIT>) {
packageInfo.version);
const pkg: {
if run(code, baseOptions);
e: any) {
Error(`<STR_LIT>`);
}
}
log('<STR_LIT>');
log('<STR_LIT>');
exec(exe));
log('<STR_LIT>');
execSync('<STR_LIT>', {
log('<STR_LIT>');
console.log('<STR_LIT>');
console.log('<STR_LIT>');
log('<STR_LIT>');
'<STR_LIT>');
result: {
filename).endsWith('<STR_LIT>');
stage.name === runToStage);
fixUnicodeBOMIfNecessary(source);
return result;
for (let stage: Stage of all) {
comment: string = '<STR_LIT>';
`<STR_LIT>`),
commentLines[<NUM_LIT>])) {
getSuggestionMessageLines(codeLines[<NUM_LIT>], message)
env[`<STR_LIT>`];
string = '<STR_LIT>';
.constructor instanceof FunctionPatcher)) {
reference,
program, context);
{
return [];
bindings;
any[] = [];
node instanceof ArrayInitialiserMember) {
start);
child: Node): boolean => child instanceof SoakedOperation);
commonIndent = commonIndent + indent;
typeof node === FUNCTION;
type) !== -<NUM_LIT>;
strings) {
if (skipNodeCheck) {
processExec = require("<STR_LIT>");
chalk.red('<STR_LIT>'), error);
if (isNaN(portNumber)) {
action.type === '<STR_LIT>';
action: error,
path.join(process.cwd(), '<STR_LIT>');
expectedType === '<STR_LIT>') || typeof option === '<STR_LIT>') {
TOPIC.ssb,
}
recordName
as any).name;
return '<STR_LIT>';
'<STR_LIT>':
'<STR_LIT>':
BOM_PREFIX)) {
if (pr) {
entry);
throw new Error(`<STR_LIT>`);
const changelogLines: any = changelogText.split('<STR_LIT>');
releases;
release: any = releases[prop];
return [];
event, args);
return [
value, '<STR_LIT>');
createJitCompiler();
STATE_ENDED;
return node.state === STATE_InProgress;
entry: opts.entryFile,
opts.licensePath
transformer: ts.Transformer = transformers[<NUM_LIT>];
tsConfig.rootNames],
return
node.type === "<STR_LIT>" && node.name === "<STR_LIT>";
return url.parse(value).protocol === '<STR_LIT>';
return `<STR_LIT>`;
sources || []).concat(mapFn(sourceMap.source));
text: replacement
globPattern);
arg1;
...descriptor,
globalState.currentReaction = object;
set(globalState.currentReaction, {
value);
try {
actions.length > <NUM_LIT>;
joinPointOrTarget, <JoinPointAfterAdvice<T>>methodNameOrAdvice);
result) {
function (U) {
return result;
allowFunctionValues, ignorePropertyValues);
any = comparableA[name];
call(b, name);
return
if
else patchRecords;
options)) {
return value && value.__symbolic === '<STR_LIT>';
Object || typeof value === '<STR_LIT>'));
isArray(value) && (<SpliceRecord[]>value).length === <NUM_LIT>;
Error('<STR_LIT>');
patchRecord(record)
new Error('<STR_LIT>');
return Promise.resolve().then((): boolean => true);
create(source);
assign(Object.create(null), value);
as T[];
typeof value.load === '<STR_LIT>';
( object.subscribe === '<STR_LIT>';
options);
'<STR_LIT>';
if (!isAborted) {
return;
target as XMLHttpRequest);
request.response);
response);
task, reject);
send('<STR_LIT>', '<STR_LIT>');
true;
const key: string in options.headers) {
'<STR_LIT>');
ArrayBuffer) {
'<STR_LIT>');
timeoutHandle) {
noop;
url, function (text) {
number = entry.indexOf('<STR_LIT>');
indexOfFirstEquals === -<NUM_LIT>) {
key = entry;
"<STR_LIT>");
return current + value;
args: any[]): boolean => {
Target();
authorization;
clearTimeout(timerHandle);
advise(getDispatcher(target, methodName), '<STR_LIT>', advice);
<NUM_LIT>)[<NUM_LIT>];
`<STR_LIT>`;
throw new TypeError('<STR_LIT>');
value = map[key];
else {
else {
id;
IGitCommandExecutor, GitCommandExecutor);
addSingleton<IApplicationCommandHandler>(IApplicationCommandHandler, ApplicationCommandHandler);
contentType: any = file.getContentType();
slice(-<NUM_LIT>);
return undefined;
{
error: any, files: any): void => {
null, failures));
IModuleInstaller, NpmInstaller);
'<STR_LIT>') {
openCommand = '<STR_LIT>';
return;
HKCU;
line - document.lineCount;
pos);
}
startAt);
true || obj === false;
typeof (obj) === _typeof.undefined;
obj) || obj === null;
const (condition) {
shift();
return
line.length - EXTRATERM_LENGTH);
ex.length > <NUM_LIT>) {
attachRequestOptions, debugSession);
return [
}
F) || (ch >= Char.0 && ch <= Char.9);
Char.LineFeed;
any = compiledRegexp.exec(data);
PythonObjectDefinitionProvider();
any = tokens.indexOf(position);
fsPath : undefined;
content;
string = getTestModuleName(testProvider, options);
mergeStdErr === '<STR_LIT>';
TestProvider.Python) {
pythonExecutionServicePromise = new Promise<IPythonExecutionService>((resolve: (value: IPythonExecutionServiceResult<string>) => void, reject: (reason?: any) => void): void => {
I("<STR_LIT>").IExecutionInfo = testHelper.getExecutionInfo(testProvider);
options),
stdErr: string = '<STR_LIT>';
undefined);
errorHelper: ITestsHelper = serviceContainer.get<ITestsHelper>(ITestsHelper);
resolve(stdOut);
if (isNaN(num)) {
return;
string = '<STR_LIT>';
const (item === yes) {
statusText.push('<STR_LIT>');
string = args[indexOfPattern];
args[indexOfPattern + <NUM_LIT>];
startTestDiscoveryDirectory)) {
some((arg: string): boolean => arg.trim() === '<STR_LIT>');
depth));
pythonSettingsPath);
documentPath);
log(action);
setting]) {
code === '<STR_LIT>');
else {
message = `<STR_LIT>`;
error as any)[ERROR_ innerException];
innerException.name) === -<NUM_LIT>) {
resolve(files.filter((name: any): boolean => name.endsWith('<STR_LIT>')));
push(fullPath);
number = <NUM_LIT>;
const (eolPattern.test(document.lineAt(pos).text)) {
readBlock;
line: any = document.lineAt(startAt);
def.resolve(port);
let nb: Notebook[] = [];
Math.min(min, max);
fileExtensions);
push(model);
item.selectionSet.length > <NUM_LIT>) {
push(model);
<NUM_LIT>) {
splitted.length - <NUM_LIT>].split('<STR_LIT>')[<NUM_LIT>]
<NUM_LIT>];
return {
definitions = [];
name: string = name.toLowerCase();
DEBUG) {
introspectionQuery);
advance(f);
remainingPieces: string[] = promptResponse.slice(<NUM_LIT>);
subcommand)
return false;
return;
return;
formatPatchApplictionFailureError(packageName, actualVersion, patchFileName));
if (typeof reString === '<STR_LIT>') {
return defaultValue;
for (const packageName: string of Object.keys(dependencies)) {
version = `<STR_LIT>`;
name);
path: tmpDir.name,
return patchPackage(options);
"<STR_LIT>") {
true,
i], cloningNamespaces[i].getClasses());
type, isMatch) !== -<NUM_LIT>;
Node);
"<STR_LIT>" && structureName !== "<STR_LIT>";
case "<STR_LIT>":
case "<STR_LIT>":
-<NUM_LIT>) {
'<STR_LIT>';
case "<STR_LIT>":
case SyntaxKind.DefaultClause:
value);
Base.prototype, this, structure);
scope);
this) != null;
null)
getUnWrappableNode() {
getStructure(node);
nls.localize('<STR_LIT>', "<STR_LIT>"));
syntaxKind) {
value !== expectedType) {
null || value === undefined)
FormattingKind.Indent;
child);
FormattingKind.Newline;
getText();
return <NUM_LIT>;
parentBraceToken.getEnd();
return {
return {
return {
structure[node.name.value] = node;
fromMethodDeclarationOverload(node));
structures.length, startChildren.length);
opts,
return parentSyntaxList.getChildren().slice(childIndex);
}
getSiblingFormatting: getSiblingFormattingForStatementedNode,
null)
newPos = i + <NUM_LIT>;
text, SyntaxKind.JsxAttribute);
getInfoFromTextWithDescendant<JsxElement>(text, SyntaxKind.JsxElement, {
true });
return getInfoFromTextWithDescendant<JsxSelfClosingElement>(text, SyntaxKind.JsxSelfClosingElement);
SyntaxKind.JsxSpreadAttribute, {
text, SyntaxKind.JsxText, {
text, SyntaxKind.BreakStatement).descendant;
SyntaxKind.DefaultClause).descendant;
descendant;
getInfoFromTextWithDescendant<LabeledStatement>(text, SyntaxKind.LabeledStatement).descendant;
return getInfoFromTextWithDescendant<TryStatement>(text, SyntaxKind.TryStatement).descendant;
WhileStatement).descendant;
SRC_ROOT, fileName),
typeof nameOrFindFunc === "<STR_LIT>") {
'<STR_LIT>') {
return new RegExp(regexpContent, '<STR_LIT>');
return new RegExp(regexpContent, '<STR_LIT>');
msg);
sm[i] = m[i];
result: string[] = [];
lines) {
"<STR_LIT>", "<STR_LIT>");
push(entry);
key: string of keys) {
GEN_FACTOR);
`<STR_LIT>`;
inquirer.prompt([{
property], conf, done);
hash: tx.hash,
signature: tx.signatures,
tx.time,
{
port);
let (let key: any of keys) {
family === family) {
any = new InterfacePriorityCatcher();
/^e\d+$/,
find(interfacePriorityRegCatcher, (candidate: RegExp): boolean => candidate.test(family));
remoteport;
key: any of keys) {
number = await getAvailablePort(client);
NetworkConfDTO = {
host: '<STR_LIT>',
name: '<STR_LIT>',
null,
return {
<NUM_LIT>];
{
serverConfigurations;
userId] = {
node as any).commit.type === '<STR_LIT>';
activeEditor: any = vscode.window.activeTextEditor;
uri: any = document.uri;
gitlensVersion;
get<boolean>('<STR_LIT>');
return;
context.globalState.update(GlobalState.GitLensVersion, previousVersion);
context, gitVersion);
return await findSpecificGit(path);
}
e: any) {
expression.split('<STR_LIT>');
notifications.push(notification));
if
UIApplicationDidLaunchingNotification, (appNotification: any): void => {
initializeMessagingServices();
firebase._messagingConnected) {
connect();
(): void => {
step(g.error(value));
p] = b[p];
KEY);
source.length; i++) {
let
if index: number = first;
index, '<STR_LIT>');
instance) || Type.isIterable(instance);
disposable);
options;
p.then(onFulfilled, onRejected);
v);
ex);
value)
nls.localize('<STR_LIT>', "<STR_LIT>", source));
Error("<STR_LIT>");
<NUM_LIT>
replace(/[\-\[\]\/\{
throw
onMessage;
if
entryHandler(key, value);
entryHandler(key, value);
FRAGMENT_START) === <NUM_LIT>) ||
query.trim()) + "<STR_LIT>");
'<STR_LIT>');
if
result += '<STR_LIT>' + uri.port;
let fs
dir: string): void => {
dirPath);
forEach((file: string): void => {
workers.length; i++) {
if += suffix;
Collection(name + '<STR_LIT>' + '<STR_LIT>', collection, repeat);
<NUM_LIT>,
<NUM_LIT>,
Promise.resolve();
<NUM_LIT>);
number = <NUM_LIT>; i < max; i++) {
c.copyToClear();
"<STR_LIT>");
number = c.count - count;
length, <NUM_LIT>, "<STR_LIT>");
TEST_FLOAT, (assert: any): void => {
equal(Integer.is(TEST_FLOAT), false, '<STR_LIT>');
err) {
path.dirname(modulePath);
name)) {
name);
UuidEncoding.BASE64:
buffer.toString("<STR_LIT>");
<NUM_LIT>;
buffer[<NUM_LIT>]] + byte2hex[buffer[<NUM_LIT>]] +
"<STR_LIT>":
case "<STR_LIT>":
new Error('<STR_LIT>');
if (checksum) {
filter((it: any): any => !it.includes("<STR_LIT>") && !it.includes("<STR_LIT>")));
"<STR_LIT>"
if (os.platform() === "<STR_LIT>") {
extraOptions != null) {
cwd: buildPath,
"<STR_LIT>", "<STR_LIT>"]
data: Buffer): void => {
data;
log.debug(`<STR_LIT>`);
pid,
resolve(out);
cwd;
timeout, resolve, reject);
err: any): void => {
message);
args.push(exePath);
LogLevel.DEBUG);
text
writemgPropertiesFile.unlink();
args.push("<STR_LIT>");
null) {
path.join(app.getPath("<STR_LIT>"), "<STR_LIT>");
nb < <NUM_LIT> ? "<STR_LIT>" : "<STR_LIT>")).slice(-nb);
name.length < prefix.length) {
artifactPaths.add(event.file.path);
if
config({
process.platform, sigIntHandler);
arch: arch,
return name === '<STR_LIT>' || name === '<STR_LIT>' || name === '<STR_LIT>';
value === '<STR_LIT>') {
`< : null;
string = `<STR_LIT>`;
url: routerUrl }, "<STR_LIT>");
(): void => {
Error("<STR_LIT>"));
"<STR_LIT>",
e: any) {
err: any): void => {
push("<STR_LIT>");
return match;
const
p1);
startsWith('<STR_LIT>')) {
`<STR_LIT>`,
licensePage);
else
item.lang);
file,
{
parsePlugDescriptor(item));
Promise<StageDir>((resolve: (value: StageDir | PromiseLike<StageDir>) => void, reject: (reason?: any) => void): void => {
}
listOnDisk;
null) {
const
if (errors != null) {
new Promise<Dependency>((resolve: (value: Dependency | PromiseLike<Dependency>) => void, reject: (reason?: any) => void): void => {
arch: any = options.arch || process.arch;
deps: string[] = [];
execPath);
push("<STR_LIT>");
dep.path, execArgs, {
<NUM_LIT> : <NUM_LIT> });
push(execPath);
on("<STR_LIT>", reject);
on("<STR_LIT>", resolve);
license: string = options.license || `<STR_LIT>`;
args.arch }, `<STR_LIT>`);
join(app.getPath('<STR_LIT>'), '<STR_LIT>'));
format(value, symbol);
return false;
return false;
`<STR_LIT>`;
isDirectory(),
throws();
sep)
return {
packagerOptions as any).config.keyPassword = process.env.CSC_KEY_PASSWORD;
run('<STR_LIT>', {
await
CIRCLECI)) {
pathPatterns.join("<STR_LIT>"));
circleNodeIndex!!);
circleNodeIndex!!);
push("<STR_LIT>");
}
testPatterns.join("<STR_LIT>"));
log(`<STR_LIT>`);
"<STR_LIT>";
"<STR_LIT>") {
cacheDirectory = path.join(rootDir, "<STR_LIT>");
{
cwd: rootDir,
<NUM_LIT>) {
path.join(rootDir, it) : it);
return appPath;
removed: []
for (const item: string of newList) {
Added) {
item, d);
fragment;
updateCheckResult2: any = await updater.checkForUpdates();
const
arch];
if (DEV) {
map(names, (name: string): Promise<string | null> => {
new Assertions(actual);
run(resolve, reject);
trim();
os)
configuration);
false, reject);
stats.hasErrors()).toBe(true);
localName;
attributes, namespaceURI, localName);
undefined) {
parentNode.removeChild(oldChild);
`<STR_LIT>`;
name];
transition('<STR_LIT>', [
json));
dataset: any = datasets[<NUM_LIT>];
featureSet);
if
push(joinKey);
feature: IFeature): {
function ($scope, $element, $attrs) {
$ scope: any = $scope.$new();
newColumns || {
},
templateUrl: '<STR_LIT>',
const templateUrlString: string = templateUrl;
key] = undefined;
customVal !== undefined) {
destination[key] = srcVal;
return first.toString() === second.toString();
value,
key: string in value) {
{
rawValue] = paramString.split('<STR_LIT>');
push(currToken);
if (currToken.length)
}
'<STR_LIT>') {
scopedParam)) {
type === '<STR_LIT>') {
normalizeRelationship);
type];
const
if
title: "<STR_LIT>",
isArray(attrOrAttrPart)) {
modelName);
Object.keys(o).map((k: string): T => o[k]);
contains('<STR_LIT>');
return (t - <NUM_LIT>) * <NUM_LIT>;
value === '<STR_LIT>')) {
descriptor.value = function (...args: any[]) {
'<STR_LIT>') +
debug(`<STR_LIT>`);
method;
if (descriptor.set) {
side === Side.Left) {
return Side.Left;
`<STR_LIT>`));
;
else {
date as Promise<posts>;
local (!localConfig)
localConfig);
prev.push(next);
some((included: string): boolean => {
return typeInformation.name;
parseResult.left, parseResult.right);
Either.mbind(function (maybePlugin: Maybe.Maybe<AlgebraicType.Plugin>): List.List<AlgebraicType.Plugin> {
config));
success: ObjectGenerationSuccess = Either.mbind(function (success: ObjectGenerationSuccess) {
green('<STR_LIT>' + time + '<STR_LIT>' + info);
Promise.mbind(function (result: ConsoleOutputResults) {
mbind(function (request: FileWriter.Request) {
requestedPath)
state), io);
href.substring(parser.protocol.length);
title.save();
filter((key: string): boolean => {
pattern, path.dest)
Config(option.orig, option.dest))
next(seq)
catch((res: FetchResponse): FetchResponse => {
<NUM_LIT>)
trim())
re) || [])
case RouterEventType.popstate:
return void find(document, '<STR_LIT>')
return false;
dsts]));
link
void link.delete(dst)
write(html);
return (err: UnsafeError): any => {
let(registerRequest(name, email, password, url));
import("<STR_LIT>").TaggedWebAppConfig | undefined = getWebAppConfig(store.getState().resources.index);
value }));
new Error("<STR_LIT>");
logValue: string | number | boolean | undefined = getConfigValue(key);
delete(uuid);
status) || "<STR_LIT>";
Buffer.from(input, '<STR_LIT>');
'<STR_LIT>', payload };
getDevice()
actual_major === <NUM_LIT> && actual_minor === <NUM_LIT>) {
_expected_Minor);
shortenedBy: <NUM_LIT> };
moment(end_time),
if
items: number = timeSinceStart / intervalSeconds;
function (farmEvent) {
const {
return {
body
width / <NUM_LIT> }, gridSize.x),
<NUM_LIT>;
slug
mouth_requirements: "<STR_LIT>",
isNumber(v)) {
lang: string = langCode.toLowerCase();
parseInt(x, <NUM_LIT>));
<SafeError>x).error;
for.subscribe((): void => {
function (dispatch: Function, getState: import("<STR_LIT>").GetState) {
type: Actions.PUSH_WEEK,
ms));
return {
regimenState,
sample: reportState
farmwareState,
bar: '<STR_LIT>',
Waterarmware: [],
Track: [],
FbosImage: [],
return x;
functionAll(index, name).forEach((r: TaggedResource): void => {
return p;
ts;
byKind
uuid);
const {
index)
return findAll(index, "<STR_LIT>") as TaggedRegimen[];
"<STR_LIT>") as TaggedSequence[];
findAll(index, "<STR_LIT>") as TaggedTool[];
x as PointerType).pointerType !== undefined;
type: "<STR_LIT>",
"<STR_LIT>",
body = step;
status: <NUM_LIT>,
};
};
Firmware_by: "<STR_LIT>",
device_type: "<STR_LIT>",
network_access_log: false,
"<STR_LIT>",
meta: {
++idCounter,
fakeResource("<STR_LIT>", {
id,
return
if (elToScroll) {
<NUM_LIT>);
id);
'<STR_LIT>' && candidate !== null && typeof candidate[Symbol.iterator] === '<STR_LIT>';
alloc().initWithDictionary(settings.dictionary());
height: number = size.height;
style += `<STR_LIT>`;
css.hasOwnProperty(attribute))
(STR_LIT>";
"<STR_LIT>")
"<STR_LIT>";
"<STR_LIT>";
}
border;
value);
join("<STR_LIT>");
source)
return;
'<STR_LIT>':
string = '<STR_LIT>'.repeat(ammount);
STRING_SLUG_REGEXP, '<STR_LIT>');
return true;
number = <NUM_LIT>; i < input.length; i++) {
length; i++) {
substring;
ref.accessor.name;
type: '<STR_LIT>',
name: typeName };
JSON.stringify(data, null, <NUM_LIT>));
TokenGenerator(secret);
debug;
prop: string in v) {
if(v[prop], prop, scope, path);
sort((a: ast.Path, b: ast.Path): number => {
if (prop === name) {
}
fileName += '<STR_LIT>';
in obj)) {
obj) === '<STR_LIT>';
return value && typeof value === type;
s);
replace(extension, '<STR_LIT>');
return `<STR_LIT>`;
MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');
}
threadId: '<STR_LIT>',
aps['<STR_LIT>'] = '<STR_LIT>';
JSON.parse(JSON.stringify(value));
value.length !== <NUM_LIT>;
nock('<STR_LIT>')
mock = mock.matchHeader('<STR_LIT>', `<STR_LIT>`);
data,
letFunction(typedEvent);
promise === '<STR_LIT>') {
catch (e: any) {
trigger: {
string;
new Error(`<STR_LIT>`);
throw new Error('<STR_LIT>');
join("<STR_LIT>");
const {
Query,
INTERNAL,
val;
isMacintosh) {
'<STR_LIT>']);
return true;
default:
db.createObjectStore(DbOwner.store, {
db.createObjectStore(DbRemoteDocument.store, {
return EMPTY_DOCUMENT_VERSION_MAP;
obj.hasOwnProperty(tag));
return Error(`<STR_LIT>`);
numberOfArgs, '<STR_LIT>') +
argument != null) {
if (val === input) {
optionName, argument);
lastIndex) {
else if (lastIndex === <NUM_LIT>) {
else {
call(obj, key) ? obj[key] : null;
value) && !isNaN(value));
false,
process.env.GCLOUD_PROJECT), process.env.GCLOUD_INSTANCE);
prefix + '<STR_LIT>');
;
return describe(name, (): void => {
specJSONHandlers = writer;
SpecBuilder();
op());
push({
NONE);
doc: Document): void => {
let key: DocumentKey of keys) {
testVersion);
'<STR_LIT>');
throw new Error('<STR_LIT>');
get(serverTimestampFields.get(field)))));
instance[messagingName] = factoryMethod;
.endpoint || '<STR_LIT>').toLowerCase();
configurable: false,
new Date()).getTime()
'<STR_LIT>':
break;
Uint16Array ||
if
throw new Error(`<STR_LIT>`);
if argSpec: ArgSpec = passed[i];
passed.length, name, e.stack);
return _async(f, argsToForward);
domaindomainBase = domainBase;
FirebaseStorageError(Code.CANNOT_BREAK_POINT, '<STR_LIT>');
"<STR_LIT>" +
return new FirebaseStorageError(Code.INVALID_EVENT_NAME, "<STR_LIT>" + name + "<STR_LIT>");
name +
return new FirebaseStorageError(Code.NO_DOWNLOADED_URL, '<STR_LIT>');
return new FirebaseStorageError(Code.UNAUTHORIZED, "<STR_LIT>" + path + "<STR_LIT>");
hasOwnProperty.call(obj, prop);
function (resolve, reject) {
newErr = errorsExports.parseError(err);
bucket);
const (string) {
decodeURIComponent_(string);
case InternalTaskState.ERROR:
ERROR:
ERROR;
p !== undefined && p !== null;
nativeBlob !== undefined;
p) && p !== null;
p === '<STR_LIT>';
p === '<STR_LIT>';
value, key) {
({
(val: any, key: string): void => {
return function () {
createXhrIo,
pr.then((): boolean => true);
any = captureFake;
const foo: () => any = (): any => ({
hasOwnProperty('<STR_LIT>');
return value >= <NUM_LIT> && value <= <NUM_LIT>;
Decimal, decimal);
date2.getTime() - date1.getTime()));
node.firstChild) {
return fd.entries || [];
constructor.name);
return `<STR_LIT>`;
true };
return `<STR_LIT>`;
codeManager.runByLanguage();
undefined) {
activeFilterArray.push(config);
i: number = <NUM_LIT>;
id) {
screen_name
default: {
resolve(JSON.stringify({
charAt(startPos++) !== "<STR_LIT>") {
endMark: any = state.src.slice(startPos + <NUM_LIT>);
content);
content;
false;
rules.push("<STR_LIT>");
path.length) {
fromObject(value);
iterator in value) {
list);
modify(list, modify(index));
size;
view: View<T> = new View<T>(start, end, list._root);
return empty<T>();
var = modify(list);
OFFSET_ANCHOR.LEFT ? OFFSET_ANCHOR.RIGHT :
return (value % shift + shift) % shift;
size, index < <NUM_LIT> ? size + index : index));
slots.length;
<NUM_LIT>;
leftFinalIndex: number = <NUM_LIT>;
if[<NUM_LIT>].slots.length = left.slots.length;
left, shift);
right, left);
recompute, shift);
number = <NUM_LIT>; i < rslots.length; i++) {
length;
rslots[j];
subcountMoved;
subcount -= subcountMoved;
length = rslots.length;
lowerIndex: lastLowerIndex,
};
<NUM_LIT>) + <NUM_LIT>) + <NUM_LIT>;
list._right);
anchor === OFFSET_ANCHOR.RIGHT
OFFSET_ANCHOR.LEFT && ordinal >= view.offset && ordinal < view.offset + listSize;
isNone()) {
<NUM_LIT>];
slot: Slot<T> = right.slot;
view, map, root, depth);
fn);
values.map((v: string): any => v.trim());
Slot) {
initialSize);
list.appendValues(values);
size;
length;
map);
node.key, node.value];
var nextMap: any = modify(map);
const key: string = keys[i];
}
any = calculateHash(key);
nodeValues);
node.key;
return ((hash << shift) - hash) + shift;
length; i++) {
V | undefined = get(child);
value) {
list, i);
new: LeafNode<K, V> = list[length - <NUM_LIT>];
const (node.red) {
node];
const child: any of children) {
return iterateFromFirst(node, f);
NodeType.COLLISION:
default:
true;
value = node.value;
node = node._left;
iterateFromIndex<K, V>(reverse, index, tree));
iterateFrom(op, reverse, key, tree));
tree), tree._size = <NUM_LIT>);
Error('<STR_LIT>');
c === <NUM_LIT>) {
node = node._left;
parent;
child === null) {
node._count += <NUM_LIT>;
child.next);
pctx), compare);
_isRedBlackTree<K, V>(arg);
any = node.value;
value] : [value, node.right] : [value, node.left];
key.red, entry.value];
values);
arg);
return main;
set);
iterateValuesFromFirst(map);
getFirstItem(map._sorted);
while (!(current = it.next()).done) {
return map;
iterateKeys(map);
index: number = <NUM_LIT>;
return iterateValuesFromFirst(map._sorted);
return [item.key.key, item.value];
return set._indexed;
_isSortedMap(arg);
getLastItemByKey(sorted);
value.localeCompare(b.value);
index, set._tree);
tree: RedBlackTreeStructure<import("<STR_LIT>").SortedSetItem<T>, null> = outputSet._tree;
other)) {
main;
outputSet);
MappableIterator<T, T>(set._map, convertValue);
a - b;
<NUM_LIT>, l.root!.array.length), node), newOffset);
<NUM_LIT>;
depth - <NUM_LIT>);
undefined;
if (child !== undefined) {
undefined;
if (child !== undefined) {
suffix = emptyAffix;
l;
newAffix.length, l.bits);
return
newRoot.bits);
else {
decrement: any = decrementClick.mapTo(-<NUM_LIT>);
strings.split("<STR_LIT>");
replace(/\r/g, '<STR_LIT>')
hidden = true;
hidden = false;
hideBundleErrors();
return {
node.object.type === "<STR_LIT>"
if (node.type === "<STR_LIT>") {
const true;
name;
referencedVariable);
id.value;
packageJSONPath);
new Error(`<STR_LIT>`);
version;
number = matched[<NUM_LIT>];
if (major === <NUM_LIT>) {
else if (type === "<STR_LIT>") {
addon
addonName);
version = finalVersion;
tl.loc('<STR_LIT>'));
return '<STR_LIT>';
path.join(__dirname, '<STR_LIT>'));
extname(str);
if (process.platform === '<STR_LIT>') {
raw) {
i++) {
/\//g, "<STR_LIT>")
uglifyOptions: any = Object.assign({
worker);
MessageType.REQUEST, (msg: any): void => {
`.pid], {
});
'<STR_LIT>'].forEach((suffix: string): void => {
return typeof obj === '<STR_LIT>';
i === <NUM_LIT> && ys[i] === x);
{
'<STR_LIT>':
fa._tag);
fmap((v: A): void => {
readFileSync(s, '<STR_LIT>'));
validation.isLeft());
number = <NUM_LIT>;
zlibWriter.writeUint8(<NUM_LIT>);
writeUint8(value);
PRE_HEADER);
<NUM_LIT>);
return zlibbedLength: number = <NUM_LIT>;
returnspecifier.startsWith('<STR_LIT>');
name);
parse(precompileToScript(template, options));
string = `<STR_LIT>`;
COMPONENT, "<STR_LIT>");
i === args.length ? str : `<STR_LIT>`;
join("<STR_LIT>");
strings[<NUM_LIT>])
module,
<NUM_LIT>];
call(obj, key);
meta, '<STR_LIT>')) {
didChangeCallback = cb;
get(tag);
return {
return `<STR_LIT>`;
value;
return !symbols.has(parts[<NUM_LIT>]);
namespaceMap[attrName.toLowerCase()];
return new OptionChecker(checker);
switch (opcode) {
<NUM_LIT>;
new ComputedArgument(last, deps);
new AliasBlueprint(name);
return extension;
`<STR_LIT>`] = true;
if
obj[key];
props: string[] = Object.getOwnPropertyNames(obj);
let (let i: number = <NUM_LIT>; i < operands.length; i++) {
case Op.DEBUG:
case '<STR_LIT>':
(op & <NUM_LIT>) >> <NUM_LIT>;
case '<STR_LIT>':
name] = Value[op];
optimized.push({
tag);
{
return new SingleNodeBounds(parent, node);
"<STR_LIT>");
`<STR_LIT>`;
return
CurriedComponentDefinitionSymbol]);
stateStaticLayout() !== undefined;
if (nextSibling === null) {
'<STR_LIT>';
return type: import("<STR_LIT>").Type<import("<STR_LIT>").Opaque> = vm.getType();
new DynamicAttributeFactory(tagName, name);
tagName, name)) {
SelectValueDynamicAttribute;
if (array[i].name === name) {
boundsDepth[<NUM_LIT>]);
return node.nodeType === <NUM_LIT>;
candidate.nodeName === tag;
floor(primitive);
detectChanges();
else
tagName, attrs, contents] = [args[<NUM_LIT>], {
args;
attributes || [],
children: children || [],
type,
"<STR_LIT>",
delimiter);
indent + "<STR_LIT>";
handlerType: any = typeof handler;
'<STR_LIT>') {
for (let i: number = <NUM_LIT>; i < keys.length; i++) {
keyHandler.enter : defaultEnter,
'<STR_LIT>') {
"<STR_LIT>" && node.expression && node.expression.type === "<STR_LIT>";
i++) {
i];
join('<STR_LIT>')) === actual;
`<STR_LIT>`;
module,
assert.equal(matched[<NUM_LIT>], expected);
result: {
while (node !== null) {
attrs, contents] = args;
args.length === <NUM_LIT>) {
contents] = args;
square: [],
let (typeof klass === '<STR_LIT>') {
shouldSkip = true;
klass();
assert.equal(instance.glimmer.length, <NUM_LIT>);
test.skip) {
test
createTest(prop, test, false));
prop, test));
true));
if (isTestFunction(test)) {
prop, test));
kind === '<STR_LIT>') {
kind === '<STR_LIT>') {
tests.dynamic.push(createTest(prop, test));
_module(name, klass, options);
any[] = [];
peek();
nextNew) > -<NUM_LIT>)) {
nextOld);
object._guid = object._guid || newGuid();
'<STR_LIT>', name };
'<STR_LIT>', name };
'<STR_LIT>', name };
return {
name };
toLowerCase()) {
'<STR_LIT>':
case '<STR_LIT>':
'<STR_LIT>':
case '<STR_LIT>':
'<STR_LIT>':
'<STR_LIT>':
case '<STR_LIT>':
messageAndCharacterOfPosition(node.getStart()), message);
textNode)) {
return fs.statSync(file).isDirectory();
catch (e: any) {
'<STR_LIT>';
string[] = ['<STR_LIT>'];
customChromePath);
'<STR_LIT>' +
customChromePath, `<STR_LIT>`);
weight: -<NUM_LIT> },
weight: <NUM_LIT> });
chromeExecRegex, {
filter((path: any): boolean => {
process.env.LOCALAPPDATA);
return '<STR_LIT>':
default:
'<STR_LIT>',
resolve(rootDir, nodule);
as string[]).concat(globs);
await nodule(file);
'<STR_LIT>'
'<STR_LIT>',
await compileFromFile("<STR_LIT>"));
beforeHooks.before(uid);
destroyNamespace();
URL(authority);
api.TRACE_AGENT_REQUEST_HEADER];
handleTraceContext(ctx) : next());
const ( propagateContext) {
RegExpMatchArray | null = importPath.match(packageNameRegex);
const
matches[<NUM_LIT>],
get();
span.startTime);
readFileAsync('<STR_LIT>', '<STR_LIT>');
baseImage, dockerfile, dockerignore, genFiles);
'<STR_LIT>');
return loc.address === location;
let("<STR_LIT>", function (err, stdout, stderr) {
if (!params.hasOwnProperty(param)) {
obj.pipe === '<STR_LIT>';
url.get)({
const nock: any = nock('<STR_LIT>')
obj });
err);
const res: any = await pify(drive.files.delete)({
GCPEnv.CLOUD_FUNCTION;
}
host).get(instancePath).replyWithError({
args: any[]) {
undefined)) {
new NoopCancellationTokenSource());
return new Promise<CredentialsWithGeneration<Credentials>>((): Promise<CredentialsWithGeneration<Credentials>> => {
throw reason;
viewer),
viewerState.slices.length, viewerState.slices[<NUM_LIT>]],
<NUM_LIT>, true);
response.encoding === '<STR_LIT>') {
fragmentSize, fragmentSize);
null) {
TileDataInstanceInfo = serverInfo.getNode(dataInstanceKey);
return getShardedVolumeInternal(chunkManager, baseUrls, dataInstanceKey, dataInstanceInfo);
type: '<STR_LIT>',
match === null) {
undefined) {
return {
<NUM_LIT>));
if (matchObj['<STR_LIT>'] === '<STR_LIT>') {
i]));
let i: number = <NUM_LIT>; i < all convertedCoordinates.length; i++) {
match === null) {
verifyObject(stackIdObj);
stackIdObj);
buffer));
return;
event.preventDefault();
}
getData('<STR_LIT>'));
event.stopPropagation();
layerSpecification.finish();
true);
of dropLayers.layers.keys()) {
keys(attributes).forEach((name: string): void => {
let (numPrimitive === undefined) {
String(indices));
<NUM_LIT>;
<NUM_LIT>;
<NUM_LIT>] = rgb[<NUM_LIT>];
<NUM_LIT>;
of array) {
chunkManager.memoize.getUncounted({
endianness, vertexByteOffset, numVertices, indexByteOffset, numEdges);
if (response == null) {
let
new Error(`<STR_LIT>`));
channel, channelOutputLength * (channel + <NUM_LIT>));
baseOffset, chunkDataSize, blockSize, dataPosition);
<NUM_LIT>];
<NUM_LIT>, <NUM_LIT>];
dataPosition[<NUM_LIT>] = y;
outputValueOffset += outputOffset;
factory);
viewportHeight: number = document.documentElement.clientHeight;
return dragSource;
handle);
return;
number = s * <NUM_LIT>;
number = s * (<NUM_LIT> - v);
case <NUM_LIT>:
val2;
<NUM_LIT>] = val2;
<NUM_LIT>] = val1;
true;
return true;
<NUM_LIT>;
members);
if (child === null)
parentElement) {
source !== target) {
array(16);
string | undefined;
'<STR_LIT>':
modifiers |= Modifiers.ALT;
META;
SHIFT;
}
options);
m2 * m2 + m3 * m3 + m4 * m4);
options.clientId,
approvalPrompt,
authUser: state,
resolve(token);
handler
add((): void => {
AuthHandler();
contentWindow.postMessage({
zlib(byteView);
m) {
}
m[<NUM_LIT>].length, m[<NUM_LIT>].length);
replacement = singleQuoteString;
singleQuoteString, replacement);
vec3.create(), obj, verifyFinitePositiveFloat);
}
if (Number.isFinite(x)) {
true;
throw new Error(`<STR_LIT>`);
majorVersion !== <NUM_LIT> && minorVersion !== <NUM_LIT>) {
DataView(x);
let (majorVersion === <NUM_LIT> && minorVersion === <NUM_LIT>) {
shape = [shape];
format('<STR_LIT>', shape));
numElements;
handler);
removeListener('<STR_LIT>', handler);
<NUM_LIT>);
}
verifyString);
return GL_FLOAT;
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
return Math.round((x - y) * <NUM_LIT>) / <NUM_LIT>;
edge + <NUM_LIT> : edge;
start
className = '<STR_LIT>';
'<STR_LIT>': ['<STR_LIT>'],
};
script];
n) {
readFile(jsonPath));
model: '<STR_LIT>',
scope, elem, attrs) {
document.createTextNode(String(content)));
className.charAt(<NUM_LIT>).toUpperCase() + className.slice(<NUM_LIT>) + '<STR_LIT>';
controller: NavbarCtrl,
'<STR_LIT>') {
target.tagName === '<STR_LIT>') {
lastPos = elem[<NUM_LIT>].scrollTop;
color: '<STR_LIT>',
},
clipboard.destroy();
text + '<STR_LIT>' : text;
input: any = $compile(text)(scope);
'<STR_LIT>' +
'<STR_LIT>' +
backgroundColor } = element;
scopedVars;
Array.isArray(prop) ? prop[<NUM_LIT>] : prop;
if (typeof color === '<STR_LIT>') {
return rgbToHex(hslToRgb(color));
sortBy(sortedHSLColors, '<STR_LIT>');
function (point) {
floor(hash / TAG_COLORS.length)];
'<STR_LIT>',
iconClass: '<STR_LIT>',
iconClass: '<STR_LIT>',
case '<STR_LIT>': {
'<STR_LIT>',
bindToController: true,
'<STR_LIT>',
color === defaultColor) {
fillColor = defaultColor;
region.source.x, to: region.source.y },
id.length > <NUM_LIT>;
template,
meta: {
false,
updated: '<STR_LIT>',
message: `<STR_LIT>`,
'<STR_LIT>',
id: <NUM_LIT>,
datasource: false,
<NUM_LIT>,
id: <NUM_LIT>,
true,
false,
sort: <NUM_LIT>,
'<STR_LIT>',
values: [],
yaxes: {
'<STR_LIT>',
show: true,
'<STR_LIT>',
templating: {
list: [],
from: '<STR_LIT>',
'<STR_LIT>',
'<STR_LIT>'],
SubmenuCtrl,
'<STR_LIT>',
TimePickerCtrl,
'<STR_LIT>',
template,
rootScope = $rootScope;
restrict: '<STR_LIT>',
'<STR_LIT>');
return new Error('<STR_LIT>');
params.push(<NUM_LIT>);
obj.version, graphiteVersion);
}
return;
selectParts.pop();
'<STR_LIT>');
const legendElem: any = $(elem).find("<STR_LIT>");
range([rangeFrom, maxValue]);
legendValueScale)
yAxis: any = d3
x_ATTRIBUTE, posX)
maxValue, minValue])
d3
minValue, maxValue]);
'<STR_LIT>',
forEach(points, (point: any): void => {
bucketNum, bounds);
a);
ticksElement)
transaction: {
hasRole = function () {
<NUM_LIT>,
rsp.status;
rsp.body);
reset();
x, (y: T): T => {
of Object.keys(template)) {
props: props });
s, '<STR_LIT>');
expression,
return result.value;
const (nameOrQuery) {
if (filteredCookies.length > <NUM_LIT>) {
process.env['<STR_LIT>'];
`<STR_LIT>`;
!!.env['<STR_LIT>'] === '<STR_LIT>';
Page } = client;
if (process.platform === '<STR_LIT>') {
'<STR_LIT>') {
{
d.schema);
visitedDefinitions[newDefinition.name.value] = true;
new Error(`<STR_LIT>`);
importsString] : importsString.split('<STR_LIT>');
COMMENT)
};
if = type.ofType;
getFields();
name;
return options: {
context_TAG, '<STR_LIT>');
string = typeDefs.schema;
schemaPath);
const result: string = '<STR_LIT>';
`<STR_LIT>`;
log(`<STR_LIT>`);
functions).map((fn: any): any => fn.name);
endpoints = {
{
current)
len)
error(`<STR_LIT>`);
result);
all(arr.map(function (item) {
text: string): void => {
"<STR_LIT>",
testAttr2: {
spy("<STR_LIT>", arg);
arg);
attributes: {
default: "<STR_LIT>"
default: "<STR_LIT>"
"<STR_LIT>",
arg) {
$unmount: function (arg) {
GrimoireInterface.registerNode("<STR_LIT>", ["<STR_LIT>"], {
ensureDestinationDirectoryExists(options);
parseInt(options.cropWidth, <NUM_LIT>);
push("<STR_LIT>", `<STR_LIT>`);
info: IInfoResult = {
"<STR_LIT>",
options.cropWidth = parseInt(options.cropWidth, <NUM_LIT>);
const await resizeOrUpdate(options);
options.dst) {
"<STR_LIT>";
err) {
any = configuration.get<string>('<STR_LIT>');
max();
<NUM_LIT>;
if {
else {
typeof value === '<STR_LIT>';
case '<STR_LIT>':
i < pieces.length; i++) {
node.type === '<STR_LIT>') {
throw [];
any = group[output];
if (key > max) {
propertyName)
len) {
const [
case '<STR_LIT>':
component] ?
break;
return {
mode: <NUM_LIT>
value / <NUM_LIT>,
value: parsedValue.value,
<NUM_LIT>] =
FORMAT) {
transform,
transform[<NUM_LIT>],
else if (format === Layout3D.FORMATS.THREE) {
if (t1 !== t2) {
<NUM_LIT>]);
<NUM_LIT>;
return surrogates[value];
value];
return function (name, element, value) {
params || '<STR_LIT>') +
'<STR_LIT>' +
'<STR_LIT>');
else {
toString;
options.hasOwnProperty(key)) {
component) {
haiku.element.attributes[oldKey];
typeof newValue !== '<STR_LIT>') {
key === STYLE) {
component);
attributes) {
if (handler) {
if
target = domElement.ownerDocument.documentElement || domElement.ownerDocument.parentWindow;
component.registerListener(eventName, listener, target);
FUNCTION) {
thing === null;
<NUM_LIT>];
script.src = '<STR_LIT>';
constructor as any)[METADATA_KEY];
const
'<STR_LIT>';
}
this._component._context.getDate();
component);
any[] = [];
Math.min(Math.max(min, num), max);
<NUM_LIT>] = <NUM_LIT>;
out[<NUM_LIT>] = a[<NUM_LIT>];
<NUM_LIT>] = a[<NUM_LIT>];
a[<NUM_LIT>];
out[<NUM_LIT>] = <NUM_LIT>;
<NUM_LIT>] = <NUM_LIT>;
out[<NUM_LIT>] = <NUM_LIT>;
any = a[<NUM_LIT>];
const a10: any = a[<NUM_LIT>];
any = a[<NUM_LIT>];
any = a[<NUM_LIT>];
const a33: any = a[<NUM_LIT>];
const b10: number = b00 * a11 + b01 * a10;
a32 - a23 * a31;
det;
a12 * b10) *det;
a02 * b10 - a01 * b08 + a03 * b06) *det;
const a02: any = a[<NUM_LIT>];
a03: any = a[<NUM_LIT>];
const a20: any = a[<NUM_LIT>];
a02;
out[<NUM_LIT>] = a13;
a[<NUM_LIT>];
<NUM_LIT>] = a[<NUM_LIT>];
<NUM_LIT>][<NUM_LIT>] = mat4x4[<NUM_LIT>];
return false;
i] * scale;
number = <NUM_LIT>;
let j: number = <NUM_LIT>;
for
s[i] = j;
s.S = s).length = <NUM_LIT>;
j = mask & (count + <NUM_LIT>))];
typeof v === '<STR_LIT>';
typeof v === '<STR_LIT>';
join("<STR_LIT>");
prefix) {
thing !== undefined;
DEFAULT_CSS_UNITLESS;
if (prepend) {
const
propName : propName);
'<STR_LIT>';
propValue;
}
propValue !== null &&
continue;
propType === '<STR_LIT>' ||
style
return
pos);
styleName === '<STR_LIT>') {
prefix);
}
}
type: ActionConstants.app.SET_LAST_POLL,
notificationFilter.REMOVE_FILTER,
length > <NUM_LIT>) {
let
accountId,
repositoryMuteFilters.SET_MODE,
return updateSoundSettingsEnabled('<STR_LIT>', enabled);
period));
dispatch(removeNotification(accountId));
accountId);
title: '<STR_LIT>',
message: '<STR_LIT>',
return;
array.length < min;
!!window.AudioContext;
Moment(date).format('<STR_LIT>');
a);
dateTwo)
message,
actionParams
sticky, actionParams);
sticky, actionParams);
filter((alert: IAppAlert): boolean => alert.type === '<STR_LIT>');
get (!token) {
else {
repo.html_url,
return {
username,
return getAccount(accountId).repositoryMuteFilters;
return getState<IState>().settings.soundSettings.alertErrorEnabled;
soundSettings.itemsEnabled;
gitHubConfig.scopes;
window.location.origin + '<STR_LIT>';
notification.id, '<STR_LIT>');
EDLECTRON);
isEnv(PRODUCTION);
['<
params === '<STR_LIT>') {
return accountState[repoId] || {
id !== undefined && job.id !== null;
let {
checkDescriptorMap: IPackageDescriptorMap = {
file);
fs.realpathSync(path.resolve(p));
e: any) {
rimraf(p);
dirname(filePath));
case '<STR_LIT>':
break;
if (!processor) {
PROP_KEY] || [];
}
code);
Braces).length || []).length;
parseJsonConfigFileContent(configFile, configText);
options, configText);
dummy_FILE];
result: string = '<STR_LIT>';
src) {
min);
(): void => {
return process.env['<STR_LIT>'] === '<STR_LIT>';
Debug (savedTree) {
var valid: boolean = myrea.test(control.value);
boolean = myrea.test(control.value);
'<STR_LIT>'
AVUrl) !== null;
full: string, filePath: string): string => {
vineRegex);
fill bounds: {
descriptor.value = function (...args: any[]) {
options)
key];
enumerable: true,
addEvent(target, eventName + '<STR_LIT>', handleWheel);
if (!plugins[pluginName]) {
instance.scrollbar = scrollbar;
return;
return {
<NUM_LIT>));
return arr;
return a.toLowerCase() === ignoreCase ? a : a.toUpperCase();
':STR_LIT>', (done: any): void => {
debugElement.componentInstance.viewChild instanceof Infragistics.IgMapComponent)
done: any): void => {
componentInstance.viewChild instanceof Infragistics.IgPivotGridComponent)
END_LOADING:
default:
case variables.SET_VARIABLE:
service.getType(), pseudoNamespace);
split('<STR_LIT>').length - <NUM_LIT>;
name.toLowerCase();
str.length);
ret += <NUM_LIT>;
ret.push(chunk);
pkg.length) : name;
}
tertiaryTemplate) : '<STR_LIT>';
tertiaryActor) {
string = result.join('<STR_LIT>');
return arr.indexOf(item) >= <NUM_LIT>;
actors.filter((a: Actor): boolean => a.location === actorOne.location);
return [];
ChangeEditor, editor };
ActionType.ChangeKeybinding, keybinding };
urlStr, {
SetPage, page: '<STR_LIT>' };
return '<STR_LIT>':
FORMAT_FAILED, error };
CompileAssemblyRequest };
return {
type: ActionType.CompileWasm };
...state.configuration,
state.configuration.processAssembly,
actions.GIST_LOAD_SUCCEEDED: {
case actions.FORMAT_FAILED:
actions.REQUEST_CRATES:
CompileMirSuccess: {
default:
CompileWasmSucceeded: {
default:
params
metadata)) {
paramOrPropertyMetadata = [paramOrPropertyMetadata];
targetKey, metadata);
index === '<STR_LIT>') {
name);
MockContext = new MockContext(container, target);
baseConstructor);
{
return dependencyCount;
return <NUM_LIT>;
platformDir);
await runTask('<STR_LIT>', async (): Promise<void> => {
`<STR_LIT>`;
if (err) {
<NUM_LIT>));
ios.platformDir, '<STR_LIT>');
replace(/<key>CFBundleDisplayName<\/key>[\s\S]?\s+<string>([^\<]*)<\/string>/, `<STR_LIT>`);
path;
else {
return {
iosPath,
plugin.xml) {
}
platform === '<STR_LIT>') {
{
<NUM_LIT>) {
rootPath, '<STR_LIT>');
return null;
name,
package
version) {
version,
type: '<STR_LIT>',
const (answers.foundExternalConfig()) {
return;
chalk `<STR_LIT>`, async (): Promise<void> => {
type: '<STR_LIT>',
return;
log(`<STR_LIT>`);
log(`<STR_LIT>`);
join('<STR_LIT>');
func: () => Promise<T>): Promise<T[]> => {
const
compilerHost,
ng: any = await program.getSourceFilesAsync();
diagnostics: import("<STR_LIT>").Diagnostic[] = result.diagnostics;
TypeScript, diagnostics);
options
return mainContent;
'<STR_LIT>');
Node[] = getBootstrapNodes(allCalls);
const tsConfig: any = getConfig(context);
globResult.absolutePath,
Set<string> = directoriesToCreate.add(destFileName);
finish();
true;
arguments[<NUM_LIT>];
const
const angularCliJson: any = JSON.parse(fs.readFileSync(filePath, '<STR_LIT>'));
expression: any = (decorator.expression as CallExpression).expression as Identifier;
const
i < updatedArgs.length; i++) {
expression as CallExpression
return functionCall;
node, sourceFile, sourceFilePath);
node, sourceFile, sourceFilePath);
(context: ts.TransformationContext): ts.SourceFile => {
if (classDeclaration.decorators) {
as CallExpression).expression &&
hasDeepLinkDecorator = true;
push(decorator);
'<STR_LIT>') {
'<STR_LIT>') {
kind) {
case SyntaxKind.ModuleDeclaration:
node, visit);
(node: ts.Node): void => {
return
serve void => {
'<STR_LIT>');
filePath templatePath: any = path.join(request.rootDir, filePath);
return context.directivesDir;
type === Constants.STYLE) {
hydrated.lineNumber = request.line;
request.type === '<STR_LIT>') {
fileName = null;
languages);
ts: Logger = new Logger('<STR_LIT>');
const linter.getResult();
resolve();
`<STR_LIT>`;
<NUM_LIT>, <NUM_LIT>);
finally {
buildDir, '<STR_LIT>', `<STR_LIT>`);
return keys.length > <NUM_LIT>;
process.memoryUsage().toFixed(<NUM_LIT>));
return [];
Diagnostic[] = [];
message,
sassError.message,
file) {
d.lines.push(sassError.line);
html: string = `<STR_LIT>`;
line,
errorCharStart = j;
<NUM_LIT>;
errorLine.errorLength > <NUM_LIT>) {
<NUM_LIT>,
d.lines.push(previousLine);
lineIndex + <NUM_LIT>],
lineIndex + <NUM_LIT>],
nextLine.text, true).value;
e: any) {
tsDiagnostic.type,
messageText),
source: '<STR_LIT>',
text;
if (sourceText) {
line: posData.line,
JSON.parse(errorLine.html);
rootDir, errorLine);
errorLine.text,
errorCharStart: errorLine.errorCharStart,
lines.push(previousLine);
lineIndex + <NUM_LIT>],
errorLine.lineIndex + <NUM_LIT>],
if (nextLine.html && nextLine.html.indexOf('<STR_LIT>') === -<NUM_LIT>) {
const
configFile)
content);
ENV_VAR_GENERATE_SOURCE_MAP)) {
promises.push(optimizeJs(context));
logger.finish();
return;
actualFile: any = replacePathVars(context, '<STR_LIT>' + k);
siblingFiles.length) {
sassConfig);
taskInfo, configFile);
context, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', false);
concat(buildOptions());
false);
newContent !== existingHtmlTemplateContent) {
fileCache.save(javascriptFile);
Logger.debug(`<STR_LIT>`);
if (!appNgModule) {
chunk: true,
workerConfig));
finish();
ngModuleFile.content);
extension window !== '<STR_LIT>') {
string = processArgv[i + <NUM_LIT>];
globTasks) {
globResult);
promises).then((): GlobResult[] => {
regExp: RegExp = new RegExp('<STR_LIT>' + pattern + '<STR_LIT>');
replace(match[<NUM_LIT>], '<STR_LIT>');
'<STR_LIT>';
STR_LIT);
_context;
const result: any = process.env[propertyName];
lineNumber = nonTypedBuildError.lineNumber;
if (err) {
replace(CAMEL_CASE_REGEXP, '<STR_LIT>')
input.substring(<NUM_LIT>, input.length - suffix.length);
return [];
reject(err);
null, (err: any): void => {
listen(port);
filePath, fileContent, ScriptTarget.Latest, false);
obj, '<STR_LIT>') as PropertyAssignment);
else {
sourceFile, sourceFile, SyntaxKind.CallExpression, true) as CallExpression[];
languageVersion, setParentNodes);
a.pos);
if (!configFile) {
const
return
fileCache = new Map();
logger.finish();
err;
debug(`<STR_LIT>`);
platform === '<STR_LIT>') {
buildDir, backPath);
splice(i, <NUM_LIT>);
if (includeSeparated) {
includeSeparated ? '<STR_LIT>' : '<STR_LIT>');
max(Math.min(d, cwd), <NUM_LIT>);
distanceFromCwd + '<STR_LIT>';
else {
return '<STR_LIT>';
err: any, stdout: any, stderr: any): void => {
false;
ctx.projectDir, '<STR_LIT>');
any = j['<STR_LIT>'];
ctx.project.dir, '<STR_LIT>');
err) {
ns, pargv, env);
(typeof ailment.type === '<STR_LIT>' || ailment.type === '<STR_LIT>');
c;
typeof key.id === '<STR_LIT>'
`<STR_LIT>`]);
info(`<STR_LIT>`);
'<STR_LIT>';
name === ns.name)),
[fillStringArray];
`<STR_LIT>`;
return {
ERROR_NO_META;
options = {
true });
switch (type) {
message: '<STR_LIT>',
actor.getName();
'<STR_LIT>',
name: '<STR_LIT>',
PreferencesManager.get("<STR_LIT>") + "<STR_LIT>";
entry, '<STR_LIT>');
`<STR_LIT>`);
`<STR_LIT>`;
process.env[envvar]) {
'<STR_LIT>') {
err.code === '<STR_LIT>') {
else {
end();
version
env['<STR_LIT>'] = '<STR_LIT>';
delimiter),
p.on('<STR_LIT>', reject);
});
options.stderrPipe) {
else {
if (Buffer.isBuffer(chunk)) {
reject(err);
if (code === <NUM_LIT>) {
host: Tree): Tree => {
new SchematicsException(`<STR_LIT>`);
const source: any = ts.createSourceFile(module.fileName, sourceText, ts.ScriptTarget.Latest, true);
`<STR_LIT>`);
change instanceof InsertChange) {
if (msg.type) {
use(cors());
gulp.hasTask(name);
proxy));
wwwDir, {
enumerable: true
true
const (typeof pluginObj[methodName] === '<STR_LIT>') {
return Observable.fromEvent(element, event);
error);
else {
const promises: any[] = [];
'<STR_LIT>',
postcss(),
main: true,
dest: outputPath
globals: {
glob.forEach((file: string): void => {
button.classList.contains(className);
number[] = [];
resolve(data);
const new TextInput(app, '<STR_LIT>');
elementRef, renderer, item, form, dom);
return node;
nested++;
LABEL_ATTRIBUTE, label);
ARIA_DISABLED, true);
true);
number = parseInt(indexStr, <NUM_LIT>);
if
true;
'<STR_LIT>' + CLS.swipe)) {
}
ev.defaultPrevented) {
if (var i: number = <NUM_LIT>; i < s._slides.length; i++) {
<NUM_LIT>] === '<STR_LIT>') {
<NUM_LIT>] + s._slidesGrid[i]) / <NUM_LIT>) {
activeIndex) {
slidesPerView - s.paginationStart) / s.slidesPerView) : <NUM_LIT>;
i);
'<STR_LIT>';
CLS
progress: number = Math.abs(translate - s._translate) / translatesDiff;
progress > <NUM_LIT>;
progress = translatesDiff;
emit();
if (typeof speed === '<STR_LIT>') {
slideIndex = slideIndex - s._snapIndex % s._slidesPerGroup;
slideSlide: number = s._activeIndex;
plt);
plt);
false;
translate);
if
ionSlideTransitionEnd(s);
<any>ele.$parent)) {
is === '<STR_LIT>';
ele.style;
unReg();
gesture.slide, '<STR_LIT>');
return src;
let data: any[] = [];
resolve(data);
cellPadding: number = cellSize(lastCell);
return newHeight;
i] === node) {
nodes[i];
node.height;
right = cell.right + data.viewRight;
arguments);
forEach(iterator, context);
call(context, obj[i], i, obj);
}
clientY)
pointersLength) {
INPUT_END | INPUT_CANCEL)) {
identifier] = true;
i: any, len: number = allTouches.length;
identifier] = true;
changedTouches = allTouches.filter(function (touch: any) {
return [];
options = options || {
null;
enable(ev);
}
item as any)());
MOUSE_WINDOW_EVENTS;
targetTouches = [];
arguments);
i: number = <NUM_LIT>;
random() * maxAngle) + <NUM_LIT>;
platformLocationStrategy) || defaultLocationStrategy;
segment.type = type;
navLinks);
type: '<STR_LIT>',
navLink.segmentParts),
year, d1.month, d1.day);
month, data.day);
year - <NUM_LIT>) * <NUM_LIT>;
'<STR_LIT>')).slice(-<NUM_LIT>);
FORMAT_H:
e: any) {
FORMAT_hh || format === FORMAT_h) {
return '<STR_LIT>';
format === FORMAT_h) {
return twoDigit(value);
length > <NUM_LIT>) {
pageY };
mockConfig();
c.platform = platform;
jsdom: any = require('<STR_LIT>');
MockRenderer();
mockPlatform());
const
loadChildren));
form, ngControl);
repeat-- > <NUM_LIT>) {
if cssText: string = '<STR_LIT>';
rules, callback);
require(dynamicImportTest);
doc.body.appendChild(x);
type === '<STR_LIT>') {
false;
const true;
customElements.length) {
return true;
emit = {
domApi.$createElement(SSR_VNODE, ssrVNodeId);
elm.childNodes[j], ssrVNode);
get: [],
any = jsdom.JSDOM.parse(html);
new MockStencilSystem();
i);
typeof func !== '<STR_LIT>') {
test(new Date(obj).toString());
obj !== null;
if (parentModule) {
type,
"<STR_LIT>" });
LocationActionType. browse,
game) {
action);
true;
});
if (canBeBought) {
downloadKey));
key];
else if (colType === Column.Date) {
Column.DATE) {
any = newRecord[key].type;
keys(newFields);
if (Array.isArray(newValue)) {
return toBooleanField(newValue);
if (!table) {
info(`<STR_LIT>`);
getDB()
case Column.Number:
Column.Timestamp:
return "<STR_LIT>";
SPACE);
ids.length) {
}
else {
Date(time).toISOString();
file);
const value: any = getKeyValue(key);
if '<STR_LIT>';
release();
if `<STR_LIT>`;
return `<STR_LIT>`;
'<STR_LIT>',
false;
resolve(runtime.rootUrl, localizedLabel) });
case "<STR_LIT>":
return {
{
default:
urls.homepage });
openUrl({
;
node.type === "<STR_LIT>") {
Electron.MenuAction = {
role) {
buttons: [
id: "<STR_LIT>",
}));
keys(items).length;
ids,
{
return;
try {
seed++) < <NUM_LIT>) {
selectedId: string = null;
name },
actionOption.type],
new IModalButtonSpec({
buttons,
lang) + '<STR_LIT>';
return;
{
JSON.parse(contents);
e.code === "<STR_LIT>") {
else {
if logger: Logger = opts.logger.child({
Logger = opts.logger;
cave: import("<STR_LIT>").ICave = db.caves.findOneById(caveId);
new Error(`<STR_LIT>`);
const.dispatch(actions.statusMessage({
gameId,
game, runtime);
errorMessage: string;
logger.error(`<STR_LIT>`);
String(e);
message: errorMessage },
}
label: ["<STR_LIT>"],
fields("<STR_LIT>")
group("<STR_LIT>", true));
try {
queueGameProgress(watcher, db);
watcher, db);
store.getState();
getGame(gameId);
catch (err: any) {
async (): Promise<void> => {
uninstall(ctx), shortcut.uninstall(ctx)]);
const {
const {
opts;
string[] = [planPath];
path];
opts;
opts = {
val);
'<STR_LIT>';
return hasTaggedPlatform;
return function (target: any, key: string) {
"<STR_LIT>") {
result.push(fn(items[i], i));
return hooks;
property);
EventSourceActiveWheel.eventSource, handler, capture);
capture);
eventSource, handler, capture);
handler, capture);
createEventHandler<SyntheticDragEvent>(EventSourceDrop.eventSource, handler, capture);
capture);
return createEventHandler<SyntheticKeyboardEvent>(EventSourceKeyUp.eventSource, handler, capture);
createEventHandler<SyntheticNativeEvent<Event>>(EventSourceLoadedMetadata.eventSource, handler, capture);
eventSource, handler, capture);
capture);
EventSourcePointerLeave.eventSource, handler, capture);
return createEventHandler<SyntheticNativeEvent<Event>>(EventSourceTimeUpdate.eventSource, handler, capture);
else {
handler);
if ((flags & NativeEventSourceFlags.Passive) !== <NUM_LIT>) {
GestureArenaFlags.PrimaryPointerReleased;
undefined ? null : flags),
if (item.id === id) {
if (item.id === id) {
const[id] = value;
id === id) {
return {
estimate === null) {
time) % tracker.data.length;
offset };
VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
className === undefined ? null : className, null);
null);
className, null);
null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
null);
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
null);
VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
className === undefined ? null : className, null);
null);
null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
null : className, null);
undefined ? null : className, null);
null);
className === undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Text, null, null, null, content);
className, null);
null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
v.offset];
operand, v.y / operand);
y };
vec2(v.x * operand, v.y * operand);
lhs.x - rhs.x, lhs.y - rhs.y);
history === nextPath) {
pathname);
ContextMenu)) !== <NUM_LIT>) {
return;
Read;
task);
_microtasks.push(task);
TaskPending;
let fn.name || fn.toString();
}
return false;
ancestorFlagsNone) !== <NUM_LIT>) {
result.push("<STR_LIT>");
push("<STR_LIT>");
AnchorBlock) !== <NUM_LIT>) {
validChildren !== undefined) {
_parentTagName = child;
`<STR_LIT>` +
<NUM_LIT>) {
_currentNestingState = childTagName;
toLowerCase();
if ((flags & VNodeFlags.ComponentClass) !== <NUM_LIT>) {
<NUM_LIT>) {
vnode._instance;
VNodeFlags.KeepAlive) !== <NUM_LIT>) {
type = ConnectStackFrameType.Connect;
}
ComponentStackFrameType.KeepAlive;
tag,
const
ComponentClass<any> = vnode._tag as ComponentClass<any>;
else
ConnectDescriptor<any> = vnode._tag as ConnectDescriptor<any>;
<NUM_LIT>) {
vnode, context);
if (a === b) {
if ((bParentFlags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
b[i], context, syncFlags);
a as string;
as VNode[]);
as string;
else {
b as string;
textContent = b as string;
context, syncFlags);
{
bParentFlags & VNodeFlags.SvgElement) !== <NUM_LIT>);
syncFlags);
<NUM_LIT>; i < a.length; ++i) {
a.length; ++i) {
i < a.length; ++i) {
syncFlags);
syncFlags);
bParentFlags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
i;
if (next !== null) {
vNodeRemoveChild(parent, a[i], syncFlags);
syncFlags);
parent, b[i], context, syncFlags);
b, context, syncFlags);
container.addEventListener) {
node, container);
<NUM_LIT>;
b[key]);
node, key);
const key: string = keys[i];
<NUM_LIT>) {
props as P | null;
return node._style as CSSStyleProps | null;
return node._key;
VNodeFlags.Text) !== <NUM_LIT>;
null, "<STR_LIT>");
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null : className, null, "<STR_LIT>");
Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, "<STR_LIT>");
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, `<STR_LIT>`, null, className === undefined ? null : className, null, null);
null : className, null, null);
null, className === undefined ? null : className, null, null);
null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, null);
new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, null);
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, null, null, content);
undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>");
undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
context) :
ChildrenArray) !== <NUM_LIT>) {
ChildrenArray) !== <NUM_LIT>) {
if ((flags & VNodeFlags.ChildrenArray) !== <NUM_LIT>) {
BlueprintNode(childrenInstances);
props);
selectData);
undefined && o.prototype.render !== undefined;
return s
oldProps, newProps)) {
if (value !== null) {
result += `<STR_LIT>`;
throw new Error("<STR_LIT>");
node._flags & VNodeFlags.Key) !== <NUM_LIT>);
flags & VNodeFlags.Element) !== <NUM_LIT>;
style(node._style === null ?
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
null, className === undefined ? null : className, null, "<STR_LIT>");
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
className, null, "<STR_LIT>");
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
"<STR_LIT>", null, className === undefined ? null : className, null, "<STR_LIT>");
undefined ? null : className, null, "<STR_LIT>");
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
undefined ? null : className, null);
VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
_container);
n) === true) {
_resetTasks = [];
parent: frameTasksGroup,
task);
_currentFrameStartTime;
requestNextFrame();
}
undefined;
SchedulerFlags.MicrotaskPending;
TaskPending;
split("<STR_LIT>")
handle === eventSource) {
eventSource);
b._tag) {
data, b.data)) {
false) {
VNode = wrapper.vnode;
number = <NUM_LIT>; i < children.length; ++i) {
flags & VNodeFlags.Autofocused) !== <NUM_LIT>);
if ((flags & VNodeFlags.ComponentClass) !== <NUM_LIT>) {
<NUM_LIT>) {
children[i], context), visitor) === true) {
vnode._props);
p1 as LifecycleTesterHooks
{
id,
className, null);
undefined ? null : className, null);
className === undefined ? null : className, null);
null, className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
null);
new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
"<STR_LIT>", null, className === undefined ? null : className, null);
new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
SvgElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
null : className, null);
null : className, null);
null);
VNodeFlags.Element | VNodeFlags.VoidElement, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
VNode(VNodeFlags.Element | VNodeFlags.OptionElement, "<STR_LIT>", null, className === undefined ? null : className, null);
className, null);
VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
return new VNode(VNodeFlags.Element, "<STR_LIT>", null, className === undefined ? null : className, null);
Element, "<STR_LIT>", null, className === undefined ? null : className, null);
undefined ? null : className, null);
null : className, null);
"<STR_LIT>", null, className === undefined ? null : className, null);
value;
node);
return func(node.left);
children: mapOverAST(func, node.children)
"<STR_LIT>": {
func({
"<STR_LIT>": {
case "<STR_LIT>": {
"<STR_LIT>": {
node);
func({
type.kind === '<STR_LIT>';
case "<STR_LIT>":
case "<STR_LIT>":
any = referenceChecked.ast;
import("<STR_LIT>").Operation[] = templateClauses.map(toOperation);
map(toContractParameter);
reference: referenceChecked.reference,
location.start;
"<STR_LIT>" +
errorMessage =
case '<STR_LIT>':
node;
Error("<STR_LIT>");
forEach(compile);
BugError("<STR_LIT>");
"<STR_LIT>": {
condition);
node;
"<STR_LIT>": {
type });
"<STR_LIT>": {
firstType, secondType);
throw new IvyTypeError("<STR_LIT>" +
firstType));
new IvyTypeError("<STR_LIT>" +
instanceof ArrayDecl) {
else {
type.name + '<STR_LIT>' +
join('<STR_LIT>');
str += '<STR_LIT>';
EOL) + EOL;
try {
length);
catch (err: any) {
case '<STR_LIT>': return "<STR_LIT>";
if `<STR_LIT>`;
case '<STR_LIT>':
break;
elmType = new ElmTypeName('<STR_LIT>');
instanceof GraphQLEnumType) {
else {
ElmTypeApp('<STR_LIT>', fields);
type);
textContent = message;
message;
const query: {
<NUM_LIT>];
to;
StepInterface.PROMISE:
return (): void => {
setTimeout(cb, timeout);
return Promise.resolve();
new ChildProcessReporter();
event);
event.timestamp);
pathToScript, options);
setTimeout(cb, timeout);
Promise((resolve: (value: unknown) => void): void => {
parser = new DOMParser();
FileReader();
wnd
false });
k]);
else {
const function () {
timeout = setTimeout(later, wait);
target, initializeMethodName, {
Object
return `<STR_LIT>`;
getRandomString(identifierLength);
return `<STR_LIT>`;
yield take(LOGIN_REQUEST);
user }: ShowLock = yield take(SHOW_LOGIN_SUCCEEDED);
file: argv.file,
e: any) {
ex;
'<STR_LIT>',
if (stat.isDirectory()) {
return
if
return transform(argv);
isNull()) {
return;
new Error(`<STR_LIT>`)));
fileSettings, '<STR_LIT>');
fileSettings);
return;
fileSettings,
from: '<STR_LIT>',
return document.uri.toString();
number = <NUM_LIT>;
lastLeadingSpacesLength = leadingSpacesLength;
lastLeadingSpacesLength = <NUM_LIT>;
for (const line: doc.Line of document.lines) {
document.lines.forEach((line: doc.Line): void => {
length;
softTabCount > softTabCount) {
floor(softTabCount / indentSize);
Smart;
if (!line.prefix) {
text: text,
locals),
all: any = allKeys.filter((key: any): boolean => key !== '<STR_LIT>' && key !== '<STR_LIT>');
const (const key: any of allKeys) {
prop;
locals[name];
};
true,
createContainer()
join(__dirname, '<STR_LIT>'),
trim());
err.toString();
while (true) {
text);
{
Promise.resolve(package)),
...packageFile,
'<STR_LIT>': '<STR_LIT>'
'<STR_LIT>',
seen.indexOf(s) === -<NUM_LIT>) {
end);
forEach((diagnostic: vscode.Diagnostic): void => {
escapeRegExpPattern, "<STR_LIT>");
pathToNodeModules = join(pathToNodeModules, relativePathToNodeModules);
if cliPath;
return paths[i];
isTypeScriptPattern);
return {
const.detectChanges();
keyframes([
style({
style({
offset: <NUM_LIT>,
string = walkLCS(lengths, seqA, seqB, indexA, indexB);
else {
queue, index)];
cuts: number[] = [];
for (let i: number = <NUM_LIT>; i < length; i++) {
else {
cutPrice;
length] = bestFirstCut;
rightMost) {
null, null)));
const
<NUM_LIT>];
constStatusItem.text = '<STR_LIT>';
addr,
data.line, <NUM_LIT>),
data.value,
};
data.expression,
if (process.env['<STR_LIT>']) {
"<STR_LIT>":
"<STR_LIT>":
case "<STR_LIT>":
case "<STR_LIT>":
case "<STR_LIT>":
"<STR_LIT>":
Variable;
case "<STR_LIT>":
Variable;
"<STR_LIT>":
"<STR_LIT>":
server.skProtocolProcessAsShellCmd;
sourcekiteInitialized)
case '<STR_LIT>':
position) {
};
findNonVoidReturnInCurrentScope(returnNode);
ts.SyntaxKind.Constructor) {
returnNode) {
timeout);
mutations) {
observer.disconnect();
document, {
'<STR_LIT>');
}
case '<STR_LIT>':
createInvalidNode(node)] }
invalidNodes.length) {
myInvalidNodes = myInvalidNodes.concat(...invalidCheckNodes);
node.kind === ts.SyntaxKind.FunctionExpression ||
key];
describe("<STR_LIT>", function () {
patch(nfeContainer);
store),
ActionTypes.ADD_QUOTE,
case Actions.TOGGLE_SHOW_QUOTE:
tokens.length > <NUM_LIT>) {
if (token === undefined) {
console.error(e);
indexOf(v) === -<NUM_LIT>);
obj[path]) {
obj.toJSON();
for (let i: number = <NUM_LIT>; i < obj.length; i++) {
if (obj[i] instanceof ArrayBuffer) {
path);
obj) {
obj.hasOwnProperty(key)) {
if (value) {
if (!is_cloned) {
obj = obj.slice();
key] = new_value;
v4().asHex();
push({
unpacked);
unpack_models(value[key], manager);
log) {
element.textContent = text;
'<STR_LIT>',
renderer: any = htmlmanager.getRenderer();
if (!failedId) {
'<STR_LIT>';
return true;
callBack, args);
<NUM_LIT>, index2);
return null;
return {
else {
null) {
}
keyNames.length; i++) {
if (tempInfo != null) {
position = document.positionAt(start);
position));
var token: TokenInfo = lpt.scan();
EOF) {
isEnd(token)) {
endCount === <NUM_LIT>) {
token, TokenTypes.EOF)) {
if (!mimeType) {
any = path.join(projectRoot, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');
fs.removeSync(destination);
Error(`<STR_LIT>`);
return `<STR_LIT>`;
Error(`<STR_LIT>`);
null) {
case '<STR_LIT>':
p.startsWith('<STR_LIT>'));
frameId;
const (frameId) {
}
kee.loginEditor(msg.loginEditor, port);
dataUrl.indexOf("<STR_LIT>") + <NUM_LIT>);
saveData.newLoginUUID, msg.saveData.urlMergeMode, msg.saveData.db);
item: PersistentDataItem): boolean => item.itemType == "<STR_LIT>");
host);
KeeNetworkAuth();
isError = true;
document.body).scrollTop = <NUM_LIT>;
preventDefault();
e.preventDefault();
preventDefault();
e.preventDefault();
inputBox.disabled = enabled;
"<STR_LIT>";
searchTerm;
specificSite = searchTerm;
"<STR_LIT>";
if result: any = searchResults[resultIndex];
ifButton.disabled = false;
else {
const
statusBarEntry.text = error;
if (idx === <NUM_LIT>) {
`<STR_LIT>`;
return;
showInformationMessage('<STR_LIT>');
if (!wordRange) {
region.end.line - <NUM_LIT>, issue.region.end.column - <NUM_LIT>);
}
editor.selections.forEach((selection: any): void => {
dispose();
matches: RegExpExecArray | null = stdout.match(processRegex);
n;
forEach((key: string): void => {
F_OK);
const (args.length === <NUM_LIT>) {
__
<NUM_LIT>];
headings.push({
promise: Q.Promise<RepoEntity[]>;
while (true) {
showUINotificationInfo(uiNotificationInfo);
Range = document.createRange();
subscription !== null) {
null) {
}
c);
Finished;
microtasks = [];
}
SchedulerFlags.Enabled;
}
VNodeDebugFlags.Attached)) !== <NUM_LIT>) {
VNodeDebugFlags.Disposed;
vnode._debugFlags & VNodeDebugFlags.Attached) !== <NUM_LIT>) {
vnode._instance === null) {
insertBefore(newNode, refNode);
parent.flags & VNodeFlags.KeepAlive) !== <NUM_LIT>) {
ref!);
return Math.floor(Math.random() * (max - min + <NUM_LIT>)) + min;
bx);
children(bx).disableChildrenShapeError();
const bDiv: HTMLDivElement = document.createElement("<STR_LIT>");
state;
cancel();
from(tokenAddr);
config.swagger) {
host = args.host;
args.basePath);
return; };
return; };
return {
case '<STR_LIT>':
for (let validator: Validator of validators) {
errorMsg;
message = validators.isDouble.errorMsg;
number = parseFloat(value);
validators.minimum.value) {
validators.maximum.value) {
if (!tags) {
path !== '<STR_LIT>') {
normalised;
match(/\'/g) || []).length;
convertReactFunctionToArrowFunction(statelessFunc.declarationList);
propAssignment: ts.ExpressionStatement = propTypeAssignment as ts.ExpressionStatement;
newSourceFile = funcComponent;
'<STR_LIT>',
'<STR_LIT>',
'<STR_LIT>': '<STR_LIT>'
'<STR_LIT>': '<STR_LIT>'
'<STR_LIT>',
update(data).digest('<STR_LIT>');
resolve(obj);
undefined);
o !== undefined;
return +new Date();
day: date.getDate(),
day: startOfDay(period, date),
return {
string;
SaveType.OLD:
join(dirname, savePath));
resources;
activeId);
}
name.replace(/\//g, '<STR_LIT>');
const instance: any = new identifier();
<NUM_LIT>, <NUM_LIT>], [<NUM_LIT>, <NUM_LIT>], <NUM_LIT>],
Si: '<STR_LIT>',
Re: '<STR_LIT>',
{
declarations: [Infragistics.IgRadialGaugeComponent, TestComponent]
it('<STR_LIT>', (done: any): void => {
nativeElement;
StatelessComponent]
State,
then((): void => {
test(d.src))
listen();
error += '<STR_LIT>';
let high: number = array.length - <NUM_LIT>;
value, midValue)) {
let (let i: number = <NUM_LIT>; i < lineStarts.length; i++) {
get
return String.fromCharCode(code);
return (error as any)[ERROR_TOKEN];
MINUS) {
chars.$RPAREN:
default:
delimiters) > <NUM_LIT>;
case chars.$COMMA:
return COLON_DELIM_FLAG;
case chars.$LBRACE:
chars.$TAB:
chars.$TILDA:
return expr && expr.kind === kinds.ArrayLiteralExpression;
expr.kind === kinds.CallExpression;
fullPath, ruleName);
error)(...values);
error as any)[ERROR_DEBUG_CONTEXT];
return type.__forward_ref__;
ERROR.localize('<STR_LIT>', "<STR_LIT>", provider1, provider2));
push("<STR_LIT>");
'<STR_LIT>' +
keys[<NUM_LIT>].token);
throw new Error(`<STR_LIT>`);
length; j++) {
else {
provider.useClass);
else {
provider.multi || false);
Object.create(clsDef.extends);
else {
'<STR_LIT>') {
if (!t) {
src)).map((dep: import("<STR_LIT>").InjectableDependency): string => dep.src)
DEPENDENCIES[name] || [];
name: '<STR_LIT>',
Config.CSS_PROD_SHIMS_BUNDLE), join(Config.CSS_DEST, Config.CSS_PROD_APP_BUNDLE));
const server: any = express();
Config.PROXY_FILES) {
x, <NUM_LIT>);
bold(message));
use(Config.APP_BASE, express.static(resolve(process.cwd(), Config.SPA_DEST)));
if (currentchapterAbr) {
join(appRoot, file), '<STR_LIT>')
{
case Models.Side.Bid:
pxStr);
split.length < <NUM_LIT>) {
floor(x / minTick) * minTick;
getConfiguration("<STR_LIT>");
project) {
"<STR_LIT>": "<STR_LIT>",
commands.registerCommand("<STR_LIT>", action);
openNoteInBrowser);
push(syncNoteCmd);
searchNoteInBrowserCmd);
const
return;
forEach((resource: any): void => {
sync();
current: any = editor.document;
placeHolder: "<STR_LIT>",
return;
any = crypto.createHash("<STR_LIT>")
mime,
mime,
guid] = cache;
await
new Error('<STR_LIT>');
const (!noteLists.length) {
map((notebook: any): any => notebook.title);
selectedNote);
guid;
else {
chooseNote();
event.id] = localNote[event.id].filter(function (note) {
"<STR_LIT>";
"<STR_LIT>";
x, x),
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
let result: number;
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
<NUM_LIT>; ++i) {
trueValue;
while
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
<NUM_LIT>) {
result += i;
let j: number = <NUM_LIT>;
defineProperties(derivedCtor.prototype, {
NumberToken ||
SyntaxKind.QuestionToken ||
return "<STR_LIT>";
"<STR_LIT>";
type.flags & ts.TypeFlags.StringLike) {
const unionType: ts.UnionType = type as ts.UnionType;
parameter.type) {
values.push(argumentValue);
typeParameters: typeParameters,
classType,
const constructSignature: ts.ConstructSignature = <ts.ConstructSignature>declaration;
if parts: string[] = input.split("<STR_LIT>");
true;
(declaration.kind === ts.SyntaxKind.FunctionDeclaration
CodeGenerationDiagnostics.anonymousFunctionNotSupported(fun);
return (context: ts.TransformationContext): ts.Transformer<ts.SourceFile> => {
return useCaseSensitiveFileNames
<NUM_LIT>, <NUM_LIT>]];
boolean = true;
<NUM_LIT>];
"<STR_LIT>";
<NUM_LIT>;
number = <NUM_LIT>;
number = <NUM_LIT>;
number = <NUM_LIT>;
<NUM_LIT>;
"<STR_LIT>";
intValue: number = <NUM_LIT>;
"<STR_LIT>";
<NUM_LIT>) {
"<STR_LIT>";
"<STR_LIT>";
"<STR_LIT>";
Test();
for (let i: number = <NUM_LIT>; i < <NUM_LIT>; ++i) {
"<STR_LIT>";
return false;
a < b) {
new Promise<ImplicitReturnTest | undefined>((resolve: (value:ImplicitReturnTest | PromiseLike<ImplicitReturnTest>) => void, reject: (reason?: any) => void): void => {
let x: int;
"<STR_LIT>";
result = -<NUM_LIT>;
<NUM_LIT>;
"<STR_LIT>";
intValue: number = <NUM_LIT>;
"<STR_LIT>";
forCost: number = <NUM_LIT>;
Point.constNull(), <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
Point(<NUM_LIT>, <NUM_LIT>),
new Point(<NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
NUM_LIT>, <NUM_LIT>),
<NUM_LIT>),
<NUM_LIT>),
"<STR_LIT>";
while (i < <NUM_LIT>) {
keys(attributes).forEach((key: string): void => {
d: string = `<STR_LIT>`;
return arr[index];
if (!matches) {
`<STR_LIT>`;
`<STR_LIT>`;
if (typeof input === '<STR_LIT>') {
element, attributes);
newElement<SVGGElement>("<STR_LIT>", {
newElement<SVGRectElement>("<STR_LIT>", {
VNodeFlags.Element | VNodeFlags.SvgElement, "<STR_LIT>", null, className, attributes, css);
const document.createElement('<STR_LIT>');
const ul: HTMLUListElement = document.createElement("<STR_LIT>");
output.push({
title: entry.title,
url: "<STR_LIT>",
description: "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
output.push({
<NUM_LIT>] : harData);
"<STR_LIT>",
text: "<STR_LIT>",
y,
string = combineTitles(entry.title, indicators[<NUM_LIT>].title);
i.type !== "<STR_LIT>");
}
push(pluralize("<STR_LIT>", warnings.length) + "<STR_LIT>" + warnings.map((e: import("<STR_LIT>").WaterfallEntryIndicator): string => e.title).join("<STR_LIT>"));
icon = "<STR_LIT>";
height,
const rectY: string = misc.roundNumber(rectData.y / rectData.unit) + "<STR_LIT>";
rectHeight,
x: rectX,
const.appendChild(svg.newText(rectData.label, {
foreignElLazy = svg.newG("<STR_LIT>");
svg.removeClass(foreignElLazy, "<STR_LIT>");
targetRect, hoverEl.className);
"<STR_LIT>";
endline.x3.baseVal.valueAsString = xPosStart;
};
SVGRectElement = evt.target as SVGRectElement;
SVGGElement = svg.newG("<STR_LIT>");
secValue);
const holder;
goBack(args[<NUM_LIT>]);
getActiveBotId();
else {
add(Severity.DEBUG, message, ...args);
message, ...args);
any[] = [];
}
conversationID].push(activity);
resp: AccessKeyPatchResponse): void => {
if (willUpdateTtl) {
}
command.appName, command.targetAppName)
`<STR_LIT>`;
else {
isFile();
false;
'<STR_LIT>') {
Error(`<STR_LIT>`);
pPath: any = path.resolve(projectName, resolvedPlistFile);
any
err: any) {
isValidVersion(parsedPlist.version)) {
version) {
resolvedPlistFile) {
Q(buildGradlePath);
"<STR_LIT>") {
versionName === "<STR_LIT>") {
{
chalk.red(`<STR_LIT>`));
buildGradlePath, propertyName),
propertiesFile + "<STR_LIT>");
throw new Error(`<STR_LIT>`);
buildGradlePath: string = path.join("<STR_LIT>", "<STR_LIT>");
appxManifest: any = fs.readFileSync(appxManifestFileName, {
then((isAuthenticated: boolean): void => {
else {
output: string = "<STR_LIT>";
push("<STR_LIT>");
forEach((deployment: Deployment): void => {
row.push("<STR_LIT>");
name: command.name,
then((): void => {
getAccountInfo()
throw new Error("<STR_LIT>");
demand( <NUM_LIT>, <NUM_LIT>)
USAGE_PREFIX + "<STR_LIT>" + commandName + "<STR_LIT>")
'<STR_LIT>') : content;
floor(new Date().getTime() + Math.random() * <NUM_LIT>)).toString();
eventData
createEvent('<STR_LIT>');
number = findIndex(predicate, xs);
"<STR_LIT>",
return drives.filter((drive: string): boolean => pxt.debug(`<STR_LIT>`));
return false;
path.join(__dirname, "<STR_LIT>"));
postArguments == "<STR_LIT>") {
{
dat == null)
then((resp: any): void => {
flags["<STR_LIT>"]) {
cfg.version,
"<STR_LIT>": cfg.version,
"<STR_LIT>": "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>": "<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
{
"<STR_LIT>": "<STR_LIT>",
p)
resolve()
root, "<STR_LIT>");
process.platform === "<STR_LIT>") {
null;
if.log(msg);
<NUM_LIT>];
start, brkMatch.startIndex + <NUM_LIT>).join("<STR_LIT>"));
if (!~__dirname.indexOf('<STR_LIT>')) {
if (tsFiles.length === <NUM_LIT>) {
args: string[] = parsed.args;
testMode) {
findFiles()
if (testMode) {
null) {
err: any): void => {
f);
console.log("<STR_LIT>");
let (type) {
index++;
return null;
args));
uf2buf.toString("<STR_LIT>"));
return path.join(homePxtDir, "<STR_LIT>");
msg);
return Promise.resolve();
msg);
return usage("<STR_LIT>");
error("<STR_LIT>");
resolve();
tr = require("<STR_LIT>");
log(`<STR_LIT>`);
CompileType.Native) {
letxt.log(`<STR_LIT>`);
log("<STR_LIT>");
<NUM_LIT>] || args[<NUM_LIT>] == "<STR_LIT>") {
else {
password, "<STR_LIT>");
data)
const (pxt.appTarget.id != "<STR_LIT>")
chrome.storage.sync.set(configKey, JSON.stringify(config));
Promise.resolve();
log(res.errorMessage);
console.log("<STR_LIT>");
buildDir: string = parsed.flags["<STR_LIT>"];
gh) {
image = "<STR_LIT>";
license)) {
exec(readme);
dependencies)) {
`<STR_LIT>`;
label,
str + char;
browserPath = "<STR_LIT>";
"<STR_LIT>":
case "<STR_LIT>":
"<STR_LIT>";
browserPath = "<STR_LIT>";
fn, '<STR_LIT>'));
args);
true;
t0 + "<STR_LIT>" + t1;
find(t.union);
if (!v)
par.isClass)
undefined;
name: n,
}
if (nn.params) {
v as py.Name).id == "<STR_LIT>";
if (v)
while (s);
n.length === <NUM_LIT>)
return;
appTarget.serial.log.enabled) {
serial: any = pxt.appTarget.serial;
e: any) {
error(er);
port);
onOpen: open,
info);
port: android.net.SerialPort): boolean {
productFilter == parseInt(info.productId, <NUM_LIT>));
string = name;
return;
resolve();
string = m[<NUM_LIT>];
type: "<STR_LIT>" };
parts };
false, msg);
lf("<STR_LIT>"));
<NUM_LIT>);
if (!AudioContext) {
if (e.rev)
e: HeaderWithScript): boolean => e.id === id)[<NUM_LIT>];
resp);
`<STR_LIT>`;
lf("<STR_LIT>"),
pxt.tickEvent(`<STR_LIT>`);
assemble Promise<{
err: any = new Error(v.message);
else {
getApisInfoAsync();
resolve(cachedBlocks)
true)
return new Promise((resolve: (value: unknown) => void, reject: (reason?: any) => void): void => {
options);
actions;
resp
e.text = resp.text;
flatClone(e.text);
map((h: Header): pxt.workspace.Header => h.header);
if (!e)
targetStyles = [];
find((e: HeaderWithScript): boolean => e.id === id);
function (pkg) {
Serial.connected) {
options.light) {
off();
if = (p as any)._editorPkg = {
return newOne;
return {
pxt.appTarget.simulator.invalidatedClass;
action: "<STR_LIT>",
editor = editor;
translations;
return;
if (isShown) {
brk.hasClass("<STR_LIT>")) {
name));
SimulatorState.Running) {
state == pxsim.SimulatorState.Running) {
hd);
break;
sv = JSON.stringify(v);
type === "<STR_LIT>")
break
frameView;
vars(hd, frameView));
frames.forEach((frame: any): void => {
return Promise.resolve(undefined);
origCallback.call(this, this.onFocusSink);
t("<STR_LIT>"));
function (this: FocusableComponentInternal, origCallback: Function) {
origCallback.call(this);
origCallback.call(this);
if
origCallback !== undefined) {
function () {
longest: number = <NUM_LIT>;
property || longestDurationProperty;
undefined ? <NUM_LIT> : transition.delay;
delay;
done
longestDurationProperty, onTransitionEnd);
function () {
timeoutId);
element.dataset['<STR_LIT>'];
(): void => {
value;
existingMethod;
getText());
spyRefCount === <NUM_LIT>) {
set
originalThen;
getState<IState>().ui.currentAction;
prototype && target.prototype.render;
strDeps + '<STR_LIT>' + factory + '<STR_LIT>';
string = value.charAt(i);
break;
case '<STR_LIT>':
'<STR_LIT>':
result.push('<STR_LIT>');
ch);
any = file.contents.toString('<STR_LIT>');
file, json, this);
file.isBuffer()) {
SUCCESS, file.path);
lower,
<NUM_LIT>;
if (lines.length > <NUM_LIT>) {
redraw();
socket.connect();
return node && node.kind === ts.SyntaxKind.StringLiteral;
match) {
log(util.colors.green('<STR_LIT>'), message, ...rest);
c()));
err);
log(`<STR_LIT>`);
log('<STR_LIT>');
'<STR_LIT>');
app.getPath("<STR_LIT>"), "<STR_LIT>");
position));
err,
as string, onLookup));
err;
versionPath: any = config.get<string>('<STR_LIT>');
if (choice === '<STR_LIT>') {
return true;
Operation.List:
uri.path,
disposables));
e)) {
didRun) {
numberHash(b ? <NUM_LIT> : <NUM_LIT>, initialHashVal);
if (!contributes) {
return
VERSIONNUM_LIT>);
args);
args);
BuildTaskUpload(args);
if (obj.hasOwnProperty(prop)) {
partName;
args);
return new Reset(args);
exists: boolean): Promise<TfCommand<any, any>> => {
exists) {
commandModulePath, "<STR_LIT>");
if (exists) {
throw new Error(commandModulePath + "<STR_LIT>");
promise
LogView.add(Severity.error, msg, colors.red, replacements);
colors.success, replacements);
if (color) {
join(__dirname, '<STR_LIT>'));
functionName);
return `<STR_LIT>`;
return `<STR_LIT>`;
`<STR_LIT>`;
case '<STR_LIT>':
return `<STR_LIT>`;
return '<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
typeAttribute) {
return '<STR_LIT>';
return '<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>';
'<STR_LIT>';
code, ts.ScriptTarget.Latest, true);
Error('<STR_LIT>');
ts.SyntaxKind.JsxAttribute;
SyntaxKind.JsxSelfClosingElement;
return;
boardid: boardid,
boardid
image);
new Sphere(new Vector(<NUM_LIT>, <NUM_LIT>, -<NUM_LIT>), <NUM_LIT>, Surfaces.shiny),
new Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) },
constGreeting = newGreeting.trim();
while (visiblelen--)
ts.SyntaxKind.SourceFile;
await detectChanges( fetcher, options);
string[] = await allTypedNpmPackages();
await writeDataFile("<STR_LIT>", allTyped.join("<STR_LIT>"));
in obj) {
sort((a: any, b: any): number => {
push("<STR_LIT>");
link));
URL_SEPARATOR) + <NUM_LIT>);
filename);
const usedFilesSet: Set<string> = new Set<string>();
return hashFile(directory, fileContents, tsconfigPaths);
():);
startsWith(subDirectory)) {
`<STR_LIT>`);
SyntaxKind.ImportEqualsEqualsEqualsDeclaration:
true;
string = dirname(full);
anyPackage[] = await changedPackagesInternal(allPackages);
isPrerelease);
if (semver) {
alpha[<NUM_LIT>]);
else {
log.warn("<STR_LIT>");
return false;
data);
await (dry) {
optionsLogResult());
packagesFiles: unknown[] = await filterNAtATime(<NUM_LIT>, await readdir(options.typesPath), async (packageName: unknown): Promise<any> => (await stat(path.join(options.typesPath, packageName))).isDirectory());
packageNames.forEach((packageName: string): void => {
output: devNull,
if (const name: string of Object.keys(data)) {
author: "<STR_LIT>",
npmPath, ["<STR_LIT>", "<STR_LIT>"]));
parts;
subDirName !== subDirName) {
if (majorVersion) {
if (!versions) {
dep.majorVersion);
await ensureDir(cwd);
`<STR_LIT>`;
"<STR_LIT>"
run(allPackages, consoleLogger.info, allPackages.allTypings(), changedPackages, dependentPackages);
return {
new Promise<string>((resolve: (value: string | PromiseLike<string>) => void, reject: (reason?: any) => void): void => {
setEncoding('<STR_LIT>');
body += String.fromCharCode.apply(null, data);
path, content, formatted);
errors]) : infos;
await ensureDir(logDir);
buffer: any = new Buffer(<NUM_LIT>);
resolve: (value: void | PromiseLike<void>) => void, reject: (reason?: any) => void): void => {
process.hrtime()[<NUM_LIT>];
i < length; i++) {
comparer);
log.info(`<STR_LIT>`);
return true;
green(`<STR_LIT>`));
ensureDir(packageDirectory);
true;
e.stack);
process.env['<STR_LIT>'] || '<STR_LIT>';
"<STR_LIT>"));
directoryExistsSync(pathString)) {
catch (e: any) {
number.toString(<NUM_LIT>), width);
any;
fs.openSync(src, '<STR_LIT>', <NUM_LIT>);
filter((file: any): any => {
if (!directoryExistsSync(dirname)) {
else {
for (const line: any of lines) {
trim();
set(key, value);
return
keys(element).length === <NUM_LIT>);
const (error) {
stack: true });
undefined) {
return {
type:FAILED,
EXAMPLES_SUCCESS,
librariesSuccess(libraries));
if (callback) {
type: INSTALLED_BOARDS_FAILURE,
return {
type: INSTALLED_BOARDS_SUCCESS,
return {
state,
selectedBoard: action.payload.boardName,
board: any): boolean => board.id === action.selectedBoard);
[selectedBoard],
"<STR_LIT>",
CONFIGITEMS_SUCCESS:
action.configitems,
return {
true,
BOARD_PACKAGES_SUCCESS:
platforms.forEach((platform: any): void => {
INSTALL_BOARD_SUCCESS:
return {
boardName,
uninstallingBoardName: "<STR_LIT>",
actions.UNINSTALL_BOARD_FAILURE:
'<STR_LIT>',
let key: string in messages) {
new File({
then((): void => {
innoSetupConfig);
function () {
let
'<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';
else {
END_OF_SOURCE);
if (!source) {
root) {
emit('<STR_LIT>', new Error(`<STR_LIT>`));
gulpUtil.colors.green('<STR_LIT>'), prefix + message);
write('<STR_LIT>', {
include
push(err);
errors.length > <NUM_LIT>;
errors.length = <NUM_LIT>;
onEnd();
redraw();
socket.connect();
toGlob(name)];
includeGlobs)));
split(path.sep);
end);
'<STR_LIT>');
sourceFile;
SRC, moduleId);
cp.execSync(`<STR_LIT>`);
Promise((resolve: (value: unknown) => void, reject: (reason?: any) => void): void => {
dir({
console.log('<STR_LIT>', '<STR_LIT>');
}
tl.loc('<STR_LIT>'));
push(vscode.commands.registerCommand('<STR_LIT>', (): any => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', false])));
root: project.folder.uri.fsPath });
commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>']);
stdout.on("<STR_LIT>", (data: any): void => {
deferred.resolve(exitCode);
deferred.resolve(null);
`<STR_LIT>`;
if
return telemetry.finish();
realActivationOccurred = true;
languageId === "<STR_LIT>") {
onActivationEvent();
}
}
vscode.commands.registerCommand('<STR_LIT>', onShowReleaseNotes));
key === '<STR_LIT>') {
endPatterns: string[] = [];
vscode.OnEnterRule[] = [];
beginPatterns.push(r.begin);
begin);
true;
end);
insert.trimLeft().length === <NUM_LIT>) {
return {
RegExp(beforePattern),
trimRight());
info.platform + '<STR_LIT>');
setInstallationStage('<STR_LIT>');
"<STR_LIT>",
"<STR_LIT>",
"<STR_LIT>",
return touchFile(getInstallLockPath());
dir).isDirectory();
dir);
return;
if (disabledFolders.length) {
Window.showWarningMessage('<STR_LIT>');
Window (disabledFolders.length > <NUM_LIT>) {
get('<STR_LIT>', true);
return true;
null;
null;
as ESLintError;
string(error)) {
tracer.log(message, verbose);
return null;
tooltip: string;
any = workspace.workspaceFolders.find((folder: any): boolean => folder.uri.scheme === '<STR_LIT>');
`<STR_LIT>`;
'<STR_LIT>'], {
Latest, true);
SyntaxKind.TemplateExpression) {
kind !== ts.SyntaxKind.Identifier) {
result: any = new vscode.CompletionItemProvider();
Commands + '<STR_LIT>', (): void => {
moduleName: any): any => vscode.commands.executeCommand('<STR_LIT>', vscode.Uri.parse(`<STR_LIT>`)));
Position(line, char), editor.selection.end);
char + '<STR_LIT>', motion, modifierKeys);
'<STR_LIT>' : '<STR_LIT>';
edit.replace(vscode.window.activeTextEditor.document.uri, "<STR_LIT>", "<STR_LIT>");
offset + length;
length: number): void {
positionAt(offset);
vscode.CompletionItemKind.Value;
if (request) {
pendingValidationRequests[textDocument.uri] = setTimeout((): void => {
end.isEqual(nodeToBalance.end)) {
close) {
end)) {
min(emptyAttrIndex, emptyTagIndex);
if (winner === -<NUM_LIT>) {
output.length > <NUM_LIT>) {
(str: string, minus: any, prefix: any): string => minus + '<STR_LIT>'.repeat(<NUM_LIT>));
resolve)
filePath).then((fileContent: string): string => {
else {
if (!startNodeToUpdate) {
any = getText(document, rangeToReplace);
start).translate(<NUM_LIT>, <NUM_LIT>);
return;
return;
currentNode.open) {
singlePropertyValue) {
if (!completionPromise) {
return;
any = completionList.items[<NUM_LIT>];
writeFile(tmpFile, contents, (err: any): void => {
return true;
return url;
style: CSSStyleDeclaration = editor.document.createElement('<STR_LIT>');
width, <NUM_LIT>, width - separator.length), editor.document));
if (width) {
if (!heightProp) {
isBefore(position)
children
buffer);
if
syntax].hasOwnProperty('<STR_LIT>')) {
<NUM_LIT>],
path.join(__dirname, '<STR_LIT>'));
includeLanguagesConfig);
getStart(true))) {
else {
true);
err);
document, position, token) {
else if (/Repository not found/.test(stderr)) {
BadConfigFile;
return GitErrorCodes.CannotCreatePipe;
else {
return GitErrorCodes.NoRemoteRef;
Operation.Hide:
List:
modifiedStartLineNumber,
<NUM_LIT>) {
Range = new Range(last.start, last.end);
return [merge, ...rest];
<NUM_LIT>);
args]);
didRun) {
}
file, (value: any): void => {
if (match) {
'<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
b.range.end);
let endOffset: any = document.offsetAt(e.range.end);
return content[offset] === '<STR_LIT>' && content.charCodeAt(offset + <NUM_LIT>) === <NUM_LIT>;
NL;
<NUM_LIT>) {
dispose();
if (name.indexOf(buildName) !== -<NUM_LIT>) {
url = schema.schema.url;
path.join(rootPath, url))).toString();
numberHash(b ? <NUM_LIT> : <NUM_LIT>, initialHashVal);
numberHash(<NUM_LIT>), hashVal);
obj, hashVal);
obj, hashVal);
case '<STR_LIT>':
reduce((hashVal: number, key: string): number => {
jsonDocument, documentSettings).then((diagnostics: Diagnostics): void => {
return typeof value === '<STR_LIT>';
extension.exports.MarkdownIt) {
return {
context);
'<STR_LIT>');
packageManager) && vscode.workspace.getConfiguration(packageManager)['<STR_LIT>']) {
return `<STR_LIT>`;
if (rootUri.scheme === '<STR_LIT>') {
script,
script.startsWith('<STR_LIT>') || script.startsWith('<STR_LIT>'));
logDirectoryProvider);
typeof value !== '<STR_LIT>';
true,
experimentalDecorators = config.experimentalDecorators;
<NUM_LIT>;
writeFile(tmpFile, contents, (err: any): void => {
console.log.apply(console, ["<STR_LIT>", ...args]);
'<STR_LIT>' ? arg + '<STR_LIT>' : arg;
localize(<NUM_LIT>, null));
stderrAllPkgsIfPkgNotFound) {
return vscode.window.showErrorMessage('<STR_LIT>');
filesName: any = matches[<NUM_LIT>];
result: ICheckResult[] = [];
if (!goRuntimePath) {
Promise.resolve([]);
if {
if (runningToolsPromises.length > <NUM_LIT>) {
}
false,
hide();
'<STR_LIT>';
fileUri, goConfig, true));
if (runningToolsPromises.length > <NUM_LIT>) {
return [];
if (coverProfilePath) {
createReadStream(coverProfilePath),
on('<STR_LIT>', (line: any): void => {
if (fileRange) {
<NUM_LIT>], <NUM_LIT>),
fileRange[<NUM_LIT>]) - <NUM_LIT>);
<NUM_LIT>]] = coverage;
if (showErrOutput) {
indexOf('<STR_LIT>')) {
if (found) {
reject('<STR_LIT>');
if (includeDocs) {
resolve: (value: GoDefinitionInformation | PromiseLike<GoDefinitionInformation>) => void, reject: (reason?: any) => void): void => {
missingToolMsg + '<STR_LIT>');
lines);
if (!match) {
any = path.dirname(path.dirname(file));
{
code === '<STR_LIT>') {
searchSignature) {
string = path.join(toolsPath, tool);
correctBinNameGo === '<STR_LIT>') {
runtimePathFromGo;
let runtimePathFromGoRoot: any = path.join(envPath, '<STR_LIT>');
let
statusBarEntry.command = command;
testEnvFile) {
string[] = [];
telemtryReporter.dispose();
activeTextEditor.document.uri).uri;
currentWorkspace: vscode.WorkspaceFolder | undefined = vscode.workspace.getWorkspaceFolder(currentFilePath);
replace(<NUM_LIT>, currentRoot.length - <NUM_LIT>) : '<STR_LIT>';
currentRoot;
match(/^\s*#include\(([^)]+)\)/);
start: i, end: -<NUM_LIT> });
target[key] = {
return toString.call(value) === '<STR_LIT>';
child: string = `<STR_LIT>`;
cwd;
err: any) {
toString.call(value) === '<STR_LIT>';
return toString.call(value) === '<STR_LIT>';
if (!path) {
return typeof value !== '<STR_LIT>';
toString.call(value) === '<STR_LIT>';
return value && func(value.then);
"<STR_LIT>";
password) {
<NUM_LIT>;
false;
text = (<IConnectionProfile>creds).profileName;
else {
text, `<STR_LIT>`);
user);
length === <NUM_LIT>) {
index] : match;
str || '<STR_LIT>' === str);
server &&
profileName === currentProfile.profileName;
showErrorMessage(msg);
is object['<STR_LIT>'] === '<STR_LIT>';
INSTANCE.onDidChangeZoomLevel(callback);
WindowManager.INSTANCE.setAccessibilitySupport(accessibilitySupport);
return !!element[MS_DATA_KEY];
minimumTimeMs);
innerWidth * cssPx;
preventDefault();
node;
document.createElement('<STR_LIT>');
getMarginTop(element) + sizeUtils.getMarginBottom(element);
true;
parentFocusable.focus();
i: number = <NUM_LIT>; node && node.nodeType === node.ELEMENT_NODE; i++) {
event.cancel();
result.push(other[j++]);
one[i++]);
j++;
range.start) {
if (intersection) {
intersection,
target.splice(insertIndex, <NUM_LIT>, insertArr);
array.filter((element: T, index: number): boolean => {
currentGroup = result;
compare);
array.splice(from, <NUM_LIT>)[<NUM_LIT>]);
const (compare(element, result[i])) {
key];
push(element);
from, key)) {
elementAMatch: number = elementAName.localeCompare(lookFor);
elementBSuffixMatch) {
<NUM_LIT>) {
other.toLowerCase();
function (this: any, ...args: any[]) {
`<STR_LIT>`;
let (let i: number = <NUM_LIT>; i < position.length; i++) {
}
if (!word) {
row.push(i);
push(thisRow);
code === CharCode.Tab
tail.length === <NUM_LIT>) {
head);
c === <NUM_LIT>) {
number = <NUM_LIT>;
const
result) {
return patterns;
path: string = basename;
i);
data,
false;
newText, begin, end, formattingOptions);
newText, edit);
length;
if (ch === '<STR_LIT>') {
tabSize;
break;
ch === CharacterCodes.formFeed ||
if (modifiers === null) {
ctrlKey);
result.push(labels.metaKey);
UNAppLabelRegEx, "<STR_LIT>");
'<STR_LIT>';
result: V[] = [];
lines: string[] = fs.readFileSync(path, '<STR_LIT>');
if (!configuredMime) {
if (registeredMime) {
return [MIME_UNKNOWN];
i: number = <NUM_LIT>; i < array.length; i++) {
hash === null) {
function (word: string) {
path);
lastIndex = <NUM_LIT>;
name === '<STR_LIT>') {
platform === "<STR_LIT>");
candidate.fsPath, ignoreCase);
{
<NUM_LIT> * t;
length < candidateLength) {
searchString.replace(/[\-\\\{
charAt(<NUM_LIT>))) {
}
if (options.ignoreCase) {
i);
return;
if (diff > <NUM_LIT>) {
codeB).toLowerCase()) {
else {
queryLen) {
code >= $a && code <= $z || code >= $A && code <= $Z;
str);
chCode !== CharCode.Tab) {
'<STR_LIT>');
str
getAnsiEscapeRegex(), '<STR_LIT>');
value).every((elem: any): boolean => isString(elem));
_encode;
if (authority) {
path) {
parts.push(authority);
idx !== -<NUM_LIT>) {
idx !== -<NUM_LIT>) {
path) {
substr(m[<NUM_LIT>].length);
else {
number = path.length - <NUM_LIT>;
break;
<NUM_LIT>;
{
else {
new SimpleWorkerServer(postMessage);
return '<STR_LIT>' + color.toUpperCase();
`<STR_LIT>`;
...args];
...
encodeStream(toNodeEncoding(encoding), options);
toLowerCase();
if (error) {
isDirectory()) {
error), callback);
'<STR_LIT>');
return null;
if (name === '<STR_LIT>') {
prefix + name;
error || stat.isDirectory()) {
else {
return nfcall(fs.stat, path);
platform.isLinux) {
return nfcall(fs.unlink, path);
let port: number = Math.floor(Math.random() * PORTS.length);
process.platform === '<STR_LIT>') {
const reader: FileReader = new FileReader();
const targetPathRegex: RegExp = new RegExp(targetPath ? `<STR_LIT>` : '<STR_LIT>');
zipfile.once('<STR_LIT>', (): void => {
entry.fileName)) {
options && last.then(c, e)) {
`<STR_LIT>`;
serverName: '<STR_LIT>',
if
name();
resourceA && resourceB) {
start;
<NUM_LIT>].start;
if
if
CharCode.Arrow:
Backslash:
return <NUM_LIT>;
scorer.score(target, query, fuzzy);
while {
new TPromise<void>((c: import("<STR_LIT>").TValueCallback<void>, e: (err: any) => void): void => {
for (const c: WorkspaceStatItem of configs) {
name = `<STR_LIT>`;
`<STR_LIT>`;
indent + `<STR_LIT>`);
return TPromise.as(null);
requestService.post('<STR_LIT>', {
"<STR_LIT>",
MenuItem({
arg);
}
path.normalize(pathCandidate);
parsedPath) {
previous = folder;
extensionDevelopmentPath)) {
return true;
FileReader = new FileReader();
get(IEditorService);
EditorContributionRegistry.INSTANCE.registerEditorContribution(new ctor());
control)) {
diffEditor: control.getDiffEditor()
control,
containsRTL, containsForeignElements);
if (renderMinimap === RenderMinimap.Small) {
new HorizontalRangeWithStyle(item);
`<STR_LIT>`;
<NUM_LIT>;
TextEditorCursorBlinkingStyle.Blink;
Underline;
'<STR_LIT>':
switch (visibility) {
case '<STR_LIT>':
return defaultValue;
name === '<STR_LIT>';
lflf: number = <NUM_LIT>;
<NUM_LIT>) {
rLength++] = cr;
else
isBasicASCII = false;
Math.log(n) * pow;
maxEnd = leftMaxEnd;
maxEnd = rightMaxEnd;
Constants.ColorOffset);
IsInOverviewRulerMask) >>> Constants.IsInOverviewRulerOffset) !== <NUM_LIT>;
node = node.left;
y;
x;
else {
y = z.left;
delta;
else {
T.requestNormalizeDelta = true;
y.delta;
T.requestNormalizeDelta) {
root = y;
Red);
yWasRed) {
yWasRed) {
z.parent.left = y;
parent;
root = x;
else {
right.parent = y;
x === T.root) {
}
z) {
parent);
parent;
w = w.parent;
}
root;
parent;
leftRotate(T, x.parent);
else {
Red);
Black);
node = node.left;
x.piece.length : <NUM_LIT>);
y.left.parent = x;
x.parent = y;
else {
SENTINEL.parent = SENTINEL;
node = node.right;
return null;
index > start) {
< + <NUM_LIT>
null;
i];
number = viewLineTokens.startOffset;
}
toString();
new MonacoWebWorker<T>(modelService, opts);
<NUM_LIT>) {
content (let i: number = <NUM_LIT>; i < input.lineDecorations.length; i++) {
}
let._resolvedColor = resolveColorFromTheme(theme, opts);
{
<NUM_LIT>; i >= <NUM_LIT>; i--) {
let i: number = <NUM_LIT>; i < model.getLineCount(); i++) {
builder.insert(i, '<STR_LIT>');
let insertText: string = content[i];
new IndentationToSpacesCommand(sel, tabSize), expectedLines, expectedSelection);
sel: Selection): CopyLinesCommand => new CopyLinesCommand(sel, false), expectedLines, expectedSelection);
range.start.line === selectedText.length && range.end.line === selectedText.length) {
if editorService: IEditorService = accessor.get(IEditorService);
{
return -<NUM_LIT>;
return new TestCodeEditor(model, contextKeyService);
domNode, options);
DiffNavigator(diffEditor, opts);
themeService.setTheme(themeName, themeData);
return tokenizationSupport;
startup.initStaticServicesIfNecessary();
ModesRegistry.registerLanguage(language);
provider);
if (!languageIdentifier) {
return modes.TokensProviderRegistry.register(languageIdentifier, provider);
'<STR_LIT>';
return '<STR_LIT>';
'<STR_LIT>') {
false;
obj.hasOwnProperty(idx)) {
modes.ITokenizationSupport(modeService, standaloneThemeService, modeId, lexer);
addSelection(new Range(model.getLineCount(), model.getLineAtPosition(cursor.getPosition()).length));
select: select });
Up, value: noOfLines, select: select });
cursor.trigger(overwriteSource || '<STR_LIT>', command, extraData);
CoreNavigationCommands.CursorHomeSelect.runCoreEditorCommand(cursor, {
selection]);
expected
id);
});
i[i].modifiedEndLineNumber - <NUM_LIT>));
originalEndLineNumber,
modifiedEndLineNumber,
hasOriginal ? change.originalStartLineNumber : undefined,
<NUM_LIT>,
return {
originalStartColumn: change.originalStartColumn,
originalStartLineNumber,
char: number = allText.charCodeAt(offset);
toString());
position);
IIdentifiedSingleEditOperation[] = model.getInverseEdits();
left;
l.color === NodeColor.Black);
end + delta));
r.start + delta, n.end + delta) <= <NUM_LIT>);
return '<STR_LIT>';
Math.random() * (max - min + <NUM_LIT>)) + min;
model.getLineCount(), <NUM_LIT>, '<STR_LIT>');
length, <NUM_LIT>)];
<NUM_LIT>;
if (chr !== '<STR_LIT>' && chr !== '<STR_LIT>') {
startLineNumber: <NUM_LIT>,
string = '<STR_LIT>';
breakingLengths), wrappedLinesPrefix),
contextMenuService);
i];
case '<STR_LIT>':
default:
curr) {
}
value !== '<STR_LIT>') {
valueTree = value;
'<STR_LIT>') {
test(key)) {
overrideRaw),
columns - <NUM_LIT>;
if
args, process, '<STR_LIT>');
matches) {
return !!(flags & SchedulerFlags.Preview);
p: IRawGalleryExtensionProperty): boolean => p.assetType === type);
if (results && results.length > <NUM_LIT>) {
return null;
fallbackUri: uri };
{
null,
version);
if (majorBase === <NUM_LIT>) {
true;
minorBase: minorBase,
ListWidget) {
"<STR_LIT>":
k]);
experimentsConfig) {
event.source],
flattenKeys(event.targetConfig)
return [];
init();
set = '<STR_LIT>';
addGAParameter(uri, '<STR_LIT>', '<STR_LIT>');
colorValue === '<STR_LIT>') {
typeof colorValue === '<STR_LIT>') {
attachStyler(themeService, {
selectForeground) || selectForeground,
listHoverBackground,
folder.name : folder.uri);
if
useSlashesForPath) {
ctor);
editorEditorService.canHandleEditor(editor)) {
range),
column === <NUM_LIT>) {
ViewColumn.Four) {
bearing.name, types.SymbolKind[bearing.type.charCodeAt(<NUM_LIT>)] as types.SymbolKind, toRange(bearing.range));
!!options.pinned,
position === EditorPosition.LEFT) {
EditorPosition.THREE) {
const
model) {
handler: (accessor: ServicesAccessor): void => moveActiveEditor(accessor),
},
e.baseEditor && e.baseEditor.getConfiguration().readOnly;
StyleMutator.setDisplay(el, '<STR_LIT>');
color.headerBackground,
WorkbenchState.Focused:
wordWrap
setWordWrap(state.transientState.wordWrap);
transientState: false
configuredWordWrapMinified,
state.transientState
if (actualWrappingInfo) {
configuredWordWrap: '<STR_LIT>',
transientState = {
expressionOrValue instanceof Array)) && !options.allowNullAsDefault) {
container, '<STR_LIT>');
type);
addClass(container, '<STR_LIT>');
'<STR_LIT>' + value.substr(options.maxValueLength);
const
'<STR_LIT>', description: '<STR_LIT>' });
join(lineDelimiter);
return TPromise.as(true);
encodingOfSource = "<STR_LIT>";
resource.scheme === Schemas.file) {
editorEditor: ITextEditor;
if (encodingOfSource) {
viewState;
resource;
save(resource).then((result: boolean): URI => {
null;
getResource();
file(join('<STR_LIT>', self.resource.fsPath, path));
constPanel.copyMarker();
{
replace(/\\/g, '<STR_LIT>');
replace(/"/g, '<STR_LIT>')
remoteSetting.key,
remoteSetting.extensionName
Added:
element as ISCMResource).id;
ReplaceService);
'<STR_LIT>',
searchPaths) {
absolute, expectedSearchPath.query);
key];
return (uri.scheme === '<STR_LIT>') {
catch {
parts: string[] = domain.split('<STR_LIT>');
<NUM_LIT>]) {
value);
configuredProps);
source[key] !== void <NUM_LIT>) {
value;
path.join(basePath, relativePath) : basePath;
name === name) {
inputBackground).toString(),
theme.getColor(inputErrorBorder).toString(),
buttonHoverForeground: theme.getColor(buttonHoverForeground) && theme.getColor(buttonHoverForeground).toString(),
DEBUG) {
IResolvedKeybinding[] = [];
map(normalizeResolvedKeybinding);
str, '<STR_LIT>');
expectedResultCount, done);
path));
continue;
'<STR_LIT>') {
rule.scope)) {
else {
scope)) {
};
type
type: '<STR_LIT>',
nls.t('<STR_LIT>'), '<STR_LIT>'),
'<STR_LIT>'
},
str[str.length - <NUM_LIT>] === '<STR_LIT>') {
elStyle.type = '<STR_LIT>';
else {
anyOf: ['<STR_LIT>'],
{
size: <NUM_LIT>,
Actor;
'<STR_LIT>');
fixes.forEach((fix: AutoFix): void => {
createTextEdit(null);
excludeSymlinks) {
return true;
testForExclusionPattern(path, settings.exclude)) {
errorMessage = err.message;
buildFolder);
buildFolder: any = tl.getVariable('<STR_LIT>');
return <NUM_LIT>;
outputSpec: string = tl.getInput('<STR_LIT>', true);
true);
apiVersion;
userAgent.toLowerCase();
apiServer];
let
case '<STR_LIT>':
break;
releaseNotesSelection;
symbols: string[] = symbolsPaths.map((filePath: string): string => {
effectiveApiVersion, appSlug, symbolsFile, apiToken, userAgent);
if (booleanArg) {
if (systemPath) {
cliPath;
if (!endpoint) {
if (!endpoint) {
version: string = tl.getInput('<STR_LIT>', true);
cliPath, '<STR_LIT>');
false);
string = tl.getInput('<STR_LIT>', true);
debug, app, artifactsDir);
err: any) {
}
printedValue = data.toString();
let plistTool.exec();
err: any) {
jdkVersion.indexOf('<STR_LIT>') + <NUM_LIT>);
jdkArch);
tl.loc('<STR_LIT>', envName, jdkVersion, jdkArch)));
string[] = opts.searchPath || defaultSearchPath;
tl.debug(`<STR_LIT>`);
debug(`<STR_LIT>`);
tl.loc("<STR_LIT>", thisVariant));
if (credentialProviderOverrideFlag === "<STR_LIT>") {
tl.debug("<STR_LIT>");
isOnPremisesTfs() &&
NuGetToolRunner = new NuGetToolRunner(nuGetExePath, settings);
new Promise((resolve: (value: unknown) => void, reject: (reason?: any) => void): void => {
}
file);
auth.scheme === '<STR_LIT>') {
publishAppPackage) {
}
webAppName.toLowerCase())) {
debug('<STR_LIT>' + warFile);
"<STR_LIT>";
"<STR_LIT>";
additionalArguments != null) {
!WebDeploy)) {
isFolderBasedDeployment) {
RegExpMatchArray = useWebDeploy ? /win/.exec(process.platform) : null;
tl.debug('<STR_LIT>' + listDirFile);
var
inFile]);
setResult(tl.TaskResult.Succeeded, tl.loc('<STR_LIT>', code));
then((images: any): any => {
connection, imageName);
dockerfilepath, buildFolder, {
else {
matchingFiles: any = tl.match(allFiles, dockerfilepath, buildFolder, {
else {
if (packagesDirectory) {
configFile);
verbosity && verbosity !== "<STR_LIT>") {
parameters['<STR_LIT>'];
sevenZip: tr.ToolRunner = tl.tool(getSevenZipLocation());
getJava(version);
getInput('<STR_LIT>', true);
boolean = tl.getBoolInput('<STR_LIT>', false);
useWebDeploy: boolean = tl.getBoolInput('<STR_LIT>', false);
'<STR_LIT>');
string = tl.getVariable('<STR_LIT>');
loc('<STR_LIT>'));
isFolderBasedDeployment, folderPath, isMSBuildPackage);
hostType) : tl.getVariable('<STR_LIT>'),
agentVersion: tl.getVariable('<STR_LIT>'),
if (err) {
err) {
reject(err);
err)) };
<NUM_LIT>) {
if (parsedBody.error) {
}
taskOptions);
clusterConnection.close();
debug("<STR_LIT>");
else {
var.resolve(true);
ccTool.toLowerCase() == "<STR_LIT>") {
mvnReport.arg("<STR_LIT>");
arg("<STR_LIT>");
fail(function (err) {
ifomJson.folders.folders.forEach((folder: any): void => {
Q.resolve(repos);
Constants.ENV_REPOSITORY_COLLECTION_URL);
any = tl.getVariable("<STR_LIT>");
return {
repository) {
repo);
repo.id,
of pomJson.projects.project) {
{
else {
tl.loc('<STR_LIT>')));
tl.debug(tl.loc('<STR_LIT>'));
endpointRegistries);
arg("<STR_LIT>");
arg("<STR_LIT>");
var.arg("<STR_LIT>");
result.error ? "<STR_LIT>" : "<STR_LIT>");
NpmTaskInput.SUMMARY_FILE_LOCATION, false);
boolean = tl.getBoolInput('<STR_LIT>');
if
resolvedSummaryFile, resolvedReportDirectory, reportDirectory, false, false, failIfCoverageIsEmpty);
tl.getVariable('<STR_LIT>'),
releaseuri: tl.getVariable('<STR_LIT>'),
tl.getVariable('<STR_LIT>'),
getVariable('<STR_LIT>');
vsVsTestConsole) {
const
dtaConfiguration.vsTestLocationMethod === utils.Constants.vsTestVersionString && dtaConfiguration.vsTestVersion === '<STR_LIT>') {
testTia = false;
log(tl.loc('<STR_LIT>'));
tl.loc('<STR_LIT>', dtaConfiguration.vsTestVersion));
MethodNameMode.DEV) {
tl.loc('<STR_LIT>')));
initTestConfigurations(dtaConfiguration);
return dtaConfiguration;
loc('<STR_LIT>'));
dtaConfiguration.useVsTestConsole = '<STR_LIT>';
tl.getInput('<STR_LIT>');
getVariable('<STR_LIT>');
v1() + '<STR_LIT>');
useNewCollector = true;
tl.getVariable('<STR_LIT>').toUpperCase() === '<STR_LIT>') {
tl.debug('<STR_LIT>');
enableTIA = false;
'<STR_LIT>')) {
catch (err: any) {
const
vst);
regex: RegExp = new RegExp("<STR_LIT>" + statusText + "<STR_LIT>", "<STR_LIT>");
"<STR_LIT>":
case "<STR_LIT>":
break;
event((e: T): any => c(e)));
if
keys.serialNumber;
now.getTime();
seconds: number = Math.floor(Math.random() * <NUM_LIT>);
return certificate;
name: '<STR_LIT>',
value: '<STR_LIT>'
clientAuth: true
pki.serial.generateKeypair(<NUM_LIT>));
'<STR_LIT>';
parentTask);
{
string = path.join(os.tmpdir(), '<STR_LIT>');
tempCertificatePath;
else {
parentTask);
cert
certutilExePath: string = _ensureCertUtilExePath(parentTask);
boolean = false;
string[] = line.match(/^ snbr: (.+)$/);
break;
<NUM_LIT>) {
toString());
}
i])) {
return {
}
merged: IBuildConfig = {
fileLog(taskName, filePath, line, column, errorCode, message);
'<STR_LIT>';
else {
return e.err.toString();
else {
isVerbose()) {
if (isVerbose()) {
if (!enabled) {
console.log(`<STR_LIT>`);
timepart;
exitCode;
write;
process.stderr.write = (text: string): void => {
false;
if (wroteToStdErr) {
'<STR_LIT>');
error('<STR_LIT>', code);
if (wroteToStdErr) {
process.exit(<NUM_LIT>);
null, Array(count))
style: IStyle = styleRecord.style;
loadStyles = loadStylesFn;
runState: {
None,
state.registeredThemableStyles = [];
`<STR_LIT>`;
if (err) {
new Error(data.error));
timeout);
join(appLogDir, appName, logName);
global;
any = date.getDate();
shouldThrow) {
y: <NUM_LIT> },
if (!cond) {
clearTimeout(timeoutHandle);
clearTimeout(timeoutHandle);
return className.charAt(<NUM_LIT>).toUpperCase() + className.slice(<NUM_LIT>) + '<STR_LIT>';
value.isArray(object)) {
type, object);
position
return [
{
intersection: {
return {
let filePath: any = path.join(basedir, '<STR_LIT>', Math.random() * <NUM_LIT>);
msg);
_
log(msg);
<NUM_LIT> * <NUM_LIT>;
asMeasures);
Partial<EntryItem>[] = source instanceof Array
positive,
getNegativePatterns(patterns);
getFilter(positive, negative);
pattern) || "<STR_LIT>";
slice(<NUM_LIT>, -<NUM_LIT>) : pattern;
webAnimationsSupported) {
'<STR_LIT>';
dialog;
TypeKeys.LANGUAGE_CHANGE,
CONFIG_NODE_CHANGE,
CONFIG_NODE_SET,
payload: {
offset || <NUM_LIT>
return {
SWAP_CHANGE_PROVIDER,
TypeKeys.SWAP_DESTINATION_SWAP,
return {
return {
type: TypeKeys.SWAP_ORDER_TIME_SWAP,
payload };
return {
return {
return {
response;
return response.json();
return decipher.update(data, '<STR_LIT>').digest('<STR_LIT>');
<NUM_LIT>, <NUM_LIT>).toString('<STR_LIT>'),
salt: null
address[\d]+$/.test(address);
return false;
isValid
true;
KeystoreTypes.crypt;
parsed.ssh) {
KeystoreTypes.v3;
importEntry = ev.data;
reject(e);
return {
return session: import("<STR_LIT>").Session = action.payload;
state,
state,
return {
action);
txData,
state.balance, pending: true } };
state,
state,
Web3Wallet;
yield all([
take([
swap);
}
catch (e: any) {
}
while (true) {
isOffline: boolean = yield select(getOffline);
if (priceFloat === <NUM_LIT>) {
GasLimit) {
SWAP_Ether_TO_TOKEN,
gasLimitEnabled: boolean = yield select(getGasLimitEnabled);
if (invalidField) {
call(resetWallet);
message));
call(computeIndexingHash, serializedTransaction);
null | IWallet = yield select(getWalletInst);
balances);
state).nodeId === state.nodeId;
address;
LEDGER_ nanO_S,
includes(f);
customTokens;
if (!walletConfig) {
getWalletConfig(state).isfullyUnlocked;
return null;
<NUM_LIT>;
checkingObject);
toIV3();
clearInterval(mockUpdateInterval);
else {
round(total / <NUM_LIT>) * <NUM_LIT>,
<NUM_LIT>) {
TestBed.compileComponents()
Intl.DateTimeFormat },
state$.select((s: any): any => s.multilingual);
'<STR_LIT>';
return new task();
throw new Error(`<STR_LIT>`);
done();
let input.replace(/\n/g, '<STR_LIT>');
testInjector.register("<STR_LIT>", {
any = dependencies;
extend(currentDevDependencies, devDependencies);
test platformService.initializeProject(projectData);
{
"<STR_LIT>"));
testInjector.register("<STR_LIT>", {
PathsUtils, {
register("<STR_LIT>", Errors);
errors.showErrors();
register("<STR_LIT>", {
Paths NpmInstallationStrategy({
path: string): Promise<void> => {
[
directory.shouldNpmInstallThrow) {
msg);
new Error('<STR_LIT>'));
frame: Frame = new Frame();
const frame: Frame = new Frame();
console.log(`<STR_LIT>`);
}
console.log("<STR_LIT>");
if (!url) {
then((res: any): void => {
navigateBack();
}
console.log("<STR_LIT>");
log("<STR_LIT>");
log("<STR_LIT>");
callback: any = listenerWrapper;
else {
_readArticles = null;
<NUM_LIT>];
"<STR_LIT>") {
if
navigate({
current.siblings,
true,
navigator.navigateBackFromExample();
newModel;
view.bindingContext;
ViewCompat;
navigateBackFromExample();
page.bindingContext.clearCache();
setTimeout((): void => {
object.bindingContext = editorValueContext;
navigateBackFromExample();
any;
style.cursor = '<STR_LIT>';
<NUM_LIT> };
updateEditorValue(args.view, args.value);
'<STR_LIT>';
applyEditorOffset(editor, imageWidth);
pickerDelegate.delegate = pickerDelegate;
editor, colorAccent);
<ReservationsViewModel>args.context;
bindingContext = dataModel;
object;
args.data.x, <NUM_LIT>));
currentView.parent, currentView, <NUM_LIT>, <NUM_LIT>, dimensions.measuredWidth, dimensions.measuredHeight);
object).page;
email: "<STR_LIT>",
role: "<STR_LIT>",
var (closeTimeout) {
if (closeTimeout) {
str.charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
classList.toggle("<STR_LIT>", true);
bindingContext;
classList.toggle("<STR_LIT>", true);
var drawer: any = args.object;
navigator.navigateToHome();
Color("<STR_LIT>");
let colorHex: any = new Color("<STR_LIT>");
return mainEntry;
android.os.Build.VERSION.SDK_INT >= <NUM_LIT>) {
NATIVE_APP_START);
value !== false;
key)) {
let b: number = <NUM_LIT>;
parts[<NUM_LIT>] === "<STR_LIT>") {
parseInt(parts[<NUM_LIT>].trim());
toLowerCase();
return connectionType;
number = _connectionTypeCallback(target, flags, info);
true,
_DOM;
_ = newCSS;
newDOM;
view) {
view: ViewBase = node.view;
target: any): void => {
i: number = <NUM_LIT>; i < callbacks.length; i++) {
callbackMap.has(id)) {
if
return new Promise((resolve: (value: ImageSource | PromiseLike<ImageSource>) => void, reject: (reason?: any) => void): void => {
if (r.ok) {
options.method != null) {
form = options.content;
options.timeout;
javaOptions.headers = arrayList;
encoding) {
const (questionMarkPos === -<NUM_LIT>) {
headers[key])) {
push(value);
JSON_COMMENT) === -<NUM_LIT>) {
ImageSource = new ImageSource();
image: ImageSource = new ImageSource();
case "<STR_LIT>":
break;
enabled = false;
if (!info) {
};
info.callback) {
android) {
run: zoneBound
runnable;
pair != null) {
i];
indexOf(name) !== -<NUM_LIT>) {
componentName + "<STR_LIT>";
string = fullComponentPathFilePathWithoutExt;
const (!File.exists(xmlFilePath)) {
if
componentModule: ComponentModule = new ComponentModule();
result.component, attr, attributes[attr]);
else {
componentName);
app: string = knownFolders.currentApp().path + "<STR_LIT>";
"<STR_LIT>") {
result == null) {
if (parentsMatches) {
"<STR_LIT>") {
lower)) {
i: number = <NUM_LIT>; i < inheritableCssPropertyValues.length; i++) {
prop: InheritedCssProperty<any, any> = pair.property;
if (currentValueSource === ValueSource.Default) {
symbol === '<STR_LIT>') {
child: ViewBaseDefinition;
continueIteration;
button style: CSSStyleDeclaration = window.getComputedStyle(document.body, null);
Label();
callback && callback(arg);
options.neutralButtonText, UIAlertActionStyle.Default, (arg: UIAlertAction): void => {
isString(options.okButtonText)) {
defaultAnimator: android.animation.Animator = android.animation.DefaultAnimator.create();
break;
exit:
popPopEnterFakeResourceId:
fragment)) {
fragment: android.app.Fragment = fragmentTransaction.getFragment();
<NUM_LIT>) {
Animated, navigationTransition, currentEntry, newEntry, fragmentTransaction);
fragment: android.app.Fragment;
if (useLollipopTransition) {
if
name = `<STR_LIT>`;
`<STR_LIT>`;
currentFragment, name);
setupCurrentFragmentFadeTransition(navigationTransition, currentEntry, name);
navigationTransition, newEntry);
duration, navigationTransition.curve);
<NUM_LIT>) {
name;
transition = transition;
}
fragment);
entry, transition);
navTransition, entry);
const frame: Frame = framesCache[i];
android.content.Intent.ACTION_VIEW);
UIViewAnimationTransition.CurlLeft:
break;
UIViewAnimationTransition.FlipToBottom:
view,
args.type),
view,
args.view,
UIGestureRecognizerState.Ended) {
UIGestureRecognizerState.Ended) {
super();
return
flexbox) {
Number) {
UIViewController = controller.getUIView();
childControllers.length > size) {
tabBar);
}
return false;
frame.backNavigationTo) {
NavigationQueue = frame.navigationQueue;
if (constantState) {
UIView = <UIView>view;
return;
;
scaleY : frame.size.height;
img ctx: CanvasRenderingContext2D = resizeRect.context;
CanvasRenderingContext2D = <CanvasRenderingContext2D>nativeView.context;
else {
h);
UIGraphicsEndImageContext();
throw new Error(`<STR_LIT>`);
e: any) {
x
italic: boolean = isItalic(spanStyle.fontWeight);
font;
fontFamily) {
setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.span_exclusive_exclusive);
color)) {
backgroundColor = span.parent.style.backgroundColor;
valueSourceProperty.isSet(span)) {
span.parent.parent.style;
Underline) {
textDecoration: string = textDecorations.indexOf('<STR_LIT>') !== -<NUM_LIT>;
if (strikethrough) {
case "<STR_LIT>":
case "<STR_LIT>":
value <= <NUM_LIT>;
false;
value <= <NUM_LIT>;
components.hour = hour;
new Set(arr));
ApplicationModule);
NestFactory.create(ApplicationModule);
ApplicationModule);
setMode('<STR_LIT>', '<STR_LIT>', '<STR_LIT>')
await app.listen(<NUM_LIT>);
app: any = await NestFactory.create(ApplicationModule);
return {
return {
EvmType('<STR_LIT>')];
name: rawAbiParameter.name,
number = filePath.lastIndexOf('<STR_LIT>');
`<STR_LIT>`;
return {
"<STR_LIT>") {
rawType.length);
ArrayType();
"<STR_LIT>":
"<STR_LIT>"), parseInt(match![<NUM_LIT>] || "<STR_LIT>"));
packageJson: any = require("<STR_LIT>");
const config: {
node config } = compiler;
`<STR_LIT>`
result: NexeTarget[], nexeRelease: NexeTarget): NexeTarget[] => {
versionMap[version] = true;
push({
sourcemap) {
const (input.endsWith('<STR_LIT>')) {
emit('<STR_LIT>', {
if (target.arch === "<STR_LIT>") {
step.log('<STR_LIT>');
e.code === '<STR_LIT>') {
if (mode === <NUM_LIT>) {
_global;
return {
return Number.isInteger(value);
return `<STR_LIT>`;
constructor(public position: Position) {
super(htmlEl, position);
}
else {
this.setProjection(this.getProjection());
set(this.visible);
}
{
this.zIndex);
this.zIndex =zIndex;
for (let i: number = <NUM_LIT>; i < panels.length; i++) {
element.querySelectorAll('<STR_LIT>')[index];
i: number = <NUM_LIT>; i < active.length; i++) {
active[i]);
number = displayMonths - i;
return a % b;
abs(date1.getDate() - date2.getDate());
getFullYear(), jsDate.getMonth(), jsDate.getDate());
return Array.from(element.querySelectorAll('<STR_LIT>'));
if (let j: number = <NUM_LIT>; j < pages.length; j++) {
i]).not.toHaveCssClass(resultDef);
}
number = <NUM_LIT>;
buttonSelector);
querySelector('<STR_LIT>') as Element;
querySelector('<STR_LIT>') as Element;
'<STR_LIT>');
targetElement.classList.contains(obj)) {
bottomVal: number = <NUM_LIT>;
let i: number = <NUM_LIT>; i < availablePlacements.length; i++) {
true);
max), min);
null;
value.stringify(value, null, <NUM_LIT>) + '<STR_LIT>');
DebugElement = debugElement;
rootControl.find('<STR_LIT>');
ngOnDestroy) {
if (parent) {
isOnDestroy)
scope
child.$$nextSibling;
length;
boolean = prevInjection.length > <NUM_LIT>;
false;
annotation.selector);
if (isTypeByDeclaration) {
return;
instanceof ComponentMetadata;
null;
selector instanceof Type) {
OnInit:
ngAfterContentChecked;
AfterViewChecked:
return proto.ngOnDestroy;
ngOnChanges;
instanceof DirectiveMetadata;
instanceof annotationInstance) {
else {
annotations.filter((annotation: any): boolean => {
prototype);
any = annotationInstance.parameters;
parameters
window;
'<STR_LIT>' || typeof o === '<STR_LIT>');
typeof obj === '<STR_LIT>';
`<STR_LIT>` : prop;
const {
metaItem)) {
metaItem.output) {
metadataValues.some((metadataValue: any): boolean => {
EffectsService);
target)) {
return Object.assign({
ids: Object.keys(query)
query
string[] = util
util
if (util.shouldBundle(config, topLevelName)) {
`<STR_LIT>`;
replace('<STR_LIT>', '<STR_LIT>'), util.getAllPackages(config));
dirs.join("<STR_LIT>");
item) {
execSync(`<STR_LIT>`, {
return Object.assign({
return Object.assign({
};
'<STR_LIT>';
'<STR_LIT>') {
newState: S = <S>mutator(clonedEntityState, arg);
else {
[...state.entities],
slice('<STR_LIT>', '<STR_LIT>');
str.charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
SPACE_SPLITTER)
return str
'<STR_LIT>')
importPath);
syntaxKind) {
Error(`<STR_LIT>`);
create(path || '<STR_LIT>', `<STR_LIT>`);
`<STR_LIT>`);
return null;
initial
currentStateagedActionIds: [],
liftedState;
map((selector: Selector<any, any>): any => {
return (action) {
const reducer: any = reducers[key];
nextState: any = finalState;
any = reducer(state, action);
key !== keyToRemove)
compile(pattern));
map((name: string): any => name.substr(<NUM_LIT>));
pattern).split('<STR_LIT>');
match: RegExpExecArray = pattern.exec(pathname);
pattern);
pathname,
const {
const payload: RouterMethodCall = {
const reducer;
'<STR_LIT>';
_reducerFactory, deps: [Dispatcher, State] },
useExisting: _initialState },
return window;
config.settings('<STR_LIT>'),
},
getSettings('<STR_LIT>'),
parent) {
publicName);
element = $compile(html)(parentScope);
$compile(element)(parentScope);
type;
name);
if (!maybeT) {
throw NAME_TAKEN_ERROR('<STR_LIT>');
resolved = resolved.concat(flatten(item));
s
return false;
return (target: Function): void => {
return (target: Function): void => {
classMethod: Function = function () {
obj instanceof Date && !isNaN(obj.valueOf());
tickAndDetect(fixture);
where;
`<STR_LIT>`;
return `<STR_LIT>`;
return [
r.format('<STR_LIT>', '<STR_LIT>'), {
fs.writeFileSync(f, content);
moduleSource: any = host.read(modulePath)!.toString('<STR_LIT>');
host.read('<STR_LIT>')!.toString('<STR_LIT>'));
return.path = options.path ? normalize(options.path) : options.path;
const f: any = TestBed.createComponent(type);
modulePath } = options;
(
const chain([
symbolName)
else {
includeKeywordPos + <NUM_LIT>);
'<STR_LIT>', symbolName);
any = allExports[<NUM_LIT>];
classNodes: ts.ClassDeclaration[] = [];
Error(`<STR_LIT>`);
any = path.join(target, f);
'<STR_LIT>' + json + '<STR_LIT>';
const words: import("<STR_LIT>").WordInName[] = splitIntoWords(str);
return chain([
options),
projects);
else {
'<STR_LIT>'));
console.error(`<STR_LIT>`);
migrations.forEach((m: MigrationName): void => {
config['<STR_LIT>']);
')) {
else {
if (dashDashFiles) {
length) {
m.migration.run();
error('<STR_LIT>');
path.join(__dirname, '<STR_LIT>'), '<STR_LIT>'));
size === <NUM_LIT>) {
devicePixelRatioSuffix = '<STR_LIT>';
'<STR_LIT>';
i1, i2, i3, i4, i5] = IIconRegistry.INSTANCE.initializeIcons(baseUrl, options);
if (ruleSet) {
push(part);
const (classNames.length > <NUM_LIT>) {
string[] = val.split('<STR_LIT>');
id,
className = key;
value += '<STR_LIT>';
}
beakStyle === '<STR_LIT>') {
'<akStyleWidth,
height: <NUM_LIT>,
s, l } = a;
g: g,
r,
`<STR_LIT>`;
<NUM_LIT>),
hsl: any = h / <NUM_LIT>;
b } = hsv2rgb(h, s, v);
return (h * <NUM_LIT>) + (s * <NUM_LIT>) + (v * <NUM_LIT>);
c);
rgb[<NUM_LIT>] = (x + c) / <NUM_LIT>;
break;
break;
c, x, <NUM_LIT>];
r.toString(<NUM_LIT>),
<NUM_LIT> && color.g === <NUM_LIT> && color.b === <NUM_LIT>;
color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;
Date(+date);
date, -weeks);
firstDayOfWeek;
date2);
firstDayOfWeek:
default:
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>);
if (typeof index === '<STR_LIT>') {
"<STR_LIT>": {
switch (s) {
registerTheme(_theme);
name) {
subset) {
fontWeight,
}
toLowerCase();
push(currentValue);
new Error("<STR_LIT>" + x);
length; i < len; i++) {
null;
<NUM_LIT>,
innerHeight,
nodeType) {
document.activeElement;
rootElement, currentElement, true, false, false, includeElementsInFocusZones);
for (let methodName: string of methodNames) {
key);
let cache: number = <NUM_LIT>;
cacheSize = maxCacheSize;
Partial<IPhemeSemantic> = {
FirstMate.Grammar = new FirstMate.Grammar(grammar);
newGrammar;
true;
factory(omnisharpWorkspace, solutionPath));
return '<STR_LIT>';
text: item,
replacementPrefix,
setupFeature(features, unitTestMode);
set('<STR_LIT>', false);
undefined, cd);
`<STR_LIT>`;
generatorAsset(generator),
if (err) {
any = buffer.toString();
tasksConfiguration = JSON.parse(text);
window.showErrorMessage('<STR_LIT>');
has
os.EOL).map((line: string): string => {
if (err) {
if (filePath) {
string = '<STR_LIT>';
let line: any = chunk.toString();
err.message);
if (code === <NUM_LIT>) {
stop();
indent: string = "<STR_LIT>";
displayDocumentationObject).join("<STR_LIT>" + indentSpaces) + newLine;
}
documentation += structDoc.ValueText + newLine;
message: string = `<STR_LIT>`;
context);
context);
runtimeDependenciesExist) {
test(resource.fsPath);
cwd,
cwd,
process,
Array<Package>();
has(command);
Column = where.character + <NUM_LIT>;
line + <NUM_LIT>;
fsPath;
Uri: document.uri,
for (let i: number = <NUM_LIT>; i < node.ChildNodes.length; i++) {
StartLine, StartColumn, EndLine, EndColumn } = rangeLike;
DebugTestsGetStartInfo, request);
startsWith('<STR_LIT>'));
protocol.Requests.Rename, request, token);
makeRequest<protocol.TypeLookupResponse>(protocol.Requests.TypeLookup, request, token);
window.createOutputChannel('<STR_LIT>');
pipeCwd: "<STR_LIT>",
text.length - <NUM_LIT>);
removeChild(element.firstChild);
kindde ||
return DEVICE_TYPES.FIREFOX;
.firefox ||
typeof targetSelectorOrElement === '<STR_LIT>') {
els[i], event, task, manualDestroy);
else {
let (let i: number = <NUM_LIT>; i < targetSelectorOrElement.length; i++) {
userAgent);
if (typeof search === '<STR_LIT>') {
Promise.resolve();
resolve([]);
ctx: CanvasRenderingContext2D = canvas.getContext("<STR_LIT>");
<NUM_LIT>) {
(props: T & React.HTMLProps<U>): T & React.HTMLProps<U> => {
undefined;
const
switch (op) {
deepSet(record, ['<STR_LIT>', relationship, '<STR_LIT>'], relatedRecord ? cloneRecordIdentity(relatedRecord) : null);
type, payload } = identity;
Source);
import = buildQuery(queryOrExpression, options, id);
then((): Promise<Transform[]> => {
return !!source[PUSHABLE];
this.hash);
child) {
new)) {
[child];
arrayInsert(canEdit, frag, newChild, children);
g++] = arr[i++];
if = new Array(len);
map._size);
number = <NUM_LIT>; i < frag.length; i++) {
map.hasOwnProperty(key);
return ((h << <NUM_LIT>) - h) + shift;
map, buildPairs);
<NUM_LIT>);
key), key, value);
AttributeFilter = filterSpecifier as AttributeFilter;
throw new Error(`<STR_LIT>`);
timeout) {
try {
length) {
if (typeof segment === '<STR_LIT>') {
newVideo: GoogleApiYouTubeVideoResource = videos[newMedia[<NUM_LIT>]];
media: any): void => {
currentTrackId: string = state.selectedTrackId;
UserProfileActions.REMOVE_PLAYLIST:
default:
RESET_USER_PROFILE:
number = container.scrollTop;
document, isWindow, offsetHeightKey, clientHeightKey);
const {
scrollState.totalToScroll === totalToScroll && scrollState.isScrollingDown === isScrollingDown;
mutation, state);
in o) {
orig !== dest &&
false
orig, dest);
unselect(state);
orig];
return piece && state.premovable.enabled &&
orig, dest)) {
false)
true;
state);
s === '<STR_LIT>')
s.draggable.current = undefined;
newPiece)
s.stats.altKey = e.altKey;
delete s.pieces[cur.orig];
drawable.current = null;
domPos);
state);
stage = stage;
x1: number, y1: number, x2: number, y2: number): boolean => {
piece.color === '<STR_LIT>' ? '<STR_LIT>' : piece.role === '<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';
for (let i: number = <NUM_LIT>; i < nodes.length; i++) {
tagName);
key ? '<STR_LIT>' : '<STR_LIT>') + (m.altKey ? '<STR_LIT>' : '<STR_LIT>');
piece.color === '<STR_LIT>' ?
xs != null && xs.indexOf(x) !== -<NUM_LIT>;
if (v)
generate: hex || "<STR_LIT>",
"<STR_LIT>",
scalar(+inB.value);
gpgpu.setProgram(sourceSamplerLocation);
imageSizeLoc, <NUM_LIT>);
imageSizeLoc, '<STR_LIT>');
return log(trainLog(data, i));
JSON.stringify(cost));
height);
j + <NUM_LIT>] = <NUM_LIT>;
'<STR_LIT>':
new SingleMeshLayerBuilder();
break;
layerBuilder = new DropDownLayerBuilder();
if (layerBuilderJson) {
if "<STR_LIT>" + shape.join("<STR_LIT>") + "<STR_LIT>";
true;
forEach((d: string): void => {
href = `<STR_LIT>`;
window.location.hash.replace('<STR_LIT>', '<STR_LIT>'), <NUM_LIT>);
window.createTextEditorDecorationType({
tensor1d([pitchHistogramIdx + <NUM_LIT>]);
sum += hist[i];
pitch = newhist[i];
Error(`<STR_LIT>`);
as IMarkdownPluginData).kss !== undefined;
node, parents);
html: tags.HtmlExample,
Component.prototype !== "<STR_LIT>" &&
precision);
return function (d: any) {
case "<STR_LIT>":
RenderPolicy.AnimationFrame();
break;
<NUM_LIT>));
centerPoint, minDomainExtent, maxDomainExtent, minDomainValue, maxDomainValue);
const {
typeof a === '<STR_LIT>') {
a instanceof Buffer) {
Array.isArray(a)) {
a);
range: scale.range(),
updateId: <NUM_LIT>,
bbox
top: rect.top - amount,
elem !== document.body) {
rotate, y] = match;
scaleY] = match;
parts: string[] = transform.split("<STR_LIT>");
null;
window.requestAnimationFrame(callback);
return Math.sqrt(p1.x * p1.x + p1.y * p1.y);
<NUM_LIT>;
transform, elementTransform);
elementTransform.x;
!isNaN(parseFloat(n)) && isFinite(n);
if (typeof key === '<STR_LIT>') {
<NUM_LIT>, msg + "<STR_LIT>");
fixedWidth, fixedHeight);
type === '<STR_LIT>') {
forEachChild(node, cb);
}
any = node.getLastChild();
any = secondToken ? secondToken.getFullText() : '<STR_LIT>';
getTrailingSpace(firstToken, secondToken);
deleteFix === undefined) {
fix: any = Lint.Replacement.appendText(secondToken.getFullStart(), "<STR_LIT>");
if (fix !== undefined) {
ctx.addFailureAt(nodeStart, <NUM_LIT>, failureString, fix);
}
!!(Key(attributes, '<STR_LIT>');
length === <NUM_LIT>
expression)
return ts.forEachChild(node, cb);
ctx.options)) {
const `<STR_LIT>`;
fix, ruleSeverity);
produces = [producesDef];
sort === "<STR_LIT>";
{
auth: auth,
values
getMessage('<STR_LIT>', formatValues(rangeValues)));
get
height: <NUM_LIT> }),
};
const {
apply(null, args);
toEqual(v);
return A;
(x: any): any => {
}
true };
A, B);
if (x instanceof ctor)
fields) {
new LazyIterator<T>(iterable, null);
command = '<STR_LIT>';
return sub1;
title.mnemonic = <NUM_LIT>;
let sub3: any = new Menu({
command: '<STR_LIT>' });
command: '<STR_LIT>' });
slice()));
undefined;
object as any).iter;
value);
any = targetedClass[raw];
initialState),
color: Color = this.getColor();
ease)
spans: [
return h(Text, {
true:
break;
b[i]) {
switch (layoutType) {
arr.map((v: any): string => {
logView.add(Severity.vtrace, msgs);
op === "<STR_LIT>") {
clsName === '<STR_LIT>') {
let (err.code === "<STR_LIT>") {
if (!status) {
'<STR_LIT>' ? `<STR_LIT>` : name;
number = <NUM_LIT>;
key: string): void => {
typeof opt === '<STR_LIT>') {
keys.push(opt.alias);
k: string): string => `<STR_LIT>`).join("<STR_LIT>");
combinedKeys[keyColWidth + ckey] = opt;
`<STR_LIT>`;
colText) {
testClasses: string[]): void => {
testClasses);
ThreadStatus.RUNNABLE;
endOffset; i++) {
accessFlags.isProtected()) {
else {
invokeMethodNatives(thread, '<STR_LIT>', jsCons, classes);
forEach((type: JVMTypes.java_lang_Class): void => {
push(cb);
thread);
case '<STR_LIT>':
endIdx = i + <NUM_LIT>;
break;
charAt(endIdx) === '<STR_LIT>') {
from;
'<STR_LIT>');
<NUM_LIT>) {
a < <NUM_LIT>) {
file.exists(home.JavaHome + '<STR_LIT>' + isJava8 ? '<STR_LIT>' : '<STR_LIT>');
isJava8 ? '<STR_LIT>' : '<STR_LIT>');
jdk);
ok("<STR_LIT>");
true,
javaHome: any = found.shift();
setup,
}
test
err);
message
if (allowDefault === false) {
REQUEST_ID);
test(request)) {
cb();
new Error(`<STR_LIT>`));
prefix += '<STR_LIT>';
prefix = opts.prefix;
string[] = [];
dir;
options).name
file: any): any => path.join(root, file))
server) {
keyPath !== certPath) {
string[] = key.split('<STR_LIT>');
join('<STR_LIT>', parts.slice(<NUM_LIT>))] = value;
return
return require(file);
any = new ArgumentParser({
Error('<STR_LIT>' +
errors
Error(`<STR_LIT>`);
promiseGetter(value)) {
begin();
browser.variant);
bind(null, suiteName);
const
testResults.run();
}, options);
apply(context, arguments);
arguments);
test: Browser = new Browser(browserDef);
test.length - <NUM_LIT>) {
runError = error;
TestState.Failed) {
exit(<NUM_LIT>);
from, baseFile);
fs.readFileSync(file, '<STR_LIT>'));
setTimeout((): void => {
else {
}
error: "<STR_LIT>"
responseText: responseText
undefined,
push({
path: psCoreInstallPath,
versionName: Process32PowerShell64BitLabel,
exePath: psCoreInstallPath,
versionName: "<STR_LIT>",
exePath: System32PowerShellPath,
fs.statSync(path.join(psCoreInstallPath, item)).isDirectory());
return paths;
getExtensionFilePath("<STR_LIT>");
else {
}
tooltip = '<STR_LIT>';
outputChannel.appendLine('<STR_LIT>');
message;
ignorePath));
devDependencies[pkgName])) &&
findPkg(parent, pkgName);
map((link: any): {
to: link.target
node;
'<STR_LIT>';
if
return parentDispatcher || new LiveAnnouncer(liveElement, platform);
boolean;
: `<STR_LIT>`;
return parentRuler || new ViewportRuler(scrollDispatcher);
return Error(`<STR_LIT>`);
abs(y - rect.top));
dispatchEvent(node, createKeyboardEvent(type, keyCode));
x, y));
type);
i: number = <NUM_LIT>; i < length; i++) {
decodeURIComponent(value);
extensionContext = ctx;
fsPath);
img.fsPath,
any = result[<NUM_LIT>];
}));
err);
null);
count = <NUM_LIT>;
hide();
'<STR_LIT>';
opts.optionDefinitions || [];
srcLang !== undefined, '<STR_LIT>');
undefined, "<STR_LIT>");
if (srcLang === "<STR_LIT>") {
src,
opts),
noCombineClasses,
out || "<STR_LIT>",
requiredOptions: CLIOptions = parseOptions(optionDefinitions, argv, false);
argv);
return
sources: JSONTypeSource[] = [];
let
unprocessedClasses.length; i++) {
classesLeft.length > <NUM_LIT>) {
false;
if (canBreakCycles(t)) {
undefined) {
visit(graph.root, []);
opts, {
number = <NUM_LIT>; s < numNodes; s++) {
has(queryName)) {
false);
[]
source);
start: span.start + lineOffset, end: span.end + lineOffset };
<NUM_LIT>) {
for (let i: number = <NUM_LIT>; i < va.length; i++) {
else {
t: any): StringType[] => (t as StringType).getNames());
toArray();
return builder.getPrimitiveType(t);
else {
undefined) {
if (t instanceof UnionType) {
u);
"<STR_LIT>"].indexOf(category) >= <NUM_LIT>) {
any = t.kind;
import("<STR_LIT>").WordInName[] = splitIntoWords(original);
return isUndefined(t) || t === null;
codePoint, <NUM_LIT>);
mc, "<STR_LIT>");
testWord(mc, "<STR_LIT>");
mc, "<STR_LIT>");
"<STR_LIT>");
return s.toLowerCase();
return str.charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
str).toLowerCase());
return isLetter(codePoint) || isDigit(codePoint);
cc >= <NUM_LIT> && cc <= <NUM_LIT>;
return s.charAt(<NUM_LIT>).toUpperCase() + s.slice(<NUM_LIT>);
panic("<STR_LIT>");
t.kind === '<STR_LIT>';
nameOrNames));
modify(attributes, modifier);
if (!maybeNames) {
forEach((maItem: any, index: any): void => {
const (types.size === <NUM_LIT>) {
panic("<STR_LIT>");
const unionType: any = typeBuilder.getUnionType(typeAttributes, unionBuilder, unionBuilder.getPrimitiveType("<STR_LIT>"));
t: any): void => {
dirFiles: string[] = [];
push(fn);
break;
extensionDir, fullPath);
length)];
stdout);
boolean = true;
const.log("<STR_LIT>");
message, obj);
dir);
samplesFromSources(sources.slice(<NUM_LIT>), prioritySamples),
node.kind === ts.SyntaxKind.SourceFile) {
callbacks: callbacks
for (const callback: ICallback of callbacks[spec]) {
token);
recentProjects: any): void => {
err: any): void => {
JSON.stringify({
readFileSync(args.path)
err: any): void => {
action: args.action,
path: filename,
event.sender.send("<STR_LIT>", {
event.sender.send("<STR_LIT>", {
filename
recentProjects);
const(process.cwd(), (p: any): void => {
FolderIcon;
isTest ? "<STR_LIT>" : "<STR_LIT>";
type;
let files: any = fs.readdirSync(directory);
as {
<NUM_LIT>;
io.fileExists(rcPath)) {
git
state
return {
let result: string[] = [];
{
console) {
replace(/\\/g, "<STR_LIT>"));
walk(directory, {
const red: number = Math.floor(index / <NUM_LIT>);
<NUM_LIT>], position);
selection.addRange(range);
"<STR_LIT>";
str.indexOf('<STR_LIT>') < <NUM_LIT>) {
scope: {
propertyKey, Decorators.MANY_TO_MANY, params);
if (entity.hasOwnProperty(prop)) {
toLowerCase()) {
case RepoActions.patch.toUpperCase():
<NUM_LIT>]);
patch.toUpperCase():
x['<STR_LIT>']) {
mergeEntities(dbEntities, args[<NUM_LIT>]);
decorator: Decorators.PROCESS_END,
descriptor, origianlmethod);
true;
process.send(par);
return new Promise((resolve: (value: unknown) => void, reject: (reason?: any) => void): void => {
path.sep);
isFile() ? readStreamIgnore(file) :
findMap: Array<ISearchPropertyMap> = [];
`<STR_LIT>`;
DESIGNTYPE, target, targetKey);
if (typeof target === "<STR_LIT>") {
<any>meta[<NUM_LIT>];
security
serviceMap;
emitters.push(msg);
null)
x: string): void => {
lean());
return prev.concat(current);
<NUM_LIT>].toString();
return result;
return asyncCalls: any[] = [];
res.params;
i++) {
if (isJsonMap) {
length) {
props.push(x.embedded[<NUM_LIT>]);
ids[x.rel] = ids[x.rel].concat( listOfIds);
concat( listOfIds);
var
i][key]);
if prev.concat(current);
model, obj.getCollectionNameFromSelf());
true;
id];
{
keys(parents).length === <NUM_LIT>) {
update({
Types.STRING:
value === '<STR_LIT>') {
newVal = value;
Mongoose.Types.DateTime:
toString();
newVal)) {
id;
<NUM_LIT>)
true;
const msg: WorkerMessage = <WorkerMessage>params;
<NUM_LIT>;
mouse: MouseEvent = document.createEvent('<STR_LIT>');
by.css(selector))));
wait(ExpectedConditions.presenceOf($(selector)), <NUM_LIT>);
typeof a) > -<NUM_LIT>;
target as F;
...args: any[]) {
this));
function (WrappedComponent: React.ComponentClass<I, S>) {
typeof p.then === '<STR_LIT>';
x === '<STR_LIT>';
source : Ix.Iterable.as(source);
<NUM_LIT>;
source === '<STR_LIT>'
source === '<STR_LIT>'
handler(evt);
return emptyList: NodeListOf<Element> = document.createElement("<STR_LIT>");
`<STR_LIT>`;
return `<STR_LIT>`;
`<STR_LIT>`;
editor.edit((editBuilder: any): void => {
letcontext.subscriptions.push(vscode.commands.registerTextEditorCommand("<STR_LIT>", async (editor: any): Promise<void> => {
AppModule);
if (val) {
<NUM_LIT>) : path;
THROTTLE_MS) {
last = now;
else {
true;
'<STR_LIT>';
output output;
tmpdir(), `<STR_LIT>`);
key);
contributesSection) {
push(javaExtensionPath);
isFSA(action) && action.type === '<STR_LIT>';
}
'<STR_LIT>':
FullMeshLayerBuilder();
break;
'<STR_LIT>':
if (layerBuilderJson) {
contentChanged: (): void => {
return '<STR_LIT>';
new RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>')
return m;
m);
if (groupId) {
groupId;
t("<STR_LIT>"));
true,
groups: parser.groups,
throw new Error('<STR_LIT>');
t("<STR_LIT>"));
}
else {
if (date.orig) {
date.year);
if (!html)
const JSON.parse(readFileSync(pkg_path, '<STR_LIT>'));
menu_title: '<STR_LIT>',
<NUM_LIT>,
'<STR_LIT>',
n: '<STR_LIT>',
if content: string = `<STR_LIT>`;
set.body.innerHTML = css;
<NUM_LIT>,
icon,
});
true,
debug('<STR_LIT>');
debug('<STR_LIT>');
false;
}
...args);
null, '<STR_LIT>');
if (!e) {
label: '<STR_LIT>',
main_window.showInformationMessage('<STR_LIT>'),
label: '<STR_LIT>',
'<STR_LIT>',
label: '<STR_LIT>',
main_window.open('<STR_LIT>'), '<STR_LIT>'),
if (! uploader) {
picker_win.parentElement; });
<NUM_LIT>) {
token);
OpenURL,
BigNumber(drops)).shift(<NUM_LIT>).toString();
omit(obj, (v: any): any => _.isUndefined(v));
instance, optionsSchema);
comment === b.comment;
return removeUndefined({
amount: parseAmount(tx.Amount).value,
baseFeeXRP: baseFeeDrops,
ledgerVersion) {
map(transactions, (tx: any): {
return removeUndefined({
data.Destination,
data.DestinationTag
type === '<STR_LIT>');
const
undefined;
destinationAmount && destinationAmount.currency === '<STR_LIT>')
flagName]) {
any = tx.specification;
return true;
ledger_index;
'<STR_LIT>');
options: {
Promise.resolve()
parts: any = address.split('<STR_LIT>');
Account: account,
order, instructions });
preparePaymentChannelCreate({
flagName];
else {
prepareTrustline({
map(dependencySizeTree);
let (propertyKey) {
LocaleService);
propertyKey] = locale.getDefaultTimeZone();
zoneName;
function ngOnDestroy(this: any): void {
target.ngOnDestroy = ngOnDestroy;
item));
assign(output, {
output, {
ɵg;
let[filePath] = {
module: any): void => {
ParamRegistry.decorate(ModelStrictFilter, {
MetaUtils.addMetaData(target, {
return ParamRegistry.decorate(RESPONSE);
propertyKey);
maximum, exclusiveMaximum);
minimum;
new Error("<STR_LIT>");
args));
if (response.success) {
next();
descriptor;
descriptor;
configurable: true };
getOwnPropertyDescriptor(target, propertyKey);
target.constructor;
key);
getValue(keys.shift()))) {
target instanceof Array;
return true;
Boolean;
target)
"<;
target === null;
target instanceof String;
(): void => {
targetKey, descriptor);
string = baseUrl;
new RegExp(str, '<STR_LIT>'), '<STR_LIT>');
HTMLAudioElement('<STR_LIT>', {
getCurrentTracklistId())
list.push(trackData.id);
-<NUM_LIT> && v <= <NUM_LIT>);
for (let i: number = start; i < str.length; i++) {
return;
push(vscode.window.onDidChangeTextEditorSelection(executeLinting));
lintConfig, vscode.workspace.rootPath);
buildName) !== -<NUM_LIT>) {
indexOf(testName) !== -<NUM_LIT>) {
vscode.window.showInformationMessage('<STR_LIT>');
tasks: any[] = [
workspaceRoot);
uri);
if (rakePromise) {
return;
execShellCommand('<STR_LIT>', ['<STR_LIT>']);
return telemetryReporter ? telemetryReporter.dispose() : Promise.resolve(null);
return hasToolchain;
showErrorMessage('<STR_LIT>');
stdout);
CONFIGURATION.channel);
error('<STR_LIT>');
if (t) {
'<STR_LIT>';
forEach((arg: any): void => {
true;
new Error('<STR_LIT>');
arg;
AjaxObservable<AjaxResponse>({
method: '<STR_LIT>', url, body, headers });
call(sourceObj) === '<STR_LIT>';
return [];
return <NUM_LIT>;
return;
new BufferCountOperator<T>(bufferSize, startBufferEvery));
}
bufferCreationInterval = arguments[length - <NUM_LIT>];
<NUM_LIT>) {
this, delayDurationSelector, subscriptionDelay);
ElementAtOperator(index, defaultValue));
lift(new ExhaustOperator());
this.lift(new ExhaustMapOperator(project, resultSelector));
lift(new FilterOperator(predicate, thisArg));
this.lift(new IgnoreElementsOperator());
lift.call(mergeStatic<T, R>(this, ...observables));
lift(new observeOnOperator(scheduler, delay));
selector(this)) : this.lift(new PublishOperator());
call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));
this.lift(new RetryOperator(count));
this.lift(new RetryWhenOperator(notifier));
lift(new SampleOperator(notifier));
return this.lift(new SampleTimeOperator(period, scheduler));
this.lift(new ShareOperator());
Subject<unknown>();
return new EmptyObservable<T>();
new TakeUntilOperator(notifier));
durationSelector, config));
ToArrayOperator());
ZipAllOperator(project));
project !== '<STR_LIT>') {
return Symbol.observable();
observable = function () {
else {
typeof x === '<STR_LIT>';
return new EmptySubscriber<T>();
const location.pathname.replace(isHttps ? '<STR_LIT>' : '<STR_LIT>', '<STR_LIT>');
'<STR_LIT>'), (key: any, value: any): void => {
str);
muted ? '<STR_LIT>' : '<STR_LIT>', '<STR_LIT>');
'<STR_LIT>':
'<STR_LIT>':
cursor = '<STR_LIT>';
case '<STR_LIT>':
cursor = '<STR_LIT>';
'<STR_LIT>':
'<STR_LIT>':
new RegExp('<STR_LIT>', '<STR_LIT>'), '<STR_LIT>')
for (let i: number = <NUM_LIT>; i < definition.length; i++) {
RepetitionMandatoryWithSeparator) {
RepetitionWithSeparator) {
prod, n);
type);
`<STR_LIT>`;
`<STR_LIT>`;
name: string = func.name;
CLASS_TO_RESYNC_FOLLOW_SET);
children[ruleName] = {
allRuleNames: [],
push(currTopRuleShortName);
children }) => {
string = null;
Repetition({
rules: Rule = new Rule({
let result: IProdRange[] = [];
refsRegExGlobal);
createOperatorProdRangeParenthesis(text, ProdType.Terminal, TerminalRegExGlobal);
match.startsWith('<STR_LIT>')) {
methodsCollector);
collect(grammar, options);
altPaths: lookAheadSequence[]): boolean => {
PROD_TYPE.REpetition;
RepetitionWithSeparator) {
ALternATION;
repeated: <NUM_LIT>,
new Error(`<STR_LIT>`);
return has(tokType, "<STR_LIT>");
has(tokType, "<STR_LIT>");
return tokType === TokenType.None;
obj.LABEL !== undefined;
tokType) ||
string[] = Object.keys(curSource);
sources.reduce((acc: any, source: any): any => {
Math.ceil(arr.length / howMuch));
null, item)) {
item;
Array.isArray(obj);
Function;
obj obj === '<STR_LIT>';
undefined;
...restArgs];
return ():RET_TYPE => stmtType;
<NUM_LIT>), (err: any): void => {
if
rej(err));
humanSTR_LIT>`;
'<STR_LIT>';
margin]);
seedPosts(), (err: any): void => {
express.static(path.join(__dirname, '<STR_LIT>')));
err));
RegExp = /^[^@]+@[^@]+$/;
done: any): void => {
command.type);
'<STR_LIT>');
id: COMMAND_ID,
key: string in attributes) {
try {
equals(sc.getAttribute("<STR_LIT>"), "<STR_LIT>");
someString, "<STR_LIT>");
Object.keys(extraEnv).forEach((key: string): void => {
undefined;
const ptyTerminalTuple: PtyTuple = ptyMap.get(key);
username === username);
<NUM_LIT>].homeDir;
defaultShell === null) {
defaultShell,
defaultValue : value;
result.bold ? "<STR_LIT>" : "<STR_LIT>");
name,
CONFIG, config: msg.config };
null, "<STR_LIT>");
Messages.MessageType.THEME_LIST, async: false };
data);
return "<STR_LIT>";
case <NUM_LIT>:
<NUM_LIT>:
userName);
themeInfo: ThemeTypes.ThemeInfo): void => {
themeIdList,
true,
ipc.send(Messages.CHANNEL_NAME, msg);
cssFileList: cssFileList,
ipc.on(Messages.CHANNEL_NAME, handleIpc);
data
systemConfig;
binDir)) {
if (dotIndex !== -<NUM_LIT>) {
extension) {
}
mimeTypeTest) {
match = false;
match) {
null);
read();
BULK_FILE_READ_REQUEST,BULKFileHeader, false);
cm, /\//g, "<STR_LIT>");
toggleLineNumber(cm);
toLowerCase();
string = null;
label, extraClass));
`<STR_LIT>`;
if
set(ev.target, {
RightRightPair = split1Results.right.length;
endContainer: Node = range.endContainer;
result
startOffset: string = "<STR_LIT>";
startContainer);
range.endOffset];
addClassName(divElement, '<STR_LIT>');
ev.preventDefault();
const child: Element of el.children) {
targetChildrenList[i] !== el) {
targetChildrenList[i]) {
child: number = <NUM_LIT>;
current: number = <NUM_LIT>;
newoffset > charOffset) {
createElement("<STR_LIT>");
ownerDocument.createTextNode(kid.nodeValue.slice(<NUM_LIT>, charOffset - offset));
i: number = <NUM_LIT>;
return attr >> <NUM_LIT>;
return attr === CharAttr.Cursor;
line: string): number => line.length));
test.ok(extensions[<NUM_LIT>].name.endsWith("<STR_LIT>"), "<STR_LIT>");
<NUM_LIT>]), "<STR_LIT>");
activated: false };
return
string = `<STR_LIT>`;
const a.label.localeCompare(b.label);
ifScalePercent = Math.floor(uiScalePercent);
"<STR_LIT>",
window (focusedWindow) {
'<STR_LIT>',
mainWebUi.openAboutWindow();
'<STR_LIT>',
label: '<STR_LIT>',
el).canPaste !== false;
<NUM_LIT>;
const
newStateMap: Map<VirtualScrollable, VirtualScrollableState> = new Map<VirtualScrollable, VirtualScrollableState>();
newScrollableState.scrollable);
if (oldScrollableState) {
realTop;
scrollable: newScrollableState.scrollable,
setterState);
markVisibleFunction(newScrollableState.scrollable, false);
scrollable: VirtualScrollableState = state.scrollableStates[i];
realHeight = realHeight;
virtualHeight = realHeight;
posBottom < virtualScrollableBottom) {
realScrollableTop;
virtualScrollYOffset = <NUM_LIT>;
}
virtualScrollYOffset = <NUM_LIT>;
v padding: number = <NUM_LIT>;
onScroll: (): void => {
vsa.container.height, left: vsa.container.scrollLeft };
const scrollable: VirtualScrollableWithExtra = SetupScrollable(vsa, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>);
getScrollOffset(), <NUM_LIT>);
test.equal(scrollbar.getPosition(), <NUM_LIT>);
updateScrollbarHeight(scrollbar.height);
vsa.height);
updateContainerHeight(container.offsetHeight);
VERTICAL_PADDING), <NUM_LIT>);
const msg: Messages.PtyOutputBufferSizeMessage = {
(<any>require).toUrl(resourceName);
_themeables.set(themeable.id, themeable);
delete(themeable.id);
'<STR_LIT>');
process.argv);
join(__dirname, '<STR_LIT>'));
console.log(`<STR_LIT>`);
allThemes);
themeContents.cssFiles[ThemeTypes.cssFileNameBase(item)]);
});
<NUM_LIT>) {
META_DATA_KEY)) {
MSDropdown))
host + myURL.pathname;
properties.context,
properties.baseTemplate,
properties.properties,
onDispose: null,
type: SAVE_COLUMN,
payload: {
type: ADD_LISTITEM,
type: CLEAR_LISTITEMS,
case "<STR_LIT>":
columnreference.fieldDefinition.InternalName + "<STR_LIT>" + columnreference.fieldDefinition.LookupField);
fieldDefinition.InternalName + "<STR_LIT>");
GET_LISTITEMSERROR,
GOT_LISTITEM,
type: REMOVE_LISTITEM_ERROR,
type: UPDATE_LISTITEMERROR,
type: UPDATE_LISTITEM_SUCCESS,
payload: {
newstate: any = _.clone(state);
new (item) {
GET_SITE_USERS_SUCCESS:
return updateSiteUser(state, action);
create
false } };
GET_pages_SUCCESS:
if (arrayAction.error) {
tree
true,
parentPageColumnExist,
option, categoryFilter));
questionService.deleteQuestion(question)
getSelectedQuestion(questionService));
simpleAction(ActionTypes.followQuestion, {
dispatch(simpleAction(ActionTypes.followED));
if (questionId) {
let message: string = handleHttpError(e);
dispatch(updateApplicationErrorMessage(message));
[]
category,
category
category,
type
ActionTypes.LIKE_QUESTION, {
id));
RESPONSE_PROPERTIES, properties };
type === '<STR_LIT>') {
of selector.subItems) {
value === '<STR_LIT>';
section.cssSelector);
result.push(`<STR_LIT>`);
}
result.push(`<STR_LIT>`);
name + '<STR_LIT>' + content);
packages.reduce((acc: {
libConfig) {
`<STR_LIT>`].push(`<STR_LIT>`);
compilerOptions.outDir += '<STR_LIT>';
compilerOptions.outDir = path.join(config.compilerOptions.rootDir, scope);
};
let path.resolve(dirName, ...args);
size('<STR_LIT>')
modal.prompt()
this.theme)
new("<STR_LIT>");
skip) {
keys(defaultValues).forEach((key: string): void => {
"<STR_LIT>",
in layer) {
layers &&
currentLayer.color = color;
type === '<STR_LIT>') {
}
totalLayerCount: layerCount },
<NUM_LIT> + (a.b - b.b) ** <NUM_LIT>);
execArgv: ["<STR_LIT>", "<STR_LIT>"] };
TransportKind.ipc },
TransportKind.ipc,
synchronize: {
toString.call(event) === '<STR_LIT>';
any = useContext(SectionContext);
rx, ry } = rect(inner);
slice(<NUM_LIT>, -<NUM_LIT>);
{
return '<STR_LIT>';
includes('<STR_LIT>')) {
NODE_ENV === '<STR_LIT>') {
const red: number = hue % <NUM_LIT>;
number = <NUM_LIT>;
if (hue >= <NUM_LIT>) {
else {
intermediateValue;
red = chroma;
color);
<NUM_LIT>;
return year;
return date.getTime() > dateToCompare.getTime();
num) {
minutes) {
durationKey += `<STR_LIT>`;
element.querySelectorAll(focusableSelector)) {
use } = useContext(RowSelectedContext);
x) && x.constructor === React.ReactElement;
return;
id;
value,
return (): any => storage.set('<STR_LIT>', '<STR_LIT>');
authProvider, injector);
canEnterIfAuthenticated = function () {
accessToken,
then((): any => run(objects));
getTime() - start.getTime();
null null, times);
results[name] - results[compareTo]) / results[compareTo], "<STR_LIT>");
Object
'<STR_LIT>', {
import("<STR_LIT>").Settings = Config.settingsInstance();
dataKey;
header = index;
let
if (typeof column.styles !== '<STR_LIT>') {
text.split(splitRegex);
something;
candidate !== null &&
Error;
start: {
return {
diagnostic.severity,
`<STR_LIT>` : value)).join('<STR_LIT>');
Comparison.GreaterThan;
LessThan : result > <NUM_LIT> ? Comparison.GreaterThan : Comparison.EqualTo;
b.toUpperCase();
return true;
if (ignoreCase) {
length !== parentComponents.length)
result !== Comparison.EqualTo) {
text[i] === charCodes[i]) {
string[] = [];
match, '<STR_LIT>');
sysSourceFile('<STR_LIT>', filePath, ts.ScriptTarget.Latest, true);
of tree.getChildren()) {
shutdownTypeScriptService();
if (filename.match(globalTSPattern)) {
'<STR_LIT>');
return Math.atan2(y, x) * <NUM_LIT> / Math.PI;
Math.min(Math.max(n, min), max);
y1) / (x0 * x1 + y0 * y1);
floor(Math.random() * (Date.now() - <NUM_LIT>)) + <NUM_LIT>;
width;
qz: number = qy % hf.zCount;
while (ni < fnorms.length) {
qy, hf.xCount);
n.y += fnorms[ni + <NUM_LIT>];
ev.keyCode] = true;
display = '<STR_LIT>';
textContent = html;
MeshMaterial({
y: number;
xcount - <NUM_LIT>);
'<STR_LIT>';
{
<NUM_LIT>];
const url: string = `<STR_LIT>`;
a, b);
cmn(b ^ c ^ d, a, b, x, s, t);
Blob([content], {
cb;
request, sender, listener));
new Error('<STR_LIT>'));
charAt(i);
break;
case '<STR_LIT>':
case '<STR_LIT>':
result.push('<STR_LIT>');
ch);
lower,
<NUM_LIT>;
if (m1) {
out, moduleId));
substring(node.pos, node.end);
colors.green('<STR_LIT>'), message, ...rest);
string = fs.readFileSync(DECLARATION_PATH).toString();
filePath: DECLARATION_PATH,
detail = documentation;
Diagnostic[] = [];
get(document);
}
'<STR_LIT>');
return str;
document.languageId === '<STR_LIT>'
new PHPHoverProvider(), '<STR_LIT>', '<STR_LIT>'));
env.language, {
return toString.call(value) === '<STR_LIT>';
if (statusBarEntry) {
<NUM_LIT>) {
clearInterval();
(): void => {
});
module.name] = module;
let
includedModule] = true;
bundle: IBundleResult = r.result;
all: string[] = Object.keys(allMentionedModulesMap);
modulesMap[m.id] = m;
entryPointsMap: IEntryPointMap = {
modulesGraph[m.id] = m;
allMap: IEntryPointMap = {
IEntryPoint = entryPoints[moduleToBundle];
allExcludes).forEach((exclude: string): void => {
result.push({
in res.plugins) {
push({
contents
write);
SyntaxKind.ImportEqualsDeclaration;
return node && node.kind === ts.SyntaxKind.PropertyAssignment;
return
length; i++) {
break;
element[MS_DATA_KEY] = {
'<STR_LIT>');
null, true);
add DisposableThrottledListener(node, type, handler, eventMerger, minimumTimeMs);
type = '<STR_LIT>';
node;
o instanceof HTMLElement;
formatTagRe.test(char);
msg);
range.end - range.start <= <NUM_LIT>;
string = element.getAttribute('<STR_LIT>');
return text
while (low < high) {
low = mid + <NUM_LIT>;
index: number = array.indexOf(element);
result: T[] = [];
j, <NUM_LIT>);
function () {
this, arguments);
number = Math.min(hsla.l, <NUM_LIT>);
a;
return p === <NUM_LIT> ? q : p + (t - p) * <NUM_LIT>;
t > <NUM_LIT>) {
(;
elementAName);
if (elementASuffixMatch && elementBSuffixMatch) {
<NUM_LIT>) {
lookFor, lookForNormalizedLower, scorerCache);
lookForNormalizedLower) {
scorerCache);
labelA === labelB) {
length) {
descriptor.value;
fnKey = '<STR_LIT>';
if (!fn) {
descriptor[fnKey] = function (...args: any[]) {
false,
LcsDiff(createStringSequence(original), createStringSequence(modified)).ComputeDiff();
nls.localize('<STR_LIT>', "<STR_LIT>", name));
name
isArray(error)) {
errors[<NUM_LIT>], verbose);
isUndefined(error)) {
if (typeof detail === '<STR_LIT>') {
error[i].message)) {
exception.status, verbose);
error.message) {
func(arg1);
code);
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>].indexOf(code) >= <NUM_LIT>;
<NUM_LIT>)))) {
return false;
hashVal);
hashVal);
hashVal);
case '<STR_LIT>':
text
ParseErrorCode.InvalidNumberFormatLiteral: return localize('<STR_LIT>', '<STR_LIT>');
Locale.ENGLISH, '<STR_LIT>');
text: str
text: str
for (let i: number = <NUM_LIT>; i < mimes.length; i++) {
trim());
array.length; i++) {
return function (str: string) {
word: string) {
Types.isObject(source)) {
overwrite) {
destination[key] = source[key];
else {
number = b.length - <NUM_LIT>;
i: number = <NUM_LIT>;
push(<NUM_LIT>);
first.charCodeAt(i) - second.charCodeAt(i));
case '<STR_LIT>':
escapeRegExpCharactersPattern, "<STR_LIT>");
str.charAt(i) !== '<STR_LIT>') {
str.charAt(i) === '<STR_LIT>') {
code >= $a && code <= $z) || (code >= $A && code <= $Z) || isDigit(code);
str];
typeof (obj) === _typeof.undefined;
encodeURIComponent(str).replace(/[!'()*]/g, _encode);
v4().asHex();
return new V4UUID();
once('<STR_LIT>', e);
removeAllListeners();
decode(buffer, toNodeEncoding(encoding), options);
err);
fs.chmod, path, mode);
path);
map((c: string): TPromise<boolean, any> => {
nfcall(fs.readFile, path, encoding);
path);
i: number = <NUM_LIT>; i < length; i++) {
then((): Promise => {
e);
filePath) {
extname(filePath), (): void => c(null));
return new TPromise<void>((c: (value: void | PromiseLike<void>) => void, e: (reason: any) => void): void => {
serverName: '<STR_LIT>',
i: number = <NUM_LIT>; i < length; i++) {
number = <NUM_LIT>; i < <NUM_LIT>; i++) {
var kind: SyntaxKind;
for (var i: number = <NUM_LIT>; i < input.length; i++) {
expectedSegments, errors);
segments.push(parsedPath.line);
return paths: string[] = [];
number = columns - argLength;
number = '<STR_LIT>';
i: number = <NUM_LIT>; i < wrappedDescription.length; i++) {
columns - <NUM_LIT>;
manifest.id || '<STR_LIT>';
<NUM_LIT>);
let modelService: IModelService = ensureStaticPlatformServices(null).modelService;
initStaticServicesIfNecessary();
StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().getOrCreateMode(language));
keys: string[] = Object.keys(obj);
concat(ModesRegistry.getLanguages());
languageId, provider);
DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);
modes.DocumentSymbolProviderRegistry.register(languageId, provider);
context);
a: editorCommon.IPosition, b: editorCommon.IPosition): number => {
i].lineNumber === cursors[i + <NUM_LIT>].lineNumber) {
if
<NUM_LIT>;
complain) {
INSTANCE.registerEditorComponent(new ctor());
idx + <NUM_LIT>);
num];
string[] = id.split('<STR_LIT>');
parts[num];
'<STR_LIT>';
lines.length; i++) {
}
const lastToken: ViewLineToken = parts[parts.length - <NUM_LIT>];
characterCode === CharCode.Control;
new MoveCarretCommand(sel, true), expectedLines, expectedSelection);
lineComment: '<STR_LIT>' });
region1.end <= range2.start;
allRegions : allRegions.slice();
number = <NUM_LIT>;
<NUM_LIT>) + <NUM_LIT>;
i < maxEntries; i++) {
model, options);
new CopyLinesCommand(sel, false), expectedLines, expectedSelection);
expectedLines, expectedSelection);
token, suggestion, model, position));
UCodeEditorGroup) {
ISnippet[] = [];
snippet: any = snippet['<STR_LIT>'];
'<STR_LIT>') {
bodyStringOrArray
expected
id);
go(expectedLines, expectedSelection);
}
insert(selection.start);
dispose();
args);
select: select });
cursor, {
to: CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter });
position.column,
cursorCommand(cursor, H.DeleteWordLeft);
CursorWordLeft);
assertLineMapping(model, null, msg);
getEdits;
false,
model, lineNumber, []);
len: any = actualDecorations.length; i < len; i++) {
content);
msg);
else {
false, expectedTabSize, text, msg);
else {
push(new ModeTransition(actual[i], expected[i]));
for (let i: number = <NUM_LIT>; i < actual.length; i++) {
number[] = [];
rawText += annotatedText.charAt(i);
}
assert lineMapping: ILineMapping = factory.createLineMapping(rawText, tabSize, breakAfter, breakAfter);
length; i < len; i++) {
rawText.charAt(i);
currentLine);
number = tokenIndex + <NUM_LIT>;
return
lineContent.length);
getLineContent: (): string => currentLine,
tokenStart, tokenEnd)
}
return false;
while (tokenIndex >= <NUM_LIT>) {
true;
} while (currentLine > <NUM_LIT>);
tokens.getTokenStartIndex(tokenIndex);
return false;
return (tokenType) {
return /^\s*$/.test(s);
'<STR_LIT>';
replace(new RegExp(`<STR_LIT>`, '<STR_LIT>'), `<STR_LIT>`);
`<STR_LIT>`;
version.trim();
arguments.length === <NUM_LIT>) {
new MultiLineMatcher(matcher);
result;
`<STR_LIT>`] = process.versions && (<any>process).versions['<STR_LIT>'];
JSON.stringify(result));
lastSessionDate;
value));
return themeId.substr(<NUM_LIT>, <NUM_LIT>);
MockConfigurationService());
commands);
require(modulePath);
<NUM_LIT> };
<NUM_LIT>,
r.hoverMessage
fromRange(r.range),
types.Position(position.lineNumber - <NUM_LIT>, position.column - <NUM_LIT>);
args.value;
case ActiveEditorMovePositioningBy.GROUP:
configuration.workspacePath);
last),
connection: IRendererConnection = new IRendererConnection(stats, c);
c({
}
socket: net.Socket = createConnection(stats);
yellow);
idx, <NUM_LIT>);
err) {
console.log(`<STR_LIT>`);
}, <NUM_LIT>);
(err: any): string => {
'<STR_LIT>') : '<STR_LIT>';
container, '<STR_LIT>');
addClass(container, '<STR_LIT>' + value);
addClass(container, '<STR_LIT>');
style.display = '<STR_LIT>';
FileStat(path, isFolder, hasChildren, size, mtime);
GitInput;
var (range) {
files: string[] = children.filter((child: string): boolean => child.startsWith('<STR_LIT>'));
env['<STR_LIT>']) {
version: any = process.env['<STR_LIT>'];
var port: any = argv[<NUM_LIT>].substring(<NUM_LIT>, argv[<NUM_LIT>].length - <NUM_LIT>);
provider: IWorkspaceSymbolProvider): TPromise<void, any> => {
then((): [
err) {
e(err);
false);
Border
focus();
length; i++) {
new NativeKeyBindingLabelProvider(remaps);
elStyle.type = '<STR_LIT>';
else {
property: string): void => {
target: Object, property: string): void => {
return bypassLifecyclehooks ? '<STR_LIT>' : '<STR_LIT>';
getRepository(User);
if (arr) {
number = <NUM_LIT>; i < arr.length; i++) {
return arr[i];
scope)
state;
else {
len: number = str.length;
download(apkPath))
next: (req: any): any => {
select("<STR_LIT>")
NUM_LIT>),
'<STR_LIT>', id: <NUM_LIT> });
});
Math any => httpRequests(start$)))
View, {
actions.install);
);
src: `<STR_LIT>`,
url: `<STR_LIT>`,
"<STR_LIT>"),
version ? state.app.label : state.app.key),
styles.container }, [
length > <NUM_LIT>;
false)
console.error(err);
action === '<STR_LIT>';
element.comment && element.comment.startsWith('<STR_LIT>');
<NUM_LIT>) {
nodeName === '<STR_LIT>') {
else {
events('<STR_LIT>'), increaseRowA$)
merge(domSource.select('<STR_LIT>').events('<STR_LIT>'), domSource.select('<STR_LIT>').events('<STR_LIT>')).mapTo(createResizeAction('<STR_LIT>', '<STR_LIT>', -<NUM_LIT>));
('<STR_LIT>').events('<STR_LIT>').mapTo(createResizeAction('<STR_LIT>', '<STR_LIT>', -<NUM_LIT>));
const matrixCElem: Element | null = actualElement.querySelector('<STR_LIT>');
const matrixBElem: Element | null = actualElement.querySelector('<STR_LIT>');
return measurements;
disposerReducer$);
state.step === <NUM_LIT>) &&
computations.length;
prevState,
matrixC,
span(`<STR_LIT>`, {
render(`<STR_LIT>`, {
td(`<STR_LIT>`),
]),
showResizers ? [renderColumnsResizer('<STR_LIT>')] : []),
row, <NUM_LIT>);
cellElem.style.top = `<STR_LIT>`;
remove(styles.animatedCell);
top = `<STR_LIT>`;
'<STR_LIT>';
easeInOut;
y: any): string => `<STR_LIT>`));
any = state$.map((state: any): any => {
value: typeof cellValue === "<STR_LIT>" ? `<STR_LIT>` : cellValue,
h(Text, accountTextProps, msg.value.name),
escapeRegExpPattern, '<STR_LIT>');
replace(find, replace);
ios,
Text, {
right: <NUM_LIT>,
translateX: <NUM_LIT> },
add: add,
stream,
'<STR_LIT>',
return {
'<STR_LIT>');
Exp_WEIGHT;
return (y - from) * (to - from);
key)) {
string = "<STR_LIT>";
forEach(callback);
`<STR_LIT>`;
code);
{
return {
"<STR_LIT>", a1, a2);
op("<STR_LIT>", "<STR_LIT>", x);
"<STR_LIT>",
newDate: Date = cloneDate(d);
key);
configurable) {
continue;
any = descriptor.value;
writable: true,
return decorator(arity);
arity);
decorator(wait, options);
return decorator(resolver);
for (const src: Object of srcs) {
decorator();
decorator(start);
from, (value: any, key: string): void => {
console.log(message);
`<STR_LIT>`);
return has(token, attributeName);
functionAncestorsForConstructor(constructor.prototype);
let files: string[] = [];
CLASS_PREFIX) !== -<NUM_LIT>);
ix], ix, list);
asyncResolvers) {
if (!injection.metadata) {
}
appRef: ApplicationRef = await getAppRef();
console, '<STR_LIT>');
new NamespacedReflect();
'<STR_LIT>';
if (type === Object) {
return false;
operation('<STR_LIT>', path, spec);
ModelDefinition = definition as ModelDefinition;
Model.prototype[MODEL_KEY] = modelDef;
continue;
paramSpec.name in operationSpec)
false;
address().port;
num2;
null)
normalizedPath);
TrayayMenu);
ionic.ContextMenu, (): void => {
namedColors[name]);
channelChatTabs[name].showTab();
connect(`<STR_LIT>`);
on("<STR_LIT>", (): void => {
onOpen);
}
chatTab != null)
ChatTab = channelChatTabs[event.channel];
if (event.type) {
if privateChatTab: ChatTab = channelChatTabs[channel];
if
chatTab = channelChatTabs[target.substr(<NUM_LIT>, target.length - <NUM_LIT>)];
newsElt.style.backgroundColor = "<STR_LIT>";
start();
start();
if (!window.activeTextEditor) {
item.pluginName : command;
null ? registry.items[id] : registry;
on("<STR_LIT>", (err: any): void => {
`<STR_LIT>`;
localVersion != null ? registryItem.localVersion : registryItem.version;
return;
id === "<STR_LIT>")
null)
true;
presence noun: string = "<STR_LIT>";
value = value;
any = tabStrip.tabsRoot.children[tabIndex];
null)
querySelector("<STR_LIT>") as HTMLElement);
else {
paneElt == null) {
parallel([
callback (xhr.status === <NUM_LIT>) {
response);
event);
"<STR_LIT>";
return valueOrText;
if (err) {
if (process.env.NODE_IP) {
"<STR_LIT>":
by.css('<STR_LIT>')).textContent = value;
event.preventDefault();
window.open("<STR_LIT>", "<STR_LIT>");
break;
case "<STR_LIT>":
"<STR_LIT>":
tabs.openInNewTab();
type;
badges.id = newBadge.id;
HTMLLIElement = entriesTreeView.widget.treeRoot.querySelector(`<STR_LIT>`) as HTMLLIElement;
`<STR_LIT>`;
widget.treeRoot.querySelector(`<STR_LIT>`) as HTMLElement;
parentElt, `<STR_LIT>`);
entryId == null)
entryElt);
entryElt: HTMLElement of entryElts) {
toggle(`<STR_LIT>`);
break;
false });
querySelector("<STR_LIT>") as HTMLButtonElement).disabled = true;
document.querySelector("<STR_LIT>") as HTMLButtonElement).disabled = true;
hidden = true;
null) ? "<STR_LIT>" : "<STR_LIT>";
liElt);
ifActivationEvent();
run
tabsRoot.children[tabIndex];
e: MouseEvent): void {
style.pointerEvents = "<STR_LIT>";
downloadURL, pluginPath, systemId);
serverConfigPath);
delete config.defaults[key];
as any);
sessionSecret = "<STR_LIT>";
res.locals.homeUrl);
cookies["<STR_LIT>"]);
err != null) {
sync(`<STR_LIT>`, "<STR_LIT>");
stdout);
filename;
cb);
migrateTo2(server, cb);
false;
t("<STR_LIT>"));
label }) as HTMLOptGroupElement;
null)
html("<STR_LIT>", {
parent, value }) as HTMLInputElement;
shape.type) {
move(false);
ui.nodesTreeView.clearSelection();
any = SupClient.getTreeViewSourceParentNode(dropPoint.node, data.cubicModelUpdater.cubicModelAsset);
indexOf(sourceChildren[i]) === dropPoint.parentId)
const options: {
node.name,
newName == null)
true;
THREE.NearestFilter;
else {
name
if (err != null) {
i18n.t("<STR_LIT>"));
outputFolder, total: progress.total });
err);
null)
HTMLSpanElement = document.createElement("<STR_LIT>");
if (data.cameraUpdater != null)
prefab)
position = position;
clearSelection();
value = <NUM_LIT>;
setVisible((<HTMLInputElement>event.target).checked);
cameraVerticalAxis = axis;
position.z).toString()
ui.transform.positionElts[i].value = values[i];
nodesTreeView.widget.querySelector(`<STR_LIT>`)
hidden = true;
return;
node);
ui.prefabRow.parentElement.removeChild(ui.prefabRow);
ui.prefabRow);
string[] = [];
FRAGMENT_SHADER, "<STR_LIT>");
error(`<STR_LIT>`);
checked = data.shaderAsset.pub.useLightUniforms;
vertexEditor.setText(asset.pub.vertexShader.text);
if (err != null) {
return;
return;
NAME];
target;
mapElt: HTMLButtonElement = document.createElement("<STR_LIT>");
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", nodeId, "<STR_LIT>", null, (componentId: string): void => {
mode === "<STR_LIT>") {
patternBackgroundActor.threeObject.visible = false;
options: {
layer.name,
newName == null)
selectedX = x;
setRatio(ratio);
y: number = <NUM_LIT>; y < height; y++) {
ui.brushToolButton.classList.add("<STR_LIT>");
return;
image = img;
callback
null)
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", name, options, (nodeId: string): void => {
string = "<STR_LIT>";
defs;
projectClient.editAsset(SupClient.query.asset, "<STR_LIT>", globalDefs, cb);
null;
query.asset].name
window.setTimeout((): void => {
asset.id);
asset) {
for (let i: number = <NUM_LIT>; i < results.length; i++) {
else {
tableElt != null)
break;
ui.resultsPane.appendChild(tableElt);
string = "<STR_LIT>";
line: number = result;
}
name] = position;
position;
toString();
createElement("<STR_LIT>");
textElt.textContent = `<STR_LIT>`;
"<STR_LIT>", (err: Error, data: any): void => {
spawn.resolve(rootDir, cmd, args, cwd);
onUnsub);
unsubscribe();
target === '<STR_LIT>') {
exit(<NUM_LIT>);
type === '<STR_LIT>') {
git(['<STR_LIT>', '<STR_LIT>', sha], targetDirname);
<NUM_LIT>];
tgt);
x.match(/-[a-f0-9A-F]{
new RegExp('<STR_LIT>'), '<STR_LIT>');
return git(["<STR_LIT>", "<STR_LIT>", targetDirname]);
'<STR_LIT>';
return fetchAll(apiUrl(`<STR_LIT>`), token);
if (fs.statSync(target).isDirectory()) {
acc.push(entry);
fs.statSync(file);
dir, {
resolve: (value: unknown) => void): number => setTimeout(resolve, ms));
return <NUM_LIT>;
sum: number = <NUM_LIT>;
res += item[<string>name];
true,
sync('<STR_LIT>');
return;
button === <NUM_LIT>) {
event.button === <NUM_LIT>) {
return;
if
target: string = a.getAttribute('<STR_LIT>');
toLowerCase() !== '<STR_LIT>') {
<NUM_LIT>) {
push('<STR_LIT>', schema);
name;
length === <NUM_LIT>) {
schema));
if interfaces;
output += `<STR_LIT>`;
true,
`<STR_LIT>`;
`<STR_LIT>`;
else {
return retval;
r) {
if (showXLabel) {
chartWidth = chartWidth / <NUM_LIT>;
else if (legendType === '<STR_LIT>') {
Math.floor(chartWidth);
}
chartWidth -= offset;
return typeof value === '<STR_LIT>';
groups, all),
const column: any of columns) {
null || value === undefined;
row: any = rows[i];
comp: any;
reverse) {
end: row.length - <NUM_LIT>
range = {
return selectedIndex;
obj, args, context);
method.accessType !== '<STR_LIT>') {
if (param.type === '<STR_LIT>') {
any[] = [];
if (!params) {
{
return method.name;
modelName;
pager: string = `<STR_LIT>`;
replace('<STR_LIT>', currentPage).replace('<STR_LIT>', '<STR_LIT>');
function (let i: number = <NUM_LIT>; i < pageCount; i++) {
if {
leftEllipsis = true;
minWidth;
end; p++) {
rightEllipsis) {
arr);
end; start++) {
number = <NUM_LIT>; i < arr.length; i++) {
"<STR_LIT>"]), [<NUM_LIT>, <NUM_LIT>, <NUM_LIT>]);
"<STR_LIT>"], "<STR_LIT>"), <NUM_LIT>);
object.flatten([<NUM_LIT>, <NUM_LIT>]), [<NUM_LIT>, <NUM_LIT>]);
<NUM_LIT>],
range(<NUM_LIT>, <NUM_LIT>), [<NUM_LIT>, <NUM_LIT>]);
assert.strictEqual(string.unique("<STR_LIT>"), "<STR_LIT>");
});
true);
(): void => {
const result: string = "<STR_LIT>";
<NUM_LIT>) {
c3 < <NUM_LIT> || c2 < <NUM_LIT>)
i++)) : -<NUM_LIT>;
return /^[-+]?\d+(?:\.\d*)?$/.test(value);
value);
strictEqual(url.isUrl("<STR_LIT>"), true);
any = toHSL(color);
keys: string[] = Object.keys(roots);
g: number = me.g / <NUM_LIT>;
currency Date("<STR_LIT>")), "<STR_LIT>");
strictEqual(currency.sub(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
Date(+date + value * <NUM_LIT>);
new Date(+date + value * <NUM_LIT>);
Date("<STR_LIT>"), <NUM_LIT>), +new Date("<STR_LIT>"));
addWeek(new Date("<STR_LIT>"), <NUM_LIT>), +new Date("<STR_LIT>"));
new Date("<STR_LIT>")), true);
slen: number = end - value.length;
<NUM_LIT>), "<STR_LIT>");
value);
neg) {
<NUM_LIT> + j);
<NUM_LIT> - c.charCodeAt(<NUM_LIT>)) * <NUM_LIT> + b));
false);
object.getSource(null), "<STR_LIT>");
<NUM_LIT>);
assert.strictEqual(html.decodeHTML("<STR_LIT>"), "<STR_LIT>");
return value.replace(/&/g, '<STR_LIT>').replace(/</g, '<STR_LIT>').replace(/>/g, '<STR_LIT>');
let i: number = <NUM_LIT>; i < len; i++) {
return binaryToString(md5ToBytes(value));
<NUM_LIT>;
length !== value.length) {
bkey[i] ^ <NUM_LIT>;
'<STR_LIT>';
"<STR_LIT>";
indexOf("<STR_LIT>");
integerPart = integerPart.slice(<NUM_LIT>, integerDights.length - <NUM_LIT>);
<NUM_LIT>; i--) {
max(min, num));
floor(Math.random() * (max - min + <NUM_LIT>)) + min;
null), true);
strictEqual(check.isNumber("<STR_LIT>"), true);
<NUM_LIT>), <NUM_LIT>);
iterable as any)[i] as T;
else {
return i;
indexer) {
obj.hasOwnProperty(key)) {
Object.prototype.hasOwnProperty.call(obj, key)) {
iterable) {
<NUM_LIT>] }), {
}
assert.strictEqual(all, "<STR_LIT>");
"<STR_LIT>"], (v: string): void => {
<NUM_LIT>, <NUM_LIT>], function (n, i) {
<NUM_LIT>], function (v, i) {
"<STR_LIT>");
equal(true, true);
map([<NUM_LIT>, <NUM_LIT>], function (item) {
assert.strictEqual(object.reduce([<NUM_LIT>, <NUM_LIT>], function (x: number, y: number) {
foo: number[] = [<NUM_LIT>, <NUM_LIT>];
"<STR_LIT>");
assert.strictEqual(object.type("<STR_LIT>"), "<STR_LIT>");
strictEqual(object.type(null), "<STR_LIT>", "<STR_LIT>");
strictEqual(object.type(<NUM_LIT>), "<STR_LIT>", "<STR_LIT>");
object.type("<STR_LIT>"), "<STR_LIT>", "<STR_LIT>");
RegExp("<STR_LIT>")), "<STR_LIT>", "<STR_LIT>");
string[] = path.split('<STR_LIT>');
string = parts[<NUM_LIT>];
string = paths[i];
"<STR_LIT>", d: "<STR_LIT>" }), "<STR_LIT>");
y + rect.height;
height: <NUM_LIT> }), {
return Object.prototype.toString.call(obj) === '<STR_LIT>';
test("<STR_LIT>"), true);
child.length) {
let match: string = matchResult[i];
null), "<STR_LIT>");
<NUM_LIT>, <NUM_LIT>].every(function (item) {
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>].filter(function (item) {
<NUM_LIT>, <NUM_LIT>].includes(<NUM_LIT>), true);
"<STR_LIT>"], ["<STR_LIT>", "<STR_LIT>", "<STR_LIT>"], "<STR_LIT>");
x + y; }), <NUM_LIT>);
leading: number = match.index + match[<NUM_LIT>].length;
str = t.join("<STR_LIT>");
string.containsWord("<STR_LIT>", "<STR_LIT>"), true);
null), true);
<NUM_LIT>), "<STR_LIT>");
toCamelCase("<STR_LIT>"), "<STR_LIT>");
"<STR_LIT>");
if (c === '<STR_LIT>') {
push(c);
<NUM_LIT>);
return Math.pow(x, <NUM_LIT>);
iconv.decode(toNodeEncoding(value));
decodeUTF8("<STR_LIT>"), "<STR_LIT>");
else {
key: string in formElem) {
name === '<STR_LIT>') {
const k: string of Object.keys(result)) {
const value: string = option.value;
"<STR_LIT>":
name, input.checked ? "<STR_LIT>" : "<STR_LIT>");
of input.files as any as File) {
const key: string in result) {
append(key, item);
}
any = getCookie(name);
<NUM_LIT>, -<NUM_LIT>), expires, path, domain, secure);
let days: number = start.getDate();
insert(node, content, true, true);
node, content, true);
return walk(node, selector, "<STR_LIT>");
return elem.ownerDocument.defaultView.getComputedStyle(elem).html;
indexOf(className) !== -<NUM_LIT>;
indexOfListener(listeners[i], listener, scope);
parentNode) !== null) {
content, true);
elem as any)[attrName] = value;
elem as any)[attrName] = value;
"<STR_LIT>"]) {
any = window.location.href;
in window)) {
}
var
mouseEnter(e);
timer) {
}, false);
'<STR_LIT>');
scrollable);
y;
width + offset;
<NUM_LIT>) {
y != null) {
countOfPoints(elem);
setScroll(elem, value);
deltaY)) {
}
(<any>require).toUrl(url);
pathname,
location.hostname,
anchor.protocol ? "<STR_LIT>" : "<STR_LIT>",
port: <NUM_LIT> });
options.method : '<STR_LIT>';
SLASH);
'<STR_LIT>') ? `<STR_LIT>` : uri;
uri;
r: FetchResult): void => {
result: FetchResult | undefined;
setTimeout((): void => {
return new Response(result.response.data, result.response.responseInit);
{
query),
'<STR_LIT>',
fileId
this.delete<null>(`<STR_LIT>`, {
this.delete<object>(`<STR_LIT>`);
this.get<PostSchema>(`<STR_LIT>`, query);
get<ProjectSchema[]>(`<STR_LIT>`, query);
query: query
'<STR_LIT>']
'<STR_LIT>']
post<any>(`<STR_LIT>`, {
`<STR_LIT>`, patch);
const headersObj: any = {
count,
recent;
if (!myRecent) {
path.length - <NUM_LIT>) !== '<STR_LIT>') {
JSON.parse(JSON.stringify(a));
fetch;
<NUM_LIT>) {
temp = array[index];
boolean = false;
current: Node[] = [];
idSTR_LIT>' + nodeId;
nextNode: Node = network[layerIdx + <NUM_LIT>][j];
CanvasRenderingContext2D = canvas.getContext("<STR_LIT>");
width, d.height);
get("<STR_LIT>")).append("<STR_LIT>")
Maximize) {
state.problem !== Problem.CLASSIFICATION) {
i];
node();
'<STR_LIT>',
prop, '<STR_LIT>')) {
direction);
storedLanguage;
return new D3StyleLayoutAdaptor();
y);
var
{
return c;
a = c;
else {
else {
var i: number = <NUM_LIT>; i < a.length && i < b.length; i++) {
length));
la);
Math.min(m.length, n.length);
true);
var tl: number = ti.x - s.x;
number = arg.indexOf('<STR_LIT>');
target.directory);
exit(<NUM_LIT>);
stringify(location);
line === b.range.start.line
unbind(TreeServices);
return child;
ITView).toSelf();
nls.localize('<STR_LIT>', "<STR_LIT>"));
'<STR_LIT>' : '<STR_LIT>',
true;
return new RemoteServer(worker, target);
worker, target);
checkParentAlive();
toSelf();
bind(FileSystem).toDynamicValue((ctx: any): FileSystem => {
return
resolve, time));
get(ProblemWidget);
bind(PreferenceContributionProvider).toSelf().inSingletonScope();
'<STR_LIT>');
for (const prop: Extract<keyof T, string> in properties) {
mixin({
if actual: Environment[] = [];
name).length === length;
suite: Suite = createSuite(method, options);
method].add(dfd);
callback(thrownError);
promise;
thrownError;
if (!finished) {
suite.tests.push(test);
if (!finished) {
push(test);
Error('<STR_LIT>'));
match(suite.error!.stack, new RegExp('<STR_LIT>' + method + '<STR_LIT>'), '<STR_LIT>' + method);
url);
options === '<STR_LIT>') {
options !== '<STR_LIT>') {
typeof options !== '<STR_LIT>') {
method === '<STR_LIT>');
true,
options.maxRedirects !== false,
maxRetries,
err) {
reject(err);
try {
});
function () {
dbName);
username + '<STR_LIT>' + databaseName;
properties.$add('<STR_LIT>', prop);
result: string = matcher(path);
call(params, key)) {
key + "<STR_LIT>");
SEGMENT_REG, encodeURIComponent);
if (queryParams) {
const
number = csDragImage.getAttribute("<STR_LIT>");
return;
const
pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);
touchIdentifier) {
const (cs[i].getPropertyValue('<STR_LIT>') === '<STR_LIT>') {
setProperty('<STR_LIT>', '<STR_LIT>');
removeAttribute("<STR_LIT>");
ev, handler);
clientWidth : el.scrollWidth;
_
height);
scrollBounds.scrollX) || (currentScrollOffset >= scrollBounds.scrollHeight);
requestAnimationFrame((): void => {
className.indexOf(cssClassName) !== -<NUM_LIT>;
element.className.replace(cssClassName, '<STR_LIT>');
false;
label);
let new Deferred();
needle.length) == needle;
constructor, key, transformFn, options);
return classTransformer.classToClassFromExist(object, fromObject, options);
iocContainer;
ValidationTypes.ALLOW,
target: object.constructor,
target: object.constructor,
ValidationTypes.IS_DATE,
constructor,
target: object.constructor,
target: object.constructor,
object.constructor,
object.constructor,
constructor,
ValidationTypes.CONFIG_VALIDATION,
as ValidatorConstraintInterface;
validationArguments);
return `<STR_LIT>`;
return true;
options.target,
instance;
throw error;
type: options.type,
"<STR_LIT>",
{
else
return directories.map(loadFileClasses);
dtsExtension) !== -<NUM_LIT>;
clazz.new();
return {
return Math.abs(a - b);
array[i], result);
<NUM_LIT>) === '<STR_LIT>') {
version = undoVersion;
input = undoInput;
if (isCompletion) {
if {
`<STR_LIT>`;
filename);
value === '<STR_LIT>' ? [value] : value.split('<STR_LIT>');
charAt(<NUM_LIT>).toUpperCase() + str.slice(<NUM_LIT>);
'<STR_LIT>');
<NUM_LIT>) {
unicode }));
i < count; i++) {
args), expected);
substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
floor(b + (b * amount)), MAX);
toString(<NUM_LIT>);
'<STR_LIT>';
App, {
now;
progress / duration, newValue, oldValue, c, d);
key];
newLanguage: Language): void => {
newLanguages)
`<STR_LIT>`);
if (globalOptions) {
beautifierOptions) {
beautifierOptions === "<STR_LIT>") {
any = beautifierOptions;
options.push({
register("<STR_LIT>", {
let result: string = source;
fetchJSON('<STR_LIT>', undefined, true);
return false;
USER:
localGrantsAccessToRemote = false;
break;
true;
break;
KeyVerify(peerPubKey, delegate);
h: HashPair = new HashPair();
Buffer(val, '<STR_LIT>');
try {
test(lang);
buffer)[<NUM_LIT>];
bytes: Uint8Array = new Uint8Array(buffer);
address: info.localAddress,
if (typeof info.remoteAddress == '<STR_LIT>' &&
port: info.peerPort
data);
name, (): void => {
byteArray);
byteArray.subarray(<NUM_LIT>)
<NUM_LIT>) {
r.arguments != '<STR_LIT>' ||
r).length < <NUM_LIT>) {
index];
return items.reduce((acc: number, item: number): number => acc + item, <NUM_LIT>);
return {
id));
emit('<STR_LIT>', endpoint);
close();
signal);
borderColor: rgba(colors, <NUM_LIT>),
index];
nodeType || (node.nodeName && node.nodeName.toLowerCase())));
return
'<STR_LIT>'],
'<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>',
`<
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'],
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>'],
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>'],
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>'],
<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>'],
}
this, change[i][<NUM_LIT>]);
text.replace(/"/g, '<STR_LIT>');
return input.replace(TAG_REG, '<STR_LIT>');
forEach((key: string): void => {
'<STR_LIT>'
return value.trim();
number = <NUM_LIT>;
return (date: Date): string => {
current = last.add(<NUM_LIT>);
}
return {
moment: current,
cb);
cssClass: '<STR_LIT>'
case '<STR_LIT>':
if (ua.indexOf('<STR_LIT>') > -<NUM_LIT>) {
rv)), <NUM_LIT>);
indexOf('<STR_LIT>') > <NUM_LIT>) {
<NUM_LIT>) {
'<STR_LIT>';
as HTMLInputElement;
'<STR_LIT>');
files: any): void => {
payload });
<NUM_LIT>) + <NUM_LIT>;
role && p1.color === p2.color;
piece.key === key && state.pieces[key] !== undefined;
dests = undefined;
pieces[dest] ||
state.turnColor = '<STR_LIT>';
state.movable.color =
config.enabled) {
}
config.hasOwnProperty('<STR_LIT>')) {
e.preventDefault();
orig !== '<STR_LIT>')
cur.started = true;
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
case '<STR_LIT>':
break;
tagName === '<STR_LIT>';
("<STR_LIT>" + p.color).toLowerCase();
style.top = pos[<NUM_LIT>] + '<STR_LIT>';
pos[<NUM_LIT>]),
xs.indexOf(x) !== -<NUM_LIT>;
key === key) {
askWorker(worker, {
"<STR_LIT>".replace(/[xy]/g, function (c) {
var editor: IEditor = <IEditor>eventData.object;
pieces[<NUM_LIT>]));
return request<string>(url, '<STR_LIT>', opts, feedback);
languageService.getAvailableLanguages();
return config.language;
console.log('<STR_LIT>');
uiviewer.remove();
isPatron };
!analyseMode(data);
data.clock);
for (const move: string in possibleMoves) {
'<STR_LIT>';
'<STR_LIT>';
withRating ? '<STR_LIT>' : '<STR_LIT>');
status.id >= ids.abort;
VariantKey = key.variant;
key];
getPools();
<NUM_LIT>);
}
{
}
window.cordova.plugins.sentry.on('<STR_LIT>', (): void => {
case "<STR_LIT>":
break;
case '<STR_LIT>':
body, `<STR_LIT>`);
}
then((): void => {
<NUM_LIT>) {
catch((err: any): void => {
}
if (v === false)
else
'<STR_LIT>');
'<STR_LIT>',
'<STR_LIT>',
return JSON.stringify({
rootFeedUrl);
redirectTo)
encodeURIComponent(obj.cookie.domain),
join('<STR_LIT>');
k);
<NUM_LIT>) {
Promise.resolve(text);
data: AnalyseDataWithTree): void => {
p.color === '<STR_LIT>' || p.color === '<STR_LIT>';
<NUM_LIT> ? evalWinningChances(ev.mate) : <NUM_LIT>;
color === e1 ? <NUM_LIT> : -<NUM_LIT>) * (e2 - e1);
icon,
'<STR_LIT>': '<STR_LIT>',
oncreate: helper.ontap((): void => {
game.id;
h('<STR_LIT>', fb),
movable: HTMLElement | null = getMovable(movelist);
<NUM_LIT>;
a === null;
return
<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);
menu
h('<STR_LIT>', [
classes: number = checkCount.white + checkCount.black;
availTabs),
if h('<STR_LIT>', {
View, {
ctrlCount) :
key = '<STR_LIT>';
variantVariants;
key: '<STR_LIT>',
'<STR_LIT>': '<STR_LIT>'
map((v: [
moveCentis.map((ci: number): Mithril.Vnode<any, any> => {
height: moveCentis.length
View, {
'<STR_LIT>') : '<STR_LIT>');
el.tagName !== '<STR_LIT>')
ply, withDots));
isMainline: true,
isOpen)
'<STR_LIT>'
h('<STR_LIT>', {
h('<STR_LIT>', {
menu.open);
key: '<STR_LIT>',
key: '<STR_LIT>',
[
orientation });
'<STR_LIT>';
{
style
mode, {
ontap((): void => {
const cl: string of classes) {
'<STR_LIT>' :
newanimo(el, '<STR_LIT>', <NUM_LIT>, '<STR_LIT>')
HTMLElement = <HTMLElement>e.target;
screenInnerWidth < <NUM_LIT>;
return `<STR_LIT>`;
doc: Document = document;
clientHeight
API.DailyPuzzles);
showKeyboard(e);
addEventListener('<STR_LIT>', onKeyboardShow);
})
{
startingX: <NUM_LIT>,
if.addEventListener('<STR_LIT>', (): void => {
on('<STR_LIT>', (): void => {
e.target.id);
const
maxSlide;
isScrolling)
if velocityY: any = e.velocityY;
translateMenu(el, e.deltaX);
resolve()
'<STR_LIT>', '<STR_LIT>', <NUM_LIT>),
Promise.resolve();
false,
TouchInput,
'<STR_LIT>',
threshold: <NUM_LIT>,
target as HTMLElement).classList.contains('<STR_LIT>')) {
target.className.startsWith('<STR_LIT>')) {
mc.current);
newammer.TouchEnd, (): void => {
delta: any = e.deltaY;
delta
<NUM_LIT>, onFlag);
'<STR_LIT>'
key: '<STR_LIT>'
requestAnimationFrame((): void => {
if (p === <NUM_LIT>) {
overflow = overflow;
removeChild(ta.lastChild);
overflow = '<STR_LIT>';
if (chat)
<NUM_LIT>) {
<NUM_LIT>;
toFixed(length).substr(<NUM_LIT>);
ta)
return fetchJSON('<STR_LIT>', {
<NUM_LIT>] as Tree.BranchingNode).hasBranching();
node.children[<NUM_LIT>];
return path.split('<STR_LIT>').length;
fen,
orientation,
[
t('<STR_LIT>'))
h('<STR_LIT>', {
onsubmit: helper.ontap((): void => {
if (exists) {
'<STR_LIT>',
h('<STR_LIT>', [
h('<STR_LIT>', {
className: formError && formError.password ? '<STR_LIT>' : '<STR_LIT>',
'<STR_LIT>' : '<STR_LIT>',
return;
if fen: string | undefined = d.fen;
variant.key) !== -<NUM_LIT>;
width = vw;
<NUM_LIT>;
if (vw >= <NUM_LIT>)
<NUM_LIT>;
oncreate: helper.ontap((): void => {
then((response: Response): Promise<PuzzleData> => response.json());
method: '<STR_LIT>',
true);
if (isLoadingNextPage) {
false);
res;
setNewUserState
},
undefined;
method: '<STR_LIT>' });
return fetchJSON(`<STR_LIT>`, undefined, true);
'<STR_LIT>' });
'<STR_LIT>' ? san.slice(<NUM_LIT>) : san;
num_LIT>, <NUM_LIT>)];
uci.indexOf("<STR_LIT>") + <NUM_LIT>);
castles: parts[<NUM_LIT>],
enpassant: parts[<NUM_LIT>],
then((res: import("<STR_LIT>").FileEntry): void => {
RouterResponse = {
'<STR_LIT>' : '<STR_LIT>';
while (s.length < size)
number = parseFloat(s);
string[] = fullName.split('<STR_LIT>');
switch (code) {
const aIGame: StoredOfflineGame | null = storage.get<StoredOfflineGame>(aiStorageKey);
game);
'<STR_LIT>':
case:
window).navigator.maxCores || <NUM_LIT>;
return uci960p;
{
<NUM_LIT>,
string = config.key;
var deleteId: any = record[key];
i: number = <NUM_LIT>;
i) {
key);
any = record[key];
newRecords[indexMap[recordId]] = record;
record);
unsaved: true,
true,
"<STR_LIT>"
"<STR_LIT>"
name: "<STR_LIT>"
"<STR_LIT>"
deps);
current, record);
unsaved: true,
unsaved: true,
return [
str
floor(new Date().getTime() + Math.random() * <NUM_LIT>)).toString();
if (Object.prototype.hasOwnProperty.call(obj, name)) {
newAttr: string = item.replace(attr, '<STR_LIT>');
i];
return newConfigs;
item,
guide().line({
style(style[<NUM_LIT>]);
return chart.style(style);
return Math.floor(Math.random() * max);
slot]];
this DateComparator());
"<STR_LIT>" })).toBeLessThan(<NUM_LIT>);
false);
this.comparator.compare({
this.comparator.compare({
a: <NUM_LIT> }, {
a: <NUM_LIT> })).toBe(<NUM_LIT>);
beforeEach(function () {
stateDebouncer);
expect(component.state).toBe(<NUM_LIT>);
open = true;
function () {
null;
toEqual(true);
function () {
filterService.getActiveFilters(), function () {
detectChanges();
function () {
trim()).toMatch("<STR_LIT>");
toMatch("<STR_LIT>");
expect(context.clarityElement.textContent.trim()).toBe("<STR_LIT>");
toggle.textContent.trim()).toBe("<STR_LIT>");
context = this.create(ClrDatagridColumn, HideableTest, [Column]);
expect(context.clarityElement.textContent.trim()).toMatch("<STR_LIT>");
active).toBe(true);
buttonClicked: any;
declarations: [TestComponent] });
afterEach((): void => {
describe("<STR_LIT>", (): void => {
beforeEach(function () {
let(function () {
null;
expect(testMe.alertType).toBe("<STR_LIT>");
"<STR_LIT>";
}
expect(testMe.alertType).toBe("<STR_LIT>");
"<STR_LIT>";
testShape("<STR_LIT>"));
expect(testCssClass(null)).toBe("<STR_LIT>");
function () {
null);
null);
function () {
null);
testCssClass("<STR_LIT>")).toBe("<STR_LIT>");
toBe("<STR_LIT>");
null);
toBeTruthy("<STR_LIT>");
FormControlService();
true, "<STR_LIT>");
null;
navStable).toBe(true);
testVal = val;
toBe(false);
testVal = val;
expect(vertNavService.collapsed).toBe(true);
configureTestingModule({
fixture.detectChanges();
it("<STR_LIT>", (): void => {
if (direction === "<STR_LIT>") {
function () {
this.fixture.detectChanges();
componentInstance;
function () {
true;
run();
<NUM_LIT>);
change;
testComponent.openState = false;
expect(this.testComponent.open).toEqual(true);
fixture.componentInstance;
this.fixture.destroy();
it("<STR_LIT>", function () {
testComponent] });
destroy();
scrollTop || el.clientTop;
this.testComponent = this.fixture.componentInstance;
By.directive(VirtualForOf));
remaining -= step;
remaining -= step;
scrollEvent);
function (this: TestContext) {
this.clarityDirective.name);
this () {
textContent.trim()).toEqual("<STR_LIT>");
<NUM_LIT>, <NUM_LIT>];
undefined
this.scroll(<NUM_LIT>);
beforeEach(function () {
pagesAsArray).toEqual([]);
toString();
expect(nonExistingPageId).toEqual(firstPageIdNumber);
clearPage();
"<STR_LIT>");
const firstPageId: any = context.clarityDirective.pages.first.id;
const firstPageId: any = context.clarityDirective.pages.first.id;
slice(<NUM_LIT>, <NUM_LIT>));
});
null, <NUM_LIT>)).toEqual([]);
pageCollectionService.lastPage), pageCollectionService.lastPage))
toEqual(<NUM_LIT>);
getPageByIndex(<NUM_LIT>));
expect(pageCollectionService.getPreviousPage(pageCollectionService.lastPage))
firstPage: any = context.clarityDirective.pages.first.id;
length).toBe(<NUM_LIT>);
testPage);
false);
true;
testPage.completed).toBe(true);
function () {
context.detectChanges();
completed).toBe(true);
false);
it("<STR_LIT>", function () {
<NUM_LIT>));
push(pageCollectionService.getPageByIndex(<NUM_LIT>));
page () {
getPageByIndex(<NUM_LIT>));
push(pageCollectionService.getPageByIndex(<NUM_LIT>));
getPageByIndex(<NUM_LIT>).completed).toBe(true, "<STR_LIT>");
"<STR_LIT>");
firstPage.completed = true;
firstPage.completed).toBe(true, "<STR_LIT>");
segments[<NUM_LIT>];
vscode.workspace.getConfiguration('<STR_LIT>'));
return;
args;
};
vsicons.projectDetectionAutoReloadSetting, true, true);
message, "<STR_LIT>", callback).then((res: any): void => {
'<STR_LIT>');
'<STR_LIT>');
models.PresetNames.jsonOfficial, '<STR_LIT>');
folders.default.folder_transparent) {
return collection;
key]
isArray(newValue)
boolean = Array.isArray(newValue)
statSync(curPath).isDirectory()) {
return paths
new Error(`<STR_LIT>`);
toDirName == null) {
throw new Error(`<STR_LIT>`);
join(...paths);
return join(app.getPath("<STR_LIT>"), "<STR_LIT>");
targets: true });
isAtEof) {
optionName.length === <NUM_LIT>) {
operator) {
optionArgs.operator = node.SetOptionOperator.Pow;
default:
break;
break;
parseInt(countStr);
tab: node.Tab.Close,
onDidChangeActiveTextEditor((editor: any): void => {
editor: any): void => {
return (trigger) {
JSON.stringify({
languageId) === -<NUM_LIT>) {
options.convertTabsToSpaces,
scriptSnapshot, textChangeRange, aggressiveChecks);
scriptKind;
modifyVueSource(sourceFile);
ScriptKind.TSX : ts.ScriptKind.Unknown;
version: any = packageJSON['<STR_LIT>'];
e: any) {
includes('<STR_LIT>');
return getMode('<STR_LIT>', documentRegions);
lineno]);
if (!block) {
needBlock) {
children.concat(root.nodes);
return null;
`<STR_LIT>`;
offset);
tag.trim();
comp.definition;
any = document.offsetAt(position);
return false;
return false;
definition: Definition[] = [];
positionAt(scanner.getTokenOffset())
if definition: Definition = getTagDefinition(tag, range, false);
endOffset: any = currRange.end;
positionAt(value.length));
TokenType.EOF) {
true,
get: RouterTag,
tag, attribute, collector, []);
VUE_TAGS),
vueDirectives);
doc.offsetAt(<NUM_LIT>));
documentUri).fsPath;
string = formatCode(prettierifiedCode);
request) {
return Promise.reject(err);
err ? <NUM_LIT> : <NUM_LIT>);
error) {
map((file: any): any => {
shiny),
Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) },
arguments);
log("<STR_LIT>", arguments);
new Vector(<NUM_LIT>, <NUM_LIT>, -<NUM_LIT>), <NUM_LIT>, Surfaces.shiny),
<NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) },
new Vector(<NUM_LIT>, <NUM_LIT>, -<NUM_LIT>), <NUM_LIT>, Surfaces.shiny),
new Vector(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), color: new Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) },
key.startsWith('<STR_LIT>') ? key.substr(<NUM_LIT>) : key;
error;
options) {
remove(name));
return exists(name + '<STR_LIT>');
file).slice(-<NUM_LIT>));
return obj && obj.isFile();
Boolean(element);
json, type);
return;
metadata.deserializedType = type;
type)
Number(element);
new Error(`<STR_LIT>`);
false;
k])
parser.nodeToBoundaries(variable, start);
id, start: blockStart } = block;
node.endOffset];
elem, children] = handleArgs(args);
return val.kind === '<STR_LIT>';
return (typeof value) {
formats.length +
EAVRCTuple = expecteds[input.index];
transactionNumber++;
of imported.localSymbols) {
importedKeyframes: Imported[] = imported.keyframes;
true;
m1Id === m2Id) {
const path: any = normalize(generatorPath);
absoluteGeneratorPath);
hooks: {
diagnosticsManager,
constHandler.register(identifier, buildOptions);
const (hasFatalDiagnostic) {
diagnosticsManager,
instanceof SyntaxError ? error : (error as Error);
return (config as MultipleProjectsConfig<string>).projects !== undefined;
const (entities.length === <NUM_LIT>) {
'<STR_LIT>');
has) {
`<STR_LIT>`;
<NUM_LIT>,
if {
outFilePath: any = path.join(outDir, '<STR_LIT>');
defaultOptions,
atRule: any): void => {
});
value, '<STR_LIT>');
customTypes, boxPrimitive);
value);
'<STR_LIT>';
i] === parentChain[i - <NUM_LIT>]) {
as SelectorAstNode;
node: any): void => {
shouldOutput = false;
symbol._kind === '<STR_LIT>')) {
symbol._kind === '<STR_LIT>') {
true;
parent: number = <NUM_LIT>;
alias.alias;
context,
symbol, meta);
atRule } = data;
return STSymbol.getAllByType(meta, `<STR_LIT>`);
resolvedType === `<STR_LIT>`) {
{
handleJSMixin(context, config, resolvedMixin.symbol);
word: config.mixin.name,
type,
CANNOTLICATE_NAMESPACE(name), {
name] = node;
node) {
getUnsafe(meta.data, dataKey);
symbols) {
name] = [...flat[name], symbolDecl];
word: name,
length > <NUM_LIT> && value.charAt(<NUM_LIT>) === '<STR_LIT>';
replace(/['"]/g, (s: string): string => ({
entries(keyframess));
as);
const
decl);
type = '<STR_LIT>';
upperCasePattern, '<STR_LIT>');
const arg: any of node.args) {
currentArg = currentNode.value;
push('<STR_LIT>');
currentArg +=
value;
pop();
current.push(n);
push(n);
length > <NUM_LIT>)) {
extensions,
res.error) {
undefined;
if (options.lineBreak === true) {
forEach(handleReport);
diagnosticsMode) {
error);
emitError(error);
return url.endsWith('<STR_LIT>');
url.indexOf("<STR_LIT>") !== -<NUM_LIT>;
first.type === `<STR_LIT>`) {
RegExpMatchArray = className.match(validClassNameRegEx);
decl.type === '<STR_LIT>'
config.resolver);
const
const stylablePath: any = entry.stylablePath;
result (expectedParams) {
prefix));
if (typeof css === '<STR_LIT>') {
<NUM_LIT>]));
responses.filter((response: Response): boolean => {
replace(/[\-\[\]\/\{
'<STR_LIT>') {
modPath, cliArgs, {
cli
content);
compiler, cache);
if (!stylable) {
string = text.substr(posChar, char1.length);
valueLabel, '<STR_LIT>', '<STR_LIT>', new Snippet('<STR_LIT>'), rng);
res++;
i] === '<STR_LIT>') {
filePath);
diagnostics.map((diagnostic: Diagnostic): Diagnostic => {
`<STR_LIT>`,
null,
if (requiredHinting === true) {
state: string | boolean | null = null;
state: any = nodes.find((node: any): boolean => node.type === '<STR_LIT>');
requiredHinting };
length;
stateNodes.length) {
stateTypeValidatorToHint) {
<NUM_LIT>;
return
let src.indexOf(position.character);
<NUM_LIT>, src);
new Stylable({
request);
isNumberDelimiter,
getNewLineKind: getNewLineKind,
if (stStates) {
currentClass.parent;
of stateEntries.entries()) {
targetName) {
res = cls.sourcePosition;
runtime
'<
filename === '<STR_LIT>') {
prevHook) {
[
type === '<STR_LIT>').length > <NUM_LIT>) {
`<STR_LIT>`;
[],
meta: exports.meta,
meta,
if (renderer) {
if (stateClass) {
stateValue) {
true) {
if (typeof item === '<STR_LIT>') {
else {
name: string in item) {
if (stateClass) {
classNames.length] = stateClass;
boolean = false;
(stateName || stateMiddleDelimiter);
return namespace + booleanStateDelimiter + stateName + param;
param +
'<STR_LIT>' +
stateValue === undefined ||
stateName);
arg: any = arguments[i];
if
in stateMapping) {
stateClass) {
toBe(value);
symbol._kind === '<STR_LIT>') {
const parent: any = node.parent;
if (!docs) {
basePath), '<STR_LIT>')
else {
`<STR_LIT>`
entryOptions: {
childCompiler);
compilation.tap('<STR_LIT>', (): void => {
'<STR_LIT>') {
out.set(meta, []);
out.set(meta, resolved);
return {
namespaceMapping,
if (!hash) {
line === ruleA.source?.start?.line &&
name)
name);
getNative(node.value)
name);
kind === '<STR_LIT>') {
imported.request.endsWith('<STR_LIT>')) {
indexOf(resolvedPath) === -<NUM_LIT>);
if (replacements.has(token)) {
return (config &&
namespaceMapping[namespace] === undefined) {
module]));
mapping: []
if (value === undefined) {
return '<STR_LIT>';
current)) {
path.unshift(currentId);
}
if (!meta) {
return module.type === '<STR_LIT>';
webpackConfig.exclude = webpackConfig.exclude || [];
if (environment.production) {
cb });
"<STR_LIT>";
action.payload
ActionTypes.LOGOUT_SUCCESS:
action.payload
return ($elem.length > <NUM_LIT> && $container.length > <NUM_LIT>) {
top_margin;
socketserver = args.socketserver;
ws: any = new WebSocket(wss);
return new Promise<DataBackend>((resolve: (value: DataBackend | PromiseLike<DataBackend>) => void, reject: (reason?: any) => void): void => {
else {
'<STR_LIT>';
db filename: any;
let (options.dbfolder) {
const.on('<STR_LIT>', broadcast);
value: result.value,
'<STR_LIT>' });
else {
error: '<STR_LIT>' });
respond({
client: any = clients[docname];
value });
null });
msg.value);
if (!a) {
!!this.find(term);
if (!addonTerminal.search) {
i++) {
if cached: ICharAtlasEntry = charAtlasCache[i + <NUM_LIT>];
entry.config, newConfig)) {
number = <NUM_LIT>; i < charAtlasCache.length; i++) {
height = height;
fontWeight,
terminal.options.devicePixelRatio,
allowTransparency,
<NUM_LIT>]);
<NUM_LIT>);
el];
removeEventListener(type, handler, capture);
locale;
return e.clientY;
localStorage[key]);
stringify(value);
initialMax < <NUM_LIT>) {
widthPlusOverflow > maxWidth) {
initialMax / <NUM_LIT>);
return maxItems;
...args: any[]): any => {
resolve({
x: string): boolean => x !== '<STR_LIT>' && x !== '<STR_LIT>');
DATE_TIME_FORMAT, "<STR_LIT>")
bucketedBy;
return (input) {
tickDuration: Duration = getBestBucketUnitForRange(range as NumberRange, false) as Duration;
iter++;
value: checkPoint,
if (input.step === <NUM_LIT>) {
i: any): boolean => {
return (let i: number = <NUM_LIT>; i < array.length; i++) {
valueOf(cV) > valueOf(arr[currMax]) ? currMax : cIdx, <NUM_LIT>);
varName];
replace(/[^a-z0-9\-]/g, '<STR_LIT>');
n) / Math.LN10));
key] = source[key];
'<STR_LIT>');
toLowerCase();
any = timezone.now();
new Error('<STR_LIT>');
extra.header);
lines.join('<STR_LIT>') + '<STR_LIT>');
var.push(`<STR_LIT>`);
format);
guard);
d['<STR_LIT>']);
`<STR_LIT>`;
platform } = options;
s;
src).listen(type, listener, capture, scope);
return obj instanceof Function
'<STR_LIT>');
<NUM_LIT>];
reject: reject,
if
arguments.length; i++) {
fiberMgr.isImmediate())
fiberMgr.is FiatingInFiber()) {
yieldWhen) {
var
false,
};
false,
configFileName);
module;
forEach((type: string): void => {
newState: any;
if (action === '<STR_LIT>') {
action === '<STR_LIT>') {
};
navigator['<STR_LIT>'](passProps);
passProps['<STR_LIT>']](passProps);
passProps['<STR_LIT>']](passProps);
passProps['<STR_LIT>']](passProps['<STR_LIT>']);
put({
response.code === <NUM_LIT>) {
response.comments,
'<STR_LIT>', payload);
<NUM_LIT>).toFixed(<NUM_LIT>) + '<STR_LIT>';
yield put({
runAfterInteractions);
put(toastAction('<STR_LIT>', '<STR_LIT>'));
AsyncStorage.removeItem, '<STR_LIT>');
if (!history) {
liElt: HTMLLIElement = document.createElement('<STR_LIT>');
put({
put(playTrackAction({
const put(playTrackAction({
playing.index - <NUM_LIT> === playlist.length ? index - <NUM_LIT> : index
while (<NUM_LIT>) {
playTrack),
takeEvery('<STR_LIT>', clear),
takeEvery('<STR_LIT>', setLyrcis),
ret: any = await request
request
match: any = cookies.get('<STR_LIT>');
await request
request
random() * max);
element.firstChild, html);
else {
const {
await f.align();
Date.now();
for (const face: import("<STR_LIT>").Face of faceList) {
path.sep).pop();
height);
errors.nls.localize('<STR_LIT>', "<STR_LIT>"));
imageData, <NUM_LIT>, <NUM_LIT>);
if (!ctx) {
compilerOptions.module = module;
return [
