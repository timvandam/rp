{"input":"<s> <EOL>export function removeItemFromArray(array, index) {<EOL>    return {<EOL>        item: array[index],<EOL>","gt":"array: ["}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if (","gt":"keys(d).length > <NUM_LIT>) {"}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if ( keys(d).length > <NUM_LIT>) {<EOL>            log.warn(log.message.droppedDay(d));<EOL>            d =","gt":"duplicate(d);"}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if ( keys(d).length > <NUM_LIT>) {<EOL>            log.warn(log.message.droppedDay(d));<EOL>            d =  duplicate(d);<EOL>            delete d.day;<EOL>        }<EOL>    }<EOL>    if (d.year !== undefined) {<EOL>        units.push(d.year);<EOL>    }<EOL>    else if (d.day !==","gt":"undefined) {"}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if ( keys(d).length > <NUM_LIT>) {<EOL>            log.warn(log.message.droppedDay(d));<EOL>            d =  duplicate(d);<EOL>            delete d.day;<EOL>        }<EOL>    }<EOL>    if (d.year !== undefined) {<EOL>        units.push(d.year);<EOL>    }<EOL>    else if (d.day !==  undefined) {<EOL>        // Set year to 2006 for working with day since January 1 2006 is a Sunday<EOL>        units.push(SUNDAY_YEAR);<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>);<EOL>    }<EOL>    if (d.month !== undefined) {<EOL>        const month = normalize ? normalizeMonth(d.month) : d.month;<EOL>        units.push(month);<EOL>    }<EOL>    else if (d.quarter !== undefined) {<EOL>        const quarter =","gt":"normalize ? normalizeQuarter(d.quarter) : d.quarter;"}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if ( keys(d).length > <NUM_LIT>) {<EOL>            log.warn(log.message.droppedDay(d));<EOL>            d =  duplicate(d);<EOL>            delete d.day;<EOL>        }<EOL>    }<EOL>    if (d.year !== undefined) {<EOL>        units.push(d.year);<EOL>    }<EOL>    else if (d.day !==  undefined) {<EOL>        // Set year to 2006 for working with day since January 1 2006 is a Sunday<EOL>        units.push(SUNDAY_YEAR);<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>);<EOL>    }<EOL>    if (d.month !== undefined) {<EOL>        const month = normalize ? normalizeMonth(d.month) : d.month;<EOL>        units.push(month);<EOL>    }<EOL>    else if (d.quarter !== undefined) {<EOL>        const quarter =  normalize ? normalizeQuarter(d.quarter) : d.quarter;<EOL>        units.push(quarter + '<STR_LIT>');<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>); // months start at zero in JS<EOL>    }<EOL>    if (d.date !== undefined) {<EOL>","gt":"units.push(d.date);"}
{"input":"<s> <EOL>export function dateTimeExpr(d, normalize = false) {<EOL>    const units = [];<EOL>    if (normalize && d.day !== undefined) {<EOL>        if ( keys(d).length > <NUM_LIT>) {<EOL>            log.warn(log.message.droppedDay(d));<EOL>            d =  duplicate(d);<EOL>            delete d.day;<EOL>        }<EOL>    }<EOL>    if (d.year !== undefined) {<EOL>        units.push(d.year);<EOL>    }<EOL>    else if (d.day !==  undefined) {<EOL>        // Set year to 2006 for working with day since January 1 2006 is a Sunday<EOL>        units.push(SUNDAY_YEAR);<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>);<EOL>    }<EOL>    if (d.month !== undefined) {<EOL>        const month = normalize ? normalizeMonth(d.month) : d.month;<EOL>        units.push(month);<EOL>    }<EOL>    else if (d.quarter !== undefined) {<EOL>        const quarter =  normalize ? normalizeQuarter(d.quarter) : d.quarter;<EOL>        units.push(quarter + '<STR_LIT>');<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>); // months start at zero in JS<EOL>    }<EOL>    if (d.date !== undefined) {<EOL>         units.push(d.date);<EOL>    }<EOL>    else if (d.day !== undefined) {<EOL>        // HACK: Day only works as a standalone unit<EOL>        // This is only correct because we always set year to 2006 for day<EOL>        const day = normalize ? normalizeDay(d.day) : d.day;<EOL>        units.push(day + '<STR_LIT>');<EOL>    }<EOL>    else {<EOL>        units.push(<NUM_LIT>); // Date starts at 1 in JS<EOL>    }<EOL>    // Note: can't use TimeUnit enum here as importing it will create<EOL>    // circular dependency problem!<EOL>    for (const timeUnit of ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>']) {<EOL>        if (d[timeUnit] !== undefined) {<EOL>            units.push(d[timeUnit]);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export async function handler(context) {<EOL>    const { schemaPath } = await context.getProjectConfig();<EOL>    if (!schemaPath) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const","gt":"relativeSchemaPath = relative(process.cwd(), schemaPath);"}
{"input":"<s> export async function handler(context) {<EOL>    const { schemaPath } = await context.getProjectConfig();<EOL>    if (!schemaPath) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const  relativeSchemaPath = relative(process.cwd(), schemaPath);<EOL>    if (!existsSync(schemaPath)) {<EOL>        console.log(chalk.yellow(\"<STR_LIT>\") +<EOL>            chalk.blue(","gt":"relativeSchemaPath));"}
{"input":"<s> export async function handler(context) {<EOL>    const { schemaPath } = await context.getProjectConfig();<EOL>    if (!schemaPath) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const  relativeSchemaPath = relative(process.cwd(), schemaPath);<EOL>    if (!existsSync(schemaPath)) {<EOL>        console.log(chalk.yellow(\"<STR_LIT>\") +<EOL>            chalk.blue( relativeSchemaPath));<EOL>        return;<EOL>    }<EOL>    const","gt":"extensions = {"}
{"input":"<s> export async function handler(context) {<EOL>    const { schemaPath } = await context.getProjectConfig();<EOL>    if (!schemaPath) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const  relativeSchemaPath = relative(process.cwd(), schemaPath);<EOL>    if (!existsSync(schemaPath)) {<EOL>        console.log(chalk.yellow(\"<STR_LIT>\") +<EOL>            chalk.blue( relativeSchemaPath));<EOL>        return;<EOL>    }<EOL>    const  extensions = {<EOL>        schemaPath: relativeSchemaPath,<EOL>        ...getSchemaExtensions(schemaPath),<EOL>    };<EOL>    const maxLength = _(extensions)<EOL>        .keys()<EOL>        .map('<STR_LIT>')<EOL>        .max();<EOL>","gt":"for (let name in extensions) {"}
{"input":"<s> function carouselHide(slides, indicators, links, active) {<EOL>    indicators[active].setAttribute('<STR_LIT>', '<STR_LIT>');<EOL>    links[active].setAttribute('<STR_LIT>', '<STR_LIT>');<EOL>    slides[active].","gt":"setAttribute('<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function constructLogString(inputLogs) {<EOL>    const outputLogs = [];<EOL>    for (const inputLog of inputLogs) {<EOL>        const type = inputLog.action.type;<EOL>        let payload = inputLog.action.payload;<EOL>        if (type === DATASET_RECEIVE && isInlineData(payload.data)) {<EOL>            // don't output inline data because it might make the log file too big<EOL>            payload = {<EOL>                ...payload,<EOL>                data: { name: '<STR_LIT>' }<EOL>            };<EOL>        }<EOL>        outputLogs.push({<EOL>            timestamp: inputLog.timestamp,<EOL>            ISOString: new Date(inputLog.timestamp).toISOString(),<EOL>","gt":"type,"}
{"input":"<s> <EOL>export function topK(values, k) {<EOL>    const valuesAndIndices = [];<EOL>    for (let i = <NUM_LIT>; i < values.length; i++) {<EOL>        valuesAndIndices.push({","gt":"value: values[i], index: i });"}
{"input":"<s> <EOL>export function topK(values, k) {<EOL>    const valuesAndIndices = [];<EOL>    for (let i = <NUM_LIT>; i < values.length; i++) {<EOL>        valuesAndIndices.push({  value: values[i], index: i });<EOL>    }<EOL>    valuesAndIndices.sort((a, b) => {<EOL>        return b.value - a.value;<EOL>    });<EOL>    const topkValues = new Float32Array(k);<EOL>    const topkIndices = new Int32Array(k);<EOL>    for (let","gt":"i = <NUM_LIT>; i < k; i++) {"}
{"input":"<s> export function watchDigests($rootScope) {<EOL>    $rootScope.","gt":"$watch(function () { trace.approximateDigests++; });"}
{"input":"<s> function logout(reducer) {<EOL>    return function (state, action) {<EOL>        if (action.","gt":"type === '<STR_LIT>') {"}
{"input":"<s> //convert strings like myCamelCase to my_camel_case<EOL>export function UnderscoreCase(str) {<EOL>","gt":"var STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);"}
{"input":"<s> function excludeUndefined(fn) {<EOL>    if (!isShelfFunction) {<EOL>        console.","gt":"warn(`<STR_LIT>`);"}
{"input":"<s> export function configReducer(state = DEFAULT_VOYAGER_CONFIG, action) {<EOL>    switch (action.type) {<EOL>        case SET_CONFIG:<EOL>            const { config } = action.payload;<EOL>            const","gt":"res = {"}
{"input":"<s> export function configReducer(state = DEFAULT_VOYAGER_CONFIG, action) {<EOL>    switch (action.type) {<EOL>        case SET_CONFIG:<EOL>            const { config } = action.payload;<EOL>            const  res = {<EOL>                ...state,<EOL>                ...config,<EOL>            };<EOL>            return","gt":"res;"}
{"input":"<s> function createCollections(db) {<EOL>    let vertexCollectionNames = range(<NUM_LIT>).map(i => `<STR_LIT>`);<EOL>    let edgeCollectionNames = range(","gt":"<NUM_LIT>).map(i => `<STR_LIT>`);"}
{"input":"<s> function getSerializeFnForType(type) {<EOL>    if (type === String) {<EOL>        return serializeString;<EOL>    }<EOL>","gt":"else if (type === Number) {"}
{"input":"<s> function getSerializeFnForType(type) {<EOL>    if (type === String) {<EOL>        return serializeString;<EOL>    }<EOL>     else if (type === Number) {<EOL>        return serializeNumber;<EOL>    }<EOL>    else if (type === Boolean) {<EOL>        return serializeBoolean;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> //helper for grabbing the type and keyname from a multi-type input variable<EOL>function getTypeAndKeyName(keyNameOrType, keyName) {<EOL>    var type = null;<EOL>    var key = null;<EOL>    if (typeof keyNameOrType === \"<STR_LIT>\") {<EOL>        key =","gt":"keyNameOrType;"}
{"input":"<s> //helper for grabbing the type and keyname from a multi-type input variable<EOL>function getTypeAndKeyName(keyNameOrType, keyName) {<EOL>    var type = null;<EOL>    var key = null;<EOL>    if (typeof keyNameOrType === \"<STR_LIT>\") {<EOL>        key =  keyNameOrType;<EOL>    }<EOL>    else if (keyNameOrType && typeof keyNameOrType === \"<STR_LIT>\" || typeof keyNameOrType === \"<STR_LIT>\") {<EOL>        type = keyNameOrType;<EOL>","gt":"key = keyName;"}
{"input":"<s> export function makeRelatedViewQueries(store, query) {<EOL>    const { hasOpenPosition, hasStyleChannel, hasOpenFacet, isSpecAggregate } = getFeaturesForRelatedViewRules(query.spec);<EOL>    if (!isSpecAggregate) {<EOL>        store.dispatch(relatedViewResultRequest(summaries, query));<EOL>    }<EOL>","gt":"if (hasOpenPosition || hasStyleChannel) {"}
{"input":"<s> export function makeRelatedViewQueries(store, query) {<EOL>    const { hasOpenPosition, hasStyleChannel, hasOpenFacet, isSpecAggregate } = getFeaturesForRelatedViewRules(query.spec);<EOL>    if (!isSpecAggregate) {<EOL>        store.dispatch(relatedViewResultRequest(summaries, query));<EOL>    }<EOL>     if (hasOpenPosition || hasStyleChannel) {<EOL>        store.dispatch(relatedViewResultRequest(addQuantitativeField, query));<EOL>    }<EOL>    if (hasOpenPosition || hasStyleChannel || hasOpenFacet) {<EOL>        store.dispatch(relatedViewResultRequest(addCategoricalField, query));<EOL>    }<EOL>    if (","gt":"hasOpenPosition) {"}
{"input":"<s> export function autoAddFieldQuery(shelf, fieldDef) {<EOL>    const spec = toSpecQuery(shelf);<EOL>    spec.encodings.push(toFieldQuery(fieldDef, '<STR_LIT>'));<EOL>","gt":"return {"}
{"input":"<s> function populateContainerWithColor(container, r, g, b) {<EOL>    const originalColorString = '<STR_LIT>' + [r, g, b].join('<STR_LIT>') + '<STR_LIT>';<EOL>    container.","gt":"textContent = originalColorString;"}
{"input":"<s> export async function checkMethod({ method }) {<EOL>    if ([\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].indexOf(method) === -<NUM_LIT>) {<EOL>","gt":"const detail = `<STR_LIT>` +"}
{"input":"<s> function getCurrent() {<EOL>    return [<EOL>        {<EOL>            id: <NUM_LIT>,<EOL>            name: \"<STR_LIT>\",<EOL>            deleted:","gt":"true,"}
{"input":"<s> function getCurrent() {<EOL>    return [<EOL>        {<EOL>            id: <NUM_LIT>,<EOL>            name: \"<STR_LIT>\",<EOL>            deleted:  true,<EOL>            busy: true<EOL>        },<EOL>        {<EOL>            id: <NUM_LIT>,<EOL>            name: \"<STR_LIT>\",<EOL>            deleted:","gt":"true,"}
{"input":"<s> <EOL>export function objectIsEmpty(obj) {<EOL>    for (const key in obj) {<EOL>        if (Object.prototype.hasOwnProperty.call(","gt":"obj, key)) {"}
{"input":"<s> function getCurrent() {<EOL>    return {<EOL>        <NUM_LIT>: {<EOL>            id: <NUM_LIT>,<EOL>            name:","gt":"\"<STR_LIT>\""}
{"input":"<s> function getCurrent() {<EOL>    return {<EOL>        <NUM_LIT>: {<EOL>            id: <NUM_LIT>,<EOL>            name:  \"<STR_LIT>\"<EOL>        },<EOL>        <NUM_LIT>: {<EOL>            id: \"<STR_LIT>\",<EOL>            name:","gt":"\"<STR_LIT>\""}
{"input":"<s> <EOL>export function pseudoTopSort(nodes, edges, roots) {<EOL>    // Do some defensive copying, in case the caller didn't.<EOL>    roots = roots.slice();<EOL>    nodes = nodes.slice();<EOL>    edges = { ...edges };<EOL>    Object.keys(edges).forEach(key => { edges[","gt":"key] = { ...edges[key] }; });"}
{"input":"<s> <EOL>export function pseudoTopSort(nodes, edges, roots) {<EOL>    // Do some defensive copying, in case the caller didn't.<EOL>    roots = roots.slice();<EOL>    nodes = nodes.slice();<EOL>    edges = { ...edges };<EOL>    Object.keys(edges).forEach(key => { edges[ key] = { ...edges[key] }; });<EOL>    // \"L = Empty list that will contain the sorted elements\"<EOL>    const sortResult = [];<EOL>    // \"while S is non-empty do\"<EOL>    while (roots.","gt":"length) {"}
{"input":"<s> function buildFakePlatform(flush) {<EOL>    platform = buildPlatform(flush);<EOL>    platform.","gt":"flushSync = function () {"}
{"input":"<s> export function match(loc1, loc2) {<EOL>    return loc1.scriptUrl ===","gt":"loc2.scriptUrl"}
{"input":"<s> export function shelfSpecFieldAutoAddReducer(shelfSpec, action, schema) {<EOL>    const { fieldDef } = action.payload;<EOL>    if (shelfSpec.anyEncodings.length > <NUM_LIT> || isWildcard(fieldDef.field)) {<EOL>        // If there was an encoding shelf or if the field is a wildcard, just add to wildcard shelf<EOL>        return {<EOL>            ...","gt":"shelfSpec,"}
{"input":"<s> export function shelfSpecFieldAutoAddReducer(shelfSpec, action, schema) {<EOL>    const { fieldDef } = action.payload;<EOL>    if (shelfSpec.anyEncodings.length > <NUM_LIT> || isWildcard(fieldDef.field)) {<EOL>        // If there was an encoding shelf or if the field is a wildcard, just add to wildcard shelf<EOL>        return {<EOL>            ... shelfSpec,<EOL>            anyEncodings: [<EOL>                ...shelfSpec.anyEncodings,<EOL>                {<EOL>                    channel: SHORT_WILDCARD,<EOL>                    ...fieldDef<EOL>                }<EOL>            ]<EOL>        };<EOL>    }<EOL>    else {<EOL>        // Otherwise, query for the best encoding if there is no wildcard channel<EOL>        const query = autoAddFieldQuery(shelfSpec, fieldDef);<EOL>        const rec = recommend(query, schema);<EOL>        const topSpecQuery = getTopSpecQueryItem(","gt":"rec.result).specQuery;"}
{"input":"<s> function listenToRecordStoreAddMessage(recordStoreAddMessageHandler) {<EOL>    window.addEventListener(","gt":"RECORD_STORE_ADD, (event) => {"}
{"input":"<s> export async function withCustomDB(store, customMap, cb) {<EOL>    while (!isEmpty(dbsToClose)) {<EOL>        dbsToClose.shift().close();<EOL>    }<EOL>    const db = new DB(customMap);<EOL>","gt":"try {"}
{"input":"<s> export async function withCustomDB(store, customMap, cb) {<EOL>    while (!isEmpty(dbsToClose)) {<EOL>        dbsToClose.shift().close();<EOL>    }<EOL>    const db = new DB(customMap);<EOL>     try {<EOL>        db.load(store, \"<STR_LIT>\");<EOL>        const q = db.getQuerier();<EOL>        fixSchema(q, checkSchema(q, customMap));<EOL>        await","gt":"cb(db);"}
{"input":"<s> function setupWindow() {<EOL>","gt":"setupNonElementTarget(window, '<STR_LIT>');"}
{"input":"<s> export async function warmupAndBenchmarkGPU(benchmark) {<EOL>    // Warmup.<EOL>","gt":"const out = benchmark();"}
{"input":"<s> export function isWildcardChannelId(shelfId) {<EOL>    return","gt":"isWildcard(shelfId.channel);"}
{"input":"<s> export function html5Compat(html5mode) {<EOL>    return (angular.","gt":"isObject(html5mode) && html5mode.hasOwnProperty(\"<STR_LIT>\") ? html5mode.enabled : html5mode);"}
{"input":"<s> function trackGeneralCases() {<EOL>    const trackedApis = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    // @NOTE: never wrap jQuery.prototype init !!<EOL>    trackedApis.","gt":"map((api) => {"}
{"input":"<s> export default function (devtools, renderSidebar) {<EOL>    const sidebarController = new SidebarController(devtools.panels, renderSidebar);<EOL>    const updateSelection = makeUpdateSelection(devtools.inspectedWindow);<EOL>    const helpers = {<EOL>        backgroundMessageHandler: makeBackgroundMessageHandler(","gt":"sidebarController),"}
{"input":"<s> export default function (devtools, renderSidebar) {<EOL>    const sidebarController = new SidebarController(devtools.panels, renderSidebar);<EOL>    const updateSelection = makeUpdateSelection(devtools.inspectedWindow);<EOL>    const helpers = {<EOL>        backgroundMessageHandler: makeBackgroundMessageHandler( sidebarController),<EOL>        selectionChangedHandler: () => updateSelection(),<EOL>        sidebarInitHandler: sidebarController.init,<EOL>    };<EOL>    if (isTestEnv()) {<EOL>        Object.assign(","gt":"helpers, { sidebarController });"}
{"input":"<s> <EOL>export function create(numVtx, numId, b) {<EOL>    b = (typeof b === '<STR_LIT>') ? b & ALL : ALL;<EOL>    return {<EOL>        position: (b & POSITION) ? new Float32Array(numVtx * <NUM_LIT>) : undefined,<EOL>        normal: (b & NORMAL) ? new Float32Array(numVtx *","gt":"<NUM_LIT>) : undefined,"}
{"input":"<s> <EOL>export function create(numVtx, numId, b) {<EOL>    b = (typeof b === '<STR_LIT>') ? b & ALL : ALL;<EOL>    return {<EOL>        position: (b & POSITION) ? new Float32Array(numVtx * <NUM_LIT>) : undefined,<EOL>        normal: (b & NORMAL) ? new Float32Array(numVtx *  <NUM_LIT>) : undefined,<EOL>        color: (b & COLOR) ? new Float32Array(numVtx * <NUM_LIT>) : undefined,<EOL>        uv: (b & UV) ? new Float32Array(numVtx * <NUM_LIT>) : undefined,<EOL>        index: new Uint16Array(numId),<EOL>","gt":"vertexCount: <NUM_LIT>,"}
{"input":"<s> function flattenUnsubscriptionErrors(errors) {<EOL>    return errors.reduce((errs,","gt":"err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);"}
{"input":"<s> export function convertToTimestamp(dateTime) {<EOL>    const date = new Date(dateTime.year,","gt":"Number(dateTime.month) - <NUM_LIT>,"}
{"input":"<s> export function isTraining() {<EOL>    statusElement.innerText =","gt":"'<STR_LIT>';"}
{"input":"<s> export function filterIndexOf(filters, field) {<EOL>    for (let i = <NUM_LIT>; i < filters.length; i++) {<EOL>        const filter = filters[i];<EOL>        if (filter.field ===","gt":"field) {"}
{"input":"<s> export function setSelections(selections) {<EOL>    if (!window.activeTextEditor) {<EOL>        throw","gt":"new Error('<STR_LIT>');"}
{"input":"<s> export function filterHasField(filters, field) {<EOL>    return filterIndexOf(","gt":"filters, field) >= <NUM_LIT>;"}
{"input":"<s> function disableConditioning() {<EOL>    conditioned = false;<EOL>","gt":"conditioningOffElem.checked = true;"}
{"input":"<s> export default function doesEventMeanBackground(e) {<EOL>    if (!e) {<EOL>","gt":"return false;"}
{"input":"<s> function getStacktraceWithUncaughtError() {<EOL>    return new Error(","gt":"ERROR_TAG);"}
{"input":"<s> <EOL><EOL>export function distinctUntilChanged(compare, keySelector) {<EOL>    return this.","gt":"lift(new DistinctUntilChangedOperator(compare, keySelector));"}
{"input":"<s> function decodeParam(params, name, value) {<EOL>","gt":"params[decodeURIComponent(name)] = decodeURIComponent(value || '<STR_LIT>');"}
{"input":"<s> export function customValidatorFactory(type) {<EOL>    return {<EOL>        provide:","gt":"NG_VALIDATORS,"}
{"input":"<s> export function flattenNameArrayMap(nameArrayMap, keys) {<EOL>    const xs = [];<EOL>    if (nameArrayMap instanceof Tensor) {<EOL>        xs.push(nameArrayMap);<EOL>    }<EOL>    else {<EOL>        const xMap = nameArrayMap;<EOL>        for (let i = <NUM_LIT>; i < keys.length; i++) {<EOL>            xs.push(xMap[keys[","gt":"i]]);"}
{"input":"<s> export function isTypedArray(a) {<EOL>    return a instanceof Float32Array || a instanceof","gt":"Int32Array ||"}
{"input":"<s> <EOL>export function create(info) {<EOL>    const hf = {<EOL>        cellSize: (info.cellSize && info.cellSize > <NUM_LIT>) ? info.cellSize : <NUM_LIT>,<EOL>        minHeight: (typeof info.minHeight === '<STR_LIT>') ? info.minHeight : <NUM_LIT>,<EOL>        maxHeight: (typeof info.maxHeight === '<STR_LIT>') ? info.maxHeight : <NUM_LIT>,<EOL>","gt":"xCount: <NUM_LIT>,"}
{"input":"<s> <EOL>export function create(info) {<EOL>    const hf = {<EOL>        cellSize: (info.cellSize && info.cellSize > <NUM_LIT>) ? info.cellSize : <NUM_LIT>,<EOL>        minHeight: (typeof info.minHeight === '<STR_LIT>') ? info.minHeight : <NUM_LIT>,<EOL>        maxHeight: (typeof info.maxHeight === '<STR_LIT>') ? info.maxHeight : <NUM_LIT>,<EOL>         xCount: <NUM_LIT>,<EOL>        yCount: <NUM_LIT>,<EOL>        xSize: <NUM_LIT>,<EOL>        ySize: <NUM_LIT>,<EOL>        heights: new Float32Array(","gt":"<NUM_LIT>),"}
{"input":"<s> <EOL>export function create(info) {<EOL>    const hf = {<EOL>        cellSize: (info.cellSize && info.cellSize > <NUM_LIT>) ? info.cellSize : <NUM_LIT>,<EOL>        minHeight: (typeof info.minHeight === '<STR_LIT>') ? info.minHeight : <NUM_LIT>,<EOL>        maxHeight: (typeof info.maxHeight === '<STR_LIT>') ? info.maxHeight : <NUM_LIT>,<EOL>         xCount: <NUM_LIT>,<EOL>        yCount: <NUM_LIT>,<EOL>        xSize: <NUM_LIT>,<EOL>        ySize: <NUM_LIT>,<EOL>        heights: new Float32Array( <NUM_LIT>),<EOL>        faceNormals: new Float32Array(<NUM_LIT>),<EOL>        vtxNormals: new Float32Array(<NUM_LIT>)<EOL>    };<EOL>    if (info.image) {<EOL>        genFromImg(info.image, hf);<EOL>    }<EOL>    else {<EOL>        hf.xCount = info.xCount && info.xCount > <NUM_LIT> ? Math.floor(info.xCount) : <NUM_LIT>;<EOL>        hf.yCount = info.yCount && info.yCount > <NUM_LIT> ? Math.floor(info.yCount) : <NUM_LIT>;<EOL>        hf.xSize = hf.xCount * hf.cellSize;<EOL>        hf.ySize = info.yCount * hf.cellSize;<EOL>","gt":"hf.heights = info.heights || new Float32Array((hf.xCount + <NUM_LIT>) * (hf.yCount + <NUM_LIT>));"}
{"input":"<s> function isNonFacetUnitSpecWithPrimitiveMark(spec) {<EOL>    return isPrimitiveMark(spec.","gt":"mark);"}
{"input":"<s> export default function quizReducer(state = defaultQuizState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return {<EOL>                ...state,<EOL>                rememberSkipped:","gt":"action.payload,"}
{"input":"<s> export default function quizReducer(state = defaultQuizState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return {<EOL>                ...state,<EOL>                rememberSkipped:  action.payload,<EOL>            };<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export default function quizReducer(state = defaultQuizState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return {<EOL>                ...state,<EOL>                rememberSkipped:  action.payload,<EOL>            };<EOL>        case  '<STR_LIT>':<EOL>            return updateReaction(state, action.path, { answeredCorrectly: true });<EOL>        case '<STR_LIT>':<EOL>            const currentReaction = action.path<EOL>                ? state.quizReactions[action.path] || defaultReaction<EOL>                :","gt":"defaultReaction;"}
{"input":"<s> export default function quizReducer(state = defaultQuizState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return {<EOL>                ...state,<EOL>                rememberSkipped:  action.payload,<EOL>            };<EOL>        case  '<STR_LIT>':<EOL>            return updateReaction(state, action.path, { answeredCorrectly: true });<EOL>        case '<STR_LIT>':<EOL>            const currentReaction = action.path<EOL>                ? state.quizReactions[action.path] || defaultReaction<EOL>                :  defaultReaction;<EOL>            return updateReaction(state, action.path, {<EOL>                answerIndeces: (currentReaction.answerIndeces || [])<EOL>                    .concat(action.payload),<EOL>            });<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> export function enableExperimentalFragmentVariables() {<EOL>","gt":"experimentalFragmentVariables = true;"}
{"input":"<s> <EOL>export function pairwise() {<EOL>    return this.","gt":"lift(new PairwiseOperator());"}
{"input":"<s> export function getAssign(root) {<EOL>    return root.Object.assign ||","gt":"assignImpl;"}
{"input":"<s> // This isn't a very good seeding function, but it works ok. It supports 2^16<EOL>// different seed values. Write something better if you need more seeds.<EOL>function seed(seed) {<EOL>    if (seed > <NUM_LIT> && seed < <NUM_LIT>) {<EOL>        // Scale the seed out<EOL>        seed *= <NUM_LIT>;<EOL>    }<EOL>    seed = Math.floor(seed);<EOL>    if (","gt":"seed < <NUM_LIT>) {"}
{"input":"<s> // This isn't a very good seeding function, but it works ok. It supports 2^16<EOL>// different seed values. Write something better if you need more seeds.<EOL>function seed(seed) {<EOL>    if (seed > <NUM_LIT> && seed < <NUM_LIT>) {<EOL>        // Scale the seed out<EOL>        seed *= <NUM_LIT>;<EOL>    }<EOL>    seed = Math.floor(seed);<EOL>    if ( seed < <NUM_LIT>) {<EOL>        seed |= seed << <NUM_LIT>;<EOL>    }<EOL>    for (let i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>        let v;<EOL>","gt":"if (i & <NUM_LIT>) {"}
{"input":"<s> // This isn't a very good seeding function, but it works ok. It supports 2^16<EOL>// different seed values. Write something better if you need more seeds.<EOL>function seed(seed) {<EOL>    if (seed > <NUM_LIT> && seed < <NUM_LIT>) {<EOL>        // Scale the seed out<EOL>        seed *= <NUM_LIT>;<EOL>    }<EOL>    seed = Math.floor(seed);<EOL>    if ( seed < <NUM_LIT>) {<EOL>        seed |= seed << <NUM_LIT>;<EOL>    }<EOL>    for (let i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>        let v;<EOL>         if (i & <NUM_LIT>) {<EOL>            v = p[i] ^ (seed & <NUM_LIT>);<EOL>        }<EOL>        else {<EOL>            v = p[i] ^ ((seed >>","gt":"<NUM_LIT>) & <NUM_LIT>);"}
{"input":"<s> <EOL>// stolen from https://github.com/rstacruz/tape-watch/blob/master/lib/mutex.js<EOL>export default function mutex(fn) {<EOL>    let running = false;<EOL>    return async function (...args) {<EOL>        if (running) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>// stolen from https://github.com/rstacruz/tape-watch/blob/master/lib/mutex.js<EOL>export default function mutex(fn) {<EOL>    let running = false;<EOL>    return async function (...args) {<EOL>        if (running) {<EOL>             return;<EOL>        }<EOL>        running = true;<EOL>","gt":"const onUncaught = function (e) {"}
{"input":"<s> <EOL>// stolen from https://github.com/rstacruz/tape-watch/blob/master/lib/mutex.js<EOL>export default function mutex(fn) {<EOL>    let running = false;<EOL>    return async function (...args) {<EOL>        if (running) {<EOL>             return;<EOL>        }<EOL>        running = true;<EOL>         const onUncaught = function (e) {<EOL>            console.error(\"<STR_LIT>\", e.stack);<EOL>            running = false;<EOL>        };<EOL>        process.on(\"<STR_LIT>\", onUncaught);<EOL>","gt":"try {"}
{"input":"<s> <EOL>export function stateReducer(state = DEFAULT_STATE, action) {<EOL>    switch (action.type) {<EOL>        case","gt":"SET_APPLICATION_STATE:"}
{"input":"<s> function openDashboardWindow(sessionid) {<EOL>    sessionid = sessionid || '<STR_LIT>';<EOL>    var cfg = config.getConfig(userDataPath);<EOL>    var dashboardTarget = '<STR_LIT>' +","gt":"cfg.port + '<STR_LIT>' + sessionid;"}
{"input":"<s> function openDashboardWindow(sessionid) {<EOL>    sessionid = sessionid || '<STR_LIT>';<EOL>    var cfg = config.getConfig(userDataPath);<EOL>    var dashboardTarget = '<STR_LIT>' +  cfg.port + '<STR_LIT>' + sessionid;<EOL>    var existing = dashboardWindows[sessionid];<EOL>    if (existing) {<EOL>        console.log(","gt":"\"<STR_LIT>\" + dashboardTarget);"}
{"input":"<s> function openDashboardWindow(sessionid) {<EOL>    sessionid = sessionid || '<STR_LIT>';<EOL>    var cfg = config.getConfig(userDataPath);<EOL>    var dashboardTarget = '<STR_LIT>' +  cfg.port + '<STR_LIT>' + sessionid;<EOL>    var existing = dashboardWindows[sessionid];<EOL>    if (existing) {<EOL>        console.log( \"<STR_LIT>\" + dashboardTarget);<EOL>        existing.show();<EOL>        existing.loadUrl(dashboardTarget);<EOL>        return;<EOL>    }<EOL>    var dashboardwdw = new BrowserWindow({<EOL>        x: mainWindowState.x,<EOL>        y: mainWindowState.y,<EOL>        width: mainWindowState.","gt":"width,"}
{"input":"<s> function openDashboardWindow(sessionid) {<EOL>    sessionid = sessionid || '<STR_LIT>';<EOL>    var cfg = config.getConfig(userDataPath);<EOL>    var dashboardTarget = '<STR_LIT>' +  cfg.port + '<STR_LIT>' + sessionid;<EOL>    var existing = dashboardWindows[sessionid];<EOL>    if (existing) {<EOL>        console.log( \"<STR_LIT>\" + dashboardTarget);<EOL>        existing.show();<EOL>        existing.loadUrl(dashboardTarget);<EOL>        return;<EOL>    }<EOL>    var dashboardwdw = new BrowserWindow({<EOL>        x: mainWindowState.x,<EOL>        y: mainWindowState.y,<EOL>        width: mainWindowState. width,<EOL>        height: mainWindowState.height,<EOL>        \"<STR_LIT>\": false<EOL>    });<EOL>    //dashboardwdw.openDevTools();<EOL>    console.log(\"<STR_LIT>\" + dashboardTarget);<EOL>    //load empty page first to prevent bad window title<EOL>    dashboardwdw.loadUrl('<STR_LIT>' + __dirname + '<STR_LIT>');<EOL>    setTimeout(function () {<EOL>        dashboardwdw.webContents.on('<STR_LIT>', function (event, errorCode, errorDescription, validateUrl) {<EOL>            console.log(\"<STR_LIT>\" + validateUrl + \"<STR_LIT>\" + errorCode + \"<STR_LIT>\" + errorDescription);<EOL>            dashboardwdw.","gt":"loadUrl('<STR_LIT>' + __dirname + '<STR_LIT>');"}
{"input":"<s> function getModel(xscale, yscale) {<EOL>    const model = parseUnitModel({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\":","gt":"\"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": xscale || \"<STR_LIT>\" } },"}
{"input":"<s> function getModel(xscale, yscale) {<EOL>    const model = parseUnitModel({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\":  \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": xscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\",","gt":"\"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": yscale || \"<STR_LIT>\" } },"}
{"input":"<s> function getModel(xscale, yscale) {<EOL>    const model = parseUnitModel({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\":  \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": xscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\",  \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": yscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>        }<EOL>    });<EOL>    model.parseScale();<EOL>    const selCmpts = selection.parseUnitSelection(model, {<EOL>        \"<STR_LIT>\": {<EOL>","gt":"\"<STR_LIT>\": \"<STR_LIT>\""}
{"input":"<s> function getModel(xscale, yscale) {<EOL>    const model = parseUnitModel({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\":  \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": xscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\",  \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": yscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>        }<EOL>    });<EOL>    model.parseScale();<EOL>    const selCmpts = selection.parseUnitSelection(model, {<EOL>        \"<STR_LIT>\": {<EOL>             \"<STR_LIT>\": \"<STR_LIT>\"<EOL>        },<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\":","gt":"\"<STR_LIT>\""}
{"input":"<s> function getModel(xscale, yscale) {<EOL>    const model = parseUnitModel({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\":  \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": xscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\",  \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": { \"<STR_LIT>\": yscale || \"<STR_LIT>\" } },<EOL>            \"<STR_LIT>\": { \"<STR_LIT>\": \"<STR_LIT>\", \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>        }<EOL>    });<EOL>    model.parseScale();<EOL>    const selCmpts = selection.parseUnitSelection(model, {<EOL>        \"<STR_LIT>\": {<EOL>             \"<STR_LIT>\": \"<STR_LIT>\"<EOL>        },<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\":  \"<STR_LIT>\"<EOL>        },<EOL>        \"<STR_LIT>\": {<EOL>            \"<STR_LIT>\": \"<STR_LIT>\",<EOL>            \"<STR_LIT>\":","gt":"false"}
{"input":"<s> export function patchEvent(global, api) {<EOL>    patchEventPrototype(global,","gt":"api);"}
{"input":"<s> export function ajaxGet(url, headers = null) {<EOL>    return","gt":"new AjaxObservable({ method: '<STR_LIT>', url, headers });"}
{"input":"<s> export function transformInterface(schema, gqlInterface) {<EOL>    debugLog(`<STR_LIT>`);<EOL>    const resolvedFields = resolveFields(schema, gqlInterface.getFields());<EOL>    const directives = getDirectives(schema, gqlInterface);<EOL>","gt":"return {"}
{"input":"<s> export function transformInterface(schema, gqlInterface) {<EOL>    debugLog(`<STR_LIT>`);<EOL>    const resolvedFields = resolveFields(schema, gqlInterface.getFields());<EOL>    const directives = getDirectives(schema, gqlInterface);<EOL>     return {<EOL>        name: gqlInterface.name,<EOL>        description: gqlInterface.description || '<STR_LIT>',<EOL>        fields: resolvedFields,<EOL>        hasFields: resolvedFields.length > <NUM_LIT>,<EOL>","gt":"directives,"}
{"input":"<s> export function nbAuthServiceFactory(config, tokenService, injector) {<EOL>    const providers = config.providers || {};<EOL>    for (const key in providers) {<EOL>        if (providers.","gt":"hasOwnProperty(key)) {"}
{"input":"<s> export function transformDirectives(schema, directives) {<EOL>    return directives.map((directive) => {<EOL>        const args = resolveArguments(schema, directive.args);<EOL>        const locations = directive.locations || [];<EOL>        return {<EOL>            name: directive.name,<EOL>            description:","gt":"directive.description || '<STR_LIT>',"}
{"input":"<s> export function transformDirectives(schema, directives) {<EOL>    return directives.map((directive) => {<EOL>        const args = resolveArguments(schema, directive.args);<EOL>        const locations = directive.locations || [];<EOL>        return {<EOL>            name: directive.name,<EOL>            description:  directive.description || '<STR_LIT>',<EOL>            hasArguments: args.length > <NUM_LIT>,<EOL>            arguments: args,<EOL>","gt":"locations,"}
{"input":"<s> export function transformDirectives(schema, directives) {<EOL>    return directives.map((directive) => {<EOL>        const args = resolveArguments(schema, directive.args);<EOL>        const locations = directive.locations || [];<EOL>        return {<EOL>            name: directive.name,<EOL>            description:  directive.description || '<STR_LIT>',<EOL>            hasArguments: args.length > <NUM_LIT>,<EOL>            arguments: args,<EOL>             locations,<EOL>            onFragmentSpread: locations.includes(DirectiveLocation.FRAGMENT_SPREAD),<EOL>            onInlineFragment: locations.includes(DirectiveLocation.INLINE_FRAGMENT),<EOL>            onQuery: locations.","gt":"includes(DirectiveLocation.QUERY),"}
{"input":"<s> export function transformDirectives(schema, directives) {<EOL>    return directives.map((directive) => {<EOL>        const args = resolveArguments(schema, directive.args);<EOL>        const locations = directive.locations || [];<EOL>        return {<EOL>            name: directive.name,<EOL>            description:  directive.description || '<STR_LIT>',<EOL>            hasArguments: args.length > <NUM_LIT>,<EOL>            arguments: args,<EOL>             locations,<EOL>            onFragmentSpread: locations.includes(DirectiveLocation.FRAGMENT_SPREAD),<EOL>            onInlineFragment: locations.includes(DirectiveLocation.INLINE_FRAGMENT),<EOL>            onQuery: locations. includes(DirectiveLocation.QUERY),<EOL>            onMutation: locations.includes(DirectiveLocation.MUTATION),<EOL>            onSubscription: locations.includes(DirectiveLocation.SUBSCRIPTION),<EOL>            onFragment: locations.includes(DirectiveLocation.FRAGMENT_SPREAD),<EOL>            onField:","gt":"locations.includes(DirectiveLocation.FIELD),"}
{"input":"<s> export function transformDirectives(schema, directives) {<EOL>    return directives.map((directive) => {<EOL>        const args = resolveArguments(schema, directive.args);<EOL>        const locations = directive.locations || [];<EOL>        return {<EOL>            name: directive.name,<EOL>            description:  directive.description || '<STR_LIT>',<EOL>            hasArguments: args.length > <NUM_LIT>,<EOL>            arguments: args,<EOL>             locations,<EOL>            onFragmentSpread: locations.includes(DirectiveLocation.FRAGMENT_SPREAD),<EOL>            onInlineFragment: locations.includes(DirectiveLocation.INLINE_FRAGMENT),<EOL>            onQuery: locations. includes(DirectiveLocation.QUERY),<EOL>            onMutation: locations.includes(DirectiveLocation.MUTATION),<EOL>            onSubscription: locations.includes(DirectiveLocation.SUBSCRIPTION),<EOL>            onFragment: locations.includes(DirectiveLocation.FRAGMENT_SPREAD),<EOL>            onField:  locations.includes(DirectiveLocation.FIELD),<EOL>            onSchema: locations.includes(DirectiveLocation.SCHEMA),<EOL>            onScalar: locations.includes(DirectiveLocation.SCALAR),<EOL>            onFieldDefinition: locations.includes(DirectiveLocation.FIELD_DEFINITION),<EOL>            onEnum: locations.includes(DirectiveLocation.ENUM),<EOL>            onEnumValue: locations.includes(DirectiveLocation.ENUM_VALUE),<EOL>            onObject: locations.","gt":"includes(DirectiveLocation.OBJECT),"}
{"input":"<s> <EOL><EOL>export function timeoutWith(due, withObservable, scheduler = async) {<EOL>    let absoluteTimeout =","gt":"isDate(due);"}
{"input":"<s> export function renderComponent(component, props = {}, children = null) {<EOL>    let isReactComponent = (component[\"<STR_LIT>\"] instanceof React.Component ||<EOL>        (component[\"<STR_LIT>\"] && component[\"<STR_LIT>\"].isReactComponent) ||<EOL>        typeof component === '<STR_LIT>');<EOL>    if (","gt":"isReactComponent) {"}
{"input":"<s> function getFeaturesFromURL() {<EOL>    const features = {};<EOL>    if (typeof window === '<STR_LIT>') {<EOL>        return features;<EOL>    }<EOL>","gt":"const urlParams = util.getQueryParams(window.location.search);"}
{"input":"<s> function getFeaturesFromURL() {<EOL>    const features = {};<EOL>    if (typeof window === '<STR_LIT>') {<EOL>        return features;<EOL>    }<EOL>     const urlParams = util.getQueryParams(window.location.search);<EOL>    if (DEEPLEARNJS_FLAGS_PREFIX in urlParams) {<EOL>","gt":"const urlFlags = {};"}
{"input":"<s> function getFeaturesFromURL() {<EOL>    const features = {};<EOL>    if (typeof window === '<STR_LIT>') {<EOL>        return features;<EOL>    }<EOL>     const urlParams = util.getQueryParams(window.location.search);<EOL>    if (DEEPLEARNJS_FLAGS_PREFIX in urlParams) {<EOL>         const urlFlags = {};<EOL>        const keyValues = urlParams[DEEPLEARNJS_FLAGS_PREFIX].split('<STR_LIT>');<EOL>        keyValues.forEach(keyValue => {<EOL>            const [key, value] =","gt":"keyValue.split('<STR_LIT>');"}
{"input":"<s> function getFeaturesFromURL() {<EOL>    const features = {};<EOL>    if (typeof window === '<STR_LIT>') {<EOL>        return features;<EOL>    }<EOL>     const urlParams = util.getQueryParams(window.location.search);<EOL>    if (DEEPLEARNJS_FLAGS_PREFIX in urlParams) {<EOL>         const urlFlags = {};<EOL>        const keyValues = urlParams[DEEPLEARNJS_FLAGS_PREFIX].split('<STR_LIT>');<EOL>        keyValues.forEach(keyValue => {<EOL>            const [key, value] =  keyValue.split('<STR_LIT>');<EOL>            urlFlags[key] =","gt":"value;"}
{"input":"<s> function getFeaturesFromURL() {<EOL>    const features = {};<EOL>    if (typeof window === '<STR_LIT>') {<EOL>        return features;<EOL>    }<EOL>     const urlParams = util.getQueryParams(window.location.search);<EOL>    if (DEEPLEARNJS_FLAGS_PREFIX in urlParams) {<EOL>         const urlFlags = {};<EOL>        const keyValues = urlParams[DEEPLEARNJS_FLAGS_PREFIX].split('<STR_LIT>');<EOL>        keyValues.forEach(keyValue => {<EOL>            const [key, value] =  keyValue.split('<STR_LIT>');<EOL>            urlFlags[key] =  value;<EOL>        });<EOL>        URL_PROPERTIES.forEach(urlProperty => {<EOL>            if (urlProperty.name in urlFlags) {<EOL>                console.log(`<STR_LIT>` +<EOL>","gt":"urlFlags[urlProperty.name]}`<STR_LIT>;"}
{"input":"<s> export function isFieldRangePredicate(predicate) {<EOL>    if (predicate && predicate.field) {<EOL>        if (isArray(","gt":"predicate.range) && predicate.range.length === <NUM_LIT>) {"}
{"input":"<s> <EOL>export function checkSchema(q, modelMap) {<EOL>    const result = {<EOL>        toCreate: [],<EOL>        toSync: [],<EOL>    };<EOL>    for (const table of Object.keys(modelMap)) {<EOL>","gt":"const model = modelMap[table];"}
{"input":"<s> <EOL>export function checkSchema(q, modelMap) {<EOL>    const result = {<EOL>        toCreate: [],<EOL>        toSync: [],<EOL>    };<EOL>    for (const table of Object.keys(modelMap)) {<EOL>         const model = modelMap[table];<EOL>        if (table !== model.table) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        const exists = hasDbTable(q, model.table);<EOL>        if (!exists) {<EOL>            result.toCreate.push({ model: model });<EOL>            continue;<EOL>        }<EOL>        const dbColumns = listDbColumns(","gt":"q, model.table);"}
{"input":"<s> <EOL>export function checkSchema(q, modelMap) {<EOL>    const result = {<EOL>        toCreate: [],<EOL>        toSync: [],<EOL>    };<EOL>    for (const table of Object.keys(modelMap)) {<EOL>         const model = modelMap[table];<EOL>        if (table !== model.table) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        const exists = hasDbTable(q, model.table);<EOL>        if (!exists) {<EOL>            result.toCreate.push({ model: model });<EOL>            continue;<EOL>        }<EOL>        const dbColumns = listDbColumns( q, model.table);<EOL>        const byName = indexBy(dbColumns, \"<STR_LIT>\");<EOL>        let hadIncorrectColumns = false;<EOL>        const { columns } = model;<EOL>        for (const column of Object.keys(columns)) {<EOL>            const columnType =","gt":"columns[column];"}
{"input":"<s> <EOL>export function checkSchema(q, modelMap) {<EOL>    const result = {<EOL>        toCreate: [],<EOL>        toSync: [],<EOL>    };<EOL>    for (const table of Object.keys(modelMap)) {<EOL>         const model = modelMap[table];<EOL>        if (table !== model.table) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        const exists = hasDbTable(q, model.table);<EOL>        if (!exists) {<EOL>            result.toCreate.push({ model: model });<EOL>            continue;<EOL>        }<EOL>        const dbColumns = listDbColumns( q, model.table);<EOL>        const byName = indexBy(dbColumns, \"<STR_LIT>\");<EOL>        let hadIncorrectColumns = false;<EOL>        const { columns } = model;<EOL>        for (const column of Object.keys(columns)) {<EOL>            const columnType =  columns[column];<EOL>            const dbColumn = byName[column];<EOL>            if (!dbColumn) {<EOL>                hadIncorrectColumns = true;<EOL>                continue;<EOL>            }<EOL>            const","gt":"dbType = dbColumn.type.toLowerCase();"}
{"input":"<s> export function normalizeLogicalOperand(op, normalizer) {<EOL>    if (isLogicalNot(op)) {<EOL>        return { not: normalizeLogicalOperand(op.not, normalizer) };<EOL>    }<EOL>","gt":"else if (isLogicalAnd(op)) {"}
{"input":"<s> export function normalizeLogicalOperand(op, normalizer) {<EOL>    if (isLogicalNot(op)) {<EOL>        return { not: normalizeLogicalOperand(op.not, normalizer) };<EOL>    }<EOL>     else if (isLogicalAnd(op)) {<EOL>        return { and: op.and.map(o => normalizeLogicalOperand(o, normalizer)) };<EOL>    }<EOL>    else if (isLogicalOr(op)) {<EOL>        return { or: op.or.map(o => normalizeLogicalOperand(o, normalizer)) };<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function datasetFromElements(items) {<EOL>    return","gt":"datasetFromStreamFn(async () => {"}
{"input":"<s> function handleScalar(compiledTemplate, schemaContext, documents, extraConfig, fileExtension, prefixAndPath = '<STR_LIT>') {<EOL>    debugLog(`<STR_LIT>`);<EOL>    return schemaContext.scalars.map((scalar) => ({<EOL>        filename: prefixAndPath + sanitizeFilename(scalar.name,","gt":"'<STR_LIT>') + '<STR_LIT>' + (fileExtension || '<STR_LIT>'),"}
{"input":"<s> function isJQueryStyleEventEmitter(sourceObj) {<EOL>","gt":"return !!sourceObj && typeof sourceObj.on === '<STR_LIT>' && typeof sourceObj.off === '<STR_LIT>';"}
{"input":"<s> function handleFragment(compiledTemplate, schemaContext, documents, extraConfig, fileExtension, prefixAndPath = '<STR_LIT>') {<EOL>    debugLog(`<STR_LIT>`);<EOL>    return documents.fragments.map((fragment) => ({<EOL>        filename: prefixAndPath + sanitizeFilename(fragment.","gt":"name, '<STR_LIT>') + '<STR_LIT>' + (fileExtension || '<STR_LIT>'),"}
{"input":"<s> export function BoolMustNot(val) {<EOL>    return boolHelper(val,","gt":"\"<STR_LIT>\");"}
{"input":"<s> export default function getGameStatus(rs, game, cave) {<EOL>    const { commons, session, tasks, downloads } = rs;<EOL>    const { credentials } = session;<EOL>    let downloadKeys = getByIds(commons.downloadKeys, commons.downloadKeyIdsByGameId[game.id]);<EOL>    if (!cave) {<EOL>        let caves = getByIds(commons.caves, commons.caveIdsByGameId[","gt":"game.id]);"}
{"input":"<s> export default function getGameStatus(rs, game, cave) {<EOL>    const { commons, session, tasks, downloads } = rs;<EOL>    const { credentials } = session;<EOL>    let downloadKeys = getByIds(commons.downloadKeys, commons.downloadKeyIdsByGameId[game.id]);<EOL>    if (!cave) {<EOL>        let caves = getByIds(commons.caves, commons.caveIdsByGameId[ game.id]);<EOL>        cave = first(caves);<EOL>    }<EOL>","gt":"const downloadKey = first(downloadKeys);"}
{"input":"<s> export default function getGameStatus(rs, game, cave) {<EOL>    const { commons, session, tasks, downloads } = rs;<EOL>    const { credentials } = session;<EOL>    let downloadKeys = getByIds(commons.downloadKeys, commons.downloadKeyIdsByGameId[game.id]);<EOL>    if (!cave) {<EOL>        let caves = getByIds(commons.caves, commons.caveIdsByGameId[ game.id]);<EOL>        cave = first(caves);<EOL>    }<EOL>     const downloadKey = first(downloadKeys);<EOL>    const pressUser = credentials.me.pressUser;<EOL>    const task = first(tasks.tasksByGameId[game.id]);<EOL>    const download = first(getPendingForGame(downloads, game.id));<EOL>    let isActiveDownload = false;<EOL>    let","gt":"areDownloadsPaused = false;"}
{"input":"<s> <EOL>export function partition(predicate, thisArg) {<EOL>    return [<EOL>","gt":"filter.call(this, predicate, thisArg),"}
{"input":"<s> <EOL>export function bufferCount(bufferSize, startBufferEvery = null) {<EOL>    return higherOrder(bufferSize, startBufferEvery)(this)","gt":";"}
{"input":"<s> export function combineAll(project) {<EOL>    return (","gt":"source) => source.lift(new CombineLatestOperator(project));"}
{"input":"<s> export function gradient(fieldDef, gradientSpec, model, channel, type) {<EOL>    let out = {};<EOL>    if (type === '<STR_LIT>') {<EOL>        const opacity = getOpacityValue(model.encoding.opacity) || model.markDef.","gt":"opacity;"}
{"input":"<s> function getOpacityValue(opacityDef) {<EOL>    if (isValueDef(opacityDef)) {<EOL>        if (hasConditionalValueDef(opacityDef)) {<EOL>            const values = isArray(opacityDef.condition) ? opacityDef.condition.map(c => c.value) : [opacityDef.condition.value];<EOL>            return Math.max.apply(null, [opacityDef.value].concat(","gt":"values));"}
{"input":"<s> function dispatchWindowTimeSpanOnly(state) {<EOL>    const { subscriber, windowTimeSpan, window } = state;<EOL>    if (","gt":"window) {"}
{"input":"<s> export function applyBaseOptionsToArgs(options, args) {<EOL>    if (options.flatten && options.background) {<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\", options.background);<EOL>    }<EOL>    else if (options.background) {<EOL>        args.push(\"<STR_LIT>\", options.background, \"<STR_LIT>\");<EOL>    }<EOL>    if (options.autoOrient) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (","gt":"options.coalesce) {"}
{"input":"<s> export function applyBaseOptionsToArgs(options, args) {<EOL>    if (options.flatten && options.background) {<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\", options.background);<EOL>    }<EOL>    else if (options.background) {<EOL>        args.push(\"<STR_LIT>\", options.background, \"<STR_LIT>\");<EOL>    }<EOL>    if (options.autoOrient) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if ( options.coalesce) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.quality) {<EOL>        args.push(\"<STR_LIT>\",","gt":"options.quality.toString());"}
{"input":"<s> export function formatBuildVersion(build) {<EOL>    if (build) {<EOL>        if (build.userVersion) {<EOL>            return","gt":"build.id})`<STR_LIT>;"}
{"input":"<s> function updateDownloadKeys(store, db) {<EOL>    const { credentials } = store.getState().session;<EOL>    const hasMeId = credentials.me && credentials.me.id;<EOL>    if (!hasMeId) {<EOL>        return emptyArr;<EOL>    }<EOL>    const downloadKeys = db.downloadKeys.all(k => k<EOL>        .fields([\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"])<EOL>        .where(\"<STR_LIT>\", credentials.me.id));<EOL>    push(store, {<EOL>        downloadKeys: indexBy(downloadKeys, \"<STR_LIT>\"),<EOL>        downloadKeyIdsByGameId: groupIdBy(downloadKeys,","gt":"\"<STR_LIT>\"),"}
{"input":"<s> <EOL>function replaceRepeat(o, repeater) {<EOL>    if (isRepeatRef(o.field)) {<EOL>        if (o.field.repeat in repeater) {<EOL>            // any needed to calm down ts compiler<EOL>","gt":"return { ...o, field: repeater[o.field.repeat] };"}
{"input":"<s> async function applyDefaultsToThumbnailOptions(options) {<EOL>    if (!options.x) {<EOL>        options.x = <NUM_LIT>;<EOL>    }<EOL>    if (!options.y) {<EOL>        options.y = <NUM_LIT>;<EOL>    }<EOL>    if (!options.interpolate) {<EOL>        const availableVersion = await getImageMagickVersion();<EOL>        switch (availableVersion) {<EOL>","gt":"case <NUM_LIT>:"}
{"input":"<s> async function applyDefaultsToThumbnailOptions(options) {<EOL>    if (!options.x) {<EOL>        options.x = <NUM_LIT>;<EOL>    }<EOL>    if (!options.y) {<EOL>        options.y = <NUM_LIT>;<EOL>    }<EOL>    if (!options.interpolate) {<EOL>        const availableVersion = await getImageMagickVersion();<EOL>        switch (availableVersion) {<EOL>             case <NUM_LIT>:<EOL>                options.interpolate = \"<STR_LIT>\";<EOL>                break;<EOL>","gt":"case <NUM_LIT>:"}
{"input":"<s> export function isLookup(t) {<EOL>","gt":"return t['<STR_LIT>'] !== undefined;"}
{"input":"<s> export function isPromise(value) {<EOL>    return value && typeof value.subscribe !== '<STR_LIT>' && typeof","gt":"value.then === '<STR_LIT>';"}
{"input":"<s> export function isBin(t) {<EOL>","gt":"return !!t['<STR_LIT>'];"}
{"input":"<s> <EOL>export function onErrorResumeNextStatic(...nextSources) {<EOL>    let source = null;<EOL>    if (","gt":"nextSources.length === <NUM_LIT> && isArray(nextSources[<NUM_LIT>])) {"}
{"input":"<s> export function isTimeUnit(t) {<EOL>    return","gt":"t['<STR_LIT>'] !== undefined;"}
{"input":"<s> function plucker(props, length) {<EOL>    const mapper = (x) => {<EOL>        let currentProp = x;<EOL>        for (let i = <NUM_LIT>; i < length; i++) {<EOL>            const p = currentProp[props[i]];<EOL>            if (typeof","gt":"p !== '<STR_LIT>') {"}
{"input":"<s> export function publishLast() {<EOL>    return (source) =>","gt":"multicast(new AsyncSubject())(source);"}
{"input":"<s> <EOL>export function publishBehavior(value) {<EOL>    return multicast.call(this, new BehaviorSubject(","gt":"value));"}
{"input":"<s> <EOL>export function dematerialize() {<EOL>    return","gt":"this.lift(new DeMaterializeOperator());"}
{"input":"<s> function updateLocationSizes(store, db) {<EOL>    let locationSizes = {};<EOL>    const sizeRows = db.caves.all(k => k<EOL>        .field(\"<STR_LIT>\")<EOL>        .group(\"<STR_LIT>\"))","gt":";"}
{"input":"<s> export async function deployContract(contractName) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const dirPath = join(__dirname, \"<STR_LIT>\");<EOL>        const fileName = `<STR_LIT>`;<EOL>        const abi = JSON.parse(readFileSync(join(dirPath, fileName + \"<STR_LIT>\"), \"<STR_LIT>\"));<EOL>        const bin = readFileSync(join(dirPath, fileName + \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        const","gt":"code = \"<STR_LIT>\" + bin;"}
{"input":"<s> export async function deployContract(contractName) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const dirPath = join(__dirname, \"<STR_LIT>\");<EOL>        const fileName = `<STR_LIT>`;<EOL>        const abi = JSON.parse(readFileSync(join(dirPath, fileName + \"<STR_LIT>\"), \"<STR_LIT>\"));<EOL>        const bin = readFileSync(join(dirPath, fileName + \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        const  code = \"<STR_LIT>\" + bin;<EOL>        const contract = web3.eth.contract(abi);<EOL>        contract.new({ from: accounts[<NUM_LIT>], data: code, gas: GAS_LIMIT_STANDARD }, (err, contract) => {<EOL>            // this callback gets called multiple times<EOL>            // on a final call contract.address will be defined<EOL>            if (err) {<EOL>                reject(err);<EOL>            }<EOL>            else if (contract.","gt":"address) {"}
{"input":"<s> export function blessDefinition(definition) {<EOL>    return {<EOL>","gt":"identifier: definition.identifier,"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>","gt":"let finishArrayTypeIndex = rawType.length - <NUM_LIT>;"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>         let finishArrayTypeIndex = rawType.length - <NUM_LIT>;<EOL>        while (rawType[","gt":"finishArrayTypeIndex] !== \"<STR_LIT>\") {"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>         let finishArrayTypeIndex = rawType.length - <NUM_LIT>;<EOL>        while (rawType[ finishArrayTypeIndex] !== \"<STR_LIT>\") {<EOL>            finishArrayTypeIndex--;<EOL>        }<EOL>        const arraySizeRaw = rawType.slice(","gt":"finishArrayTypeIndex + <NUM_LIT>, rawType.length - <NUM_LIT>);"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>         let finishArrayTypeIndex = rawType.length - <NUM_LIT>;<EOL>        while (rawType[ finishArrayTypeIndex] !== \"<STR_LIT>\") {<EOL>            finishArrayTypeIndex--;<EOL>        }<EOL>        const arraySizeRaw = rawType.slice( finishArrayTypeIndex + <NUM_LIT>, rawType.length - <NUM_LIT>);<EOL>        const arraySize = arraySizeRaw !== \"<STR_LIT>\" ? parseInt(arraySizeRaw) : undefined;<EOL>        const restOfTheType = rawType.slice(<NUM_LIT>, finishArrayTypeIndex);<EOL>        return new ArrayType(parseEvmType(restOfTheType), arraySize);<EOL>    }<EOL>    // this has to be primitive type<EOL>    //first deal with simple types<EOL>    switch (rawType) {<EOL>        case \"<STR_LIT>\":<EOL>            return","gt":"new BooleanType();"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>         let finishArrayTypeIndex = rawType.length - <NUM_LIT>;<EOL>        while (rawType[ finishArrayTypeIndex] !== \"<STR_LIT>\") {<EOL>            finishArrayTypeIndex--;<EOL>        }<EOL>        const arraySizeRaw = rawType.slice( finishArrayTypeIndex + <NUM_LIT>, rawType.length - <NUM_LIT>);<EOL>        const arraySize = arraySizeRaw !== \"<STR_LIT>\" ? parseInt(arraySizeRaw) : undefined;<EOL>        const restOfTheType = rawType.slice(<NUM_LIT>, finishArrayTypeIndex);<EOL>        return new ArrayType(parseEvmType(restOfTheType), arraySize);<EOL>    }<EOL>    // this has to be primitive type<EOL>    //first deal with simple types<EOL>    switch (rawType) {<EOL>        case \"<STR_LIT>\":<EOL>            return  new BooleanType();<EOL>        case \"<STR_LIT>\":<EOL>            return new AddressType();<EOL>        case \"<STR_LIT>\":<EOL>            return","gt":"new StringType();"}
{"input":"<s> export function parseEvmType(rawType) {<EOL>    const lastChar = rawType[rawType.length - <NUM_LIT>];<EOL>    if (lastChar === \"<STR_LIT>\") {<EOL>        // we parse array type<EOL>         let finishArrayTypeIndex = rawType.length - <NUM_LIT>;<EOL>        while (rawType[ finishArrayTypeIndex] !== \"<STR_LIT>\") {<EOL>            finishArrayTypeIndex--;<EOL>        }<EOL>        const arraySizeRaw = rawType.slice( finishArrayTypeIndex + <NUM_LIT>, rawType.length - <NUM_LIT>);<EOL>        const arraySize = arraySizeRaw !== \"<STR_LIT>\" ? parseInt(arraySizeRaw) : undefined;<EOL>        const restOfTheType = rawType.slice(<NUM_LIT>, finishArrayTypeIndex);<EOL>        return new ArrayType(parseEvmType(restOfTheType), arraySize);<EOL>    }<EOL>    // this has to be primitive type<EOL>    //first deal with simple types<EOL>    switch (rawType) {<EOL>        case \"<STR_LIT>\":<EOL>            return  new BooleanType();<EOL>        case \"<STR_LIT>\":<EOL>            return new AddressType();<EOL>        case \"<STR_LIT>\":<EOL>            return  new StringType();<EOL>        case \"<STR_LIT>\":<EOL>            return new BytesType(<NUM_LIT>);<EOL>        case \"<STR_LIT>\":<EOL>            return new ArrayType(new BytesType(<NUM_LIT>));<EOL>    }<EOL>    if (isUIntTypeRegex.test(rawType)) {<EOL>        const match = isUIntTypeRegex.exec(rawType);<EOL>        return new UnsignedIntegerType(parseInt(match[<NUM_LIT>] ||","gt":"\"<STR_LIT>\"));"}
{"input":"<s> function getTargetNamesForConstructor(constructor) {<EOL>    const ancestors = getAncestorsForConstructor(constructor);<EOL>    return Array.from(","gt":"ancestors.reduce((targetNames, constructor) => {"}
{"input":"<s> function capitalize(name) {<EOL>","gt":"return name.charAt(<NUM_LIT>).toUpperCase() + name.slice(<NUM_LIT>);"}
{"input":"<s> <EOL><EOL>export function timeoutWith(due, withObservable, scheduler = async) {<EOL>    return higherOrder(due,","gt":"withObservable, scheduler)(this);"}
{"input":"<s> // Note: This method is used in Voyager.<EOL>export function getDefaultValue(property, channel, fieldDef, sort, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {<EOL>    const scaleConfig = config.scale;<EOL>    // If we have default rule-base, determine default value first<EOL>    switch (property) {<EOL>        case '<STR_LIT>':<EOL>            return nice(scaleType, channel, fieldDef);<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> // Note: This method is used in Voyager.<EOL>export function getDefaultValue(property, channel, fieldDef, sort, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {<EOL>    const scaleConfig = config.scale;<EOL>    // If we have default rule-base, determine default value first<EOL>    switch (property) {<EOL>        case '<STR_LIT>':<EOL>            return nice(scaleType, channel, fieldDef);<EOL>         case '<STR_LIT>':<EOL>            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);<EOL>        case '<STR_LIT>':<EOL>            return paddingInner(scalePadding, channel, scaleConfig);<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> // Note: This method is used in Voyager.<EOL>export function getDefaultValue(property, channel, fieldDef, sort, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {<EOL>    const scaleConfig = config.scale;<EOL>    // If we have default rule-base, determine default value first<EOL>    switch (property) {<EOL>        case '<STR_LIT>':<EOL>            return nice(scaleType, channel, fieldDef);<EOL>         case '<STR_LIT>':<EOL>            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);<EOL>        case '<STR_LIT>':<EOL>            return paddingInner(scalePadding, channel, scaleConfig);<EOL>        case  '<STR_LIT>':<EOL>            return paddingOuter(scalePadding, channel, scaleType, scalePaddingInner, scaleConfig);<EOL>        case '<STR_LIT>':<EOL>            return reverse(scaleType, sort);<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function shareSubjectFactory() {<EOL>    return","gt":"new Subject();"}
{"input":"<s> <EOL>export function repeatWhen(notifier) {<EOL>    return this.lift(new","gt":"RepeatWhenOperator(notifier));"}
{"input":"<s> export function easeOutQuart(x) {<EOL>","gt":"return <NUM_LIT> - pow(<NUM_LIT> - x, <NUM_LIT>);"}
{"input":"<s> <EOL>export function partition(predicate, thisArg) {<EOL>    return (source) => [<EOL>        filter(predicate, thisArg)(source),<EOL>        filter(not(predicate, thisArg))(","gt":"source)"}
{"input":"<s> <EOL>export function partition(predicate, thisArg) {<EOL>","gt":"return higherOrder(predicate, thisArg)(this);"}
{"input":"<s> <EOL><EOL>export function concatMap(project, resultSelector) {<EOL>    return higherOrderConcatMap(project, resultSelector)(","gt":"this);"}
{"input":"<s> export function instrument(source, fileName) {<EOL>    const sourceFile = ts.createSourceFile(fileName, source, ts.ScriptTarget.Latest, true);<EOL>    const replacements = [];<EOL>","gt":"visit(sourceFile, replacements, fileName);"}
{"input":"<s> <EOL><EOL>export function mergeMapTo(innerObservable, resultSelector, concurrent = Number.POSITIVE_INFINITY) {<EOL>    return higherOrder(innerObservable, resultSelector,","gt":"concurrent)(this);"}
{"input":"<s> function determineLinux64() {<EOL>    try {<EOL>        // weeeeeeeee<EOL>        const arch = String(execSync(\"<STR_LIT>\")).trim();<EOL>        return","gt":"arch === \"<STR_LIT>\";"}
{"input":"<s> function determineLinux64() {<EOL>    try {<EOL>        // weeeeeeeee<EOL>        const arch = String(execSync(\"<STR_LIT>\")).trim();<EOL>        return  arch === \"<STR_LIT>\";<EOL>    }<EOL>    catch (e) {<EOL>","gt":"logger.warn(`<STR_LIT>`);"}
{"input":"<s> function determineLinux64() {<EOL>    try {<EOL>        // weeeeeeeee<EOL>        const arch = String(execSync(\"<STR_LIT>\")).trim();<EOL>        return  arch === \"<STR_LIT>\";<EOL>    }<EOL>    catch (e) {<EOL>         logger.warn(`<STR_LIT>`);<EOL>    }<EOL>    try {<EOL>        // weeeeeeeee<EOL>        const arch = String(execSync(\"<STR_LIT>\")).trim();<EOL>","gt":"return arch === \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function every(predicate, thisArg) {<EOL>    return higherOrder(predicate, thisArg)(","gt":"this);"}
{"input":"<s> <EOL>async function apply(opts) {<EOL>    const { patchPath, outPath, signaturePath } = opts;<EOL>    let args = [","gt":"patchPath, \"<STR_LIT>\", outPath, \"<STR_LIT>\", signaturePath];"}
{"input":"<s> <EOL>function moveFacetDown(node) {<EOL>    if (node instanceof FacetNode) {<EOL>        if (node.numChildren() === <NUM_LIT> && !(node.children[<NUM_LIT>] instanceof OutputNode)) {<EOL>            // move down until we hit a fork or output node<EOL>","gt":"const child = node.children[<NUM_LIT>];"}
{"input":"<s> <EOL>function moveFacetDown(node) {<EOL>    if (node instanceof FacetNode) {<EOL>        if (node.numChildren() === <NUM_LIT> && !(node.children[<NUM_LIT>] instanceof OutputNode)) {<EOL>            // move down until we hit a fork or output node<EOL>             const child = node.children[<NUM_LIT>];<EOL>            if (child instanceof AggregateNode || child instanceof StackNode) {<EOL>                child.addDimensions(node.fields);<EOL>            }<EOL>            child.swapWithParent();<EOL>            moveFacetDown(node);<EOL>        }<EOL>        else {<EOL>            // move main to facet<EOL>            moveMainDownToFacet(node.model.component.data.main);<EOL>            // replicate the subtree and place it before the facet's main node<EOL>            const copy = flatten(node.children.map(cloneSubtree(node)));<EOL>","gt":"copy.forEach(c => c.parent = node.model.component.data.main);"}
{"input":"<s> export function extractTensorsFromScopeResult(result) {<EOL>    if (result == null) {<EOL>        return [];<EOL>    }<EOL>    if (result instanceof Tensor) {<EOL>        return [result];<EOL>    }<EOL>    const list = [];<EOL>    const resultObj = result;<EOL>","gt":"if (!isIterable(resultObj)) {"}
{"input":"<s> export function extractTensorsFromScopeResult(result) {<EOL>    if (result == null) {<EOL>        return [];<EOL>    }<EOL>    if (result instanceof Tensor) {<EOL>        return [result];<EOL>    }<EOL>    const list = [];<EOL>    const resultObj = result;<EOL>     if (!isIterable(resultObj)) {<EOL>        return [];<EOL>    }<EOL>    // Iteration over keys works also for arrays.<EOL>","gt":"for (const k in resultObj) {"}
{"input":"<s> export function isEmpty() {<EOL>    return (source) => source.lift(","gt":"new IsEmptyOperator());"}
{"input":"<s> <EOL><EOL>export function onErrorResumeNext(...nextSources) {<EOL>    return","gt":"higherOrder(...nextSources)(this);"}
{"input":"<s> export function bandPosition(fieldDef, channel, model) {<EOL>    const scaleName = model.scaleName(channel);<EOL>    const sizeChannel = channel === '<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';<EOL>    if (","gt":"model.encoding.size) {"}
{"input":"<s> export function bandPosition(fieldDef, channel, model) {<EOL>    const scaleName = model.scaleName(channel);<EOL>    const sizeChannel = channel === '<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';<EOL>    if ( model.encoding.size) {<EOL>        const orient = model.markDef.orient;<EOL>        if (orient) {<EOL>            const centeredBandPositionMixins = {<EOL>                // Use xc/yc and place the mark at the middle of the band<EOL>                // This way we never have to deal with size's condition for x/y position.<EOL>                [channel + '<STR_LIT>']: ref.fieldRef(fieldDef, scaleName, {}, { band: <NUM_LIT> })<EOL>            };<EOL>            if (getFieldDef(model.encoding.","gt":"size)) {"}
{"input":"<s> <EOL>export function pointPosition2(model, defaultRef, channel) {<EOL>    const { encoding, markDef, stack } = model;<EOL>    channel = channel || (markDef.orient ===","gt":"'<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>');"}
{"input":"<s> <EOL><EOL>export function startWith(...array) {<EOL>    return (source) => {<EOL>        let scheduler = array[array.length - <NUM_LIT>];<EOL>        if (isScheduler(scheduler)) {<EOL>            array.pop();<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> <EOL><EOL>export function startWith(...array) {<EOL>    return (source) => {<EOL>        let scheduler = array[array.length - <NUM_LIT>];<EOL>        if (isScheduler(scheduler)) {<EOL>            array.pop();<EOL>        }<EOL>         else {<EOL>            scheduler = null;<EOL>        }<EOL>        const len = array.length;<EOL>        if (len === <NUM_LIT>) {<EOL>","gt":"return concatStatic(new ScalarObservable(array[<NUM_LIT>], scheduler), source);"}
{"input":"<s> function mergeMeasures(parentMeasures, childMeasures) {<EOL>    for (const f in childMeasures) {<EOL>        if (childMeasures.hasOwnProperty(f)) {<EOL>            // when we merge a measure, we either have to add an aggregation operator or even a new field<EOL>            const ops = childMeasures[f];<EOL>            for (const op in ops) {<EOL>                if (ops.","gt":"hasOwnProperty(op)) {"}
{"input":"<s> <EOL>export function timeout(due, scheduler = async) {<EOL>    const","gt":"absoluteTimeout = isDate(due);"}
{"input":"<s> <EOL>export function formatItchPlatform(p) {<EOL>    return itchPlatforms[","gt":"p] || p;"}
{"input":"<s> export function main() {<EOL>","gt":"return platformBrowserDynamic()"}
{"input":"<s> export function computeOptimalWindowSize(inSize) {<EOL>    if (inSize <= PARALLELIZE_THRESHOLD) {<EOL>        return","gt":"inSize;"}
{"input":"<s> function getSamplerFlat(inputInfo) {<EOL>    const texName = inputInfo.name;<EOL>    const texShape = inputInfo.shapeInfo.texShape;<EOL>    const funcName = '<STR_LIT>' + texName.charAt(<NUM_LIT>).toUpperCase() + texName.slice(<NUM_LIT>) + '<STR_LIT>';<EOL>    const tNumR = texShape[<NUM_LIT>];<EOL>    const tNumC = texShape[","gt":"<NUM_LIT>];"}
{"input":"<s> function getSamplerFlat(inputInfo) {<EOL>    const texName = inputInfo.name;<EOL>    const texShape = inputInfo.shapeInfo.texShape;<EOL>    const funcName = '<STR_LIT>' + texName.charAt(<NUM_LIT>).toUpperCase() + texName.slice(<NUM_LIT>) + '<STR_LIT>';<EOL>    const tNumR = texShape[<NUM_LIT>];<EOL>    const tNumC = texShape[ <NUM_LIT>];<EOL>    if (tNumC === <NUM_LIT> && tNumR === <NUM_LIT>) {<EOL>        return `<STR_LIT>`;<EOL>    }<EOL>    if (tNumC ===","gt":"<NUM_LIT>) {"}
{"input":"<s> function getSamplerFlat(inputInfo) {<EOL>    const texName = inputInfo.name;<EOL>    const texShape = inputInfo.shapeInfo.texShape;<EOL>    const funcName = '<STR_LIT>' + texName.charAt(<NUM_LIT>).toUpperCase() + texName.slice(<NUM_LIT>) + '<STR_LIT>';<EOL>    const tNumR = texShape[<NUM_LIT>];<EOL>    const tNumC = texShape[ <NUM_LIT>];<EOL>    if (tNumC === <NUM_LIT> && tNumR === <NUM_LIT>) {<EOL>        return `<STR_LIT>`;<EOL>    }<EOL>    if (tNumC ===  <NUM_LIT>) {<EOL>        return `<STR_LIT>`;<EOL>    }<EOL>    if (tNumR ===","gt":"<NUM_LIT>) {"}
{"input":"<s> export function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon = TEST_EPSILON) {<EOL>    let actualValues;<EOL>    if (actual instanceof Tensor) {<EOL>        actualValues = actual.dataSync();<EOL>    }<EOL>    else {<EOL>        actualValues = actual;<EOL>    }<EOL>    const","gt":"actualMean = mean(actualValues);"}
{"input":"<s> <EOL>export function getTerminatingNodesFromFeedDictionary(feedDictionary) {<EOL>    return","gt":"Object.keys(feedDictionary.dict)"}
{"input":"<s> <EOL>export function getVariableNodesFromEvaluationSet(evaluationSet) {<EOL>    const nodes = [];<EOL>    evaluationSet.forEach(node => {<EOL>        if (","gt":"node instanceof VariableNode) {"}
{"input":"<s> export function _redefineProperty(obj, prop, desc) {<EOL>    const originalConfigurableFlag =","gt":"desc.configurable;"}
{"input":"<s> <EOL>export function disposeAndInitializeOperationInputGradients(evaluationSet, gradients) {<EOL>    evaluationSet.forEach(node => {<EOL>        Object.keys(node.inputs).forEach(inputName => {<EOL>            const input = node.inputs[","gt":"inputName];"}
{"input":"<s> <EOL>export function getAxesPermutation(axes, rank) {<EOL>    if (axesAreInnerMostDims(axes, rank)) {<EOL>        return null;<EOL>    }<EOL>","gt":"const result = [];"}
{"input":"<s> function getKeyFromTextureShape(shapeRowsCol, texType) {<EOL>    return","gt":"shapeRowsCol[<NUM_LIT>]}_${texType}`<STR_LIT>;"}
{"input":"<s> export function propertyDescriptorPatch(_global) {<EOL>    if (isNode) {<EOL>        return;<EOL>    }<EOL>    const supportsWebSocket = typeof WebSocket !== '<STR_LIT>';<EOL>    if (canPatchViaPropertyDescriptor()) {<EOL>        // for browsers that we can patch the descriptor:  Chrome & Firefox<EOL>        if (isBrowser) {<EOL>            patchOnProperties(HTMLElement.prototype, eventNames);<EOL>        }<EOL>        patchOnProperties(XMLHttpRequest.","gt":"prototype, null);"}
{"input":"<s> export function propertyDescriptorPatch(_global) {<EOL>    if (isNode) {<EOL>        return;<EOL>    }<EOL>    const supportsWebSocket = typeof WebSocket !== '<STR_LIT>';<EOL>    if (canPatchViaPropertyDescriptor()) {<EOL>        // for browsers that we can patch the descriptor:  Chrome & Firefox<EOL>        if (isBrowser) {<EOL>            patchOnProperties(HTMLElement.prototype, eventNames);<EOL>        }<EOL>        patchOnProperties(XMLHttpRequest. prototype, null);<EOL>        if (typeof IDBIndex !== '<STR_LIT>') {<EOL>            patchOnProperties(IDBIndex.prototype, null);<EOL>","gt":"patchOnProperties(IDBRequest.prototype, null);"}
{"input":"<s> export function propertyDescriptorPatch(_global) {<EOL>    if (isNode) {<EOL>        return;<EOL>    }<EOL>    const supportsWebSocket = typeof WebSocket !== '<STR_LIT>';<EOL>    if (canPatchViaPropertyDescriptor()) {<EOL>        // for browsers that we can patch the descriptor:  Chrome & Firefox<EOL>        if (isBrowser) {<EOL>            patchOnProperties(HTMLElement.prototype, eventNames);<EOL>        }<EOL>        patchOnProperties(XMLHttpRequest. prototype, null);<EOL>        if (typeof IDBIndex !== '<STR_LIT>') {<EOL>            patchOnProperties(IDBIndex.prototype, null);<EOL>             patchOnProperties(IDBRequest.prototype, null);<EOL>            patchOnProperties(IDBOpenDBRequest.prototype, null);<EOL>            patchOnProperties(IDBDatabase.prototype, null);<EOL>            patchOnProperties(IDBTransaction.prototype, null);<EOL>","gt":"patchOnProperties(IDBCursor.prototype, null);"}
{"input":"<s> export function propertyDescriptorPatch(_global) {<EOL>    if (isNode) {<EOL>        return;<EOL>    }<EOL>    const supportsWebSocket = typeof WebSocket !== '<STR_LIT>';<EOL>    if (canPatchViaPropertyDescriptor()) {<EOL>        // for browsers that we can patch the descriptor:  Chrome & Firefox<EOL>        if (isBrowser) {<EOL>            patchOnProperties(HTMLElement.prototype, eventNames);<EOL>        }<EOL>        patchOnProperties(XMLHttpRequest. prototype, null);<EOL>        if (typeof IDBIndex !== '<STR_LIT>') {<EOL>            patchOnProperties(IDBIndex.prototype, null);<EOL>             patchOnProperties(IDBRequest.prototype, null);<EOL>            patchOnProperties(IDBOpenDBRequest.prototype, null);<EOL>            patchOnProperties(IDBDatabase.prototype, null);<EOL>            patchOnProperties(IDBTransaction.prototype, null);<EOL>             patchOnProperties(IDBCursor.prototype, null);<EOL>        }<EOL>        if (supportsWebSocket) {<EOL>            patchOnProperties(WebSocket.prototype, null);<EOL>        }<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL><EOL>export function combineLatest(...observables) {<EOL>    let project = null;<EOL>    let scheduler = null;<EOL>    if (isScheduler(observables[observables.length - <NUM_LIT>])) {<EOL>        scheduler = observables.pop();<EOL>    }<EOL>    if (typeof observables[observables.length - <NUM_LIT>] === '<STR_LIT>') {<EOL>        project = observables.pop();<EOL>    }<EOL>    // if the first and only other argument besides the resultSelector is an array<EOL>    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`<EOL>","gt":"if (observables.length === <NUM_LIT> && isArray(observables[<NUM_LIT>])) {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.boot, async (store, action) => {<EOL>","gt":"await doSetup(store, db);"}
{"input":"<s> async function extract(opts) {<EOL>    const { archivePath, destPath } = opts;<EOL>    const untar = tar.","gt":"Extract(destPath);"}
{"input":"<s> export function isPromise(value) {<EOL>","gt":"return value && typeof value.subscribe !== '<STR_LIT>' && typeof value.then === '<STR_LIT>';"}
{"input":"<s> export function bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerLocation, textureUnit) {<EOL>    callAndCheck(gl, () => bindTextureUnit(gl,","gt":"texture, textureUnit));"}
{"input":"<s> export function validateFramebuffer(gl) {<EOL>    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);<EOL>    if (status !==","gt":"gl.FRAMEBUFFER_COMPLETE) {"}
{"input":"<s> export function getTextureShapeFromLogicalShape(gl, logShape) {<EOL>    // If logical shape is 2, we don't squeeze, since we want to match physical.<EOL>    if (logShape.length !== <NUM_LIT>) {<EOL>        const squeezeResult = util.squeezeShape(logShape);<EOL>        logShape = squeezeResult.newShape;<EOL>    }<EOL>","gt":"const maxTexSize = queryMaxTextureSize(gl);"}
{"input":"<s> export function getTextureShapeFromLogicalShape(gl, logShape) {<EOL>    // If logical shape is 2, we don't squeeze, since we want to match physical.<EOL>    if (logShape.length !== <NUM_LIT>) {<EOL>        const squeezeResult = util.squeezeShape(logShape);<EOL>        logShape = squeezeResult.newShape;<EOL>    }<EOL>     const maxTexSize = queryMaxTextureSize(gl);<EOL>    const size = util.sizeFromShape(logShape);<EOL>    if (logShape.length <= <NUM_LIT> && size <= maxTexSize) {<EOL>        return [size,","gt":"<NUM_LIT>];"}
{"input":"<s> export function getTextureShapeFromLogicalShape(gl, logShape) {<EOL>    // If logical shape is 2, we don't squeeze, since we want to match physical.<EOL>    if (logShape.length !== <NUM_LIT>) {<EOL>        const squeezeResult = util.squeezeShape(logShape);<EOL>        logShape = squeezeResult.newShape;<EOL>    }<EOL>     const maxTexSize = queryMaxTextureSize(gl);<EOL>    const size = util.sizeFromShape(logShape);<EOL>    if (logShape.length <= <NUM_LIT> && size <= maxTexSize) {<EOL>        return [size,  <NUM_LIT>];<EOL>    }<EOL>    else if (logShape.length === <NUM_LIT> && logShape[<NUM_LIT>] <= maxTexSize &&<EOL>        logShape[<NUM_LIT>] <=","gt":"maxTexSize) {"}
{"input":"<s> export function getTextureShapeFromLogicalShape(gl, logShape) {<EOL>    // If logical shape is 2, we don't squeeze, since we want to match physical.<EOL>    if (logShape.length !== <NUM_LIT>) {<EOL>        const squeezeResult = util.squeezeShape(logShape);<EOL>        logShape = squeezeResult.newShape;<EOL>    }<EOL>     const maxTexSize = queryMaxTextureSize(gl);<EOL>    const size = util.sizeFromShape(logShape);<EOL>    if (logShape.length <= <NUM_LIT> && size <= maxTexSize) {<EOL>        return [size,  <NUM_LIT>];<EOL>    }<EOL>    else if (logShape.length === <NUM_LIT> && logShape[<NUM_LIT>] <= maxTexSize &&<EOL>        logShape[<NUM_LIT>] <=  maxTexSize) {<EOL>        return logShape;<EOL>    }<EOL>    else if (logShape.length === <NUM_LIT> && logShape[<NUM_LIT>] <= maxTexSize &&<EOL>        logShape[<NUM_LIT>] * logShape[<NUM_LIT>] <= maxTexSize) {<EOL>        return [logShape[<NUM_LIT>], logShape[<NUM_LIT>] * logShape[<NUM_LIT>]];<EOL>    }<EOL>    else","gt":"if (logShape.length === <NUM_LIT> && logShape[<NUM_LIT>] <= maxTexSize &&"}
{"input":"<s> export function createPackedMatrixTexture(gl, rows, columns) {<EOL>    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows,","gt":"columns);"}
{"input":"<s> export function getTokenPath(userId) {<EOL>    return ospath.","gt":"join(usersPath(), userId, TOKEN_FILE_NAME);"}
{"input":"<s> export function isString(obj) {<EOL>","gt":"return typeof obj === \"<STR_LIT>\";"}
{"input":"<s> function buildComments(typeInformation, soFar, plugin) {<EOL>    return soFar.concat(plugin.","gt":"comments(typeInformation));"}
{"input":"<s> function writeAndLogSequence(parsedArgs, evaluatedSequence) {<EOL>    const outputResults = LazySequence.foldl(trackConsoleOutput, Promise.resolved(Logging.munit({ errorCount: <NUM_LIT>, successCount: <NUM_LIT> })).getFuture(), evaluatedSequence);<EOL>    const resultingLoggingContext = Promise.mbind(function (future) {<EOL>        return Promise.","gt":"map(function (lcResults) {"}
{"input":"<s> function returnJustHead(val, tail) {<EOL>    return Maybe.Just(","gt":"val);"}
{"input":"<s> <EOL>export function provideNg2Injectable({ injectable, downgradeFn, token }) {<EOL>    const { name, factoryFn, deps } = _downgradeInjectable({<EOL>        token: token || injectable,<EOL>        injectable,<EOL>","gt":"downgradeFn"}
{"input":"<s> <EOL>export function provideNg2Injectable({ injectable, downgradeFn, token }) {<EOL>    const { name, factoryFn, deps } = _downgradeInjectable({<EOL>        token: token || injectable,<EOL>        injectable,<EOL>         downgradeFn<EOL>    });<EOL>    return {<EOL>        provide: name,<EOL>","gt":"useFactory: factoryFn,"}
{"input":"<s> <EOL>export function isAttrDirective(metadata) {<EOL>    return metadata instanceof DirectiveMetadata && !(","gt":"metadata instanceof ComponentMetadata);"}
{"input":"<s> function dispatchNext(arg) {<EOL>    const { value, subject } =","gt":"arg;"}
{"input":"<s> function subtypeFromParsedSubtype(subtype) {<EOL>    return subtype.attributeValue ?<EOL>        AlgebraicType.Subtype.SingleAttributeSubtypeDefinition(subtypeAttributeFromParseResultAttribute(subtype.attributeValue)) :<EOL>","gt":"AlgebraicType.Subtype.NamedAttributeCollectionDefinition({"}
{"input":"<s> function _firstTo(value, cb) {<EOL>    return cb.call(","gt":"value.charAt(<NUM_LIT>)) + value.substring(<NUM_LIT>);"}
{"input":"<s> function dispatchError(arg) {<EOL>    const { err, subscriber } = arg;<EOL>","gt":"if (!subscriber.closed) {"}
{"input":"<s> <EOL>export function materialize() {<EOL>    return","gt":"function materializeOperatorFunction(source) {"}
{"input":"<s> function localImport(file) {<EOL>    if (file.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>        return","gt":"'<STR_LIT>' + file + '<STR_LIT>';"}
{"input":"<s> <EOL>export function exhaust() {<EOL>    return (source) => source.lift(new","gt":"SwitchFirstOperator());"}
{"input":"<s> function toPropertyModifierString(modifier) {<EOL>    return modifier.match(returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'),","gt":"returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'), returnString('<STR_LIT>'));"}
{"input":"<s> function commitLocale(store, lang, resourcesIn) {<EOL>    const resources = {};<EOL>    for (const key","gt":"of Object.keys(resourcesIn)) {"}
{"input":"<s> <EOL>export function combineAll(project) {<EOL>    return","gt":"this.lift(new CombineLatestOperator(project));"}
{"input":"<s> function addCommaToEndOfString(str) {<EOL>    return str +","gt":"'<STR_LIT>';"}
{"input":"<s> async function performUpdateCheck(ctx, items) {<EOL>    let res;<EOL>    const instance = await makeButlerInstance();<EOL>    instance.onClient(async (client) => {<EOL>        try {<EOL>            client.onNotification(messages.GameUpdateAvailable,","gt":"async ({ params }) => {"}
{"input":"<s> async function performUpdateCheck(ctx, items) {<EOL>    let res;<EOL>    const instance = await makeButlerInstance();<EOL>    instance.onClient(async (client) => {<EOL>        try {<EOL>            client.onNotification(messages.GameUpdateAvailable,  async ({ params }) => {<EOL>                const { update } = params;<EOL>                ctx.store.dispatch(actions.gameUpdateAvailable({ update }));<EOL>            });<EOL>            res = await client.","gt":"call(messages.CheckUpdate({ items }));"}
{"input":"<s> function dispatchError(arg) {<EOL>","gt":"const { err, subject } = arg;"}
{"input":"<s> <EOL>export function every(predicate, thisArg) {<EOL>    return (source) =>","gt":"source.lift(new EveryOperator(predicate, thisArg, source));"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>","gt":"logger.debug(`<STR_LIT>`);"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>","gt":"return;"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>","gt":"data: {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>","gt":"return;"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>","gt":"tab,"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>","gt":"replace,"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger.","gt":"debug(`<STR_LIT>`);"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if (","gt":"sp.isFrozen()) {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>","gt":"wc.once(\"<STR_LIT>\", () => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>","gt":"wc.openDevTools({ mode: \"<STR_LIT>\" });"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on(","gt":"\"<STR_LIT>\", () => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on(","gt":"\"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,","gt":"url, inPage, replaceEntry) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(","gt":"<NUM_LIT>)}`<STR_LIT>;"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,","gt":"action) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>","gt":"const onNewPath = (url, resource) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>","gt":"replace: true,"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>","gt":"if (parsed.search) {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed.","gt":"search, db);"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>","gt":"host,"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async (","gt":"store, action) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.","gt":"stop();"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc. stop();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandLocation, async (store, action) => {<EOL>        const { tab } =","gt":"store.getState().session.navigation;"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc. stop();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandLocation, async (store, action) => {<EOL>        const { tab } =  store.getState().session.navigation;<EOL>        store.dispatch(","gt":"actions.tabDataFetched({"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc. stop();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandLocation, async (store, action) => {<EOL>        const { tab } =  store.getState().session.navigation;<EOL>        store.dispatch( actions.tabDataFetched({<EOL>            tab,<EOL>            data: {<EOL>                web: { editingAddress: true },<EOL>            },<EOL>        }));<EOL>    });<EOL>    watcher.on(actions.commandBack,","gt":"async (store, action) => {"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc. stop();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandLocation, async (store, action) => {<EOL>        const { tab } =  store.getState().session.navigation;<EOL>        store.dispatch( actions.tabDataFetched({<EOL>            tab,<EOL>            data: {<EOL>                web: { editingAddress: true },<EOL>            },<EOL>        }));<EOL>    });<EOL>    watcher.on(actions.commandBack,  async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        store.dispatch(","gt":"actions.tabDataFetched({"}
{"input":"<s> export default function (watcher, db) {<EOL>    watcher.on(actions.tabGotWebContents, async (store, action) => {<EOL>        const { tab, webContentsId } = action.payload;<EOL>         logger.debug(`<STR_LIT>`);<EOL>        const wc = webContents.fromId(webContentsId);<EOL>        if (!wc) {<EOL>            logger.warn(`<STR_LIT>`);<EOL>             return;<EOL>        }<EOL>        let pushWeb = (web) => {<EOL>            store.dispatch(actions.tabDataFetched({<EOL>                tab,<EOL>                 data: {<EOL>                    web,<EOL>                },<EOL>            }));<EOL>        };<EOL>        pushWeb({ webContentsId, loading: wc.isLoading() });<EOL>        const sp = Space.fromStore(store, tab);<EOL>        const didNavigate = (url, replace) => {<EOL>            if (sp.isFrozen()) {<EOL>                 return;<EOL>            }<EOL>            if (url !== \"<STR_LIT>\") {<EOL>                const resource = parseWellKnownUrl(url);<EOL>                store.dispatch(actions.evolveTab({<EOL>                     tab,<EOL>                    url,<EOL>                    resource,<EOL>                     replace,<EOL>                }));<EOL>            }<EOL>        };<EOL>        logger. debug(`<STR_LIT>`);<EOL>        didNavigate(wc.getURL(), true);<EOL>        if ( sp.isFrozen()) {<EOL>            wc.on(\"<STR_LIT>\", (ev, url) => {<EOL>                ev.preventDefault();<EOL>                store.dispatch(actions.navigate({ url }));<EOL>            });<EOL>        }<EOL>        // FIXME: this used to be `dom-ready` but it doesn't seem to fire<EOL>        // on webcontents for webview.<EOL>         wc.once(\"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            if (DONT_SHOW_WEBVIEWS) {<EOL>                return;<EOL>            }<EOL>            createContextMenu(wc, store);<EOL>            if (SHOW_DEVTOOLS) {<EOL>                 wc.openDevTools({ mode: \"<STR_LIT>\" });<EOL>            }<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", () => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            wc.executeJavaScript(`<STR_LIT>`, false);<EOL>            store.dispatch(actions.analyzePage({<EOL>                tab,<EOL>                url: wc.getURL(),<EOL>                iframe: false,<EOL>            }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: true });<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", () => {<EOL>            pushWeb({ loading: false });<EOL>        });<EOL>        // FIXME: page-title-updated isn't documented, see https://github.com/electron/electron/issues/10040<EOL>        // also, with electron@1.7.5, it seems to not always fire. whereas webview's event does.<EOL>        wc.on(\"<STR_LIT>\", (ev, favicons) => {<EOL>            pushWeb({ favicon: favicons[<NUM_LIT>] });<EOL>        });<EOL>        wc.on( \"<STR_LIT>\", (ev, url, frameName, disposition, options, additionalFeatures) => {<EOL>            const background = disposition === \"<STR_LIT>\";<EOL>            store.dispatch(actions.navigate({ url, background }));<EOL>        });<EOL>        wc.on(\"<STR_LIT>\", (event,  url, inPage, replaceEntry) => {<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            logger.debug(`<STR_LIT>`);<EOL>            didNavigate(url, replaceEntry);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        });<EOL>    });<EOL>    watcher.on(actions.analyzePage, async (store,  action) => {<EOL>        const { tab, url, iframe } = action.payload;<EOL>        await withWebContents(store, tab, async (wc) => {<EOL>            const sp = Space.fromStore(store, tab);<EOL>            if (sp.isFrozen()) {<EOL>                logger.debug(`<STR_LIT>`);<EOL>                return;<EOL>            }<EOL>             const onNewPath = (url, resource) => {<EOL>                if (resource) {<EOL>                    // FIXME: we need this to be better - analyze can finish after we've already navigated away<EOL>                    // so we need to only set resource if the url is what we think it is<EOL>                    logger.debug(`<STR_LIT>`);<EOL>                    store.dispatch(actions.evolveTab({<EOL>                        tab: tab,<EOL>                        url,<EOL>                        resource,<EOL>                         replace: true,<EOL>                    }));<EOL>                    const parsed = urlParser.parse(url);<EOL>                     if (parsed.search) {<EOL>                        doSave(resource, parsed. search, db);<EOL>                    }<EOL>                }<EOL>            };<EOL>            if (iframe) {<EOL>                const parsed = nodeURL.parse(url);<EOL>                const { host, protocol, pathname } = parsed;<EOL>                const dataURL = nodeURL.format({<EOL>                     host,<EOL>                    protocol,<EOL>                    pathname: `<STR_LIT>`,<EOL>                });<EOL>                const data = await request(\"<STR_LIT>\", dataURL, {}, { format: \"<STR_LIT>\" });<EOL>                if (data && data.body && data.body.id) {<EOL>                    onNewPath(wc.getURL(), `<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            else {<EOL>                const code = `<STR_LIT>`;<EOL>                const newPath = await wc.executeJavaScript(code);<EOL>                onNewPath(url, newPath);<EOL>            }<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandReload, async ( store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc.reload();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandStop, async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        withWebContents(store, tab, wc => {<EOL>            wc. stop();<EOL>        });<EOL>    });<EOL>    watcher.on(actions.commandLocation, async (store, action) => {<EOL>        const { tab } =  store.getState().session.navigation;<EOL>        store.dispatch( actions.tabDataFetched({<EOL>            tab,<EOL>            data: {<EOL>                web: { editingAddress: true },<EOL>            },<EOL>        }));<EOL>    });<EOL>    watcher.on(actions.commandBack,  async (store, action) => {<EOL>        const { tab } = store.getState().session.navigation;<EOL>        store.dispatch( actions.tabDataFetched({<EOL>            tab,<EOL>","gt":"data: {"}
{"input":"<s> export function assignImpl(target, ...sources) {<EOL>    const len = sources.length;<EOL>    for (let i = <NUM_LIT>; i < len; i++) {<EOL>        const source = sources[i];<EOL>        for (let k in","gt":"source) {"}
{"input":"<s> function dispatchNext(subscriber) {<EOL>","gt":"subscriber.debouncedNext();"}
{"input":"<s> function willHaveImplementationForFunction(func) {<EOL>    return","gt":"func.code.length > <NUM_LIT> || !func.isPublic;"}
{"input":"<s> function allocationAndInvocationCanBeOneForAttribute(typeName, attributes) {<EOL>    return (attributes.length ==","gt":"<NUM_LIT>);"}
{"input":"<s> function blockInvocationForSubtype(algebraicType, subtype) {<EOL>    return blockParameterNameForMatchMethodFromSubtype(","gt":"subtype) + '<STR_LIT>' + attributesFromSubtype(subtype).map(FunctionUtils.pApplyf2(subtype, valueAccessorForInternalPropertyForAttribute)).join('<STR_LIT>') + '<STR_LIT>';"}
{"input":"<s> function typeInformationContainingDefaultIncludes(typeInformation, defaultIncludes) {<EOL>    return {<EOL>        annotations: typeInformation.annotations,<EOL>        comments: typeInformation.comments,<EOL>","gt":"excludes: typeInformation.excludes,"}
{"input":"<s> function typeInformationContainingDefaultIncludes(typeInformation, defaultIncludes) {<EOL>    return {<EOL>        annotations: typeInformation.annotations,<EOL>        comments: typeInformation.comments,<EOL>         excludes: typeInformation.excludes,<EOL>        includes: PluginInclusionUtils.includesContainingDefaultIncludes(typeInformation.includes, typeInformation.excludes, defaultIncludes),<EOL>        libraryName: typeInformation.libraryName,<EOL>        name: typeInformation.name,<EOL>        typeLookups: typeInformation.","gt":"typeLookups,"}
{"input":"<s> function getCORSRequest() {<EOL>    if (root.XMLHttpRequest) {<EOL>        const xhr = new root.XMLHttpRequest();<EOL>        if ('<STR_LIT>' in xhr) {<EOL>","gt":"xhr.withCredentials = !!this.withCredentials;"}
{"input":"<s> function concatString(soFar, thisOne) {<EOL>","gt":"return soFar + thisOne;"}
{"input":"<s> function wrapInQuotes(str) {<EOL>    return '<STR_LIT>' +","gt":"str + '<STR_LIT>';"}
{"input":"<s> function parseJson(str, errorMessage) {<EOL>    const parsed = safelyParsedJSON(str);<EOL>    if (parsed) {<EOL>        return Either.Right(","gt":"parsed);"}
{"input":"<s> function shortNameOfObjectToBuildForValueTypeWithName(valueTypeName) {<EOL>    return StringUtils.lowercased(StringUtils.","gt":"stringRemovingCapitalizedPrefix(valueTypeName));"}
{"input":"<s> function toWithInvocationCallForBuilderFromExistingObjectClassMethodForAttribute(indentationProvider, existingObjectName, soFar, attribute, index, array) {<EOL>    return soFar.concat(indentationProvider(index) + keywordNameForAttribute(attribute) + '<STR_LIT>' + existingObjectName +","gt":"'<STR_LIT>' + attribute.name + '<STR_LIT>');"}
{"input":"<s> function propertyFromAttribute(supportsValueSemantics, attribute) {<EOL>    return {<EOL>        comments: ObjCCommentUtils.commentsAsBlockFromStringArray(attribute.comments),<EOL>        modifiers: propertyModifiersFromAttribute(supportsValueSemantics, attribute),<EOL>        name: attribute.","gt":"name,"}
{"input":"<s> <EOL>export function pluck(...properties) {<EOL>    const length = properties.length;<EOL>    if (length ===","gt":"<NUM_LIT>) {"}
{"input":"<s> export default function (watcher) {<EOL>    watcher.on(actions.forceCloseGameRequest, async (store, action) => {<EOL>        const { game } = action.payload;<EOL>        store.dispatch(actions.openModal(modalWidgets.naked.make({<EOL>            title: [\"<STR_LIT>\"],<EOL>            message: [\"<STR_LIT>\", { title: game.title }],<EOL>","gt":"buttons: ["}
{"input":"<s> export default function (watcher) {<EOL>    watcher.on(actions.forceCloseGameRequest, async (store, action) => {<EOL>        const { game } = action.payload;<EOL>        store.dispatch(actions.openModal(modalWidgets.naked.make({<EOL>            title: [\"<STR_LIT>\"],<EOL>            message: [\"<STR_LIT>\", { title: game.title }],<EOL>             buttons: [<EOL>                {<EOL>                    label: [\"<STR_LIT>\"],<EOL>                    id: \"<STR_LIT>\",<EOL>                    action:","gt":"actions.forceCloseGame({ gameId: game.id }),"}
{"input":"<s> export default function (watcher) {<EOL>    watcher.on(actions.forceCloseGameRequest, async (store, action) => {<EOL>        const { game } = action.payload;<EOL>        store.dispatch(actions.openModal(modalWidgets.naked.make({<EOL>            title: [\"<STR_LIT>\"],<EOL>            message: [\"<STR_LIT>\", { title: game.title }],<EOL>             buttons: [<EOL>                {<EOL>                    label: [\"<STR_LIT>\"],<EOL>                    id: \"<STR_LIT>\",<EOL>                    action:  actions.forceCloseGame({ gameId: game.id }),<EOL>                    icon: \"<STR_LIT>\",<EOL>                },<EOL>","gt":"\"<STR_LIT>\","}
{"input":"<s> function toArrayReducer(arr, item, index) {<EOL>    if (index === <NUM_LIT>) {<EOL>","gt":"return [item];"}
{"input":"<s> <EOL>export function subscribeOn(scheduler, delay = <NUM_LIT>) {<EOL>    return","gt":"function subscribeOnOperatorFunction(source) {"}
{"input":"<s> function canAssertExistenceForTypeOfObjectSpecAttribute(attribute) {<EOL>    return ObjCNullabilityUtils.canAssertExistenceForType(ObjectSpecCodeUtils.computeTypeOfAttribute(","gt":"attribute));"}
{"input":"<s> function selectValue(attributeDescription) {<EOL>    return attributeDescription.","gt":"value;"}
{"input":"<s> function doesAlgebraicAttributeContainAnUnknownType(attribute) {<EOL>","gt":"const attributeDescription = attributeDescriptionForType(AlgebraicTypeUtils.computeTypeOfAttribute(attribute));"}
{"input":"<s> <EOL>export function map(project, thisArg) {<EOL>    return function mapOperation(source) {<EOL>        if (","gt":"typeof project !== '<STR_LIT>') {"}
{"input":"<s> function generatorForProvidingEqualityValuesFromGeneratorOfType(type) {<EOL>    return function (attributeValueAccessor) {<EOL>        const generationGroup =","gt":"generationGroupForType(type);"}
{"input":"<s> function compareTypeEqualityValuesByComputationCost(typeEqualityValue, typeEqualityValueToCompare) {<EOL>    const baseComputationCostValue = computationCostAsNumber(typeEqualityValue.computationCost);<EOL>    const comparisonComputationCostValue = computationCostAsNumber(typeEqualityValueToCompare.computationCost);<EOL>    if (baseComputationCostValue < comparisonComputationCostValue) {<EOL>        return","gt":"ComparisonResult.OrderedAscending;"}
{"input":"<s> function compareTypeEqualityValuesByComputationCost(typeEqualityValue, typeEqualityValueToCompare) {<EOL>    const baseComputationCostValue = computationCostAsNumber(typeEqualityValue.computationCost);<EOL>    const comparisonComputationCostValue = computationCostAsNumber(typeEqualityValueToCompare.computationCost);<EOL>    if (baseComputationCostValue < comparisonComputationCostValue) {<EOL>        return  ComparisonResult.OrderedAscending;<EOL>    }<EOL>    else if (baseComputationCostValue > comparisonComputationCostValue) {<EOL>        return ComparisonResult.OrderedDescending;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function buildEqualityFunctionsToIncludeTracker(tracker, equalityFunction) {<EOL>    const equalityFunctionName = nameOfEqualityFunction(equalityFunction);<EOL>    if (tracker.equalityFunctionsIncluded[equalityFunctionName] !== true) {<EOL>        return {<EOL>            equalityFunctionsToInclude: tracker.","gt":"equalityFunctionsToInclude.concat(equalityFunction),"}
{"input":"<s> function buildEqualityFunctionsToIncludeTracker(tracker, equalityFunction) {<EOL>    const equalityFunctionName = nameOfEqualityFunction(equalityFunction);<EOL>    if (tracker.equalityFunctionsIncluded[equalityFunctionName] !== true) {<EOL>        return {<EOL>            equalityFunctionsToInclude: tracker. equalityFunctionsToInclude.concat(equalityFunction),<EOL>            equalityFunctionsIncluded: objectIncludingValue(tracker.equalityFunctionsIncluded, equalityFunctionName, true)<EOL>        };<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function windowCount(windowSize, startWindowEvery = <NUM_LIT>) {<EOL>","gt":"return higherOrder(windowSize, startWindowEvery)(this);"}
{"input":"<s> <EOL>export function buffer(closingNotifier) {<EOL>","gt":"return higherOrder(closingNotifier)(this);"}
{"input":"<s> function nameOfObjectWithinInitializer() {<EOL>    return","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>export function materialize() {<EOL>    return","gt":"higherOrder()(this);"}
{"input":"<s> function shouldForwardDeclareAttribute(algebraicTypeName, makePublicImports, attribute) {<EOL>    const declaringPublicAttributes = !makePublicImports && ObjCImportUtils.","gt":"canForwardDeclareTypeForAttribute(attribute);"}
{"input":"<s> function isForwardDeclarationRequiredForTypeLookup(algebraicTypeName, typeLookup) {<EOL>    return typeLookup.name ===","gt":"algebraicTypeName;"}
{"input":"<s> <EOL>export function delay(delay, scheduler = async) {<EOL>","gt":"const absoluteDelay = isDate(delay);"}
{"input":"<s> function encodedStatementForSubtypeProperty(subtype) {<EOL>","gt":"const subtypeAttribute = codeableAttributeForSubtypePropertyOfAlgebraicType();"}
{"input":"<s> <EOL>export function shareReplay(bufferSize, windowTime, scheduler) {<EOL>    return higherOrder(bufferSize,","gt":"windowTime, scheduler)(this);"}
{"input":"<s> <EOL>export function every(predicate, thisArg) {<EOL>    return (source) =>","gt":"source.lift(new EveryOperator(predicate, thisArg, source));"}
{"input":"<s> export async function cachedGitHub(uri, token, maxAge) {<EOL>    let ret = githubCache.get(uri);<EOL>    if (","gt":"ret)"}
{"input":"<s> export function fetchAllOpenPRs(nwo) {<EOL>    return githubPaginate(","gt":"apiUrl(`<STR_LIT>`), undefined, <NUM_LIT> * <NUM_LIT>);"}
{"input":"<s> <EOL>export function skipWhile(predicate) {<EOL>","gt":"return this.lift(new SkipWhileOperator(predicate));"}
{"input":"<s> <EOL>export function bufferTime(bufferTimeSpan) {<EOL>    let length = arguments.length;<EOL>    let scheduler = async;<EOL>    if (isScheduler(arguments[arguments.length - <NUM_LIT>])) {<EOL>        scheduler = arguments[arguments.length - <NUM_LIT>];<EOL>","gt":"length--;"}
{"input":"<s> <EOL>export function bufferTime(bufferTimeSpan) {<EOL>    let length = arguments.length;<EOL>    let scheduler = async;<EOL>    if (isScheduler(arguments[arguments.length - <NUM_LIT>])) {<EOL>        scheduler = arguments[arguments.length - <NUM_LIT>];<EOL>         length--;<EOL>    }<EOL>    let bufferCreationInterval = null;<EOL>    if (length >= <NUM_LIT>) {<EOL>        bufferCreationInterval =","gt":"arguments[<NUM_LIT>];"}
{"input":"<s> <EOL>export function bufferTime(bufferTimeSpan) {<EOL>    let length = arguments.length;<EOL>    let scheduler = async;<EOL>    if (isScheduler(arguments[arguments.length - <NUM_LIT>])) {<EOL>        scheduler = arguments[arguments.length - <NUM_LIT>];<EOL>         length--;<EOL>    }<EOL>    let bufferCreationInterval = null;<EOL>    if (length >= <NUM_LIT>) {<EOL>        bufferCreationInterval =  arguments[<NUM_LIT>];<EOL>    }<EOL>    let maxBufferSize = Number.POSITIVE_INFINITY;<EOL>    if (","gt":"length >= <NUM_LIT>) {"}
{"input":"<s> export function zipAll(project) {<EOL>","gt":"return (source) => source.lift(new ZipOperator(project));"}
{"input":"<s> <EOL>export function single(predicate) {<EOL>","gt":"return this.lift(new SingleOperator(predicate, this));"}
{"input":"<s> <EOL>export function onErrorResumeNextStatic(...nextSources) {<EOL>    let source = null;<EOL>    if (nextSources.length === <NUM_LIT> && isArray(nextSources[","gt":"<NUM_LIT>])) {"}
{"input":"<s> <EOL>export function pluck(...properties) {<EOL>    return higherOrder(...properties)(","gt":"this);"}
{"input":"<s> <EOL>export function min(comparer) {<EOL>    const min = (typeof comparer === '<STR_LIT>')<EOL>        ? (x, y) =>","gt":"comparer(x, y) < <NUM_LIT> ? x : y"}
{"input":"<s> <EOL>export function applySecond(F) {<EOL>    return (fa, fb) => F.ap(","gt":"F.map(fa, () => (b) => b), fb);"}
{"input":"<s> function setImageSize(img, size) {<EOL>    let width, height;<EOL>    if (size) {<EOL>        width = img.style.width;<EOL>        height = img.style.height;<EOL>","gt":"if (width || height) {"}
{"input":"<s> function setImageSize(img, size) {<EOL>    let width, height;<EOL>    if (size) {<EOL>        width = img.style.width;<EOL>        height = img.style.height;<EOL>         if (width || height) {<EOL>            img.style.width = size.w + '<STR_LIT>';<EOL>            img.style.height = size.h + '<STR_LIT>';<EOL>            img.removeAttribute('<STR_LIT>');<EOL>        }<EOL>        width = img.width;<EOL>        height = img.height;<EOL>        if (width || height) {<EOL>            img.setAttribute('<STR_LIT>',","gt":"size.w);"}
{"input":"<s> <EOL>export function ignoreElements() {<EOL>    return this.","gt":"lift(new IgnoreElementsOperator());"}
{"input":"<s> <EOL>export function sampleTime(period, scheduler = async) {<EOL>    return this.lift(new SampleTimeOperator(period,","gt":"scheduler));"}
{"input":"<s> <EOL>export function replicateA(applicative, unfoldableTraversable) {<EOL>","gt":"return (n, ma) => sequence(applicative, unfoldableTraversable)(replicate(unfoldableTraversable)(ma, n));"}
{"input":"<s> <EOL>export function find(predicate, thisArg) {<EOL>    if (typeof predicate !== '<STR_LIT>') {<EOL>        throw","gt":"new TypeError('<STR_LIT>');"}
{"input":"<s> <EOL>export function window(windowBoundaries) {<EOL>    return higherOrder(","gt":"windowBoundaries)(this);"}
{"input":"<s> <EOL>export function voidLeft(F) {<EOL>    return (fa, b) => F.map(","gt":"fa, constant(b));"}
{"input":"<s> <EOL>export function product(F, S) {<EOL>    return fa => F.","gt":"reduce(fa, S.one, (b, a) => S.mul(b, a));"}
{"input":"<s> <EOL>export function getAbsoluteMappingEntries(absoluteBaseUrl, paths, addMatchAll) {<EOL>    // Resolve all paths to absolute form once here, and sort them by<EOL>    // longest prefix once here, this saves time on each request later.<EOL>    // We need to put them in an array to preserve the sorting order.<EOL>","gt":"const sortedKeys = sortByLongestPrefix(Object.keys(paths));"}
{"input":"<s> <EOL>export function getAbsoluteMappingEntries(absoluteBaseUrl, paths, addMatchAll) {<EOL>    // Resolve all paths to absolute form once here, and sort them by<EOL>    // longest prefix once here, this saves time on each request later.<EOL>    // We need to put them in an array to preserve the sorting order.<EOL>     const sortedKeys = sortByLongestPrefix(Object.keys(paths));<EOL>    const absolutePaths = [];<EOL>    for (const key of sortedKeys) {<EOL>","gt":"absolutePaths.push({"}
{"input":"<s> <EOL>export function getAbsoluteMappingEntries(absoluteBaseUrl, paths, addMatchAll) {<EOL>    // Resolve all paths to absolute form once here, and sort them by<EOL>    // longest prefix once here, this saves time on each request later.<EOL>    // We need to put them in an array to preserve the sorting order.<EOL>     const sortedKeys = sortByLongestPrefix(Object.keys(paths));<EOL>    const absolutePaths = [];<EOL>    for (const key of sortedKeys) {<EOL>         absolutePaths.push({<EOL>            pattern: key,<EOL>            paths: paths[key].map((pathToResolve) => path.join(absoluteBaseUrl, pathToResolve)),<EOL>        });<EOL>    }<EOL>    // If there is no match-all path specified in the paths section of tsconfig, then try to match<EOL>    // all paths relative to baseUrl, this is how typescript works.<EOL>    if (!paths[\"<STR_LIT>\"] && addMatchAll) {<EOL>        absolutePaths.push({<EOL>            pattern:","gt":"\"<STR_LIT>\","}
{"input":"<s> <EOL>export function switchMapTo(innerObservable, resultSelector) {<EOL>    return this.lift(new SwitchMapToOperator(","gt":"innerObservable, resultSelector));"}
{"input":"<s> export function splitLinkText(text) {<EOL>    let linkText;<EOL>    let target;<EOL>    let splitIndex;<EOL>    // if a pipe is not present, we split on the first space<EOL>    splitIndex = text.indexOf('<STR_LIT>');<EOL>    if (","gt":"splitIndex === -<NUM_LIT>) {"}
{"input":"<s> export function splitLinkText(text) {<EOL>    let linkText;<EOL>    let target;<EOL>    let splitIndex;<EOL>    // if a pipe is not present, we split on the first space<EOL>    splitIndex = text.indexOf('<STR_LIT>');<EOL>    if ( splitIndex === -<NUM_LIT>) {<EOL>        splitIndex = text.search(/\\s/);<EOL>    }<EOL>    if (splitIndex !== -<NUM_LIT>) {<EOL>        linkText = text.substr(splitIndex +","gt":"<NUM_LIT>);"}
{"input":"<s> export default function () {<EOL>    const store = TestStore();<EOL>    const editorState = {<EOL>        start: Cell(null),<EOL>        content: Cell(","gt":"'<STR_LIT>')"}
{"input":"<s> export default function () {<EOL>    const store = TestStore();<EOL>    const editorState = {<EOL>        start: Cell(null),<EOL>        content: Cell( '<STR_LIT>')<EOL>    };<EOL>    const sPrepareState = function (node, content) {<EOL>        return Step.sync(function () {<EOL>            editorState.","gt":"start.set(node);"}
{"input":"<s> export default function () {<EOL>    const store = TestStore();<EOL>    const editorState = {<EOL>        start: Cell(null),<EOL>        content: Cell( '<STR_LIT>')<EOL>    };<EOL>    const sPrepareState = function (node, content) {<EOL>        return Step.sync(function () {<EOL>            editorState. start.set(node);<EOL>            editorState.content.set(content);<EOL>        });<EOL>    };<EOL>","gt":"const editor = {"}
{"input":"<s> export default function () {<EOL>    const store = TestStore();<EOL>    const editorState = {<EOL>        start: Cell(null),<EOL>        content: Cell( '<STR_LIT>')<EOL>    };<EOL>    const sPrepareState = function (node, content) {<EOL>        return Step.sync(function () {<EOL>            editorState. start.set(node);<EOL>            editorState.content.set(content);<EOL>        });<EOL>    };<EOL>     const editor = {<EOL>        selection: {<EOL>            getStart: editorState.start.get,<EOL>            getContent: editorState.content.get,<EOL>            select: Fun.noop<EOL>        },<EOL>        insertContent(data) {<EOL>            store.adder({ method: '<STR_LIT>', data })();<EOL>        },<EOL>        execCommand(name, ui,","gt":"args) {"}
{"input":"<s> export default function () {<EOL>    const store = TestStore();<EOL>    const editorState = {<EOL>        start: Cell(null),<EOL>        content: Cell( '<STR_LIT>')<EOL>    };<EOL>    const sPrepareState = function (node, content) {<EOL>        return Step.sync(function () {<EOL>            editorState. start.set(node);<EOL>            editorState.content.set(content);<EOL>        });<EOL>    };<EOL>     const editor = {<EOL>        selection: {<EOL>            getStart: editorState.start.get,<EOL>            getContent: editorState.content.get,<EOL>            select: Fun.noop<EOL>        },<EOL>        insertContent(data) {<EOL>            store.adder({ method: '<STR_LIT>', data })();<EOL>        },<EOL>        execCommand(name, ui,  args) {<EOL>            store.adder({ method: '<STR_LIT>', data: Objects.wrap(name, args) })();<EOL>        },<EOL>        dom: {<EOL>            createHTML(tag, attributes, innerText) {<EOL>                return { tag, attributes, innerText };<EOL>            },<EOL>            encode: Fun.identity<EOL>        },<EOL>","gt":"focus: Fun.noop"}
{"input":"<s> export function em(value) {<EOL>    if (typeof value !== '<STR_LIT>') {<EOL>        throw new TypeError(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function foo(status) {<EOL>    console.","gt":"log('<STR_LIT>');"}
{"input":"<s> async function getArtifactsFromUrl(artifactQueryUrl, strictSSL, localPathRoot, itemPattern, handler, variables) {<EOL>    console.log(tl.loc('<STR_LIT>', artifactQueryUrl));<EOL>    var templatePath = path.join(__dirname, '<STR_LIT>');<EOL>    var webProvider =","gt":"new providers.WebProvider(artifactQueryUrl, templatePath, variables, handler, { ignoreSslError: !strictSSL });"}
{"input":"<s> // Configure the JVM associated with this run.<EOL>function setGradleOpts(gradleOptions) {<EOL>    if (gradleOptions) {<EOL>        process.env['<STR_LIT>'] =","gt":"gradleOptions;"}
{"input":"<s> function findExistingRegisteredTask(target, handler, name, capture, remove) {<EOL>    const eventTasks = target[EVENT_TASKS];<EOL>    if (eventTasks) {<EOL>        for (let i = <NUM_LIT>; i < eventTasks.length; i++) {<EOL>            const eventTask = eventTasks[i];<EOL>            const data = eventTask.","gt":"data;"}
{"input":"<s> export function mergeTagsAndArgs(args, jsdoctags) {<EOL>    let margs = _.cloneDeep(args);<EOL>    _.forEach(margs, (arg) => {<EOL>","gt":"arg.tagName = {"}
{"input":"<s> export function mergeTagsAndArgs(args, jsdoctags) {<EOL>    let margs = _.cloneDeep(args);<EOL>    _.forEach(margs, (arg) => {<EOL>         arg.tagName = {<EOL>            text: '<STR_LIT>'<EOL>        };<EOL>        if (jsdoctags) {<EOL>            _.","gt":"forEach(jsdoctags, (jsdoctag) => {"}
{"input":"<s> export function mergeTagsAndArgs(args, jsdoctags) {<EOL>    let margs = _.cloneDeep(args);<EOL>    _.forEach(margs, (arg) => {<EOL>         arg.tagName = {<EOL>            text: '<STR_LIT>'<EOL>        };<EOL>        if (jsdoctags) {<EOL>            _. forEach(jsdoctags, (jsdoctag) => {<EOL>                if (jsdoctag.name && jsdoctag.name.text === arg.name) {<EOL>                    arg.tagName = jsdoctag.tagName;<EOL>                    arg.name = jsdoctag.name;<EOL>                    arg.","gt":"comment = jsdoctag.comment;"}
{"input":"<s> export function mergeTagsAndArgs(args, jsdoctags) {<EOL>    let margs = _.cloneDeep(args);<EOL>    _.forEach(margs, (arg) => {<EOL>         arg.tagName = {<EOL>            text: '<STR_LIT>'<EOL>        };<EOL>        if (jsdoctags) {<EOL>            _. forEach(jsdoctags, (jsdoctag) => {<EOL>                if (jsdoctag.name && jsdoctag.name.text === arg.name) {<EOL>                    arg.tagName = jsdoctag.tagName;<EOL>                    arg.name = jsdoctag.name;<EOL>                    arg. comment = jsdoctag.comment;<EOL>                    arg.typeExpression = jsdoctag.typeExpression;<EOL>                }<EOL>            });<EOL>        }<EOL>    });<EOL>    // Add example & returns<EOL>    if (jsdoctags) {<EOL>        _.forEach(","gt":"jsdoctags, (jsdoctag) => {"}
{"input":"<s> export function mergeTagsAndArgs(args, jsdoctags) {<EOL>    let margs = _.cloneDeep(args);<EOL>    _.forEach(margs, (arg) => {<EOL>         arg.tagName = {<EOL>            text: '<STR_LIT>'<EOL>        };<EOL>        if (jsdoctags) {<EOL>            _. forEach(jsdoctags, (jsdoctag) => {<EOL>                if (jsdoctag.name && jsdoctag.name.text === arg.name) {<EOL>                    arg.tagName = jsdoctag.tagName;<EOL>                    arg.name = jsdoctag.name;<EOL>                    arg. comment = jsdoctag.comment;<EOL>                    arg.typeExpression = jsdoctag.typeExpression;<EOL>                }<EOL>            });<EOL>        }<EOL>    });<EOL>    // Add example & returns<EOL>    if (jsdoctags) {<EOL>        _.forEach( jsdoctags, (jsdoctag) => {<EOL>            if (jsdoctag.tagName && jsdoctag.tagName.text === '<STR_LIT>') {<EOL>                margs.push({<EOL>                    tagName: jsdoctag.tagName,<EOL>                    comment: jsdoctag.comment<EOL>                });<EOL>            }<EOL>            if (jsdoctag.","gt":"tagName && jsdoctag.tagName.text === '<STR_LIT>') {"}
{"input":"<s> async function run() {<EOL>    try {<EOL>        let version = tl.getInput('<STR_LIT>', true).trim();<EOL>        await getGo(","gt":"version);"}
{"input":"<s> export function isDate(value) {<EOL>","gt":"return value instanceof Date && !isNaN(+value);"}
{"input":"<s> function getIterator(obj) {<EOL>    const i = obj[$$iterator];<EOL>    if (!i && typeof obj === '<STR_LIT>') {<EOL>        return new StringIterator(obj);<EOL>    }<EOL>    if (!i && obj.length !== undefined) {<EOL>        return new ArrayIterator(obj);<EOL>    }<EOL>    if (!i) {<EOL>        throw new","gt":"TypeError('<STR_LIT>');"}
{"input":"<s> function numberIsFinite(value) {<EOL>","gt":"return typeof value === '<STR_LIT>' && root.isFinite(value);"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let","gt":"images;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img.","gt":"src;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if (","gt":"img.hasAttribute('<STR_LIT>')) {"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>","gt":"return false;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return","gt":"false;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>","gt":"return false;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>             return false;<EOL>        });<EOL>        const promises = Arr.map(images, function (img) {<EOL>            if (cachedPromises[img.src]) {<EOL>                // Since the cached promise will return the cached image<EOL>                // We need to wrap it and resolve with the actual image<EOL>                return new Promise(function (resolve) {<EOL>                    cachedPromises[img.src].then(function (imageInfo) {<EOL>                        if (typeof imageInfo ===","gt":"'<STR_LIT>') {"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>             return false;<EOL>        });<EOL>        const promises = Arr.map(images, function (img) {<EOL>            if (cachedPromises[img.src]) {<EOL>                // Since the cached promise will return the cached image<EOL>                // We need to wrap it and resolve with the actual image<EOL>                return new Promise(function (resolve) {<EOL>                    cachedPromises[img.src].then(function (imageInfo) {<EOL>                        if (typeof imageInfo ===  '<STR_LIT>') { // error apparently<EOL>                            return imageInfo;<EOL>                        }<EOL>","gt":"resolve({"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>             return false;<EOL>        });<EOL>        const promises = Arr.map(images, function (img) {<EOL>            if (cachedPromises[img.src]) {<EOL>                // Since the cached promise will return the cached image<EOL>                // We need to wrap it and resolve with the actual image<EOL>                return new Promise(function (resolve) {<EOL>                    cachedPromises[img.src].then(function (imageInfo) {<EOL>                        if (typeof imageInfo ===  '<STR_LIT>') { // error apparently<EOL>                            return imageInfo;<EOL>                        }<EOL>                         resolve({<EOL>                            image: img,<EOL>                            blobInfo: imageInfo.blobInfo<EOL>                        });<EOL>                    });<EOL>                });<EOL>            }<EOL>            const newPromise = new Promise(function (resolve,","gt":"reject) {"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>             return false;<EOL>        });<EOL>        const promises = Arr.map(images, function (img) {<EOL>            if (cachedPromises[img.src]) {<EOL>                // Since the cached promise will return the cached image<EOL>                // We need to wrap it and resolve with the actual image<EOL>                return new Promise(function (resolve) {<EOL>                    cachedPromises[img.src].then(function (imageInfo) {<EOL>                        if (typeof imageInfo ===  '<STR_LIT>') { // error apparently<EOL>                            return imageInfo;<EOL>                        }<EOL>                         resolve({<EOL>                            image: img,<EOL>                            blobInfo: imageInfo.blobInfo<EOL>                        });<EOL>                    });<EOL>                });<EOL>            }<EOL>            const newPromise = new Promise(function (resolve,  reject) {<EOL>                imageToBlobInfo(blobCache, img, resolve, reject);<EOL>            }).then(function (result) {<EOL>                delete cachedPromises[result.image.src];<EOL>                return","gt":"result;"}
{"input":"<s> export default function (uploadStatus, blobCache) {<EOL>    const cachedPromises = {};<EOL>    const findAll = function (elm, predicate) {<EOL>        let  images;<EOL>        if (!predicate) {<EOL>            predicate = Fun.constant(true);<EOL>        }<EOL>        images = Arr.filter(getAllImages(elm), function (img) {<EOL>            const src = img. src;<EOL>            if (!Env.fileApi) {<EOL>                return false;<EOL>            }<EOL>            if ( img.hasAttribute('<STR_LIT>')) {<EOL>                 return false;<EOL>            }<EOL>            if (img.hasAttribute('<STR_LIT>')) {<EOL>                return false;<EOL>            }<EOL>            if (!src || src === Env.transparentSrc) {<EOL>                return  false;<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return !uploadStatus.isUploaded(src);<EOL>            }<EOL>            if (src.indexOf('<STR_LIT>') === <NUM_LIT>) {<EOL>                return predicate(img);<EOL>            }<EOL>             return false;<EOL>        });<EOL>        const promises = Arr.map(images, function (img) {<EOL>            if (cachedPromises[img.src]) {<EOL>                // Since the cached promise will return the cached image<EOL>                // We need to wrap it and resolve with the actual image<EOL>                return new Promise(function (resolve) {<EOL>                    cachedPromises[img.src].then(function (imageInfo) {<EOL>                        if (typeof imageInfo ===  '<STR_LIT>') { // error apparently<EOL>                            return imageInfo;<EOL>                        }<EOL>                         resolve({<EOL>                            image: img,<EOL>                            blobInfo: imageInfo.blobInfo<EOL>                        });<EOL>                    });<EOL>                });<EOL>            }<EOL>            const newPromise = new Promise(function (resolve,  reject) {<EOL>                imageToBlobInfo(blobCache, img, resolve, reject);<EOL>            }).then(function (result) {<EOL>                delete cachedPromises[result.image.src];<EOL>                return  result;<EOL>            }).catch(function (error) {<EOL>                delete cachedPromises[img.src];<EOL>                return","gt":"error;"}
{"input":"<s> export function ajaxGet(url, resultSelector = defaultGetResultSelector, headers = null) {<EOL>    return","gt":"new AjaxObservable({ method: '<STR_LIT>', url, resultSelector, headers });"}
{"input":"<s> <EOL>export function publishLast() {<EOL>","gt":"return multicast.call(this, new AsyncSubject());"}
{"input":"<s> <EOL>export function distinctKey(key, compare, flushes) {<EOL>    return distinct.call(this, function (x, y) {<EOL>        if (","gt":"compare) {"}
{"input":"<s> <EOL>export function withLatestFrom(...args) {<EOL>    let project;<EOL>    if (typeof","gt":"args[args.length - <NUM_LIT>] === '<STR_LIT>') {"}
{"input":"<s> function setResponseFile(name) {<EOL>","gt":"process.env['<STR_LIT>'] = path.join(__dirname, name);"}
{"input":"<s> function setResponseFile(name) {<EOL>","gt":"process.env['<STR_LIT>'] = path.join(__dirname, name);"}
{"input":"<s> <EOL>export function formatPath(canonicalPath) {<EOL>    if (process.env[TestEnvVars.operatingSystem] === OperatingSystems.Windows) {<EOL>        return \"<STR_LIT>\" + canonicalPath.replace('<STR_LIT>',","gt":"'<STR_LIT>');"}
{"input":"<s> function resolveInputPatternToOneFile(inputName, required, name) {<EOL>    let pattern = tl.getInput(inputName, required);<EOL>    if (!pattern) {<EOL>        return","gt":"null;"}
{"input":"<s> export default async function server(key, githubAccessToken, dry, fetcher, options) {<EOL>    const client = await NpmClient.create();<EOL>    return listenToGithub(key, githubAccessToken, fetcher, updateOneAtATime(async (log, timeStamp) => {<EOL>        log.info(","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function matchTag() {<EOL>    if (!validate(false) || !vscode.window.activeTextEditor) {<EOL>        return;<EOL>    }<EOL>    const editor = vscode.window.activeTextEditor;<EOL>    let rootNode = parseDocument(editor.document);<EOL>","gt":"if (!rootNode) {"}
{"input":"<s> export function matchTag() {<EOL>    if (!validate(false) || !vscode.window.activeTextEditor) {<EOL>        return;<EOL>    }<EOL>    const editor = vscode.window.activeTextEditor;<EOL>    let rootNode = parseDocument(editor.document);<EOL>     if (!rootNode) {<EOL>        return;<EOL>    }<EOL>    let updatedSelections = [];<EOL>    editor.selections.forEach(selection => {<EOL>        let","gt":"updatedSelection = getUpdatedSelections(editor, selection.start, rootNode);"}
{"input":"<s> export function GetScriptOperationName(operation) {<EOL>    let defaultName = ScriptOperation[operation];<EOL>    switch (operation) {<EOL>        case ScriptOperation.Select:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case","gt":"ScriptOperation.Create:"}
{"input":"<s> export function GetScriptOperationName(operation) {<EOL>    let defaultName = ScriptOperation[operation];<EOL>    switch (operation) {<EOL>        case ScriptOperation.Select:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case  ScriptOperation.Create:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ScriptOperation.Insert:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>","gt":"case ScriptOperation.Update:"}
{"input":"<s> export function GetScriptOperationName(operation) {<EOL>    let defaultName = ScriptOperation[operation];<EOL>    switch (operation) {<EOL>        case ScriptOperation.Select:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case  ScriptOperation.Create:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ScriptOperation.Insert:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>         case ScriptOperation.Update:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ScriptOperation.Delete:<EOL>            return nls.localize('<STR_LIT>', '<STR_LIT>');<EOL>","gt":"default:"}
{"input":"<s> function runNuGet(executionOptions) {<EOL>    let nugetTool = ngToolRunner.createNuGetToolRunner(executionOptions.nuGetPath, executionOptions.environment, executionOptions.authInfo);<EOL>    nugetTool.line(executionOptions.args);<EOL>    nugetTool.arg(","gt":"\"<STR_LIT>\");"}
{"input":"<s> <EOL>function createOptions(options) {<EOL>    let strOptions = '<STR_LIT>';<EOL>    if (options) {<EOL>        for (let i =","gt":"<NUM_LIT>; i < options.length; i++) {"}
{"input":"<s> function updateStatus(status) {<EOL>    let text = getSelectedLines();<EOL>    if (text) {<EOL>        status.text = '<STR_LIT>' + text;<EOL>    }<EOL>    if (text) {<EOL>        status.show();<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function validate(args) {<EOL>    if (args.goto) {<EOL>        args.","gt":"_.forEach(arg => assert(/^(\\w:)?[^:]+(:\\d*){0,2}$/.test(arg), localize('<STR_LIT>', \"<STR_LIT>\")));"}
{"input":"<s> export function promoteSubtree(textEditor, edit) {<EOL>    const document = textEditor.document;<EOL>    const cursorPos = Utils.getCursorPosition();<EOL>    let curLine = Utils.getLine(textEditor.document, cursorPos);<EOL>    let headerPrefix = Utils.getHeaderPrefix(curLine);<EOL>","gt":"let endOfContent = Utils.findEndOfContent(document, cursorPos, headerPrefix);"}
{"input":"<s> export function promoteSubtree(textEditor, edit) {<EOL>    const document = textEditor.document;<EOL>    const cursorPos = Utils.getCursorPosition();<EOL>    let curLine = Utils.getLine(textEditor.document, cursorPos);<EOL>    let headerPrefix = Utils.getHeaderPrefix(curLine);<EOL>     let endOfContent = Utils.findEndOfContent(document, cursorPos, headerPrefix);<EOL>    if (headerPrefix) {<EOL>        for (let i = cursorPos.line; i < endOfContent.line + <NUM_LIT>; ++i) {<EOL>            let curlineStart = new vscode.Position(i, <NUM_LIT>);<EOL>            let","gt":"lineHeaderPrefix = Utils.getHeaderPrefix(Utils.getLine(document, curlineStart));"}
{"input":"<s> // Only checking if there should be a space or not<EOL>function expecting(errors) {<EOL>    // true means there should be a space<EOL>    return errors.map((err) => {<EOL>        const","gt":"status = err ? '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> export function getLeftZero() {<EOL>    const settings = vscode.workspace.","gt":"getConfiguration(\"<STR_LIT>\");"}
{"input":"<s> export function getUniq(arr) {<EOL>    // Must also preserve order<EOL>    let map = {};<EOL>    let uniq = [];<EOL>","gt":"arr.forEach(el => {"}
{"input":"<s> export function getUniq(arr) {<EOL>    // Must also preserve order<EOL>    let map = {};<EOL>    let uniq = [];<EOL>     arr.forEach(el => {<EOL>        if (!map[el]) {<EOL>            uniq.push(el);<EOL>        }<EOL>        map[","gt":"el] = true;"}
{"input":"<s> function createClass(clazz, mixins) {<EOL>    var spec = extractPrototype(clazz);<EOL>    spec.displayName = clazz.prototype.constructor.name;<EOL>    if (spec.componentWillMount !== undefined) {<EOL>        var componentWillMount = spec.componentWillMount;<EOL>        spec.componentWillMount = function () {<EOL>            clazz.apply(","gt":"this);"}
{"input":"<s> function createClass(clazz, mixins) {<EOL>    var spec = extractPrototype(clazz);<EOL>    spec.displayName = clazz.prototype.constructor.name;<EOL>    if (spec.componentWillMount !== undefined) {<EOL>        var componentWillMount = spec.componentWillMount;<EOL>        spec.componentWillMount = function () {<EOL>            clazz.apply( this);<EOL>            componentWillMount.apply(this);<EOL>        };<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function expecting(errors) {<EOL>    // [message, line, column]<EOL>    return errors.map((err) => {<EOL>","gt":"return {"}
{"input":"<s> function elemPath(elem) {<EOL>    const maxLen = <NUM_LIT>;<EOL>    let path = [];<EOL>    let parent = elem;<EOL>    while (parent) {<EOL>        let name = elemName(parent);<EOL>","gt":"if (name !== '<STR_LIT>') {"}
{"input":"<s> function getSectionEl(element) {<EOL>","gt":"return element.firstElementChild;"}
{"input":"<s> export function selectElements(element, selector) {<EOL>    return [].slice.call(element.","gt":"querySelectorAll(selector));"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result.","gt":"RunSettings) {"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result. RunSettings) {<EOL>        if (result.RunSettings.TestRunParameters && result.RunSettings.TestRunParameters[<NUM_LIT>] &&<EOL>            result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter) {<EOL>            tl.","gt":"debug('<STR_LIT>');"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result. RunSettings) {<EOL>        if (result.RunSettings.TestRunParameters && result.RunSettings.TestRunParameters[<NUM_LIT>] &&<EOL>            result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter) {<EOL>            tl. debug('<STR_LIT>');<EOL>            parametersArray = result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter;<EOL>        }<EOL>    }<EOL>","gt":"else if (result.TestSettings) {"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result. RunSettings) {<EOL>        if (result.RunSettings.TestRunParameters && result.RunSettings.TestRunParameters[<NUM_LIT>] &&<EOL>            result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter) {<EOL>            tl. debug('<STR_LIT>');<EOL>            parametersArray = result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter;<EOL>        }<EOL>    }<EOL>     else if (result.TestSettings) {<EOL>        if (result.TestSettings.Properties && result.TestSettings.Properties[<NUM_LIT>] &&<EOL>            result.TestSettings.Properties[<NUM_LIT>].Property) {<EOL>","gt":"tl.debug('<STR_LIT>');"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result. RunSettings) {<EOL>        if (result.RunSettings.TestRunParameters && result.RunSettings.TestRunParameters[<NUM_LIT>] &&<EOL>            result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter) {<EOL>            tl. debug('<STR_LIT>');<EOL>            parametersArray = result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter;<EOL>        }<EOL>    }<EOL>     else if (result.TestSettings) {<EOL>        if (result.TestSettings.Properties && result.TestSettings.Properties[<NUM_LIT>] &&<EOL>            result.TestSettings.Properties[<NUM_LIT>].Property) {<EOL>             tl.debug('<STR_LIT>');<EOL>            parametersArray = result.TestSettings.Properties[<NUM_LIT>].Property;<EOL>        }<EOL>    }<EOL>    if (","gt":"parametersArray) {"}
{"input":"<s> function updateSettingsWithParameters(result, overrideParametersString) {<EOL>    const overrideParameters = parameterParser.parse(overrideParametersString);<EOL>    var parametersArray;<EOL>    if (result. RunSettings) {<EOL>        if (result.RunSettings.TestRunParameters && result.RunSettings.TestRunParameters[<NUM_LIT>] &&<EOL>            result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter) {<EOL>            tl. debug('<STR_LIT>');<EOL>            parametersArray = result.RunSettings.TestRunParameters[<NUM_LIT>].Parameter;<EOL>        }<EOL>    }<EOL>     else if (result.TestSettings) {<EOL>        if (result.TestSettings.Properties && result.TestSettings.Properties[<NUM_LIT>] &&<EOL>            result.TestSettings.Properties[<NUM_LIT>].Property) {<EOL>             tl.debug('<STR_LIT>');<EOL>            parametersArray = result.TestSettings.Properties[<NUM_LIT>].Property;<EOL>        }<EOL>    }<EOL>    if ( parametersArray) {<EOL>        parametersArray.forEach(function (parameter) {<EOL>            const key = parameter.$.Name || parameter.$.name;<EOL>            if (overrideParameters[key] && overrideParameters[key].value) {<EOL>                tl.debug('<STR_LIT>' + key);<EOL>                if (parameter.$.Value) {<EOL>                    parameter.$.Value = overrideParameters[key].","gt":"value;"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return Object.assign({}, state);<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return Object.assign({}, state);<EOL>        case  '<STR_LIT>':<EOL>            return Object.assign({}, state, { currentUser: null, loggedIn: false });<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case '<STR_LIT>':<EOL>            return Object.assign({}, state);<EOL>        case  '<STR_LIT>':<EOL>            return Object.assign({}, state, { currentUser: null, loggedIn: false });<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return Object.assign({}, state, { currentUser: action.payload, loggedIn: true });<EOL>        case '<STR_LIT>':<EOL>            return Object.assign({}, state, { realms: [...state.realms, action.payload] });<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile, options: { tabs, smartTabs } } = ctx;<EOL>    let regExp;<EOL>    if (","gt":"tabs === true) {"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile, options: { tabs, smartTabs } } = ctx;<EOL>    let regExp;<EOL>    if ( tabs === true) {<EOL>        regExp = new RegExp(`<STR_LIT>`);<EOL>    }<EOL>    else if (tabs === false) {<EOL>        regExp = new","gt":"RegExp(`<STR_LIT>`);"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile, options: { tabs, smartTabs } } = ctx;<EOL>    let regExp;<EOL>    if ( tabs === true) {<EOL>        regExp = new RegExp(`<STR_LIT>`);<EOL>    }<EOL>    else if (tabs === false) {<EOL>        regExp = new  RegExp(`<STR_LIT>`);<EOL>    }<EOL>    else {<EOL>        regExp = new RegExp(`<STR_LIT>`);<EOL>    }<EOL>    const failure = Rule.FAILURE_STRING(tabs ? '<STR_LIT>' : '<STR_LIT>', typeof tabs === '<STR_LIT>');<EOL>    for (const { pos, contentLength } of getLineRanges(sourceFile)) {<EOL>        if (contentLength === <NUM_LIT>) {<EOL>","gt":"continue;"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile, options: { tabs, smartTabs } } = ctx;<EOL>    let regExp;<EOL>    if ( tabs === true) {<EOL>        regExp = new RegExp(`<STR_LIT>`);<EOL>    }<EOL>    else if (tabs === false) {<EOL>        regExp = new  RegExp(`<STR_LIT>`);<EOL>    }<EOL>    else {<EOL>        regExp = new RegExp(`<STR_LIT>`);<EOL>    }<EOL>    const failure = Rule.FAILURE_STRING(tabs ? '<STR_LIT>' : '<STR_LIT>', typeof tabs === '<STR_LIT>');<EOL>    for (const { pos, contentLength } of getLineRanges(sourceFile)) {<EOL>        if (contentLength === <NUM_LIT>) {<EOL>             continue;<EOL>        }<EOL>        const line = sourceFile.text.substr(pos, contentLength);<EOL>        let indentEnd = line.search(/\\S/);<EOL>","gt":"if (indentEnd === <NUM_LIT>) {"}
{"input":"<s> export default function makeFilter() {<EOL>    let lastNoticeJSON;<EOL>    let timeout;<EOL>    return function (notice) {<EOL>        let s = JSON.stringify(notice.errors);<EOL>","gt":"if (s === lastNoticeJSON) {"}
{"input":"<s> export default function makeFilter() {<EOL>    let lastNoticeJSON;<EOL>    let timeout;<EOL>    return function (notice) {<EOL>        let s = JSON.stringify(notice.errors);<EOL>         if (s === lastNoticeJSON) {<EOL>            return null;<EOL>        }<EOL>        if (timeout) {<EOL>","gt":"clearTimeout(timeout);"}
{"input":"<s> export default function makeFilter() {<EOL>    let lastNoticeJSON;<EOL>    let timeout;<EOL>    return function (notice) {<EOL>        let s = JSON.stringify(notice.errors);<EOL>         if (s === lastNoticeJSON) {<EOL>            return null;<EOL>        }<EOL>        if (timeout) {<EOL>             clearTimeout(timeout);<EOL>        }<EOL>        lastNoticeJSON = s;<EOL>        timeout = setTimeout(() => {<EOL>            lastNoticeJSON =","gt":"'<STR_LIT>';"}
{"input":"<s> function getManager() {<EOL>","gt":"return wetland().getManager();"}
{"input":"<s> export function getActivatedRouteWithParent(params) {<EOL>    const route = new MockActivatedRoute();<EOL>    route.parent = new MockActivatedRoute();<EOL>","gt":"if (params) {"}
{"input":"<s> // There is only one message, checking start and end<EOL>function expecting(errors) {<EOL>    return [{<EOL>            failure:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export function huffman(frequences) {<EOL>    <EOL>    const queue = new MinHeap((a, b) => a.frequency - b.frequency);<EOL>    frequences.forEach(freq => queue.insert(freq));<EOL>    range(<NUM_LIT>, frequences.length - <NUM_LIT>).forEach(() => {<EOL>        const","gt":"left = queue.removeHead();"}
{"input":"<s> // Check if given value is integer. Cast strings as potential integers as well.<EOL>// See: http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript<EOL>export function isInt(value) {<EOL>    if (isNaN(value)) {<EOL>        return","gt":"false;"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;","gt":"y++) {"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const","gt":"b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /","gt":"REGION_SIZE);"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /","gt":"REGION_SIZE);"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *","gt":"REGION_SIZE + x, verticalRegion * REGION_SIZE + y);"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const","gt":"averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const  averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +<EOL>                        (<NUM_LIT> * blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion)) +<EOL>                        blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion - <NUM_LIT>)) / <NUM_LIT>;<EOL>","gt":"if (min < averageNeighborBlackPoint) {"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const  averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +<EOL>                        (<NUM_LIT> * blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion)) +<EOL>                        blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion - <NUM_LIT>)) / <NUM_LIT>;<EOL>                     if (min < averageNeighborBlackPoint) {<EOL>                        average = averageNeighborBlackPoint;<EOL>                    }<EOL>                }<EOL>            }<EOL>            blackPoints.set(hortizontalRegion, verticalRegion, average);<EOL>        }<EOL>    }<EOL>    const binarized = BitMatrix.createEmpty(width, height);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion <","gt":"horizontalRegionCount; hortizontalRegion++) {"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const  averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +<EOL>                        (<NUM_LIT> * blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion)) +<EOL>                        blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion - <NUM_LIT>)) / <NUM_LIT>;<EOL>                     if (min < averageNeighborBlackPoint) {<EOL>                        average = averageNeighborBlackPoint;<EOL>                    }<EOL>                }<EOL>            }<EOL>            blackPoints.set(hortizontalRegion, verticalRegion, average);<EOL>        }<EOL>    }<EOL>    const binarized = BitMatrix.createEmpty(width, height);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion <  horizontalRegionCount; hortizontalRegion++) {<EOL>            const left = numBetween(hortizontalRegion, <NUM_LIT>, horizontalRegionCount - <NUM_LIT>);<EOL>            const top = numBetween(verticalRegion, <NUM_LIT>, verticalRegionCount - <NUM_LIT>);<EOL>            let sum = <NUM_LIT>;<EOL>            for (let","gt":"xRegion = -<NUM_LIT>; xRegion <= <NUM_LIT>; xRegion++) {"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const  averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +<EOL>                        (<NUM_LIT> * blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion)) +<EOL>                        blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion - <NUM_LIT>)) / <NUM_LIT>;<EOL>                     if (min < averageNeighborBlackPoint) {<EOL>                        average = averageNeighborBlackPoint;<EOL>                    }<EOL>                }<EOL>            }<EOL>            blackPoints.set(hortizontalRegion, verticalRegion, average);<EOL>        }<EOL>    }<EOL>    const binarized = BitMatrix.createEmpty(width, height);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion <  horizontalRegionCount; hortizontalRegion++) {<EOL>            const left = numBetween(hortizontalRegion, <NUM_LIT>, horizontalRegionCount - <NUM_LIT>);<EOL>            const top = numBetween(verticalRegion, <NUM_LIT>, verticalRegionCount - <NUM_LIT>);<EOL>            let sum = <NUM_LIT>;<EOL>            for (let  xRegion = -<NUM_LIT>; xRegion <= <NUM_LIT>; xRegion++) {<EOL>                for (","gt":"let yRegion = -<NUM_LIT>; yRegion <= <NUM_LIT>; yRegion++) {"}
{"input":"<s> export function binarize(data, width, height) {<EOL>    if (data.length !== width * height * <NUM_LIT>) {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    // Convert image to greyscale<EOL>    const greyscalePixels = new Matrix(width, height);<EOL>    for (let x = <NUM_LIT>; x < width; x++) {<EOL>        for (let y = <NUM_LIT>; y < height;  y++) {<EOL>            const r = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const g = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            const  b = data[((y * width + x) * <NUM_LIT>) + <NUM_LIT>];<EOL>            greyscalePixels.set(x, y, <NUM_LIT> * r + <NUM_LIT> * g + <NUM_LIT> * b);<EOL>        }<EOL>    }<EOL>    const horizontalRegionCount = Math.ceil(width /  REGION_SIZE);<EOL>    const verticalRegionCount = Math.ceil(height /  REGION_SIZE);<EOL>    const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {<EOL>            let sum = <NUM_LIT>;<EOL>            let min = Infinity;<EOL>            let max = <NUM_LIT>;<EOL>            for (let y = <NUM_LIT>; y < REGION_SIZE; y++) {<EOL>                for (let x = <NUM_LIT>; x < REGION_SIZE; x++) {<EOL>                    const pixelLumosity = greyscalePixels.get(hortizontalRegion *  REGION_SIZE + x, verticalRegion * REGION_SIZE + y);<EOL>                    sum += pixelLumosity;<EOL>                    min = Math.min(min, pixelLumosity);<EOL>                    max = Math.max(max, pixelLumosity);<EOL>                }<EOL>            }<EOL>            let average = sum / (REGION_SIZE ** <NUM_LIT>);<EOL>            if (max - min <= MIN_DYNAMIC_RANGE) {<EOL>                // If variation within the block is low, assume this is a block with only light or only<EOL>                // dark pixels. In that case we do not want to use the average, as it would divide this<EOL>                // low contrast area into black and white pixels, essentially creating data out of noise.<EOL>                //<EOL>                // Default the blackpoint for these blocks to be half the min - effectively white them out<EOL>                average = min / <NUM_LIT>;<EOL>                if (verticalRegion > <NUM_LIT> && hortizontalRegion > <NUM_LIT>) {<EOL>                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing<EOL>                    // the pixels in this block to the previously calculated black points. This is based on<EOL>                    // the fact that dark barcode symbology is always surrounded by some amount of light<EOL>                    // background for which reasonable black point estimates were made. The bp estimated at<EOL>                    // the boundaries is used for the interior.<EOL>                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.<EOL>                    const  averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - <NUM_LIT>) +<EOL>                        (<NUM_LIT> * blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion)) +<EOL>                        blackPoints.get(hortizontalRegion - <NUM_LIT>, verticalRegion - <NUM_LIT>)) / <NUM_LIT>;<EOL>                     if (min < averageNeighborBlackPoint) {<EOL>                        average = averageNeighborBlackPoint;<EOL>                    }<EOL>                }<EOL>            }<EOL>            blackPoints.set(hortizontalRegion, verticalRegion, average);<EOL>        }<EOL>    }<EOL>    const binarized = BitMatrix.createEmpty(width, height);<EOL>    for (let verticalRegion = <NUM_LIT>; verticalRegion < verticalRegionCount; verticalRegion++) {<EOL>        for (let hortizontalRegion = <NUM_LIT>; hortizontalRegion <  horizontalRegionCount; hortizontalRegion++) {<EOL>            const left = numBetween(hortizontalRegion, <NUM_LIT>, horizontalRegionCount - <NUM_LIT>);<EOL>            const top = numBetween(verticalRegion, <NUM_LIT>, verticalRegionCount - <NUM_LIT>);<EOL>            let sum = <NUM_LIT>;<EOL>            for (let  xRegion = -<NUM_LIT>; xRegion <= <NUM_LIT>; xRegion++) {<EOL>                for ( let yRegion = -<NUM_LIT>; yRegion <= <NUM_LIT>; yRegion++) {<EOL>                    sum += blackPoints.get(left + xRegion, top + yRegion);<EOL>                }<EOL>            }<EOL>","gt":"const threshold = sum / <NUM_LIT>;"}
{"input":"<s> function condense(unmatched, map, filter, context, xml) {<EOL>    let elem, newUnmatched = [], i = <NUM_LIT>, len = unmatched.length, mapped = map != null;<EOL>    for (; i < len; i++) {<EOL>        if ((elem = unmatched[i])) {<EOL>            if (!filter || filter(","gt":"elem, context, xml)) {"}
{"input":"<s> function getSettings(scope, selector) {<EOL>    VSS.getService(VSS.ServiceIds.ExtensionData).then((dataService) => {<EOL>        const boolPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });<EOL>        const numPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });<EOL>","gt":"const objPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });"}
{"input":"<s> function getSettings(scope, selector) {<EOL>    VSS.getService(VSS.ServiceIds.ExtensionData).then((dataService) => {<EOL>        const boolPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });<EOL>        const numPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });<EOL>         const objPromise = dataService.getValue(\"<STR_LIT>\", { scopeType: scope });<EOL>        Q.all([boolPromise, numPromise, objPromise]).spread((boolValue, numValue, objValue) => {<EOL>            $(selector + \"<STR_LIT>\").prop(\"<STR_LIT>\", boolValue);<EOL>            $(selector + \"<STR_LIT>\").val(numValue ? numValue.toString() : \"<STR_LIT>\");<EOL>            $(selector + \"<STR_LIT>\").val(objValue ? objValue.val1 : \"<STR_LIT>\");<EOL>            $(selector + \"<STR_LIT>\").val(objValue ? objValue.val2 :","gt":"\"<STR_LIT>\");"}
{"input":"<s> function autoFixEdit(startLine, startChar, endLine, endChar) {<EOL>    return {<EOL>        range: range(startLine,","gt":"startChar, endLine, endChar),"}
{"input":"<s> function flipIn(rotateX, rotateY) {<EOL>    const params = { timing: DEFAULT_TIMING, delay: <NUM_LIT>, rotateX, rotateY };<EOL>    return animation([<EOL>        style({ '<STR_LIT>': '<STR_LIT>' }),<EOL>        animate('<STR_LIT>', keyframes([<EOL>            style({<EOL>","gt":"opacity: <NUM_LIT>,"}
{"input":"<s> function flipIn(rotateX, rotateY) {<EOL>    const params = { timing: DEFAULT_TIMING, delay: <NUM_LIT>, rotateX, rotateY };<EOL>    return animation([<EOL>        style({ '<STR_LIT>': '<STR_LIT>' }),<EOL>        animate('<STR_LIT>', keyframes([<EOL>            style({<EOL>                 opacity: <NUM_LIT>,<EOL>                transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>            style({<EOL>                opacity: <NUM_LIT>,<EOL>","gt":"transform: '<STR_LIT>',"}
{"input":"<s> function flipIn(rotateX, rotateY) {<EOL>    const params = { timing: DEFAULT_TIMING, delay: <NUM_LIT>, rotateX, rotateY };<EOL>    return animation([<EOL>        style({ '<STR_LIT>': '<STR_LIT>' }),<EOL>        animate('<STR_LIT>', keyframes([<EOL>            style({<EOL>                 opacity: <NUM_LIT>,<EOL>                transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>            style({<EOL>                opacity: <NUM_LIT>,<EOL>                 transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>","gt":"style({"}
{"input":"<s> function flipIn(rotateX, rotateY) {<EOL>    const params = { timing: DEFAULT_TIMING, delay: <NUM_LIT>, rotateX, rotateY };<EOL>    return animation([<EOL>        style({ '<STR_LIT>': '<STR_LIT>' }),<EOL>        animate('<STR_LIT>', keyframes([<EOL>            style({<EOL>                 opacity: <NUM_LIT>,<EOL>                transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>            style({<EOL>                opacity: <NUM_LIT>,<EOL>                 transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>             style({<EOL>                transform: '<STR_LIT>',<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>            style({<EOL>                transform: '<STR_LIT>',<EOL>                offset:","gt":"<NUM_LIT>,"}
{"input":"<s> export function getSyntheticNodeById(root, id) {<EOL>    const window = root.$type === SYNTHETIC_WINDOW ? root :","gt":"getSyntheticNodeWindow(root, id);"}
{"input":"<s> function setClass(instance, klasses, isAdd) {<EOL>    if (klasses) {<EOL>        (Array.","gt":"isArray(klasses) ? klasses : [klasses]).forEach(k => {"}
{"input":"<s> export default function loadConfig() {<EOL>    return new Promise(resolve => {<EOL>        fs.readFile(CONFIG_FILE, '<STR_LIT>', (err, json) => {<EOL>            if (err) {<EOL>","gt":"log.info('<STR_LIT>', CONFIG_FILE);"}
{"input":"<s> export default function loadConfig() {<EOL>    return new Promise(resolve => {<EOL>        fs.readFile(CONFIG_FILE, '<STR_LIT>', (err, json) => {<EOL>            if (err) {<EOL>                 log.info('<STR_LIT>', CONFIG_FILE);<EOL>                const default_config = makeDefaultConfig();<EOL>                // Note:<EOL>                // If calling writeFile() directly here, it tries to create config file before Electron<EOL>                // runtime creates data directory. As the result, writeFile() would fail to create a file.<EOL>                if (app.isReady()) {<EOL>                    fs.writeFileSync(CONFIG_FILE, JSON.stringify(default_config, null, <NUM_LIT>));<EOL>                    recommendConfigAndDie(CONFIG_FILE);<EOL>                }<EOL>                else {<EOL>                    app.","gt":"once('<STR_LIT>', () => {"}
{"input":"<s> export default function loadConfig() {<EOL>    return new Promise(resolve => {<EOL>        fs.readFile(CONFIG_FILE, '<STR_LIT>', (err, json) => {<EOL>            if (err) {<EOL>                 log.info('<STR_LIT>', CONFIG_FILE);<EOL>                const default_config = makeDefaultConfig();<EOL>                // Note:<EOL>                // If calling writeFile() directly here, it tries to create config file before Electron<EOL>                // runtime creates data directory. As the result, writeFile() would fail to create a file.<EOL>                if (app.isReady()) {<EOL>                    fs.writeFileSync(CONFIG_FILE, JSON.stringify(default_config, null, <NUM_LIT>));<EOL>                    recommendConfigAndDie(CONFIG_FILE);<EOL>                }<EOL>                else {<EOL>                    app. once('<STR_LIT>', () => {<EOL>                        fs.writeFileSync(CONFIG_FILE, JSON.stringify(default_config, null, <NUM_LIT>));<EOL>                        recommendConfigAndDie(CONFIG_FILE);<EOL>                    });<EOL>                }<EOL>                return;<EOL>            }<EOL>            try {<EOL>                const config = JSON.parse(json);<EOL>                if (config.hot_key && config.hot_key.startsWith('<STR_LIT>')) {<EOL>                    config.hot_key =","gt":"<NUM_LIT>)}`<STR_LIT>;"}
{"input":"<s> export default function loadConfig() {<EOL>    return new Promise(resolve => {<EOL>        fs.readFile(CONFIG_FILE, '<STR_LIT>', (err, json) => {<EOL>            if (err) {<EOL>                 log.info('<STR_LIT>', CONFIG_FILE);<EOL>                const default_config = makeDefaultConfig();<EOL>                // Note:<EOL>                // If calling writeFile() directly here, it tries to create config file before Electron<EOL>                // runtime creates data directory. As the result, writeFile() would fail to create a file.<EOL>                if (app.isReady()) {<EOL>                    fs.writeFileSync(CONFIG_FILE, JSON.stringify(default_config, null, <NUM_LIT>));<EOL>                    recommendConfigAndDie(CONFIG_FILE);<EOL>                }<EOL>                else {<EOL>                    app. once('<STR_LIT>', () => {<EOL>                        fs.writeFileSync(CONFIG_FILE, JSON.stringify(default_config, null, <NUM_LIT>));<EOL>                        recommendConfigAndDie(CONFIG_FILE);<EOL>                    });<EOL>                }<EOL>                return;<EOL>            }<EOL>            try {<EOL>                const config = JSON.parse(json);<EOL>                if (config.hot_key && config.hot_key.startsWith('<STR_LIT>')) {<EOL>                    config.hot_key = `<STR_LIT>`;<EOL>                }<EOL>                log.debug('<STR_LIT>', config);<EOL>                if (!config.accounts || config.accounts[<NUM_LIT>].host === '<STR_LIT>' || config.accounts[<NUM_LIT>].name === '<STR_LIT>') {<EOL>                    recommendConfigAndDie(CONFIG_FILE);<EOL>                }<EOL>                else {<EOL>                    config.__DATA_DIR = DATA_DIR;<EOL>                    if (config.chromium_sandbox === undefined) {<EOL>","gt":"config.chromium_sandbox = true;"}
{"input":"<s> function resolveSpecifiedPath(specified) {<EOL>    if (specified === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (specified[<NUM_LIT>] === '<STR_LIT>') {<EOL>","gt":"const home = os.homedir();"}
{"input":"<s> function resolveSpecifiedPath(specified) {<EOL>    if (specified === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (specified[<NUM_LIT>] === '<STR_LIT>') {<EOL>         const home = os.homedir();<EOL>        if (home === '<STR_LIT>') {<EOL>            return '<STR_LIT>';<EOL>        }<EOL>","gt":"return resolveSpecifiedPath(home + specified.slice(<NUM_LIT>));"}
{"input":"<s> function resolveSpecifiedPath(specified) {<EOL>    if (specified === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (specified[<NUM_LIT>] === '<STR_LIT>') {<EOL>         const home = os.homedir();<EOL>        if (home === '<STR_LIT>') {<EOL>            return '<STR_LIT>';<EOL>        }<EOL>         return resolveSpecifiedPath(home + specified.slice(<NUM_LIT>));<EOL>    }<EOL>    if (!fs.existsSync(specified)) {<EOL>        console.","gt":"log('<STR_LIT>', specified);"}
{"input":"<s> function updateWithTouchData(e) {<EOL>    let keys, i;<EOL>    if (e.changedTouches) {<EOL>        keys = '<STR_LIT>'.split(","gt":"'<STR_LIT>');"}
{"input":"<s> function zoomOutDirection(axis) {<EOL>    const translate3d = transformAxis(axis, '<STR_LIT>');<EOL>    return function (steps) {<EOL>        const params = Object.assign({ timing: DEFAULT_TIMING, delay: <NUM_LIT> }, steps);<EOL>        return animation(animate('<STR_LIT>', keyframes([<EOL>","gt":"style({"}
{"input":"<s> function zoomOutDirection(axis) {<EOL>    const translate3d = transformAxis(axis, '<STR_LIT>');<EOL>    return function (steps) {<EOL>        const params = Object.assign({ timing: DEFAULT_TIMING, delay: <NUM_LIT> }, steps);<EOL>        return animation(animate('<STR_LIT>', keyframes([<EOL>             style({<EOL>                opacity: <NUM_LIT>,<EOL>                transform: `<STR_LIT>`,<EOL>                offset: <NUM_LIT>,<EOL>            }),<EOL>            style({<EOL>                opacity: <NUM_LIT>,<EOL>                transform: `<STR_LIT>`,<EOL>","gt":"offset: <NUM_LIT>,"}
{"input":"<s> export default function startApp(config) {<EOL>","gt":"const default_account = config.accounts[<NUM_LIT>];"}
{"input":"<s> <EOL>function openHashLink(event) {<EOL>    <EOL>    event.","gt":"preventDefault();"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>","gt":"if (settings.fix_self_closing !== false) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings.","gt":"fix_self_closing = true;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const","gt":"cdata = settings.cdata ? settings.cdata : noop;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>","gt":"const text = settings.text ? settings.text : noop;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const","gt":"stack = [];"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,","gt":"attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for (","gt":"i = stack.length - <NUM_LIT>; i >= pos; i--) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name.","gt":"valid) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>","gt":"let attrRule, i;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&","gt":"isValidPrefixAttrName(name) === false) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&","gt":"validAttributePatterns) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if (","gt":"i === -<NUM_LIT>) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent(","gt":"uri);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>","gt":"if (scriptUriRegExp.test(uri)) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>","gt":"value"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>","gt":"'<STR_LIT>' +"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =","gt":"settings.validate;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema.","gt":"getSpecialElements();"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>","gt":"value = value.substr(<NUM_LIT>);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag(","gt":"value);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +","gt":"matches[<NUM_LIT>].length;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>","gt":"value = value.substr(<NUM_LIT>);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag(","gt":"value);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>","gt":"validAttributePatterns = elementRule.attributePatterns;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>","gt":"if ((attribsValue = matches[<NUM_LIT>])) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf(","gt":"'<STR_LIT>') !== -<NUM_LIT>;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&","gt":"removeInternalElements) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace(","gt":"attrRegExp, parseAttribute);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>","gt":"attrList = [];"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =","gt":"elementRule.attributesRequired;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>","gt":"attributesDefault = elementRule.attributesDefault;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>","gt":"i = attributesForced.length;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>","gt":"attr = attributesForced[i];"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if (","gt":"attrValue === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>","gt":"attrValue = '<STR_LIT>' + idCount++;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>","gt":"while ("}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while (","gt":"i--) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>","gt":"if (attr === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp.","gt":"lastIndex);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches.","gt":"index + matches[<NUM_LIT>].length;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =","gt":"endRegExp.exec(html))) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches.","gt":"index + matches[<NUM_LIT>].length;"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>","gt":"textData = html.substr(index);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>                         textData = html.substr(index);<EOL>                        index = html.length;<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        if (textData.length > <NUM_LIT>) {<EOL>                            text(textData, true);<EOL>                        }<EOL>","gt":"end(value);"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>                         textData = html.substr(index);<EOL>                        index = html.length;<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        if (textData.length > <NUM_LIT>) {<EOL>                            text(textData, true);<EOL>                        }<EOL>                         end(value);<EOL>                    }<EOL>                    tokenRegExp.lastIndex = index;<EOL>                    continue;<EOL>                }<EOL>                // Push value on to stack<EOL>                if (!isShortEnded) {<EOL>","gt":"if (!attribsValue || attribsValue.indexOf('<STR_LIT>') !=="}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>                         textData = html.substr(index);<EOL>                        index = html.length;<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        if (textData.length > <NUM_LIT>) {<EOL>                            text(textData, true);<EOL>                        }<EOL>                         end(value);<EOL>                    }<EOL>                    tokenRegExp.lastIndex = index;<EOL>                    continue;<EOL>                }<EOL>                // Push value on to stack<EOL>                if (!isShortEnded) {<EOL>                     if (!attribsValue || attribsValue.indexOf('<STR_LIT>') !==","gt":"attribsValue.length - <NUM_LIT>) {"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>                         textData = html.substr(index);<EOL>                        index = html.length;<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        if (textData.length > <NUM_LIT>) {<EOL>                            text(textData, true);<EOL>                        }<EOL>                         end(value);<EOL>                    }<EOL>                    tokenRegExp.lastIndex = index;<EOL>                    continue;<EOL>                }<EOL>                // Push value on to stack<EOL>                if (!isShortEnded) {<EOL>                     if (!attribsValue || attribsValue.indexOf('<STR_LIT>') !==  attribsValue.length - <NUM_LIT>) {<EOL>                        stack.push({ name: value, valid:","gt":"isValidElement });"}
{"input":"<s> <EOL>export function SaxParser(settings, schema = Schema()) {<EOL>    const noop = function () { };<EOL>    settings = settings || {};<EOL>     if (settings.fix_self_closing !== false) {<EOL>        settings. fix_self_closing = true;<EOL>    }<EOL>    // Add handler functions from settings and setup default handlers<EOL>    each('<STR_LIT>'.split('<STR_LIT>'), function (name) {<EOL>        if (name) {<EOL>            self[name] = settings[name] || noop;<EOL>        }<EOL>    });<EOL>    const comment = settings.comment ? settings.comment : noop;<EOL>    const  cdata = settings.cdata ? settings.cdata : noop;<EOL>     const text = settings.text ? settings.text : noop;<EOL>    const start = settings.start ? settings.start : noop;<EOL>    const end = settings.end ? settings.end : noop;<EOL>    const pi = settings.pi ? settings.pi : noop;<EOL>    const doctype = settings.doctype ? settings.doctype : noop;<EOL>    <EOL>    const parse = (html) => {<EOL>        let matches, index = <NUM_LIT>, value, endRegExp;<EOL>        const  stack = [];<EOL>        let attrList, i, textData, name;<EOL>        let isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;<EOL>        let validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;<EOL>        let attributesRequired, attributesDefault, attributesForced, processHtml;<EOL>        let anyAttributesRequired, selfClosing, tokenRegExp,  attrRegExp, specialElements, attrValue, idCount = <NUM_LIT>;<EOL>        const decode = Entities.decode;<EOL>        let fixSelfClosing;<EOL>        const filteredUrlAttrs = Tools.makeMap('<STR_LIT>');<EOL>        const scriptUriRegExp = /((java|vb)script|mhtml):/i, dataUriRegExp = /^data:/i;<EOL>        const processEndTag = function (name) {<EOL>            let pos, i;<EOL>            // Find position of parent of the same type<EOL>            pos = stack.length;<EOL>            while (pos--) {<EOL>                if (stack[pos].name === name) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            // Found parent<EOL>            if (pos >= <NUM_LIT>) {<EOL>                // Close all the open elements<EOL>                for ( i = stack.length - <NUM_LIT>; i >= pos; i--) {<EOL>                    name = stack[i];<EOL>                    if (name. valid) {<EOL>                        end(name.name);<EOL>                    }<EOL>                }<EOL>                // Remove the open elements from the stack<EOL>                stack.length = pos;<EOL>            }<EOL>        };<EOL>        const parseAttribute = function (match, name, value, val2, val3) {<EOL>             let attrRule, i;<EOL>            const trimRegExp = /[\\s\\u0000-\\u001F]+/g;<EOL>            name = name.toLowerCase();<EOL>            value = name in fillAttrsMap ? name : decode(value || val2 || val3 || '<STR_LIT>'); // Handle boolean attribute than value attribute<EOL>            // Validate name and value pass through all data- attributes<EOL>            if (validate && !isInternalElement &&  isValidPrefixAttrName(name) === false) {<EOL>                attrRule = validAttributesMap[name];<EOL>                // Find rule by pattern matching<EOL>                if (!attrRule &&  validAttributePatterns) {<EOL>                    i = validAttributePatterns.length;<EOL>                    while (i--) {<EOL>                        attrRule = validAttributePatterns[i];<EOL>                        if (attrRule.pattern.test(name)) {<EOL>                            break;<EOL>                        }<EOL>                    }<EOL>                    // No rule matched<EOL>                    if ( i === -<NUM_LIT>) {<EOL>                        attrRule = null;<EOL>                    }<EOL>                }<EOL>                // No attribute rule found<EOL>                if (!attrRule) {<EOL>                    return;<EOL>                }<EOL>                // Validate value<EOL>                if (attrRule.validValues && !(value in attrRule.validValues)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block any javascript: urls or non image data uris<EOL>            if (filteredUrlAttrs[name] && !settings.allow_script_urls) {<EOL>                let uri = value.replace(trimRegExp, '<STR_LIT>');<EOL>                try {<EOL>                    // Might throw malformed URI sequence<EOL>                    uri = decodeURIComponent( uri);<EOL>                }<EOL>                catch (ex) {<EOL>                    // Fallback to non UTF-8 decoder<EOL>                    uri = unescape(uri);<EOL>                }<EOL>                 if (scriptUriRegExp.test(uri)) {<EOL>                     return;<EOL>                }<EOL>                if (!settings.allow_html_data_urls && dataUriRegExp.test(uri) && !/^data:image\\//i.test(uri)) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            // Block data or event attributes on elements marked as internal<EOL>            if (isInternalElement && (name in filteredUrlAttrs || name.indexOf('<STR_LIT>') === <NUM_LIT>)) {<EOL>                return;<EOL>            }<EOL>            // Add attribute to list and map<EOL>            attrList.map[name] = value;<EOL>            attrList.push({<EOL>                name,<EOL>                 value<EOL>            });<EOL>        };<EOL>        // Precompile RegExps and map objects<EOL>        tokenRegExp = new RegExp('<STR_LIT>' +<EOL>            '<STR_LIT>' + // Comment<EOL>            '<STR_LIT>' + // CDATA<EOL>            '<STR_LIT>' + // DOCTYPE<EOL>            '<STR_LIT>' + // PI<EOL>             '<STR_LIT>' + // End element<EOL>            '<STR_LIT>' + // Start element<EOL>            '<STR_LIT>', '<STR_LIT>');<EOL>        attrRegExp = /([\\w:\\-]+)(?:\\s*=\\s*(?:(?:\\\"((?:[^\\\"])*)\\\")|(?:\\'((?:[^\\'])*)\\')|([^>\\s]+)))?/g;<EOL>        // Setup lookup tables for empty elements and boolean attributes<EOL>        shortEndedElements = schema.getShortEndedElements();<EOL>        selfClosing = settings.self_closing_elements || schema.getSelfClosingElements();<EOL>        fillAttrsMap = schema.getBoolAttrs();<EOL>        validate =  settings.validate;<EOL>        removeInternalElements = settings.remove_internals;<EOL>        fixSelfClosing = settings.fix_self_closing;<EOL>        specialElements = schema. getSpecialElements();<EOL>        processHtml = html + '<STR_LIT>';<EOL>        while ((matches = tokenRegExp.exec(processHtml))) { // Adds and extra '>' to keep regexps from doing catastrofic backtracking on malformed html<EOL>            // Text<EOL>            if (index < matches.index) {<EOL>                text(decode(html.substr(index, matches.index - index)));<EOL>            }<EOL>            if ((value = matches[<NUM_LIT>])) { // End element<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                processEndTag( value);<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Start element<EOL>                // Did we consume the extra character then treat it as text<EOL>                // This handles the case with html like this: \"text a<b text\"<EOL>                if (matches.index + matches[<NUM_LIT>].length > html.length) {<EOL>                    text(decode(html.substr(matches.index)));<EOL>                    index = matches.index +  matches[<NUM_LIT>].length;<EOL>                    continue;<EOL>                }<EOL>                value = value.toLowerCase();<EOL>                // IE will add a \":\" in front of elements it doesn't understand like custom elements or HTML5 elements<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                     value = value.substr(<NUM_LIT>);<EOL>                }<EOL>                isShortEnded = value in shortEndedElements;<EOL>                // Is self closing tag for example an <li> after an open <li><EOL>                if (fixSelfClosing && selfClosing[value] && stack.length > <NUM_LIT> && stack[stack.length - <NUM_LIT>].name === value) {<EOL>                    processEndTag( value);<EOL>                }<EOL>                // Validate element<EOL>                if (!validate || (elementRule = schema.getElementRule(value))) {<EOL>                    isValidElement = true;<EOL>                    // Grab attributes map and patters when validation is enabled<EOL>                    if (validate) {<EOL>                        validAttributesMap = elementRule.attributes;<EOL>                         validAttributePatterns = elementRule.attributePatterns;<EOL>                    }<EOL>                    // Parse attributes<EOL>                     if ((attribsValue = matches[<NUM_LIT>])) {<EOL>                        isInternalElement = attribsValue.indexOf( '<STR_LIT>') !== -<NUM_LIT>; // Check if the element is an internal element<EOL>                        // If the element has internal attributes then remove it if we are told to do so<EOL>                        if (isInternalElement &&  removeInternalElements) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        attrList = [];<EOL>                        attrList.map = {};<EOL>                        attribsValue.replace( attrRegExp, parseAttribute);<EOL>                    }<EOL>                    else {<EOL>                         attrList = [];<EOL>                        attrList.map = {};<EOL>                    }<EOL>                    // Process attributes if validation is enabled<EOL>                    if (validate && !isInternalElement) {<EOL>                        attributesRequired =  elementRule.attributesRequired;<EOL>                         attributesDefault = elementRule.attributesDefault;<EOL>                        attributesForced = elementRule.attributesForced;<EOL>                        anyAttributesRequired = elementRule.removeEmptyAttrs;<EOL>                        // Check if any attribute exists<EOL>                        if (anyAttributesRequired && !attrList.length) {<EOL>                            isValidElement = false;<EOL>                        }<EOL>                        // Handle forced attributes<EOL>                        if (attributesForced) {<EOL>                             i = attributesForced.length;<EOL>                            while (i--) {<EOL>                                 attr = attributesForced[i];<EOL>                                name = attr.name;<EOL>                                attrValue = attr.value;<EOL>                                if ( attrValue === '<STR_LIT>') {<EOL>                                     attrValue = '<STR_LIT>' + idCount++;<EOL>                                }<EOL>                                attrList.map[name] = attrValue;<EOL>                                attrList.push({ name, value: attrValue });<EOL>                            }<EOL>                        }<EOL>                        // Handle default attributes<EOL>                        if (attributesDefault) {<EOL>                            i = attributesDefault.length;<EOL>                             while ( i--) {<EOL>                                attr = attributesDefault[i];<EOL>                                name = attr.name;<EOL>                                if (!(name in attrList.map)) {<EOL>                                    attrValue = attr.value;<EOL>                                    if (attrValue === '<STR_LIT>') {<EOL>                                        attrValue = '<STR_LIT>' + idCount++;<EOL>                                    }<EOL>                                    attrList.map[name] = attrValue;<EOL>                                    attrList.push({ name, value: attrValue });<EOL>                                }<EOL>                            }<EOL>                        }<EOL>                        // Handle required attributes<EOL>                        if (attributesRequired) {<EOL>                            i = attributesRequired.length;<EOL>                            while (i--) {<EOL>                                if (attributesRequired[i] in attrList.map) {<EOL>                                    break;<EOL>                                }<EOL>                            }<EOL>                            // None of the required attributes where found<EOL>                            if (i === -<NUM_LIT>) {<EOL>                                isValidElement = false;<EOL>                            }<EOL>                        }<EOL>                        // Invalidate element if it's marked as bogus<EOL>                        if ((attr = attrList.map['<STR_LIT>'])) {<EOL>                             if (attr === '<STR_LIT>') {<EOL>                                index = findEndTagIndex(schema, html, tokenRegExp. lastIndex);<EOL>                                tokenRegExp.lastIndex = index;<EOL>                                continue;<EOL>                            }<EOL>                            isValidElement = false;<EOL>                        }<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        start(value, attrList, isShortEnded);<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    isValidElement = false;<EOL>                }<EOL>                // Treat script, noscript and style a bit different since they may include code that looks like elements<EOL>                if ((endRegExp = specialElements[value])) {<EOL>                    endRegExp.lastIndex = index = matches. index + matches[<NUM_LIT>].length;<EOL>                    if ((matches =  endRegExp.exec(html))) {<EOL>                        if (isValidElement) {<EOL>                            textData = html.substr(index, matches.index - index);<EOL>                        }<EOL>                        index = matches. index + matches[<NUM_LIT>].length;<EOL>                    }<EOL>                    else {<EOL>                         textData = html.substr(index);<EOL>                        index = html.length;<EOL>                    }<EOL>                    if (isValidElement) {<EOL>                        if (textData.length > <NUM_LIT>) {<EOL>                            text(textData, true);<EOL>                        }<EOL>                         end(value);<EOL>                    }<EOL>                    tokenRegExp.lastIndex = index;<EOL>                    continue;<EOL>                }<EOL>                // Push value on to stack<EOL>                if (!isShortEnded) {<EOL>                     if (!attribsValue || attribsValue.indexOf('<STR_LIT>') !==  attribsValue.length - <NUM_LIT>) {<EOL>                        stack.push({ name: value, valid:  isValidElement });<EOL>                    }<EOL>                    else if (isValidElement) {<EOL>                        end(value);<EOL>                    }<EOL>                }<EOL>            }<EOL>            else if ((value = matches[<NUM_LIT>])) { // Comment<EOL>                // Padd comment value to avoid browsers from parsing invalid comments as HTML<EOL>                if (value.charAt(<NUM_LIT>) === '<STR_LIT>') {<EOL>                    value = '<STR_LIT>' + value;<EOL>                }<EOL>                if (!settings.allow_conditional_comments && value.substr(<NUM_LIT>, <NUM_LIT>).","gt":"toLowerCase() === '<STR_LIT>') {"}
{"input":"<s> function getBackdrop(element) {<EOL>    return element.","gt":"querySelector('<STR_LIT>');"}
{"input":"<s> function onGridStepInput(event) {<EOL>    const target = event.target;<EOL>    let value = parseFloat(target.value);<EOL>    if (value !== <NUM_LIT> && value < <NUM_LIT>) {<EOL>        value =","gt":"<NUM_LIT>;"}
{"input":"<s> function registerCommand(context, command, callback) {<EOL>    let disposable = vscode.commands.registerCommand(command, async (args) => {<EOL>        if (!vscode.window.activeTextEditor) {<EOL>","gt":"return;"}
{"input":"<s> export async function allowVSCodeToPropagateCursorUpdatesAndReturnThem() {<EOL>    await","gt":"waitForCursorUpdatesToHappen();"}
{"input":"<s> function getElements(element) {<EOL>    const assistiveEl = element.querySelector('<STR_LIT>');<EOL>","gt":"return {"}
{"input":"<s> function styledConsoleLog(...args) {<EOL>    var argArray = [];<EOL>    if (args.length) {<EOL>        var startTagRe = /<span\\s+style=(['\"])([^'\"]*)\\1\\s*>/gi;<EOL>        var endTagRe = /<\\/span>/gi;<EOL>","gt":"var reResultArray;"}
{"input":"<s> function styledConsoleLog(...args) {<EOL>    var argArray = [];<EOL>    if (args.length) {<EOL>        var startTagRe = /<span\\s+style=(['\"])([^'\"]*)\\1\\s*>/gi;<EOL>        var endTagRe = /<\\/span>/gi;<EOL>         var reResultArray;<EOL>        argArray.push(arguments[<NUM_LIT>].replace(startTagRe, '<STR_LIT>').replace(endTagRe, '<STR_LIT>'));<EOL>        while (reResultArray = startTagRe.exec(arguments[<NUM_LIT>])) {<EOL>            argArray.push(reResultArray[<NUM_LIT>]);<EOL>","gt":"argArray.push('<STR_LIT>');"}
{"input":"<s> function styledConsoleLog(...args) {<EOL>    var argArray = [];<EOL>    if (args.length) {<EOL>        var startTagRe = /<span\\s+style=(['\"])([^'\"]*)\\1\\s*>/gi;<EOL>        var endTagRe = /<\\/span>/gi;<EOL>         var reResultArray;<EOL>        argArray.push(arguments[<NUM_LIT>].replace(startTagRe, '<STR_LIT>').replace(endTagRe, '<STR_LIT>'));<EOL>        while (reResultArray = startTagRe.exec(arguments[<NUM_LIT>])) {<EOL>            argArray.push(reResultArray[<NUM_LIT>]);<EOL>             argArray.push('<STR_LIT>');<EOL>        }<EOL>        // pass through subsequent args since chrome dev tools does not (yet) support console.log styling of the following form: console.log('%cBlue!', 'color: blue;', '%cRed!', 'color: red;');<EOL>        for (var j = <NUM_LIT>; j < arguments.length; j++) {<EOL>            argArray.push(","gt":"arguments[j]);"}
{"input":"<s> export function bindProperty(source, sourceProperty, target, destProperty = sourceProperty) {<EOL>    return watchProperty(source,","gt":"sourceProperty, (newValue, oldValue) => {"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document.","gt":"createElement('<STR_LIT>');"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>","gt":"if (itemTemplate) {"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate(","gt":"activeItem);"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&","gt":"item === activeItem;"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&  item === activeItem;<EOL>        }<EOL>        if (isActive)<EOL>            li.classList.add('<STR_LIT>');<EOL>        // hack for backwards compatibility<EOL>        if (div.firstElementChild && div.firstElementChild.tagName === '<STR_LIT>') {<EOL>            div.innerHTML = div.firstElementChild.","gt":"innerHTML;"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&  item === activeItem;<EOL>        }<EOL>        if (isActive)<EOL>            li.classList.add('<STR_LIT>');<EOL>        // hack for backwards compatibility<EOL>        if (div.firstElementChild && div.firstElementChild.tagName === '<STR_LIT>') {<EOL>            div.innerHTML = div.firstElementChild. innerHTML;<EOL>        }<EOL>        li.appendChild(div);<EOL>        return li;<EOL>    };<EOL>    const filterKeyForItem = (item) => {<EOL>        if (typeof itemFilterKey === '<STR_LIT>') {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>        else if (itemFilterKey) {<EOL>            return itemFilterKey(item);<EOL>        }<EOL>        else {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>    };<EOL>","gt":"const myitems = await Promise.resolve(items);"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&  item === activeItem;<EOL>        }<EOL>        if (isActive)<EOL>            li.classList.add('<STR_LIT>');<EOL>        // hack for backwards compatibility<EOL>        if (div.firstElementChild && div.firstElementChild.tagName === '<STR_LIT>') {<EOL>            div.innerHTML = div.firstElementChild. innerHTML;<EOL>        }<EOL>        li.appendChild(div);<EOL>        return li;<EOL>    };<EOL>    const filterKeyForItem = (item) => {<EOL>        if (typeof itemFilterKey === '<STR_LIT>') {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>        else if (itemFilterKey) {<EOL>            return itemFilterKey(item);<EOL>        }<EOL>        else {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>    };<EOL>     const myitems = await Promise.resolve(items);<EOL>    let panel;<EOL>    try {<EOL>        return","gt":"await new Promise((resolve) => {"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&  item === activeItem;<EOL>        }<EOL>        if (isActive)<EOL>            li.classList.add('<STR_LIT>');<EOL>        // hack for backwards compatibility<EOL>        if (div.firstElementChild && div.firstElementChild.tagName === '<STR_LIT>') {<EOL>            div.innerHTML = div.firstElementChild. innerHTML;<EOL>        }<EOL>        li.appendChild(div);<EOL>        return li;<EOL>    };<EOL>    const filterKeyForItem = (item) => {<EOL>        if (typeof itemFilterKey === '<STR_LIT>') {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>        else if (itemFilterKey) {<EOL>            return itemFilterKey(item);<EOL>        }<EOL>        else {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>    };<EOL>     const myitems = await Promise.resolve(items);<EOL>    let panel;<EOL>    try {<EOL>        return  await new Promise((resolve) => {<EOL>            const select = new SelectListView({<EOL>                items: myitems,<EOL>                infoMessage: heading,<EOL>                itemsClassList: ['<STR_LIT>', '<STR_LIT>'],<EOL>                elementForItem,<EOL>                filterKeyForItem,<EOL>                didCancelSelection: () => {<EOL>                    resolve();<EOL>                },<EOL>                didConfirmSelection: (","gt":"item) => {"}
{"input":"<s> export async function selectListView({ items, heading, itemTemplate, itemFilterKey, activeItem, }) {<EOL>    const elementForItem = (item) => {<EOL>        const li = document.createElement('<STR_LIT>');<EOL>        const div = document. createElement('<STR_LIT>');<EOL>        div.style.display = '<STR_LIT>';<EOL>        let isActive;<EOL>         if (itemTemplate) {<EOL>            div.innerHTML = itemTemplate(item);<EOL>            isActive = activeItem && itemTemplate(item) === itemTemplate( activeItem);<EOL>        }<EOL>        else {<EOL>            div.innerText = `<STR_LIT>`;<EOL>            isActive = activeItem &&  item === activeItem;<EOL>        }<EOL>        if (isActive)<EOL>            li.classList.add('<STR_LIT>');<EOL>        // hack for backwards compatibility<EOL>        if (div.firstElementChild && div.firstElementChild.tagName === '<STR_LIT>') {<EOL>            div.innerHTML = div.firstElementChild. innerHTML;<EOL>        }<EOL>        li.appendChild(div);<EOL>        return li;<EOL>    };<EOL>    const filterKeyForItem = (item) => {<EOL>        if (typeof itemFilterKey === '<STR_LIT>') {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>        else if (itemFilterKey) {<EOL>            return itemFilterKey(item);<EOL>        }<EOL>        else {<EOL>            return `<STR_LIT>`;<EOL>        }<EOL>    };<EOL>     const myitems = await Promise.resolve(items);<EOL>    let panel;<EOL>    try {<EOL>        return  await new Promise((resolve) => {<EOL>            const select = new SelectListView({<EOL>                items: myitems,<EOL>                infoMessage: heading,<EOL>                itemsClassList: ['<STR_LIT>', '<STR_LIT>'],<EOL>                elementForItem,<EOL>                filterKeyForItem,<EOL>                didCancelSelection: () => {<EOL>                    resolve();<EOL>                },<EOL>                didConfirmSelection: ( item) => {<EOL>                    resolve(item);<EOL>                },<EOL>            });<EOL>            select.element.classList.add('<STR_LIT>');<EOL>","gt":"panel = atom.workspace.addModalPanel({"}
{"input":"<s> function getHeadingsText(element) {<EOL>    return getHeadings(element).map(","gt":"getHeadingText);"}
{"input":"<s> export function getPill(root) {<EOL>","gt":"return root.firstElementChild;"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case knowledge.ActionTypes.CHANGE: {<EOL>            const response = action.payload;<EOL>            return Object.assign({},","gt":"state, {"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case knowledge.ActionTypes.CHANGE: {<EOL>            const response = action.payload;<EOL>            return Object.assign({},  state, {<EOL>                response: response,<EOL>            });<EOL>        }<EOL>        default: {<EOL>","gt":"return state;"}
{"input":"<s> function getElement(fixture) {<EOL>    return","gt":"fixture.nativeElement.firstElementChild;"}
{"input":"<s> export function parse(input) {<EOL>    var cmd = new node.CommandLine();<EOL>    var f = parseLineRange;<EOL>","gt":"let state = new ParserState(input);"}
{"input":"<s> export function registerResource(name, plugin) {<EOL>    if (resourcePlugins[name] != null) {<EOL>        console.","gt":"error(`<STR_LIT>`);"}
{"input":"<s> export function setupComponent(player, component, config) {<EOL>    component.setup(","gt":"config);"}
{"input":"<s> function getDisabledTextElement(element) {<EOL>    return element.","gt":"querySelector('<STR_LIT>');"}
{"input":"<s> function parseRequest(req) {<EOL>    var uri = url.parse(","gt":"req.url, true);"}
{"input":"<s> export function checkOutput(fileName, fragment) {<EOL>    const source = readOutput(fileName);<EOL>","gt":"if (!source) {"}
{"input":"<s> async function testIt(modeHandler, testObj) {<EOL>    modeHandler.vimState.editor = vscode.window.activeTextEditor;<EOL>    let helper = new TestObjectHelper(testObj);<EOL>    // Don't try this at home, kids.<EOL>    modeHandler.vimState.","gt":"cursorPosition = new Position(<NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> async function testIt(modeHandler, testObj) {<EOL>    modeHandler.vimState.editor = vscode.window.activeTextEditor;<EOL>    let helper = new TestObjectHelper(testObj);<EOL>    // Don't try this at home, kids.<EOL>    modeHandler.vimState. cursorPosition = new Position(<NUM_LIT>, <NUM_LIT>);<EOL>    await modeHandler.handleKeyEvent('<STR_LIT>');<EOL>    // Insert all the text as a single action.<EOL>    await modeHandler.vimState.editor.edit(builder => {<EOL>        builder.insert(new Position(<NUM_LIT>, <NUM_LIT>), testObj.start.join('<STR_LIT>').replace(","gt":"'<STR_LIT>', '<STR_LIT>'));"}
{"input":"<s> async function testIt(modeHandler, testObj) {<EOL>    modeHandler.vimState.editor = vscode.window.activeTextEditor;<EOL>    let helper = new TestObjectHelper(testObj);<EOL>    // Don't try this at home, kids.<EOL>    modeHandler.vimState. cursorPosition = new Position(<NUM_LIT>, <NUM_LIT>);<EOL>    await modeHandler.handleKeyEvent('<STR_LIT>');<EOL>    // Insert all the text as a single action.<EOL>    await modeHandler.vimState.editor.edit(builder => {<EOL>        builder.insert(new Position(<NUM_LIT>, <NUM_LIT>), testObj.start.join('<STR_LIT>').replace( '<STR_LIT>', '<STR_LIT>'));<EOL>    });<EOL>    await modeHandler.handleMultipleKeyEvents(['<STR_LIT>', '<STR_LIT>', '<STR_LIT>']);<EOL>    await waitForCursorUpdatesToHappen();<EOL>    // Since we bypassed VSCodeVim to add text,<EOL>    // we need to tell the history tracker that we added it.<EOL>    modeHandler.vimState.historyTracker.addChange();<EOL>    modeHandler.vimState.historyTracker.finishCurrentStep();<EOL>    // move cursor to start position using 'hjkl'<EOL>    await modeHandler.handleMultipleKeyEvents(helper.getKeyPressesToMoveToStartPosition());<EOL>","gt":"await waitForCursorUpdatesToHappen();"}
{"input":"<s> async function testIt(modeHandler, testObj) {<EOL>    modeHandler.vimState.editor = vscode.window.activeTextEditor;<EOL>    let helper = new TestObjectHelper(testObj);<EOL>    // Don't try this at home, kids.<EOL>    modeHandler.vimState. cursorPosition = new Position(<NUM_LIT>, <NUM_LIT>);<EOL>    await modeHandler.handleKeyEvent('<STR_LIT>');<EOL>    // Insert all the text as a single action.<EOL>    await modeHandler.vimState.editor.edit(builder => {<EOL>        builder.insert(new Position(<NUM_LIT>, <NUM_LIT>), testObj.start.join('<STR_LIT>').replace( '<STR_LIT>', '<STR_LIT>'));<EOL>    });<EOL>    await modeHandler.handleMultipleKeyEvents(['<STR_LIT>', '<STR_LIT>', '<STR_LIT>']);<EOL>    await waitForCursorUpdatesToHappen();<EOL>    // Since we bypassed VSCodeVim to add text,<EOL>    // we need to tell the history tracker that we added it.<EOL>    modeHandler.vimState.historyTracker.addChange();<EOL>    modeHandler.vimState.historyTracker.finishCurrentStep();<EOL>    // move cursor to start position using 'hjkl'<EOL>    await modeHandler.handleMultipleKeyEvents(helper.getKeyPressesToMoveToStartPosition());<EOL>     await waitForCursorUpdatesToHappen();<EOL>    Globals.mockModeHandler = modeHandler;<EOL>    let keysPressed = testObj.keysPressed;<EOL>    if (process.platform === '<STR_LIT>') {<EOL>        keysPressed = keysPressed.replace(/\\\\n/g, '<STR_LIT>');<EOL>    }<EOL>    // assumes key presses are single characters for nowkA<EOL>    await modeHandler.handleMultipleKeyEvents(tokenizeKeySequence(keysPressed));<EOL>    // Check valid test object input<EOL>    assert(helper.isValid, \"<STR_LIT>\");<EOL>    // end: check given end output is correct<EOL>    //<EOL>    assertEqualLines(helper.asVimOutputText());<EOL>    // Check final cursor position<EOL>    //<EOL>    let actualPosition = Position.FromVSCodePosition(TextEditor.getSelection().start);<EOL>    let expectedPosition = helper.endPosition;<EOL>    assert.equal(actualPosition.line,","gt":"expectedPosition.line, '<STR_LIT>');"}
{"input":"<s> function onAssetReceived(err, asset) {<EOL>","gt":"data.asset = asset;"}
{"input":"<s> function onGridStepInput(event) {<EOL>    const target = event.target;<EOL>    let value = parseFloat(target.value);<EOL>    if (value !== <NUM_LIT> && value < <NUM_LIT>) {<EOL>","gt":"value = <NUM_LIT>;"}
{"input":"<s> function pushAll(to, from) {<EOL>    if (from) {<EOL>        for (let i = <NUM_LIT>; i < from.length;","gt":"i++) {"}
{"input":"<s> export function start(asset) {<EOL>    document.querySelector(\"<STR_LIT>\").hidden = true;<EOL>    document.querySelector(\"<STR_LIT>\").hidden = false;<EOL>    ui.editor.setText(","gt":"asset.pub.draft);"}
{"input":"<s> function* pingFrontEnd() {<EOL>    yield fork(function* () {<EOL>        while (<NUM_LIT>) {<EOL>            yield put({ type: \"<STR_LIT>\", $public: true });<EOL>            const { pong, timeout } =","gt":"yield race({"}
{"input":"<s> function* pingFrontEnd() {<EOL>    yield fork(function* () {<EOL>        while (<NUM_LIT>) {<EOL>            yield put({ type: \"<STR_LIT>\", $public: true });<EOL>            const { pong, timeout } =  yield race({<EOL>                pong: take(\"<STR_LIT>\"),<EOL>                timeout: call(delay, DISCONNECTED_TIMEOUT)<EOL>            });<EOL>            yield put(tandemFEConnectivity(Boolean(pong)));<EOL>","gt":"yield call(delay, PING_TIMEOUT);"}
{"input":"<s> function* handleArtboardSizeChanges() {<EOL>    while (<NUM_LIT>) {<EOL>        const { artboardId } = yield take(ARTBOARD_RENDERED);<EOL>        const artboard = getArtboardById(artboardId, yield select());<EOL>        yield fork(function* () {<EOL>            const resizeChan =","gt":"eventChannel((emit) => {"}
{"input":"<s> function* handleArtboardSizeChanges() {<EOL>    while (<NUM_LIT>) {<EOL>        const { artboardId } = yield take(ARTBOARD_RENDERED);<EOL>        const artboard = getArtboardById(artboardId, yield select());<EOL>        yield fork(function* () {<EOL>            const resizeChan =  eventChannel((emit) => {<EOL>                artboard.mount.contentWindow.addEventListener(\"<STR_LIT>\", debounce(emit, RESIZE_TIMEOUT));<EOL>                return () => { };<EOL>            });<EOL>            while (<NUM_LIT>) {<EOL>                yield take(resizeChan);<EOL>                yield call(recomputeArtboardInfo,","gt":"artboard);"}
{"input":"<s> export function parseHTMLDocument(document) {<EOL>    return","gt":"parse(document.getText());"}
{"input":"<s> function getHostStylesheets(node) {<EOL>    let p = node.parentNode;<EOL>    while (p.","gt":"parentNode)"}
{"input":"<s> function onProjectAdded(manifest, index) {<EOL>    data.projects.client_add(","gt":"manifest, index);"}
{"input":"<s> export function importActor(entry, projectClient, options, callback) {<EOL>    let name = entry.name;<EOL>    if (name === \"<STR_LIT>\") {<EOL>        const","gt":"parentNode = projectClient.entries.parentNodesById[entry.id];"}
{"input":"<s> function fix(settings, document) {<EOL>    const indentStyle = resolve(settings);<EOL>    const tabWidth = getTabWidth(","gt":"settings, document);"}
{"input":"<s> function createContext(ctx) {<EOL>    return {<EOL>","gt":"getValue: (key) => {"}
{"input":"<s> function getEmbeddedDocumentByType(document, contents, type) {<EOL>    const oldContent = document.getText();<EOL>    let result = '<STR_LIT>';<EOL>    for (const c of contents) {<EOL>","gt":"if (c.type === type) {"}
{"input":"<s> export function calculateUntransformedBoundingRect(node) {<EOL>    const rect = node.getBoundingClientRect();<EOL>    const bounds = new BoundingRect(","gt":"rect.left, rect.top, rect.right, rect.bottom);"}
{"input":"<s> export function init(player, callback) {<EOL>    player.gameInstance.framesPerSecond = player.resources.gameSettings.framesPerSecond;<EOL>    SupRuntime.Player.updateInterval = <NUM_LIT> / player.gameInstance.framesPerSecond;<EOL>    if (player.resources.gameSettings.ratioNumerator != null && player.resources.gameSettings.ratioDenominator != null) {<EOL>        player.gameInstance.setRatio(player.","gt":"resources.gameSettings.ratioNumerator / player.resources.gameSettings.ratioDenominator);"}
{"input":"<s> export function init(player, callback) {<EOL>    player.gameInstance.framesPerSecond = player.resources.gameSettings.framesPerSecond;<EOL>    SupRuntime.Player.updateInterval = <NUM_LIT> / player.gameInstance.framesPerSecond;<EOL>    if (player.resources.gameSettings.ratioNumerator != null && player.resources.gameSettings.ratioDenominator != null) {<EOL>        player.gameInstance.setRatio(player. resources.gameSettings.ratioNumerator / player.resources.gameSettings.ratioDenominator);<EOL>    }<EOL>    // NOTE: Custom layers were introduced in Superpowers 0.8<EOL>    if (player.resources.gameSettings.customLayers != null) {<EOL>","gt":"player.gameInstance.layers = player.gameInstance.layers.concat(player.resources.gameSettings.customLayers);"}
{"input":"<s> <EOL>export function parseGitLsTree(output) {<EOL>    const changes = new Map();<EOL>    if (output) {<EOL>        // A line is expected to look like:<EOL>        // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts<EOL>        // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  web-build-tools<EOL>        const gitRegex = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;<EOL>        // Note: The output of git ls-tree uses \\n newlines regardless of OS.<EOL>        output.","gt":"split('<STR_LIT>').forEach(line => {"}
{"input":"<s> <EOL>export function parseGitLsTree(output) {<EOL>    const changes = new Map();<EOL>    if (output) {<EOL>        // A line is expected to look like:<EOL>        // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts<EOL>        // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  web-build-tools<EOL>        const gitRegex = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;<EOL>        // Note: The output of git ls-tree uses \\n newlines regardless of OS.<EOL>        output. split('<STR_LIT>').forEach(line => {<EOL>            if (line) {<EOL>                // Take everything after the \"100644 blob\", which is just the hash and filename<EOL>                const matches = line.match(gitRegex);<EOL>                if (matches && matches[<NUM_LIT>] && matches[<NUM_LIT>]) {<EOL>                    const hash = matches[","gt":"<NUM_LIT>];"}
{"input":"<s> <EOL>export function parseGitLsTree(output) {<EOL>    const changes = new Map();<EOL>    if (output) {<EOL>        // A line is expected to look like:<EOL>        // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts<EOL>        // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  web-build-tools<EOL>        const gitRegex = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;<EOL>        // Note: The output of git ls-tree uses \\n newlines regardless of OS.<EOL>        output. split('<STR_LIT>').forEach(line => {<EOL>            if (line) {<EOL>                // Take everything after the \"100644 blob\", which is just the hash and filename<EOL>                const matches = line.match(gitRegex);<EOL>                if (matches && matches[<NUM_LIT>] && matches[<NUM_LIT>]) {<EOL>                    const hash = matches[ <NUM_LIT>];<EOL>                    const filename = matches[<NUM_LIT>];<EOL>                    changes.set(filename, hash);<EOL>                }<EOL>                else {<EOL>                    throw new Error(","gt":"line}\"<STR_LIT>;"}
{"input":"<s> export function createOuterAsset(player, asset) {<EOL>    return","gt":"new window.Sup.TileSet(asset);"}
{"input":"<s> function onWelcome(clientId) {<EOL>    data = { projectClient: new SupClient.","gt":"ProjectClient(socket, { subEntries: true }) };"}
{"input":"<s> export function teardown(path) {<EOL>    process.chdir(root);<EOL>    if (fs.pathExistsSync(path)) {<EOL>","gt":"return fs.remove(path);"}
{"input":"<s> export default function checkGitExists() {<EOL>    const result = spawn(\"<STR_LIT>\", [\"<STR_LIT>\"], {<EOL>        logStdErrOnError: false,<EOL>        throwOnError:","gt":"false,"}
{"input":"<s> // Gets whether the specified input value contains a wildcard character.<EOL>function containsWildcard(inputValue) {<EOL>    return inputValue.","gt":"indexOf('<STR_LIT>') >= <NUM_LIT> ||"}
{"input":"<s> export function logError(error) {<EOL>","gt":"if (isDevelopment)"}
{"input":"<s> function copyDirectory(from, to, filter) {<EOL>    var fileList = [];<EOL>    if (!filter)<EOL>        fileList = FileUtil.getDirectoryListing(from);<EOL>","gt":"else"}
{"input":"<s> function copyDirectory(from, to, filter) {<EOL>    var fileList = [];<EOL>    if (!filter)<EOL>        fileList = FileUtil.getDirectoryListing(from);<EOL>     else<EOL>        fileList = FileUtil.searchByFunction(from, filter);<EOL>    length = fileList.length;<EOL>    for (var i = <NUM_LIT>; i < length; i++) {<EOL>        var path = fileList[i];<EOL>        var destPath = path.substring(from.length);<EOL>        destPath = FileUtil.joinPath(to,","gt":"destPath);"}
{"input":"<s> function onAssetReceived(assetId, asset) {<EOL>    data.shaderAsset = asset;<EOL>    for (const uniform of asset.pub.uniforms)<EOL>        setupUniform(uniform);<EOL>    ui.useLightUniformsCheckbox.","gt":"checked = asset.pub.useLightUniforms;"}
{"input":"<s> function onAssetReceived(assetId, asset) {<EOL>    data.shaderAsset = asset;<EOL>    for (const uniform of asset.pub.uniforms)<EOL>        setupUniform(uniform);<EOL>    ui.useLightUniformsCheckbox. checked = asset.pub.useLightUniforms;<EOL>    for (const attribute of asset.pub.attributes)<EOL>        setupAttribute(attribute);<EOL>    ui.vertexEditor.setText(asset.pub.vertexShader.draft);<EOL>    if (asset.pub.vertexShader.draft !== asset.pub.vertexShader.text)<EOL>        checkVertexShader();<EOL>","gt":"ui.fragmentEditor.setText(asset.pub.fragmentShader.draft);"}
{"input":"<s> export function setInspectorVisible(visible) {<EOL>    ui.visibleCheckbox.checked =","gt":"visible;"}
{"input":"<s> function findFile(file, startLocation) {<EOL>    let lastParent;<EOL>    let parent = startLocation;<EOL>    while (parent && parent.length > <NUM_LIT> && parent !== lastParent) {<EOL>        const","gt":"packages = path.join(parent, file);"}
{"input":"<s> function findFile(file, startLocation) {<EOL>    let lastParent;<EOL>    let parent = startLocation;<EOL>    while (parent && parent.length > <NUM_LIT> && parent !== lastParent) {<EOL>        const  packages = path.join(parent, file);<EOL>        if (fs.existsSync(packages))<EOL>            return packages;<EOL>        lastParent = parent;<EOL>        parent = path.dirname(","gt":"parent);"}
{"input":"<s> function commonCheck(selector) {<EOL>    if (selector.type === '<STR_LIT>') {<EOL>        const sectionCount = selector.sections.length;<EOL>        const leadingSections = selector.sections.slice(<NUM_LIT>, sectionCount -","gt":"<NUM_LIT>);"}
{"input":"<s> function* handleOpenTandem() {<EOL>    yield take(OPEN_TANDEM_EXECUTED);<EOL>    let state = yield select();<EOL>    var textDocumentContentProvider = {<EOL>        provideTextDocumentContent(","gt":"uri) {"}
{"input":"<s> function* handleOpenTandem() {<EOL>    yield take(OPEN_TANDEM_EXECUTED);<EOL>    let state = yield select();<EOL>    var textDocumentContentProvider = {<EOL>        provideTextDocumentContent( uri) {<EOL>            return `<STR_LIT>`;<EOL>        },<EOL>    };<EOL>    state.context.subscriptions.push(vscode.workspace.registerTextDocumentContentProvider(PREVIEW_NAME, textDocumentContentProvider));<EOL>    while (true) {<EOL>        yield","gt":"call(vscode.commands.executeCommand, \"<STR_LIT>\", PREVIEW_URI, vscode.ViewColumn.Two, \"<STR_LIT>\");"}
{"input":"<s> export function isEmptyObject(x) {<EOL>    return x !== null<EOL>        &&","gt":"typeof x === '<STR_LIT>'"}
{"input":"<s> function getValueAndRange(document, currRange) {<EOL>    let value = document.getText();<EOL>    let range = currRange;<EOL>    if (currRange) {<EOL>        const startOffset = document.","gt":"offsetAt(currRange.start);"}
{"input":"<s> function getValueAndRange(document, currRange) {<EOL>    let value = document.getText();<EOL>    let range = currRange;<EOL>    if (currRange) {<EOL>        const startOffset = document. offsetAt(currRange.start);<EOL>        const endOffset = document.offsetAt(currRange.end);<EOL>        value = value.substring(startOffset, endOffset);<EOL>    }<EOL>    else {<EOL>        range =","gt":"Range.create(Position.create(<NUM_LIT>, <NUM_LIT>), document.positionAt(value.length));"}
{"input":"<s> function* handleSyntheticWindowInstance(window) {<EOL>    yield","gt":"fork(handleSyntheticWindowEvents, window);"}
{"input":"<s> export function collectTagsDefault(collector, tagSet) {<EOL>    for (const tag","gt":"in tagSet) {"}
{"input":"<s> export function createManyRanges(text) {<EOL>    return createOperatorProdRangeParenthesis(text, ProdType.MANY,","gt":"manyRegExGlobal);"}
{"input":"<s> export function partial(func, ...restArgs) {<EOL>    let firstArg = [","gt":"null];"}
{"input":"<s> <EOL>export function publishReplay(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {<EOL>","gt":"return multicast.call(this, new ReplaySubject(bufferSize, windowTime, scheduler));"}
{"input":"<s> function onInspectorInputChange(event) {<EOL>    if (ui.nodesTreeView.selectedNodes.length !== <NUM_LIT>)<EOL>        return;<EOL>    const nodeId = ui.nodesTreeView.selectedNodes[<NUM_LIT>].dataset[\"<STR_LIT>\"];<EOL>    // transform, shape or box-shape<EOL>    const context = event.target.parentElement.parentElement.parentElement.parentElement.className;<EOL>","gt":"let path;"}
{"input":"<s> function onInspectorInputChange(event) {<EOL>    if (ui.nodesTreeView.selectedNodes.length !== <NUM_LIT>)<EOL>        return;<EOL>    const nodeId = ui.nodesTreeView.selectedNodes[<NUM_LIT>].dataset[\"<STR_LIT>\"];<EOL>    // transform, shape or box-shape<EOL>    const context = event.target.parentElement.parentElement.parentElement.parentElement.className;<EOL>     let path;<EOL>    let uiFields;<EOL>    if (context === \"<STR_LIT>\") {<EOL>","gt":"path = \"<STR_LIT>\";"}
{"input":"<s> function onInspectorInputChange(event) {<EOL>    if (ui.nodesTreeView.selectedNodes.length !== <NUM_LIT>)<EOL>        return;<EOL>    const nodeId = ui.nodesTreeView.selectedNodes[<NUM_LIT>].dataset[\"<STR_LIT>\"];<EOL>    // transform, shape or box-shape<EOL>    const context = event.target.parentElement.parentElement.parentElement.parentElement.className;<EOL>     let path;<EOL>    let uiFields;<EOL>    if (context === \"<STR_LIT>\") {<EOL>         path = \"<STR_LIT>\";<EOL>        uiFields = ui.inspectorFields;<EOL>    }<EOL>    else if (context === \"<STR_LIT>\") {<EOL>        path = \"<STR_LIT>\";<EOL>        uiFields =","gt":"ui.inspectorFields.shape;"}
{"input":"<s> function onInspectorInputChange(event) {<EOL>    if (ui.nodesTreeView.selectedNodes.length !== <NUM_LIT>)<EOL>        return;<EOL>    const nodeId = ui.nodesTreeView.selectedNodes[<NUM_LIT>].dataset[\"<STR_LIT>\"];<EOL>    // transform, shape or box-shape<EOL>    const context = event.target.parentElement.parentElement.parentElement.parentElement.className;<EOL>     let path;<EOL>    let uiFields;<EOL>    if (context === \"<STR_LIT>\") {<EOL>         path = \"<STR_LIT>\";<EOL>        uiFields = ui.inspectorFields;<EOL>    }<EOL>    else if (context === \"<STR_LIT>\") {<EOL>        path = \"<STR_LIT>\";<EOL>        uiFields =  ui.inspectorFields.shape;<EOL>    }<EOL>    else if (context === \"<STR_LIT>\") {<EOL>        path = \"<STR_LIT>\";<EOL>        uiFields = ui.inspectorFields.shape.box;<EOL>    }<EOL>    else<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    const propertyType = event.target.parentElement.parentElement.parentElement.className;<EOL>    let value;<EOL>    if (context === \"<STR_LIT>\" && propertyType === \"<STR_LIT>\") {<EOL>        // Single value<EOL>        value = uiFields[propertyType].value;<EOL>    }<EOL>    else {<EOL>        // Multiple values<EOL>        const inputs = uiFields[propertyType];<EOL>        value = {<EOL>            x: parseFloat(inputs[<NUM_LIT>].value),<EOL>            y: parseFloat(inputs[<NUM_LIT>].value),<EOL>","gt":"z: parseFloat(inputs[<NUM_LIT>].value),"}
{"input":"<s> function onInspectorInputChange(event) {<EOL>    if (ui.nodesTreeView.selectedNodes.length !== <NUM_LIT>)<EOL>        return;<EOL>    const nodeId = ui.nodesTreeView.selectedNodes[<NUM_LIT>].dataset[\"<STR_LIT>\"];<EOL>    // transform, shape or box-shape<EOL>    const context = event.target.parentElement.parentElement.parentElement.parentElement.className;<EOL>     let path;<EOL>    let uiFields;<EOL>    if (context === \"<STR_LIT>\") {<EOL>         path = \"<STR_LIT>\";<EOL>        uiFields = ui.inspectorFields;<EOL>    }<EOL>    else if (context === \"<STR_LIT>\") {<EOL>        path = \"<STR_LIT>\";<EOL>        uiFields =  ui.inspectorFields.shape;<EOL>    }<EOL>    else if (context === \"<STR_LIT>\") {<EOL>        path = \"<STR_LIT>\";<EOL>        uiFields = ui.inspectorFields.shape.box;<EOL>    }<EOL>    else<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    const propertyType = event.target.parentElement.parentElement.parentElement.className;<EOL>    let value;<EOL>    if (context === \"<STR_LIT>\" && propertyType === \"<STR_LIT>\") {<EOL>        // Single value<EOL>        value = uiFields[propertyType].value;<EOL>    }<EOL>    else {<EOL>        // Multiple values<EOL>        const inputs = uiFields[propertyType];<EOL>        value = {<EOL>            x: parseFloat(inputs[<NUM_LIT>].value),<EOL>            y: parseFloat(inputs[<NUM_LIT>].value),<EOL>             z: parseFloat(inputs[<NUM_LIT>].value),<EOL>        };<EOL>        if (propertyType === \"<STR_LIT>\") {<EOL>            const euler = new THREE.Euler(THREE.Math.degToRad(value.x), THREE.Math.degToRad(value.y), THREE.Math.degToRad(value.z));<EOL>            const quaternion = new THREE.Quaternion().","gt":"setFromEuler(euler);"}
{"input":"<s> export function virtual(proto, property) {<EOL>    proto[property].","gt":"virtual = true;"}
{"input":"<s> function onDeleteMapClick() {<EOL>    if (ui.texturesTreeView.selectedNodes.length === <NUM_LIT>)<EOL>        return;<EOL>    const confirmLabel = SupClient.i18n.t(\"<STR_LIT>\");<EOL>    const validationLabel = SupClient.i18n.","gt":"t(\"<STR_LIT>\");"}
{"input":"<s> function onDeleteMapClick() {<EOL>    if (ui.texturesTreeView.selectedNodes.length === <NUM_LIT>)<EOL>        return;<EOL>    const confirmLabel = SupClient.i18n.t(\"<STR_LIT>\");<EOL>    const validationLabel = SupClient.i18n. t(\"<STR_LIT>\");<EOL>    new SupClient.Dialogs.ConfirmDialog(confirmLabel, { validationLabel }, (confirm) => {<EOL>        if (!confirm)<EOL>            return;<EOL>        for (const selectedNode of ui.texturesTreeView.","gt":"selectedNodes)"}
{"input":"<s> function _memoize(fn, key) {<EOL>    const memoizeKey = `<STR_LIT>`;<EOL>    return function (...args) {<EOL>        if (!this.hasOwnProperty(memoizeKey)) {<EOL>            Object.","gt":"defineProperty(this, memoizeKey, {"}
{"input":"<s> function getSelectedLines() {<EOL>    const editor = window.activeTextEditor;<EOL>    let text;<EOL>    if (editor) {<EOL>        let lines =","gt":"<NUM_LIT>;"}
{"input":"<s> export function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {<EOL>    let insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);<EOL>    ruleGrammar.accept(insideDefVisitor);<EOL>    let","gt":"insideDef = insideDefVisitor.result;"}
{"input":"<s> <EOL>export function retry(count = -<NUM_LIT>) {<EOL>    return","gt":"this.lift(new RetryOperator(count, this));"}
{"input":"<s> <EOL>export function EMPTY_ALT(value = undefined) {<EOL>","gt":"return function () {"}
{"input":"<s> function* handleSelectionKeyUp() {<EOL>    while (true) {<EOL>        yield take([","gt":"LEFT_KEY_UP, RIGHT_KEY_UP, UP_KEY_UP, DOWN_KEY_UP]);"}
{"input":"<s> export function* shortcutsService() {<EOL>    const state = yield select();<EOL>    const mt = Mousetrap();<EOL>    const chan = eventChannel((emit) => {<EOL>        for (const { keyCombo, action, options } of state.shortcuts) {<EOL>            mt.bind(keyCombo, (","gt":"event) => {"}
{"input":"<s> export function getSettingsTargetName(target, resource, workspaceContextService) {<EOL>    switch (target) {<EOL>        case ConfigurationTarget.USER:<EOL>            return localize('<STR_LIT>', \"<STR_LIT>\");<EOL>","gt":"case ConfigurationTarget.WORKSPACE:"}
{"input":"<s> export function getSettingsTargetName(target, resource, workspaceContextService) {<EOL>    switch (target) {<EOL>        case ConfigurationTarget.USER:<EOL>            return localize('<STR_LIT>', \"<STR_LIT>\");<EOL>         case ConfigurationTarget.WORKSPACE:<EOL>            return localize('<STR_LIT>', \"<STR_LIT>\");<EOL>        case ConfigurationTarget.WORKSPACE_FOLDER:<EOL>            const folder = workspaceContextService.getWorkspaceFolder(resource);<EOL>            return folder ? folder.name :","gt":"'<STR_LIT>';"}
{"input":"<s> function getLiveElement() {<EOL>    return document.body.","gt":"querySelector('<STR_LIT>');"}
{"input":"<s> <EOL>export function windowToggle(openings, closingSelector) {<EOL>    return this.lift(new WindowToggleOperator(","gt":"openings, closingSelector));"}
{"input":"<s> function toTelemetryEventName(operation) {<EOL>    switch (operation) {<EOL>        case Operation.Installing: return","gt":"'<STR_LIT>';"}
{"input":"<s> export function main() {<EOL>","gt":"platformBrowserDynamic().bootstrapModule(ExampleModule);"}
{"input":"<s> <EOL>function creditCardValidator(c) {<EOL>    if (c.value && /^\\d{16}$/.test(c.value)) {<EOL>","gt":"return null;"}
{"input":"<s> function runCoreAsync(res) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let f = res.outfiles[pxtc.BINARY_JS];<EOL>        if (f) {<EOL>            let r = new pxsim.Runtime({ type: \"<STR_LIT>\", code: f });<EOL>            r.errorHandler = (e) => {<EOL>","gt":"reject(e);"}
{"input":"<s> function runCoreAsync(res) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let f = res.outfiles[pxtc.BINARY_JS];<EOL>        if (f) {<EOL>            let r = new pxsim.Runtime({ type: \"<STR_LIT>\", code: f });<EOL>            r.errorHandler = (e) => {<EOL>                 reject(e);<EOL>            };<EOL>            r.run(() => {<EOL>                // console.log(\"DONE\")<EOL>                pxsim.","gt":"dumpLivePointers();"}
{"input":"<s> function onChangeActive() {<EOL>    const stopRendering = !isTabActive;<EOL>    if (stopRendering) {<EOL>        if (animationFrame != null) {<EOL>","gt":"cancelAnimationFrame(animationFrame);"}
{"input":"<s> function onChangeActive() {<EOL>    const stopRendering = !isTabActive;<EOL>    if (stopRendering) {<EOL>        if (animationFrame != null) {<EOL>             cancelAnimationFrame(animationFrame);<EOL>            animationFrame = null;<EOL>        }<EOL>    }<EOL>    else","gt":"if (animationFrame == null) {"}
{"input":"<s> export async function download(url, downloadPath) {<EOL>    var file = fs.createWriteStream(downloadPath);<EOL>    await new Promise((resolve, reject) => {<EOL>        var req = https.request(url, res => {<EOL>            tl.debug(\"<STR_LIT>\" + res.statusCode);<EOL>            res.pipe(file);<EOL>            res.on(\"<STR_LIT>\", err =>","gt":"reject(err));"}
{"input":"<s> export async function download(url, downloadPath) {<EOL>    var file = fs.createWriteStream(downloadPath);<EOL>    await new Promise((resolve, reject) => {<EOL>        var req = https.request(url, res => {<EOL>            tl.debug(\"<STR_LIT>\" + res.statusCode);<EOL>            res.pipe(file);<EOL>            res.on(\"<STR_LIT>\", err =>  reject(err));<EOL>            res.on(\"<STR_LIT>\", () => {<EOL>                tl.debug(\"<STR_LIT>\");<EOL>                resolve();<EOL>            });<EOL>        });<EOL>        req.on(\"<STR_LIT>\", err => {<EOL>            tl.debug(err);<EOL>            reject(","gt":"err);"}
{"input":"<s> export function createSpdLogService(processName, logLevel, logsFolder) {<EOL>    try {<EOL>        setAsyncMode(<NUM_LIT>, <NUM_LIT>);<EOL>        const logfilePath = path.join(logsFolder, `<STR_LIT>`);<EOL>","gt":"const logger = new RotatingLogger(processName, logfilePath, <NUM_LIT> * <NUM_LIT> * <NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> export function createSpdLogService(processName, logLevel, logsFolder) {<EOL>    try {<EOL>        setAsyncMode(<NUM_LIT>, <NUM_LIT>);<EOL>        const logfilePath = path.join(logsFolder, `<STR_LIT>`);<EOL>         const logger = new RotatingLogger(processName, logfilePath, <NUM_LIT> * <NUM_LIT> * <NUM_LIT>, <NUM_LIT>);<EOL>        logger.setLevel(<NUM_LIT>);<EOL>        return new SpdLogService(logger, logLevel);<EOL>    }<EOL>    catch (e) {<EOL>        console.error(","gt":"e);"}
{"input":"<s> // Shared veto handling across main and renderer<EOL>export function handleVetos(vetos, onError) {<EOL>    if (vetos.length === <NUM_LIT>) {<EOL>        return TPromise.as(false);<EOL>    }<EOL>    const promises = [];<EOL>    let lazyValue =","gt":"false;"}
{"input":"<s> // Shared veto handling across main and renderer<EOL>export function handleVetos(vetos, onError) {<EOL>    if (vetos.length === <NUM_LIT>) {<EOL>        return TPromise.as(false);<EOL>    }<EOL>    const promises = [];<EOL>    let lazyValue =  false;<EOL>    for (let valueOrPromise of vetos) {<EOL>        // veto, done<EOL>        if (valueOrPromise === true) {<EOL>            return TPromise.as(true);<EOL>        }<EOL>        if (TPromise.is(valueOrPromise)) {<EOL>","gt":"promises.push(valueOrPromise.then(value => {"}
{"input":"<s> // Shared veto handling across main and renderer<EOL>export function handleVetos(vetos, onError) {<EOL>    if (vetos.length === <NUM_LIT>) {<EOL>        return TPromise.as(false);<EOL>    }<EOL>    const promises = [];<EOL>    let lazyValue =  false;<EOL>    for (let valueOrPromise of vetos) {<EOL>        // veto, done<EOL>        if (valueOrPromise === true) {<EOL>            return TPromise.as(true);<EOL>        }<EOL>        if (TPromise.is(valueOrPromise)) {<EOL>             promises.push(valueOrPromise.then(value => {<EOL>                if (value) {<EOL>                    lazyValue = true; // veto, done<EOL>                }<EOL>            }, err => {<EOL>","gt":"onError(err);"}
{"input":"<s> function setRequestHeaders(xhr, options) {<EOL>    if (options.headers) {<EOL>        outer: for (let k in options.headers) {<EOL>            switch (k) {<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function setRequestHeaders(xhr, options) {<EOL>    if (options.headers) {<EOL>        outer: for (let k in options.headers) {<EOL>            switch (k) {<EOL>                 case '<STR_LIT>':<EOL>                case '<STR_LIT>':<EOL>                case '<STR_LIT>':<EOL>                    // unsafe headers<EOL>                    continue outer;<EOL>            }<EOL>            xhr.setRequestHeader(k, options.","gt":"headers[k]);"}
{"input":"<s> function installFirstSystem(callback) {<EOL>    const label = i18n.t(\"<STR_LIT>\");<EOL>    const options = {<EOL>        header: i18n.t(\"<STR_LIT>\"),<EOL>        validationLabel: i18n.","gt":"t(\"<STR_LIT>\"),"}
{"input":"<s> function installFirstSystem(callback) {<EOL>    const label = i18n.t(\"<STR_LIT>\");<EOL>    const options = {<EOL>        header: i18n.t(\"<STR_LIT>\"),<EOL>        validationLabel: i18n. t(\"<STR_LIT>\"),<EOL>        cancelLabel: i18n.t(\"<STR_LIT>\")<EOL>    };<EOL>    new dialogs.ConfirmDialog(label, options, (installGame) => {<EOL>        if (!installGame) {<EOL>            localServer.","gt":"start();"}
{"input":"<s> function installFirstSystem(callback) {<EOL>    const label = i18n.t(\"<STR_LIT>\");<EOL>    const options = {<EOL>        header: i18n.t(\"<STR_LIT>\"),<EOL>        validationLabel: i18n. t(\"<STR_LIT>\"),<EOL>        cancelLabel: i18n.t(\"<STR_LIT>\")<EOL>    };<EOL>    new dialogs.ConfirmDialog(label, options, (installGame) => {<EOL>        if (!installGame) {<EOL>            localServer. start();<EOL>            callback();<EOL>            return;<EOL>        }<EOL>        const waitingGameInstallElt = document.querySelector(\"<STR_LIT>\");<EOL>        async.","gt":"series(["}
{"input":"<s> function installFirstSystem(callback) {<EOL>    const label = i18n.t(\"<STR_LIT>\");<EOL>    const options = {<EOL>        header: i18n.t(\"<STR_LIT>\"),<EOL>        validationLabel: i18n. t(\"<STR_LIT>\"),<EOL>        cancelLabel: i18n.t(\"<STR_LIT>\")<EOL>    };<EOL>    new dialogs.ConfirmDialog(label, options, (installGame) => {<EOL>        if (!installGame) {<EOL>            localServer. start();<EOL>            callback();<EOL>            return;<EOL>        }<EOL>        const waitingGameInstallElt = document.querySelector(\"<STR_LIT>\");<EOL>        async. series([<EOL>            (cb) => {<EOL>                openServerSettings();<EOL>                serverSettingsSystems.action(\"<STR_LIT>\", { systemId: \"<STR_LIT>\" }, () => { cb(); });<EOL>                waitingGameInstallElt.hidden = false;<EOL>            },<EOL>            (cb) => {<EOL>                waitingGameInstallElt.hidden = true;<EOL>                const label = i18n.t(\"<STR_LIT>\");<EOL>                const options = {<EOL>                    haeder: i18n.t(","gt":"\"<STR_LIT>\"),"}
{"input":"<s> function installFirstSystem(callback) {<EOL>    const label = i18n.t(\"<STR_LIT>\");<EOL>    const options = {<EOL>        header: i18n.t(\"<STR_LIT>\"),<EOL>        validationLabel: i18n. t(\"<STR_LIT>\"),<EOL>        cancelLabel: i18n.t(\"<STR_LIT>\")<EOL>    };<EOL>    new dialogs.ConfirmDialog(label, options, (installGame) => {<EOL>        if (!installGame) {<EOL>            localServer. start();<EOL>            callback();<EOL>            return;<EOL>        }<EOL>        const waitingGameInstallElt = document.querySelector(\"<STR_LIT>\");<EOL>        async. series([<EOL>            (cb) => {<EOL>                openServerSettings();<EOL>                serverSettingsSystems.action(\"<STR_LIT>\", { systemId: \"<STR_LIT>\" }, () => { cb(); });<EOL>                waitingGameInstallElt.hidden = false;<EOL>            },<EOL>            (cb) => {<EOL>                waitingGameInstallElt.hidden = true;<EOL>                const label = i18n.t(\"<STR_LIT>\");<EOL>                const options = {<EOL>                    haeder: i18n.t( \"<STR_LIT>\"),<EOL>                    closeLabel: i18n.t(\"<STR_LIT>\")<EOL>                };<EOL>                new dialogs.InfoDialog(label, options, cb);<EOL>            },<EOL>            (cb) => {<EOL>                localServer.start();<EOL>                const label = i18n.t(\"<STR_LIT>\");<EOL>                const options = {<EOL>                    header: i18n.t(\"<STR_LIT>\"),<EOL>                    closeLabel:","gt":"dialogs.BaseDialog.defaultLabels.close"}
{"input":"<s> function loadPlugins(callback) {<EOL>    const i18nFiles = [];<EOL>    i18nFiles.push({ root: `<STR_LIT>`, name: \"<STR_LIT>\" });<EOL>    SupClient.fetch(`<STR_LIT>`, \"<STR_LIT>\", (err, pluginsInfo) => {<EOL>        for (const pluginName of pluginsInfo.","gt":"list) {"}
{"input":"<s> function loadPlugins(callback) {<EOL>    const i18nFiles = [];<EOL>    i18nFiles.push({ root: `<STR_LIT>`, name: \"<STR_LIT>\" });<EOL>    SupClient.fetch(`<STR_LIT>`, \"<STR_LIT>\", (err, pluginsInfo) => {<EOL>        for (const pluginName of pluginsInfo. list) {<EOL>            const root = `<STR_LIT>`;<EOL>            i18nFiles.push({ root, name: \"<STR_LIT>\" });<EOL>        }<EOL>        async.parallel([<EOL>            (cb) => {<EOL>                SupClient.i18n.load(i18nFiles, cb);<EOL>            }, (","gt":"cb) => {"}
{"input":"<s> function loadPlugins(callback) {<EOL>    const i18nFiles = [];<EOL>    i18nFiles.push({ root: `<STR_LIT>`, name: \"<STR_LIT>\" });<EOL>    SupClient.fetch(`<STR_LIT>`, \"<STR_LIT>\", (err, pluginsInfo) => {<EOL>        for (const pluginName of pluginsInfo. list) {<EOL>            const root = `<STR_LIT>`;<EOL>            i18nFiles.push({ root, name: \"<STR_LIT>\" });<EOL>        }<EOL>        async.parallel([<EOL>            (cb) => {<EOL>                SupClient.i18n.load(i18nFiles, cb);<EOL>            }, ( cb) => {<EOL>                async.each(pluginsInfo.list, (pluginName, cb) => {<EOL>                    const pluginPath = `<STR_LIT>`;<EOL>                    async.each([\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"], (name, cb) => {<EOL>                        SupClient.loadScript(`<STR_LIT>`, cb);<EOL>                    },","gt":"cb);"}
{"input":"<s> function updateSystemsAndPlugins() {<EOL>    serverSettingsSystems.getRegistry((registry) => {<EOL>        if (registry == null) {<EOL>            localServer.start();<EOL>","gt":"return;"}
{"input":"<s> function updateSystemsAndPlugins() {<EOL>    serverSettingsSystems.getRegistry((registry) => {<EOL>        if (registry == null) {<EOL>            localServer.start();<EOL>             return;<EOL>        }<EOL>        const systemsAndPlugins = [];<EOL>        for (const systemId in","gt":"registry.systems) {"}
{"input":"<s> function updateSystemsAndPlugins() {<EOL>    serverSettingsSystems.getRegistry((registry) => {<EOL>        if (registry == null) {<EOL>            localServer.start();<EOL>             return;<EOL>        }<EOL>        const systemsAndPlugins = [];<EOL>        for (const systemId in  registry.systems) {<EOL>            const system = registry.systems[systemId];<EOL>            if (!system.isLocalDev && system.localVersion != null && system.version !== system.localVersion)<EOL>                systemsAndPlugins.push(systemId);<EOL>            for (const authorName in system.plugins) {<EOL>","gt":"for (const pluginName in system.plugins[authorName]) {"}
{"input":"<s> function updateSystemsAndPlugins() {<EOL>    serverSettingsSystems.getRegistry((registry) => {<EOL>        if (registry == null) {<EOL>            localServer.start();<EOL>             return;<EOL>        }<EOL>        const systemsAndPlugins = [];<EOL>        for (const systemId in  registry.systems) {<EOL>            const system = registry.systems[systemId];<EOL>            if (!system.isLocalDev && system.localVersion != null && system.version !== system.localVersion)<EOL>                systemsAndPlugins.push(systemId);<EOL>            for (const authorName in system.plugins) {<EOL>                 for (const pluginName in system.plugins[authorName]) {<EOL>                    const plugin = system.plugins[authorName][pluginName];<EOL>                    if (!plugin.isLocalDev && plugin.localVersion != null && plugin.version !== plugin.localVersion)<EOL>                        systemsAndPlugins.push(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>        }<EOL>        if (systemsAndPlugins.length === <NUM_LIT>) {<EOL>","gt":"localServer.start();"}
{"input":"<s> function updateSystemsAndPlugins() {<EOL>    serverSettingsSystems.getRegistry((registry) => {<EOL>        if (registry == null) {<EOL>            localServer.start();<EOL>             return;<EOL>        }<EOL>        const systemsAndPlugins = [];<EOL>        for (const systemId in  registry.systems) {<EOL>            const system = registry.systems[systemId];<EOL>            if (!system.isLocalDev && system.localVersion != null && system.version !== system.localVersion)<EOL>                systemsAndPlugins.push(systemId);<EOL>            for (const authorName in system.plugins) {<EOL>                 for (const pluginName in system.plugins[authorName]) {<EOL>                    const plugin = system.plugins[authorName][pluginName];<EOL>                    if (!plugin.isLocalDev && plugin.localVersion != null && plugin.version !== plugin.localVersion)<EOL>                        systemsAndPlugins.push(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>        }<EOL>        if (systemsAndPlugins.length === <NUM_LIT>) {<EOL>             localServer.start();<EOL>            return;<EOL>        }<EOL>        const label = i18n.t(\"<STR_LIT>\", { systemsAndPlugins: systemsAndPlugins.join(\"<STR_LIT>\") });<EOL>        const options = {<EOL>            validationLabel: i18n.t(\"<STR_LIT>\"),<EOL>            cancelLabel: i18n.t(\"<STR_LIT>\")<EOL>        };<EOL>        new","gt":"dialogs.ConfirmDialog(label, options, (shouldUpdate) => {"}
{"input":"<s> export function openStatusTab() {<EOL>","gt":"statusChatTab.showTab(true);"}
{"input":"<s> function onChangeActive() {<EOL>    const stopRendering = !isTabActive;<EOL>    if (stopRendering) {<EOL>        if (animationFrame != null) {<EOL>","gt":"cancelAnimationFrame(animationFrame);"}
{"input":"<s> function onChangeActive() {<EOL>    const stopRendering = !isTabActive;<EOL>    if (stopRendering) {<EOL>        if (animationFrame != null) {<EOL>             cancelAnimationFrame(animationFrame);<EOL>            animationFrame = null;<EOL>        }<EOL>    }<EOL>    else","gt":"if (animationFrame == null) {"}
{"input":"<s> <EOL>export function setGithubStatus(commitSHA, data) {<EOL>    const state = data.result ? '<STR_LIT>' : '<STR_LIT>';<EOL>    return githubApiV3.repos.createStatus({<EOL>        owner: '<STR_LIT>',<EOL>        repo:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export function setGithubStatus(commitSHA, data) {<EOL>    const state = data.result ? '<STR_LIT>' : '<STR_LIT>';<EOL>    return githubApiV3.repos.createStatus({<EOL>        owner: '<STR_LIT>',<EOL>        repo:  '<STR_LIT>',<EOL>        sha: commitSHA,<EOL>        state: state,<EOL>        target_url: data.url,<EOL>","gt":"description: data.description,"}
{"input":"<s> function _findAllPackageJson(dir, exclude) {<EOL>    const result = [];<EOL>    fs.readdirSync(dir)<EOL>        .forEach(fileName => {<EOL>        const p = path.join(dir, fileName);<EOL>        if (exclude.test(","gt":"p)) {"}
{"input":"<s> function _findAllPackageJson(dir, exclude) {<EOL>    const result = [];<EOL>    fs.readdirSync(dir)<EOL>        .forEach(fileName => {<EOL>        const p = path.join(dir, fileName);<EOL>        if (exclude.test( p)) {<EOL>            return;<EOL>        }<EOL>        else if (fileName == '<STR_LIT>') {<EOL>            result.push(","gt":"p);"}
{"input":"<s> function _findAllPackageJson(dir, exclude) {<EOL>    const result = [];<EOL>    fs.readdirSync(dir)<EOL>        .forEach(fileName => {<EOL>        const p = path.join(dir, fileName);<EOL>        if (exclude.test( p)) {<EOL>            return;<EOL>        }<EOL>        else if (fileName == '<STR_LIT>') {<EOL>            result.push( p);<EOL>        }<EOL>        else if (fs.statSync(p).isDirectory()) {<EOL>            result.","gt":"push(..._findAllPackageJson(p, exclude));"}
{"input":"<s> export default function openServer(serverEntry) {<EOL>    clearActiveTab();<EOL>    let tabElt = tabStrip.tabsRoot.querySelector(`<STR_LIT>`);<EOL>    let paneElt = panesElt.querySelector(`<STR_LIT>`);<EOL>","gt":"if (tabElt == null) {"}
{"input":"<s> function uninstallPlugin(systemFolderName, pluginFullName, authorName) {<EOL>    rimraf(`<STR_LIT>`, (err) => {<EOL>        if (err != null) {<EOL>            utils.emitError(`<STR_LIT>`);<EOL>        }<EOL>        else {<EOL>            if (fs.readdirSync(`<STR_LIT>`).length === <NUM_LIT>)<EOL>                fs.rmdirSync(`<STR_LIT>`);<EOL>            console.log(\"<STR_LIT>\");<EOL>            process.","gt":"exit(<NUM_LIT>);"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, (","gt":"res) => {"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>","gt":"callback(`<STR_LIT>`);"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],","gt":"<NUM_LIT>) * <NUM_LIT>;"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],  <NUM_LIT>) * <NUM_LIT>;<EOL>        const","gt":"buffers = [];"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],  <NUM_LIT>) * <NUM_LIT>;<EOL>        const  buffers = [];<EOL>        res.on(\"<STR_LIT>\", (data) => { buffers.push(data); progress += data.length; onProgress(progress / progressMax); });<EOL>        res.on(\"<STR_LIT>\", () => {<EOL>            let zipBuffer = Buffer.concat(buffers);<EOL>            yauzl.fromBuffer(zipBuffer, { lazyEntries: true }, (err, zipFile) => {<EOL>                if (err !=","gt":"null)"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],  <NUM_LIT>) * <NUM_LIT>;<EOL>        const  buffers = [];<EOL>        res.on(\"<STR_LIT>\", (data) => { buffers.push(data); progress += data.length; onProgress(progress / progressMax); });<EOL>        res.on(\"<STR_LIT>\", () => {<EOL>            let zipBuffer = Buffer.concat(buffers);<EOL>            yauzl.fromBuffer(zipBuffer, { lazyEntries: true }, (err, zipFile) => {<EOL>                if (err !=  null)<EOL>                    throw err;<EOL>                progress = zipFile.entryCount;<EOL>                progressMax = zipFile.entryCount * <NUM_LIT>;<EOL>                let rootFolderName;<EOL>                zipFile.readEntry();<EOL>                zipFile.on(\"<STR_LIT>\", (entry) => {<EOL>                    if (rootFolderName ==","gt":"null)"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],  <NUM_LIT>) * <NUM_LIT>;<EOL>        const  buffers = [];<EOL>        res.on(\"<STR_LIT>\", (data) => { buffers.push(data); progress += data.length; onProgress(progress / progressMax); });<EOL>        res.on(\"<STR_LIT>\", () => {<EOL>            let zipBuffer = Buffer.concat(buffers);<EOL>            yauzl.fromBuffer(zipBuffer, { lazyEntries: true }, (err, zipFile) => {<EOL>                if (err !=  null)<EOL>                    throw err;<EOL>                progress = zipFile.entryCount;<EOL>                progressMax = zipFile.entryCount * <NUM_LIT>;<EOL>                let rootFolderName;<EOL>                zipFile.readEntry();<EOL>                zipFile.on(\"<STR_LIT>\", (entry) => {<EOL>                    if (rootFolderName ==  null)<EOL>                        rootFolderName = entry.fileName;<EOL>                    if (entry.fileName.indexOf(rootFolderName) !== <NUM_LIT>)<EOL>                        throw new Error(`<STR_LIT>`);<EOL>                    const filename = path.join(downloadPath, entry.fileName.replace(rootFolderName, \"<STR_LIT>\"));<EOL>                    if (/\\/$/.test(entry.fileName)) {<EOL>                        mkdirp(filename, (err) => {<EOL>                            if (err != null)<EOL>                                throw","gt":"err;"}
{"input":"<s> export function downloadRelease(downloadURL, downloadPath, callback) {<EOL>    console.log(\"<STR_LIT>\");<EOL>    https.get({<EOL>        hostname:  \"<STR_LIT>\",<EOL>        path: downloadURL,<EOL>        headers: { \"<STR_LIT>\": \"<STR_LIT>\" }<EOL>    }, ( res) => {<EOL>        if (res.statusCode !== <NUM_LIT>) {<EOL>             callback(`<STR_LIT>`);<EOL>            return;<EOL>        }<EOL>        let progress = <NUM_LIT>;<EOL>        let progressMax = parseInt(res.headers[\"<STR_LIT>\"],  <NUM_LIT>) * <NUM_LIT>;<EOL>        const  buffers = [];<EOL>        res.on(\"<STR_LIT>\", (data) => { buffers.push(data); progress += data.length; onProgress(progress / progressMax); });<EOL>        res.on(\"<STR_LIT>\", () => {<EOL>            let zipBuffer = Buffer.concat(buffers);<EOL>            yauzl.fromBuffer(zipBuffer, { lazyEntries: true }, (err, zipFile) => {<EOL>                if (err !=  null)<EOL>                    throw err;<EOL>                progress = zipFile.entryCount;<EOL>                progressMax = zipFile.entryCount * <NUM_LIT>;<EOL>                let rootFolderName;<EOL>                zipFile.readEntry();<EOL>                zipFile.on(\"<STR_LIT>\", (entry) => {<EOL>                    if (rootFolderName ==  null)<EOL>                        rootFolderName = entry.fileName;<EOL>                    if (entry.fileName.indexOf(rootFolderName) !== <NUM_LIT>)<EOL>                        throw new Error(`<STR_LIT>`);<EOL>                    const filename = path.join(downloadPath, entry.fileName.replace(rootFolderName, \"<STR_LIT>\"));<EOL>                    if (/\\/$/.test(entry.fileName)) {<EOL>                        mkdirp(filename, (err) => {<EOL>                            if (err != null)<EOL>                                throw  err;<EOL>                            progress++;<EOL>                            onProgress(progress / progressMax);<EOL>                            zipFile.readEntry();<EOL>                        });<EOL>                    }<EOL>                    else {<EOL>                        zipFile.openReadStream(entry, (err, readStream) => {<EOL>                            if (err)<EOL>                                throw err;<EOL>                            mkdirp(path.dirname(filename), (err) => {<EOL>                                if (err)<EOL>                                    throw err;<EOL>                                readStream.pipe(fs.createWriteStream(filename));<EOL>                                readStream.","gt":"on(\"<STR_LIT>\", () => {"}
{"input":"<s> function onDisconnect() {<EOL>","gt":"cleanUp();"}
{"input":"<s> <EOL><EOL>export function switchMapTo(innerObservable, resultSelector) {<EOL>    return this.lift(new SwitchMapToOperator(innerObservable,","gt":"resultSelector));"}
{"input":"<s> <EOL>export function setElementProps(template) {<EOL>    let observable = null;<EOL>    let","gt":"subscription = null;"}
{"input":"<s> <EOL>export function setElementProps(template) {<EOL>    let observable = null;<EOL>    let  subscription = null;<EOL>    return (domElement) => {<EOL>        if (subscription) {<EOL>","gt":"subscription.unsubscribe();"}
{"input":"<s> <EOL>export function setElementProps(template) {<EOL>    let observable = null;<EOL>    let  subscription = null;<EOL>    return (domElement) => {<EOL>        if (subscription) {<EOL>             subscription.unsubscribe();<EOL>            subscription = null;<EOL>            observable = null;<EOL>        }<EOL>        if (domElement) {<EOL>            observable =","gt":"combineTemplate(template);"}
{"input":"<s> <EOL>export function setElementProps(template) {<EOL>    let observable = null;<EOL>    let  subscription = null;<EOL>    return (domElement) => {<EOL>        if (subscription) {<EOL>             subscription.unsubscribe();<EOL>            subscription = null;<EOL>            observable = null;<EOL>        }<EOL>        if (domElement) {<EOL>            observable =  combineTemplate(template);<EOL>            subscription = observable.subscribe(value => {<EOL>                for (const k in value)<EOL>                    domElement[k] = value[k];<EOL>            },","gt":"handleError, () => {"}
{"input":"<s> export function setKey(k, v, o) {<EOL>    if (k in o && structEq(v, o[k])) {<EOL>        return o;<EOL>    }<EOL>    else {<EOL>        // this is the fastest way to do it, see<EOL>        // https://jsperf.com/focal-setkey-for-loop-vs-object-assign<EOL>        const r = {};<EOL>        for (const p in o)<EOL>            r[p] = o[","gt":"p];"}
{"input":"<s> // tslint:enable no-unused-vars<EOL><EOL>export function reactiveList(ids, createListItem) {<EOL>    return ids.scan(([oldIds, _], ids) => {<EOL>        // @NOTE actual type of oldIds and newIds is either { [k: string]: TValue }<EOL>        // or { [k: number]: TValue }, but the type system doesn't allow us to<EOL>        // express this.<EOL>        const newIds = {};<EOL>        const newValues =","gt":"Array(ids.length);"}
{"input":"<s> // tslint:enable no-unused-vars<EOL><EOL>export function reactiveList(ids, createListItem) {<EOL>    return ids.scan(([oldIds, _], ids) => {<EOL>        // @NOTE actual type of oldIds and newIds is either { [k: string]: TValue }<EOL>        // or { [k: number]: TValue }, but the type system doesn't allow us to<EOL>        // express this.<EOL>        const newIds = {};<EOL>        const newValues =  Array(ids.length);<EOL>        const n = ids.length;<EOL>        for (let i = <NUM_LIT>; i < n; ++i) {<EOL>            const","gt":"id = ids[i];"}
{"input":"<s> export function main() {<EOL>    platformWorkerAppDynamic().","gt":"bootstrapModule(ExampleModule);"}
{"input":"<s> export function main() {<EOL>    platformWorkerAppDynamic().","gt":"bootstrapModule(ExampleModule);"}
{"input":"<s> function gestureChangeEventMerger(lastEvent, currentEvent) {<EOL>    let r = {<EOL>        translationY: currentEvent.translationY,<EOL>        translationX:","gt":"currentEvent.translationX"}
{"input":"<s> function addToHeroName(text) {<EOL>    let input = element(","gt":"by.css('<STR_LIT>'));"}
{"input":"<s> function getStyle(el, prop) {<EOL>    return getComputedStyle(","gt":"el.nativeElement).getPropertyValue(prop);"}
{"input":"<s> <EOL>export function decamelize(str) {<EOL>    return str.replace(STRING_DECAMELIZE_REGEXP, '<STR_LIT>').","gt":"toLowerCase();"}
{"input":"<s> function addStringArg(argName, inputName, required, tr) {<EOL>    addArg(argName, () => { return tl.getInput(","gt":"inputName, required); }, tr);"}
{"input":"<s> export function provideRouterConnector() {<EOL>    return {<EOL>        provide:","gt":"APP_BOOTSTRAP_LISTENER,"}
{"input":"<s> function logOfRouterAndStore(router, store) {<EOL>    const log = [];<EOL>    router.events.subscribe(e => {<EOL>        if (e.hasOwnProperty('<STR_LIT>')) {<EOL>","gt":"log.push({"}
{"input":"<s> export function getSelectionSearchString(editor) {<EOL>    let selection = editor.getSelection();<EOL>    // if selection spans multiple lines, default search string to empty<EOL>    if (selection.startLineNumber === selection.endLineNumber) {<EOL>        if (selection.isEmpty()) {<EOL>            let wordAtPosition = editor.getModel().getWordAtPosition(selection.","gt":"getStartPosition());"}
{"input":"<s> export function getSelectionSearchString(editor) {<EOL>    let selection = editor.getSelection();<EOL>    // if selection spans multiple lines, default search string to empty<EOL>    if (selection.startLineNumber === selection.endLineNumber) {<EOL>        if (selection.isEmpty()) {<EOL>            let wordAtPosition = editor.getModel().getWordAtPosition(selection. getStartPosition());<EOL>            if (wordAtPosition) {<EOL>                return wordAtPosition.word;<EOL>            }<EOL>        }<EOL>        else {<EOL>            return editor.","gt":"getModel().getValueInRange(selection);"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    const statePath = `<STR_LIT>`;<EOL>    const environmentsPath = buildRelativePath(statePath, `<STR_LIT>`);<EOL>    if (!sourceDir) {<EOL>        throw new","gt":"SchematicsException(`<STR_LIT>`);"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    const statePath = `<STR_LIT>`;<EOL>    const environmentsPath = buildRelativePath(statePath, `<STR_LIT>`);<EOL>    if (!sourceDir) {<EOL>        throw new  SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options.","gt":"module) {"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    const statePath = `<STR_LIT>`;<EOL>    const environmentsPath = buildRelativePath(statePath, `<STR_LIT>`);<EOL>    if (!sourceDir) {<EOL>        throw new  SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options. module) {<EOL>            options.module = findModuleFromOptions(host, options);<EOL>        }<EOL>        const","gt":"templateSource = apply(url('<STR_LIT>'), ["}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    const statePath = `<STR_LIT>`;<EOL>    const environmentsPath = buildRelativePath(statePath, `<STR_LIT>`);<EOL>    if (!sourceDir) {<EOL>        throw new  SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options. module) {<EOL>            options.module = findModuleFromOptions(host, options);<EOL>        }<EOL>        const  templateSource = apply(url('<STR_LIT>'), [<EOL>            template({<EOL>                ...stringUtils,<EOL>                ...","gt":"options,"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    const statePath = `<STR_LIT>`;<EOL>    const environmentsPath = buildRelativePath(statePath, `<STR_LIT>`);<EOL>    if (!sourceDir) {<EOL>        throw new  SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options. module) {<EOL>            options.module = findModuleFromOptions(host, options);<EOL>        }<EOL>        const  templateSource = apply(url('<STR_LIT>'), [<EOL>            template({<EOL>                ...stringUtils,<EOL>                ... options,<EOL>                environmentsPath,<EOL>            }),<EOL>            move(sourceDir),<EOL>        ]);<EOL>        return chain([<EOL>            branchAndMerge(chain([<EOL>","gt":"filter(path => path.endsWith('<STR_LIT>') &&"}
{"input":"<s> <EOL>export function catchError(selector) {<EOL>    return function catchErrorOperatorFunction(source) {<EOL>        const operator = new CatchOperator(","gt":"selector);"}
{"input":"<s> <EOL>export function auditTime(duration, scheduler = async) {<EOL>    return audit(() =>","gt":"timer(duration, scheduler));"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>     else {<EOL>        configFilePath = tsImpl.findConfigFile(context, tsImpl.sys.fileExists);<EOL>    }<EOL>    let existingOptions = tsImpl.convertCompilerOptionsFromJson(query, context, '<STR_LIT>');<EOL>    if (!configFilePath || query.configFileContent) {<EOL>        return {<EOL>            configFilePath: configFilePath || path.join(context, '<STR_LIT>'),<EOL>","gt":"compilerConfig: tsImpl.parseJsonConfigFileContent(query.configFileContent || {}, tsImpl.sys, context, _.extend({}, tsImpl.getDefaultCompilerOptions(), existingOptions.options), context),"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>     else {<EOL>        configFilePath = tsImpl.findConfigFile(context, tsImpl.sys.fileExists);<EOL>    }<EOL>    let existingOptions = tsImpl.convertCompilerOptionsFromJson(query, context, '<STR_LIT>');<EOL>    if (!configFilePath || query.configFileContent) {<EOL>        return {<EOL>            configFilePath: configFilePath || path.join(context, '<STR_LIT>'),<EOL>             compilerConfig: tsImpl.parseJsonConfigFileContent(query.configFileContent || {}, tsImpl.sys, context, _.extend({}, tsImpl.getDefaultCompilerOptions(), existingOptions.options), context),<EOL>            loaderConfig: query<EOL>        };<EOL>    }<EOL>    let jsonConfigFile = tsImpl.readConfigFile(configFilePath, tsImpl.sys.readFile);<EOL>    let compilerConfig = tsImpl.parseJsonConfigFileContent(jsonConfigFile.config, tsImpl.sys, path.dirname(configFilePath), existingOptions.","gt":"options, configFilePath);"}
{"input":"<s> function updateBinary(binary, outputDir, proxy, ignoreSSL) {<EOL>    return FileManager<EOL>        .downloadFile(binary, outputDir, (binary, outputDir, fileName) => {<EOL>        unzip(binary, outputDir, fileName);<EOL>    })<EOL>        .then(downloaded => {<EOL>        if (!downloaded) {<EOL>            // The file did not have to download, we should unzip it.<EOL>            logger.info(binary.name + '<STR_LIT>' + path.resolve(outputDir, binary.filename()));<EOL>            let fileName = binary.filename();<EOL>            unzip(","gt":"binary, outputDir, fileName);"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler.","gt":"isChild()) {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>","gt":"return;"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if (","gt":"asyncErrors) {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const","gt":"normalized = files.map(file => {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +(","gt":"new Date());"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +( new Date());<EOL>        const diag = () => instance.loaderConfig.transpileOnly<EOL>            ? Promise.resolve()<EOL>            : instance.checker.getDiagnostics()<EOL>                .then(","gt":""}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +( new Date());<EOL>        const diag = () => instance.loaderConfig.transpileOnly<EOL>            ? Promise.resolve()<EOL>            : instance.checker.getDiagnostics()<EOL>                .then(","gt":"diags => {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +( new Date());<EOL>        const diag = () => instance.loaderConfig.transpileOnly<EOL>            ? Promise.resolve()<EOL>            : instance.checker.getDiagnostics()<EOL>                .then(  diags => {<EOL>                if (!silent) {<EOL>                    if (diags.","gt":"length) {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +( new Date());<EOL>        const diag = () => instance.loaderConfig.transpileOnly<EOL>            ? Promise.resolve()<EOL>            : instance.checker.getDiagnostics()<EOL>                .then(  diags => {<EOL>                if (!silent) {<EOL>                    if (diags. length) {<EOL>                        console.error(colors.red(`<STR_LIT>`));<EOL>                    }<EOL>                    else {<EOL>                        let timeEnd = +new Date();<EOL>                        console.log(colors.green(`<STR_LIT>`));<EOL>                    }<EOL>                }<EOL>                diags.forEach(diag => emitError(diag.pretty));<EOL>            });<EOL>        files<EOL>            .then(() => {<EOL>            if (","gt":"asyncErrors) {"}
{"input":"<s> function setupAfterCompile(compiler, instanceName, forkChecker = false) {<EOL>    compiler.plugin('<STR_LIT>', function (compilation, callback) {<EOL>        // Don't add errors for child compilations<EOL>        if (compilation.compiler. isChild()) {<EOL>            callback();<EOL>             return;<EOL>        }<EOL>        const watchMode = isWatching(compilation.compiler);<EOL>        const instance = resolveInstance(compilation.compiler, instanceName);<EOL>        const silent = instance.loaderConfig.silent;<EOL>        const asyncErrors = watchMode === WatchMode.Enabled && !silent;<EOL>        let emitError = (msg) => {<EOL>            if ( asyncErrors) {<EOL>                console.log(msg, '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                if (!instance.loaderConfig.errorsAsWarnings) {<EOL>                    compilation.errors.push(new Error(msg));<EOL>                }<EOL>                else {<EOL>                    compilation.warnings.push(new Error(msg));<EOL>                }<EOL>            }<EOL>        };<EOL>        const files = instance.checker.getFiles()<EOL>            .then(({ files }) => {<EOL>            const  normalized = files.map(file => {<EOL>                const rpath = path.normalize(file);<EOL>                instance.compiledFiles[file] = true;<EOL>                return rpath;<EOL>            });<EOL>            Array.prototype.push.apply(compilation.fileDependencies, normalized);<EOL>        });<EOL>        const timeStart = +( new Date());<EOL>        const diag = () => instance.loaderConfig.transpileOnly<EOL>            ? Promise.resolve()<EOL>            : instance.checker.getDiagnostics()<EOL>                .then(  diags => {<EOL>                if (!silent) {<EOL>                    if (diags. length) {<EOL>                        console.error(colors.red(`<STR_LIT>`));<EOL>                    }<EOL>                    else {<EOL>                        let timeEnd = +new Date();<EOL>                        console.log(colors.green(`<STR_LIT>`));<EOL>                    }<EOL>                }<EOL>                diags.forEach(diag => emitError(diag.pretty));<EOL>            });<EOL>        files<EOL>            .then(() => {<EOL>            if ( asyncErrors) {<EOL>                diag(); // Don't wait for diags in watch mode<EOL>","gt":"return;"}
{"input":"<s> export function featurePath(group, flat, path, name) {<EOL>    if (group && !flat) {<EOL>","gt":"return `<STR_LIT>`;"}
{"input":"<s> export function verifyOutput(output, reporter) {<EOL>    reportErrorThrown(","gt":"output, reporter);"}
{"input":"<s> <EOL>export function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {<EOL>    return parentRuler || new ViewportRuler(","gt":"platform, ngZone);"}
{"input":"<s> export function overridePlatform(platform) {<EOL>    IS_ANDROID = platform ==","gt":"'<STR_LIT>';"}
{"input":"<s> export function foo() {<EOL>    return","gt":"new d();"}
{"input":"<s> export function windowTime(windowTimeSpan) {<EOL>    let scheduler = async;<EOL>    let windowCreationInterval = null;<EOL>    let maxWindowSize = Number.POSITIVE_INFINITY;<EOL>    if (isScheduler(arguments[<NUM_LIT>])) {<EOL>        scheduler = arguments[<NUM_LIT>];<EOL>    }<EOL>    if (isScheduler(arguments[<NUM_LIT>])) {<EOL>        scheduler = arguments[<NUM_LIT>];<EOL>    }<EOL>    else if (isNumeric(arguments[<NUM_LIT>])) {<EOL>","gt":"maxWindowSize = arguments[<NUM_LIT>];"}
{"input":"<s> <EOL>export function parseGitStatus(output, packagePath) {<EOL>    const changes = new Map();<EOL>    <EOL>    // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]<EOL>    // will be empty or undefined<EOL>    if (!output) {<EOL>","gt":"return changes;"}
{"input":"<s> <EOL>export function parseGitStatus(output, packagePath) {<EOL>    const changes = new Map();<EOL>    <EOL>    // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]<EOL>    // will be empty or undefined<EOL>    if (!output) {<EOL>         return changes;<EOL>    }<EOL>    // Note: The output of git hash-object uses \\n newlines regardless of OS.<EOL>    output<EOL>        .trim()<EOL>        .split(","gt":"'<STR_LIT>')"}
{"input":"<s> <EOL>export function parseGitStatus(output, packagePath) {<EOL>    const changes = new Map();<EOL>    <EOL>    // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]<EOL>    // will be empty or undefined<EOL>    if (!output) {<EOL>         return changes;<EOL>    }<EOL>    // Note: The output of git hash-object uses \\n newlines regardless of OS.<EOL>    output<EOL>        .trim()<EOL>        .split( '<STR_LIT>')<EOL>        .forEach(line => {<EOL>        const [changeType, filename] = line.trim().split('<STR_LIT>');<EOL>        <EOL>        if (changeType &&","gt":"filename) {"}
{"input":"<s> <EOL>export function findNodes(node, kind, max = Infinity) {<EOL>    if (!node || max == <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const arr = [];<EOL>    if (node.kind ===","gt":"kind) {"}
{"input":"<s> <EOL>export function findNodes(node, kind, max = Infinity) {<EOL>    if (!node || max == <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const arr = [];<EOL>    if (node.kind ===  kind) {<EOL>        arr.push(node);<EOL>","gt":"max--;"}
{"input":"<s> <EOL>export function findNodes(node, kind, max = Infinity) {<EOL>    if (!node || max == <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const arr = [];<EOL>    if (node.kind ===  kind) {<EOL>        arr.push(node);<EOL>         max--;<EOL>    }<EOL>    if (max > <NUM_LIT>) {<EOL>        for (const child of node.getChildren()) {<EOL>            findNodes(child, kind, max).forEach(node => {<EOL>","gt":"if (max > <NUM_LIT>) {"}
{"input":"<s> <EOL>export function findNodes(node, kind, max = Infinity) {<EOL>    if (!node || max == <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const arr = [];<EOL>    if (node.kind ===  kind) {<EOL>        arr.push(node);<EOL>         max--;<EOL>    }<EOL>    if (max > <NUM_LIT>) {<EOL>        for (const child of node.getChildren()) {<EOL>            findNodes(child, kind, max).forEach(node => {<EOL>                 if (max > <NUM_LIT>) {<EOL>                    arr.push(node);<EOL>                }<EOL>                max--;<EOL>            });<EOL>            if (max <=","gt":"<NUM_LIT>) {"}
{"input":"<s> export function generateMockBook() {<EOL>    return {<EOL>        id: '<STR_LIT>',<EOL>        volumeInfo: {<EOL>            title: '<STR_LIT>',<EOL>            subtitle: '<STR_LIT>',<EOL>            authors: [","gt":"'<STR_LIT>'],"}
{"input":"<s> export function generateMockBook() {<EOL>    return {<EOL>        id: '<STR_LIT>',<EOL>        volumeInfo: {<EOL>            title: '<STR_LIT>',<EOL>            subtitle: '<STR_LIT>',<EOL>            authors: [ '<STR_LIT>'],<EOL>            publisher: '<STR_LIT>',<EOL>            publishDate: '<STR_LIT>',<EOL>            description: '<STR_LIT>',<EOL>            averageRating:","gt":"<NUM_LIT>,"}
{"input":"<s> export function generateMockBook() {<EOL>    return {<EOL>        id: '<STR_LIT>',<EOL>        volumeInfo: {<EOL>            title: '<STR_LIT>',<EOL>            subtitle: '<STR_LIT>',<EOL>            authors: [ '<STR_LIT>'],<EOL>            publisher: '<STR_LIT>',<EOL>            publishDate: '<STR_LIT>',<EOL>            description: '<STR_LIT>',<EOL>            averageRating:  <NUM_LIT>,<EOL>            ratingsCount: <NUM_LIT>,<EOL>            imageLinks: {<EOL>","gt":"thumbnail: '<STR_LIT>',"}
{"input":"<s> function pipeStdOut(d) {<EOL>    process.","gt":"stdout.write(d);"}
{"input":"<s> <EOL>export function debounceTime(dueTime, scheduler = async) {<EOL>    return higherOrder(","gt":"dueTime, scheduler)(this);"}
{"input":"<s> function convertSeverity(severity) {<EOL>    switch (severity) {<EOL>        // Eslint 1 is warning<EOL>","gt":"case <NUM_LIT>:"}
{"input":"<s> <EOL>export function retry(count = -<NUM_LIT>) {<EOL>    return (","gt":"source) => source.lift(new RetryOperator(count, source));"}
{"input":"<s> function toLength(o) {<EOL>    let len = +o.length;<EOL>    if (isNaN(len)) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    if (","gt":"len === <NUM_LIT> || !numberIsFinite(len)) {"}
{"input":"<s> function toLength(o) {<EOL>    let len = +o.length;<EOL>    if (isNaN(len)) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    if ( len === <NUM_LIT> || !numberIsFinite(len)) {<EOL>        return len;<EOL>    }<EOL>    len = sign(len) * Math.floor(Math.abs(len));<EOL>    if (len <=","gt":"<NUM_LIT>) {"}
{"input":"<s> function toLength(o) {<EOL>    let len = +o.length;<EOL>    if (isNaN(len)) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    if ( len === <NUM_LIT> || !numberIsFinite(len)) {<EOL>        return len;<EOL>    }<EOL>    len = sign(len) * Math.floor(Math.abs(len));<EOL>    if (len <=  <NUM_LIT>) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>","gt":"if (len > maxSafeInteger) {"}
{"input":"<s> async function runTask(name, taskFn) {<EOL>    const spinner = ora(name);<EOL>    try {<EOL>        spinner.start();<EOL>","gt":"await taskFn();"}
{"input":"<s> async function runTask(name, taskFn) {<EOL>    const spinner = ora(name);<EOL>    try {<EOL>        spinner.start();<EOL>         await taskFn();<EOL>        spinner.succeed();<EOL>    }<EOL>    catch (e) {<EOL>","gt":"spinner.fail();"}
{"input":"<s> function stripLowLevelDomains(domain) {<EOL>    let match =","gt":"domain.match(SecondLevelDomainMatcher);"}
{"input":"<s> function configurationEntries(extensionGalleryService, viewletService, query, label) {<EOL>    if (extensionGalleryService.isEnabled()) {<EOL>        return [{<EOL>                id: void <NUM_LIT>,<EOL>                label:","gt":"label,"}
{"input":"<s> export function ajaxGet(url, headers = null) {<EOL>    return new AjaxObservable({ method: '<STR_LIT>',","gt":"url, headers });"}
{"input":"<s> export function applyOperators(input$, operators) {<EOL>    return operators.reduce((source$, [","gt":"operator, ...args]) => {"}
{"input":"<s> function _throttle(fn, key) {<EOL>    const currentKey = `<STR_LIT>`;<EOL>    const nextKey = `<STR_LIT>`;<EOL>    const trigger = function (...args) {<EOL>        if (this[nextKey]) {<EOL>            return this[nextKey];<EOL>        }<EOL>        if (this[currentKey]) {<EOL>            this[nextKey] = done(this[currentKey]).then(() => {<EOL>                this[nextKey] = undefined;<EOL>                return trigger.apply(this, args);<EOL>            });<EOL>            return this[nextKey];<EOL>        }<EOL>        this[currentKey] = fn.apply(this, args);<EOL>        const","gt":"clear = () => this[currentKey] = undefined;"}
{"input":"<s> <EOL><EOL>export function concatMap(project, resultSelector) {<EOL>    return","gt":"higherOrderConcatMap(project, resultSelector)(this);"}
{"input":"<s> function recordCodeAction(document, diagnostic, problem) {<EOL>    let documentDisableRuleFixes = codeDisableRuleActions[document.uri];<EOL>    if (!documentDisableRuleFixes) {<EOL>        documentDisableRuleFixes = Object.create(null);<EOL>        codeDisableRuleActions[document.uri] = documentDisableRuleFixes;<EOL>    }<EOL>    documentDisableRuleFixes[computeKey(diagnostic)] = createDisableRuleFix(problem, document);<EOL>    let fix = undefined;<EOL>    // tslint can return a fix with an empty replacements array, these fixes are ignored<EOL>    if (problem.getFix && problem.getFix() && !replacementsAreEmpty(problem.getFix())) { // tslint fixes are not available in tslint < 3.17<EOL>        fix = createAutoFix(problem, document, problem.getFix());<EOL>    }<EOL>    if (!fix) {<EOL>        let vscFix = createVscFixForRuleFailure(problem, document);<EOL>        if (","gt":"vscFix) {"}
{"input":"<s> function setEffectMetadataEntries(sourceProto, entries) {<EOL>    const constructor = sourceProto.constructor;<EOL>    const meta = constructor.hasOwnProperty(","gt":"METADATA_KEY)"}
{"input":"<s> <EOL>export function delayWhen(delayDurationSelector, subscriptionDelay) {<EOL>","gt":"return higherOrder(delayDurationSelector, subscriptionDelay)(this);"}
{"input":"<s> <EOL>export async function publishToRepo(config) {<EOL>    for (let pkg of util.getTopLevelPackages(config)) {<EOL>        const SOURCE_DIR = `<STR_LIT>`;<EOL>        const REPO_URL =","gt":"pkg}-builds.git`<STR_LIT>;"}
{"input":"<s> <EOL>export async function publishToRepo(config) {<EOL>    for (let pkg of util.getTopLevelPackages(config)) {<EOL>        const SOURCE_DIR = `<STR_LIT>`;<EOL>        const REPO_URL = `<STR_LIT>`;<EOL>        const REPO_DIR = `<STR_LIT>`;<EOL>        const SHA = await util.git([`<STR_LIT>`]);<EOL>        const SHORT_SHA = await util.git([`<STR_LIT>`]);<EOL>        const COMMITTER_USER_NAME = await","gt":"util.git(["}
{"input":"<s> <EOL>export async function publishToRepo(config) {<EOL>    for (let pkg of util.getTopLevelPackages(config)) {<EOL>        const SOURCE_DIR = `<STR_LIT>`;<EOL>        const REPO_URL = `<STR_LIT>`;<EOL>        const REPO_DIR = `<STR_LIT>`;<EOL>        const SHA = await util.git([`<STR_LIT>`]);<EOL>        const SHORT_SHA = await util.git([`<STR_LIT>`]);<EOL>        const COMMITTER_USER_NAME = await  util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        const COMMITTER_USER_EMAIL = await util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>","gt":"await util.cmd('<STR_LIT>', [`<STR_LIT>`]);"}
{"input":"<s> <EOL>export async function publishToRepo(config) {<EOL>    for (let pkg of util.getTopLevelPackages(config)) {<EOL>        const SOURCE_DIR = `<STR_LIT>`;<EOL>        const REPO_URL = `<STR_LIT>`;<EOL>        const REPO_DIR = `<STR_LIT>`;<EOL>        const SHA = await util.git([`<STR_LIT>`]);<EOL>        const SHORT_SHA = await util.git([`<STR_LIT>`]);<EOL>        const COMMITTER_USER_NAME = await  util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        const COMMITTER_USER_EMAIL = await util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>         await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>        await process.chdir(`<STR_LIT>`);<EOL>        await util.git([`<STR_LIT>`]);<EOL>        await util.git([`<STR_LIT>`]);<EOL>        await","gt":"util.git(['<STR_LIT>']);"}
{"input":"<s> <EOL>export async function publishToRepo(config) {<EOL>    for (let pkg of util.getTopLevelPackages(config)) {<EOL>        const SOURCE_DIR = `<STR_LIT>`;<EOL>        const REPO_URL = `<STR_LIT>`;<EOL>        const REPO_DIR = `<STR_LIT>`;<EOL>        const SHA = await util.git([`<STR_LIT>`]);<EOL>        const SHORT_SHA = await util.git([`<STR_LIT>`]);<EOL>        const COMMITTER_USER_NAME = await  util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        const COMMITTER_USER_EMAIL = await util.git([<EOL>            `<STR_LIT>`,<EOL>        ]);<EOL>        await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>         await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>        await process.chdir(`<STR_LIT>`);<EOL>        await util.git([`<STR_LIT>`]);<EOL>        await util.git([`<STR_LIT>`]);<EOL>        await  util.git(['<STR_LIT>']);<EOL>        await util.git(['<STR_LIT>']);<EOL>        await util.git(['<STR_LIT>']);<EOL>        await process.chdir('<STR_LIT>');<EOL>        await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>        await util.git([`<STR_LIT>`]);<EOL>        await util.cmd('<STR_LIT>', [`<STR_LIT>`]);<EOL>        await process.","gt":"chdir(`<STR_LIT>`);"}
{"input":"<s> export function getFileContent(tree, path) {<EOL>    const fileEntry = tree.get(path);<EOL>","gt":"if (!fileEntry) {"}
{"input":"<s> <EOL><EOL>export function multicast(subjectOrSubjectFactory, selector) {<EOL>    return function multicastOperatorFunction(source) {<EOL>        let subjectFactory;<EOL>        if (typeof subjectOrSubjectFactory === '<STR_LIT>') {<EOL>            subjectFactory = subjectOrSubjectFactory;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> <EOL><EOL>export function multicast(subjectOrSubjectFactory, selector) {<EOL>    return function multicastOperatorFunction(source) {<EOL>        let subjectFactory;<EOL>        if (typeof subjectOrSubjectFactory === '<STR_LIT>') {<EOL>            subjectFactory = subjectOrSubjectFactory;<EOL>        }<EOL>         else {<EOL>            subjectFactory = function subjectFactory() {<EOL>                return subjectOrSubjectFactory;<EOL>            };<EOL>        }<EOL>        if (typeof selector === '<STR_LIT>') {<EOL>            return source.lift(new MulticastOperator(subjectFactory, selector));<EOL>        }<EOL>        const connectable = Object.create(source,","gt":"connectableObservableDescriptor);"}
{"input":"<s> function findTsConfig(fileName) {<EOL>    let dir = path.dirname(fileName);<EOL>    while (fs.existsSync(dir)) {<EOL>        const candidate = path.join(dir, '<STR_LIT>');<EOL>","gt":"if (fs.existsSync(candidate))"}
{"input":"<s> function findTsConfig(fileName) {<EOL>    let dir = path.dirname(fileName);<EOL>    while (fs.existsSync(dir)) {<EOL>        const candidate = path.join(dir, '<STR_LIT>');<EOL>         if (fs.existsSync(candidate))<EOL>            return candidate;<EOL>        const parentDir = path.dirname(dir);<EOL>        if (parentDir === dir)<EOL>","gt":"break;"}
{"input":"<s> function expectFormIsValid() {<EOL>    expect(page.form.","gt":"getAttribute('<STR_LIT>')).toMatch('<STR_LIT>');"}
{"input":"<s> <EOL>export function pluck(...properties) {<EOL>    const length = properties.length;<EOL>    if (","gt":"length === <NUM_LIT>) {"}
{"input":"<s> function _readCoverOptions(testsRoot) {<EOL>    let coverConfigPath = paths.join(testsRoot, testOptions.coverConfig);<EOL>    let coverConfig = undefined;<EOL>    if (fs.","gt":"existsSync(coverConfigPath)) {"}
{"input":"<s> <EOL>export function sampleTime(period, scheduler = async) {<EOL>    return (source) => source.lift(new","gt":"SampleTimeOperator(period, scheduler));"}
{"input":"<s> export function detectFileEncoding(fileName, buffer) {<EOL>    if (buffer.length < <NUM_LIT>) {<EOL>        throw","gt":"Error(tl.loc('<STR_LIT>', fileName));"}
{"input":"<s> function getDeps(pkg) {<EOL>    const","gt":"packageJson = require(pkg.packageJson);"}
{"input":"<s> <EOL>export function findIndex(predicate, xs) {<EOL>    if (!Array.isArray(xs)) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>","gt":"let index;"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =","gt":"'<STR_LIT>' + quality;"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>","gt":"parameters: [{ name: '<STR_LIT>', value: commit }]"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =","gt":"<NUM_LIT>;"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =  <NUM_LIT>;<EOL>    function update() {<EOL>        updateTries++;<EOL>","gt":"return new Promise((c, e) => {"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =  <NUM_LIT>;<EOL>    function update() {<EOL>        updateTries++;<EOL>         return new Promise((c, e) => {<EOL>            client.queryDocuments(collection, updateQuery).toArray((err, results) => {<EOL>                if (err) {<EOL>                    return e(err);<EOL>                }<EOL>                if (results.length !== <NUM_LIT>) {<EOL>","gt":"return e(new Error('<STR_LIT>'));"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =  <NUM_LIT>;<EOL>    function update() {<EOL>        updateTries++;<EOL>         return new Promise((c, e) => {<EOL>            client.queryDocuments(collection, updateQuery).toArray((err, results) => {<EOL>                if (err) {<EOL>                    return e(err);<EOL>                }<EOL>                if (results.length !== <NUM_LIT>) {<EOL>                     return e(new Error('<STR_LIT>'));<EOL>                }<EOL>                const release = results[<NUM_LIT>];<EOL>                release.assets = [<EOL>                    ...release.assets.filter((a) => !(a.platform === platform && a.type === type)),<EOL>                    asset<EOL>                ];<EOL>                if (isUpdate) {<EOL>                    release.updates[platform] = type;<EOL>                }<EOL>                client.replaceDocument(release._self, release, err => {<EOL>","gt":"if (err && err.code === <NUM_LIT> && updateTries < <NUM_LIT>) {"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =  <NUM_LIT>;<EOL>    function update() {<EOL>        updateTries++;<EOL>         return new Promise((c, e) => {<EOL>            client.queryDocuments(collection, updateQuery).toArray((err, results) => {<EOL>                if (err) {<EOL>                    return e(err);<EOL>                }<EOL>                if (results.length !== <NUM_LIT>) {<EOL>                     return e(new Error('<STR_LIT>'));<EOL>                }<EOL>                const release = results[<NUM_LIT>];<EOL>                release.assets = [<EOL>                    ...release.assets.filter((a) => !(a.platform === platform && a.type === type)),<EOL>                    asset<EOL>                ];<EOL>                if (isUpdate) {<EOL>                    release.updates[platform] = type;<EOL>                }<EOL>                client.replaceDocument(release._self, release, err => {<EOL>                     if (err && err.code === <NUM_LIT> && updateTries < <NUM_LIT>) {<EOL>                        return c(update());<EOL>                    }<EOL>                    if (err) {<EOL>                        return e(err);<EOL>                    }<EOL>                    console.log('<STR_LIT>');<EOL>                    c();<EOL>                });<EOL>            });<EOL>        });<EOL>    }<EOL>    return new Promise((c, e) => {<EOL>        client.createDocument(collection, release, err => {<EOL>            if (err && err.code === <NUM_LIT>) {<EOL>","gt":"return c(update());"}
{"input":"<s> function createOrUpdate(commit, quality, platform, type, release, asset, isUpdate) {<EOL>    const client = new DocumentClient(process.env['<STR_LIT>'], { masterKey: process.env['<STR_LIT>'] });<EOL>    const collection =  '<STR_LIT>' + quality;<EOL>    const updateQuery = {<EOL>        query: '<STR_LIT>',<EOL>         parameters: [{ name: '<STR_LIT>', value: commit }]<EOL>    };<EOL>    let updateTries =  <NUM_LIT>;<EOL>    function update() {<EOL>        updateTries++;<EOL>         return new Promise((c, e) => {<EOL>            client.queryDocuments(collection, updateQuery).toArray((err, results) => {<EOL>                if (err) {<EOL>                    return e(err);<EOL>                }<EOL>                if (results.length !== <NUM_LIT>) {<EOL>                     return e(new Error('<STR_LIT>'));<EOL>                }<EOL>                const release = results[<NUM_LIT>];<EOL>                release.assets = [<EOL>                    ...release.assets.filter((a) => !(a.platform === platform && a.type === type)),<EOL>                    asset<EOL>                ];<EOL>                if (isUpdate) {<EOL>                    release.updates[platform] = type;<EOL>                }<EOL>                client.replaceDocument(release._self, release, err => {<EOL>                     if (err && err.code === <NUM_LIT> && updateTries < <NUM_LIT>) {<EOL>                        return c(update());<EOL>                    }<EOL>                    if (err) {<EOL>                        return e(err);<EOL>                    }<EOL>                    console.log('<STR_LIT>');<EOL>                    c();<EOL>                });<EOL>            });<EOL>        });<EOL>    }<EOL>    return new Promise((c, e) => {<EOL>        client.createDocument(collection, release, err => {<EOL>            if (err && err.code === <NUM_LIT>) {<EOL>                 return c(update());<EOL>            }<EOL>","gt":"if (err) {"}
{"input":"<s> <EOL>export function generateRandomText(length) {<EOL>    let text = \"<STR_LIT>\";<EOL>    const","gt":"characters = \"<STR_LIT>\";"}
{"input":"<s> function getSortData(model, selection, descending) {<EOL>    let startLineNumber = selection.startLineNumber;<EOL>    let endLineNumber = selection.endLineNumber;<EOL>    if (selection.endColumn === <NUM_LIT>) {<EOL>        endLineNumber--;<EOL>    }<EOL>    // Nothing to sort if user didn't select anything.<EOL>    if (startLineNumber >= endLineNumber) {<EOL>        return null;<EOL>    }<EOL>    let linesToSort = [];<EOL>    // Get the contents of the selection to be sorted.<EOL>","gt":"for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {"}
{"input":"<s> function getSortData(model, selection, descending) {<EOL>    let startLineNumber = selection.startLineNumber;<EOL>    let endLineNumber = selection.endLineNumber;<EOL>    if (selection.endColumn === <NUM_LIT>) {<EOL>        endLineNumber--;<EOL>    }<EOL>    // Nothing to sort if user didn't select anything.<EOL>    if (startLineNumber >= endLineNumber) {<EOL>        return null;<EOL>    }<EOL>    let linesToSort = [];<EOL>    // Get the contents of the selection to be sorted.<EOL>     for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {<EOL>        linesToSort.push(model.getLineContent(lineNumber));<EOL>    }<EOL>    let sorted =","gt":"linesToSort.slice(<NUM_LIT>);"}
{"input":"<s> export function f1() {<EOL>    return","gt":"instance1;"}
{"input":"<s> function defaults(opts) {<EOL>    opts = opts || { proto: '<STR_LIT>', addr: <NUM_LIT> };<EOL>    if (typeof opts === '<STR_LIT>') {<EOL>        opts = { proto: '<STR_LIT>', addr: <NUM_LIT> };<EOL>    }<EOL>    if (typeof opts !== '<STR_LIT>') {<EOL>        opts = { proto: '<STR_LIT>', addr: opts };<EOL>    }<EOL>    if (!opts.proto) {<EOL>        opts.proto = '<STR_LIT>';<EOL>    }<EOL>    if (!opts.","gt":"addr) {"}
{"input":"<s> function getSourceFile(out, inputFiles, moduleId) {<EOL>    if (!SOURCE_FILE_MAP[moduleId]) {<EOL>        let filePath = path.normalize(moduleIdToPath(out, moduleId));<EOL>        if (!inputFiles.hasOwnProperty(filePath)) {<EOL>            logErr('<STR_LIT>' + filePath +","gt":"'<STR_LIT>');"}
{"input":"<s> function getSourceFile(out, inputFiles, moduleId) {<EOL>    if (!SOURCE_FILE_MAP[moduleId]) {<EOL>        let filePath = path.normalize(moduleIdToPath(out, moduleId));<EOL>        if (!inputFiles.hasOwnProperty(filePath)) {<EOL>            logErr('<STR_LIT>' + filePath +  '<STR_LIT>');<EOL>            return null;<EOL>        }<EOL>        let fileContents = inputFiles[filePath];<EOL>        let sourceFile = ts.createSourceFile(filePath, fileContents, ts.ScriptTarget.ES5);<EOL>","gt":"SOURCE_FILE_MAP[moduleId] = sourceFile;"}
{"input":"<s> <EOL>export function JoinColumn(optionsOrOptionsArray) {<EOL>    return function (object, propertyName) {<EOL>        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];<EOL>        options.forEach(options => {<EOL>","gt":"const args = {"}
{"input":"<s> <EOL>export function JoinColumn(optionsOrOptionsArray) {<EOL>    return function (object, propertyName) {<EOL>        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];<EOL>        options.forEach(options => {<EOL>             const args = {<EOL>                target: object.constructor,<EOL>                propertyName: propertyName,<EOL>                name: options.name,<EOL>                referencedColumnName: options.referencedColumnName<EOL>            };<EOL>","gt":"getMetadataArgsStorage().joinColumns.push(args);"}
{"input":"<s> <EOL>export function EventSubscriber() {<EOL>    return function (target) {<EOL>        const args =","gt":"{"}
{"input":"<s> function updateConfiguration(settings) {<EOL>    for (let languageId in languageServices) {<EOL>        languageServices[languageId].configure(settings[languageId]);<EOL>    }<EOL>    // reset all document settings<EOL>    documentSettings = {};<EOL>    // Revalidate any open text documents<EOL>    documents.all().forEach(triggerValidation);<EOL>    emmetSettings = settings.emmet;<EOL>    if (currentEmmetExtensionsPath !== emmetSettings['<STR_LIT>']) {<EOL>        currentEmmetExtensionsPath =","gt":"emmetSettings['<STR_LIT>'];"}
{"input":"<s> <EOL>export function isFlowHorizontal(value) {<EOL>    let [flow,] = validateValue(","gt":"value);"}
{"input":"<s> <EOL>export function snakeCase(str) {<EOL>    return str.replace(/(?:^|\\.?)([A-Z])/g, (x, y) =>","gt":"\"<STR_LIT>\" + y.toLowerCase()).replace(/^_/, \"<STR_LIT>\");"}
{"input":"<s> <EOL>export function AfterRemove() {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>","gt":"target: object.constructor,"}
{"input":"<s> function rootDirRequire(moduleId) {<EOL>    return require(","gt":"path.join(rootDir, moduleId));"}
{"input":"<s> <EOL>export function getCommandToExecuteStatementsOneByOneIfPreviousIsSucceed(shell, statements) {<EOL>    if (statements.length === <NUM_LIT>) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (shell === Shell.PowerShell) {<EOL>        let command = statements[<NUM_LIT>];<EOL>        for (let i = <NUM_LIT>; i < statements.","gt":"length; ++i) {"}
{"input":"<s> <EOL>export function getCommandToExecuteStatementsOneByOneIfPreviousIsSucceed(shell, statements) {<EOL>    if (statements.length === <NUM_LIT>) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (shell === Shell.PowerShell) {<EOL>        let command = statements[<NUM_LIT>];<EOL>        for (let i = <NUM_LIT>; i < statements. length; ++i) {<EOL>            command += `<STR_LIT>`;<EOL>        }<EOL>        return command;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function getCommandToExecuteStatementsOneByOneIfPreviousIsSucceed(shell, statements) {<EOL>    if (statements.length === <NUM_LIT>) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    if (shell === Shell.PowerShell) {<EOL>        let command = statements[<NUM_LIT>];<EOL>        for (let i = <NUM_LIT>; i < statements. length; ++i) {<EOL>            command += `<STR_LIT>`;<EOL>        }<EOL>        return command;<EOL>    }<EOL>     else {<EOL>        // The string starts with space to make sh not save the command.<EOL>        // This code is also executed for cmd on Windows, but leading space doesn't break anything<EOL>        let command = '<STR_LIT>' + statements[<NUM_LIT>];<EOL>        for (let i = <NUM_LIT>; i <","gt":"statements.length; ++i) {"}
{"input":"<s> // This check only pertains to linux where the native unzip command is used instead of 7zip<EOL>function isZip(file) {<EOL>    return file.endsWith('<STR_LIT>')<EOL>        || file.","gt":"endsWith('<STR_LIT>')"}
{"input":"<s> <EOL>export function normalizeDiagnosticPath(diagnosticPath, projectPath) {<EOL>    if (isAbsolute(diagnosticPath)) {<EOL>        return","gt":"diagnosticPath;"}
{"input":"<s> <EOL>async function askUserToConfirmCancellation() {<EOL>    return await","gt":"askUserToAnswerYesOrNo('<STR_LIT>');"}
{"input":"<s> function getStats() {<EOL>    const stats = require.getStats().slice(<NUM_LIT>).sort((a, b) => {<EOL>        if (a.detail < b.detail) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>        else if (a.detail > b.","gt":"detail) {"}
{"input":"<s> function getStats() {<EOL>    const stats = require.getStats().slice(<NUM_LIT>).sort((a, b) => {<EOL>        if (a.detail < b.detail) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>        else if (a.detail > b. detail) {<EOL>            return <NUM_LIT>;<EOL>        }<EOL>        else if (a.type < b.type) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>        else if (a.type > b.type) {<EOL>            return","gt":"<NUM_LIT>;"}
{"input":"<s> function getStats() {<EOL>    const stats = require.getStats().slice(<NUM_LIT>).sort((a, b) => {<EOL>        if (a.detail < b.detail) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>        else if (a.detail > b. detail) {<EOL>            return <NUM_LIT>;<EOL>        }<EOL>        else if (a.type < b.type) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>        else if (a.type > b.type) {<EOL>            return  <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            return <NUM_LIT>;<EOL>        }<EOL>    });<EOL>    const ticks = new Map();<EOL>    ticks.set(LoaderEventType.BeginLoadingScript, []);<EOL>    ticks.","gt":"set(LoaderEventType.BeginInvokeFactory, []);"}
{"input":"<s> function getUserConfiguration() {<EOL>    const configuration = Configuration.getConfiguration();<EOL>    if (!configuration) {<EOL>        return","gt":"undefined;"}
{"input":"<s> function addToHeroName(text) {<EOL>    let","gt":"input = element(by.css('<STR_LIT>'));"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>","gt":"if (deps) {"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [","gt":"depName, deps[depName]] : null)"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,","gt":"depVersion]) => {"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if (","gt":"allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if ( allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {<EOL>            allVersions[depName] = semverIntersect.intersect(allVersions[depName], depVersion);<EOL>            return empty();<EOL>        }<EOL>        return _getNpmPackageJson(depName, logger).pipe(map(json => [packages[depName], depName, depVersion, json]));<EOL>    }), mergeMap(([","gt":"version, depName, depVersion, npmPackageJson]) => {"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if ( allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {<EOL>            allVersions[depName] = semverIntersect.intersect(allVersions[depName], depVersion);<EOL>            return empty();<EOL>        }<EOL>        return _getNpmPackageJson(depName, logger).pipe(map(json => [packages[depName], depName, depVersion, json]));<EOL>    }), mergeMap(([ version, depName, depVersion, npmPackageJson]) => {<EOL>        const updateVersion = _getVersionFromNpmPackage(npmPackageJson, version, loose);<EOL>        const npmPackageVersions = Object.keys(npmPackageJson['<STR_LIT>']);<EOL>        const match = semver.maxSatisfying(npmPackageVersions, updateVersion);<EOL>        if (!match) {<EOL>            return empty();<EOL>        }<EOL>        if (semver.lt(","gt":"semverIntersect.parseRange(updateVersion).version, semverIntersect.parseRange(depVersion).version)) {"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if ( allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {<EOL>            allVersions[depName] = semverIntersect.intersect(allVersions[depName], depVersion);<EOL>            return empty();<EOL>        }<EOL>        return _getNpmPackageJson(depName, logger).pipe(map(json => [packages[depName], depName, depVersion, json]));<EOL>    }), mergeMap(([ version, depName, depVersion, npmPackageJson]) => {<EOL>        const updateVersion = _getVersionFromNpmPackage(npmPackageJson, version, loose);<EOL>        const npmPackageVersions = Object.keys(npmPackageJson['<STR_LIT>']);<EOL>        const match = semver.maxSatisfying(npmPackageVersions, updateVersion);<EOL>        if (!match) {<EOL>            return empty();<EOL>        }<EOL>        if (semver.lt( semverIntersect.parseRange(updateVersion).version, semverIntersect.parseRange(depVersion).version)) {<EOL>            throw new SchematicsException(`<STR_LIT>`);<EOL>        }<EOL>        const innerNpmPackageJson = npmPackageJson['<STR_LIT>'][match];<EOL>","gt":"const dependencies = {};"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if ( allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {<EOL>            allVersions[depName] = semverIntersect.intersect(allVersions[depName], depVersion);<EOL>            return empty();<EOL>        }<EOL>        return _getNpmPackageJson(depName, logger).pipe(map(json => [packages[depName], depName, depVersion, json]));<EOL>    }), mergeMap(([ version, depName, depVersion, npmPackageJson]) => {<EOL>        const updateVersion = _getVersionFromNpmPackage(npmPackageJson, version, loose);<EOL>        const npmPackageVersions = Object.keys(npmPackageJson['<STR_LIT>']);<EOL>        const match = semver.maxSatisfying(npmPackageVersions, updateVersion);<EOL>        if (!match) {<EOL>            return empty();<EOL>        }<EOL>        if (semver.lt( semverIntersect.parseRange(updateVersion).version, semverIntersect.parseRange(depVersion).version)) {<EOL>            throw new SchematicsException(`<STR_LIT>`);<EOL>        }<EOL>        const innerNpmPackageJson = npmPackageJson['<STR_LIT>'][match];<EOL>         const dependencies = {};<EOL>        const deps = innerNpmPackageJson['<STR_LIT>'];<EOL>        if (deps) {<EOL>            for (const depName of Object.keys(deps)) {<EOL>                dependencies[depName] = deps[depName];<EOL>            }<EOL>        }<EOL>        logger.debug(","gt":"JSON.stringify(depName)} to version ${updateVersion}.`<STR_LIT>;"}
{"input":"<s> <EOL>function _getRecursiveVersions(packageJson, packages, allVersions, logger, loose) {<EOL>    return observableFrom(kPackageJsonDependencyFields).pipe(mergeMap(field => {<EOL>        const deps = packageJson[field];<EOL>         if (deps) {<EOL>            return observableFrom(Object.keys(deps)<EOL>                .map(depName => depName in deps ? [ depName, deps[depName]] : null)<EOL>                .filter(x => !!x));<EOL>        }<EOL>        else {<EOL>            return empty();<EOL>        }<EOL>    }), mergeMap(([depName,  depVersion]) => {<EOL>        if (!packages[depName] || packages[depName] === depVersion) {<EOL>            return empty();<EOL>        }<EOL>        if ( allVersions[depName] && semver.intersects(allVersions[depName], depVersion)) {<EOL>            allVersions[depName] = semverIntersect.intersect(allVersions[depName], depVersion);<EOL>            return empty();<EOL>        }<EOL>        return _getNpmPackageJson(depName, logger).pipe(map(json => [packages[depName], depName, depVersion, json]));<EOL>    }), mergeMap(([ version, depName, depVersion, npmPackageJson]) => {<EOL>        const updateVersion = _getVersionFromNpmPackage(npmPackageJson, version, loose);<EOL>        const npmPackageVersions = Object.keys(npmPackageJson['<STR_LIT>']);<EOL>        const match = semver.maxSatisfying(npmPackageVersions, updateVersion);<EOL>        if (!match) {<EOL>            return empty();<EOL>        }<EOL>        if (semver.lt( semverIntersect.parseRange(updateVersion).version, semverIntersect.parseRange(depVersion).version)) {<EOL>            throw new SchematicsException(`<STR_LIT>`);<EOL>        }<EOL>        const innerNpmPackageJson = npmPackageJson['<STR_LIT>'][match];<EOL>         const dependencies = {};<EOL>        const deps = innerNpmPackageJson['<STR_LIT>'];<EOL>        if (deps) {<EOL>            for (const depName of Object.keys(deps)) {<EOL>                dependencies[depName] = deps[depName];<EOL>            }<EOL>        }<EOL>        logger.debug(`<STR_LIT>`);<EOL>        if (allVersions[depName]) {<EOL>            if (!semver.intersects(allVersions[depName], updateVersion)) {<EOL>                throw new SchematicsException('<STR_LIT>'<EOL>                    +","gt":"depName} would need to match both versions \"<STR_LIT>\" and `<STR_LIT>`"}
{"input":"<s> function minimalPathFilter(path) {<EOL>    const toRemoveList = [/e2e\\//, /editorconfig/, /README/, /karma.conf.js/,<EOL>        /protractor.conf.js/, /test.ts/,","gt":"/tsconfig.spec.json/,"}
{"input":"<s> function text(emphasized, text) {<EOL>    return [<EOL>        { ...p,<EOL>            align: '<STR_LIT>',<EOL>            paragraphLeading: leading,<EOL>","gt":"spans: ["}
{"input":"<s> function updateBrowserFile(binary, outputDir) {<EOL>    let currentDownload = path.resolve(outputDir, binary.executableFilename());<EOL>    // if browserFile[id] exists, we should update it<EOL>    if (browserFile[binary.id()]) {<EOL>        let binaryPath = browserFile[binary.id()];<EOL>","gt":"if (binaryPath.last === currentDownload) {"}
{"input":"<s> function updateBrowserFile(binary, outputDir) {<EOL>    let currentDownload = path.resolve(outputDir, binary.executableFilename());<EOL>    // if browserFile[id] exists, we should update it<EOL>    if (browserFile[binary.id()]) {<EOL>        let binaryPath = browserFile[binary.id()];<EOL>         if (binaryPath.last === currentDownload) {<EOL>            return;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function updateBrowserFile(binary, outputDir) {<EOL>    let currentDownload = path.resolve(outputDir, binary.executableFilename());<EOL>    // if browserFile[id] exists, we should update it<EOL>    if (browserFile[binary.id()]) {<EOL>        let binaryPath = browserFile[binary.id()];<EOL>         if (binaryPath.last === currentDownload) {<EOL>            return;<EOL>        }<EOL>         else {<EOL>            binaryPath.last = currentDownload;<EOL>            for (let bin of binaryPath.all) {<EOL>                if (bin === currentDownload) {<EOL>                    return;<EOL>                }<EOL>            }<EOL>            binaryPath.all.push(currentDownload);<EOL>        }<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for (","gt":"let node of layer) {"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,","gt":"page);"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>","gt":"for (let layer of background(page)) {"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>             for (let layer of background(page)) {<EOL>                for (let node of layer) {<EOL>                    pages[page].push(node);<EOL>                }<EOL>            }<EOL>        }<EOL>    }<EOL>    for (let layer of","gt":"layers) {"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>             for (let layer of background(page)) {<EOL>                for (let node of layer) {<EOL>                    pages[page].push(node);<EOL>                }<EOL>            }<EOL>        }<EOL>    }<EOL>    for (let layer of  layers) {<EOL>        for (let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            pages[page].push(node);<EOL>        }<EOL>    }<EOL>    for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>        if (page != <NUM_LIT>) {<EOL>            doc.addPage();<EOL>        }<EOL>        for (let node of pages[page]) {<EOL>            doc.save();<EOL>            switch (node.","gt":"type) {"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>             for (let layer of background(page)) {<EOL>                for (let node of layer) {<EOL>                    pages[page].push(node);<EOL>                }<EOL>            }<EOL>        }<EOL>    }<EOL>    for (let layer of  layers) {<EOL>        for (let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            pages[page].push(node);<EOL>        }<EOL>    }<EOL>    for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>        if (page != <NUM_LIT>) {<EOL>            doc.addPage();<EOL>        }<EOL>        for (let node of pages[page]) {<EOL>            doc.save();<EOL>            switch (node. type) {<EOL>                case '<STR_LIT>':<EOL>                    doc.save();<EOL>                    setStyle(doc, node.span.style || {});<EOL>                    doc.font(","gt":"node.span.fontFamily).fontSize(node.span.fontSize)._fragment(node.text, node.x, node.y - page * format.height, node.span.options || {});"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>             for (let layer of background(page)) {<EOL>                for (let node of layer) {<EOL>                    pages[page].push(node);<EOL>                }<EOL>            }<EOL>        }<EOL>    }<EOL>    for (let layer of  layers) {<EOL>        for (let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            pages[page].push(node);<EOL>        }<EOL>    }<EOL>    for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>        if (page != <NUM_LIT>) {<EOL>            doc.addPage();<EOL>        }<EOL>        for (let node of pages[page]) {<EOL>            doc.save();<EOL>            switch (node. type) {<EOL>                case '<STR_LIT>':<EOL>                    doc.save();<EOL>                    setStyle(doc, node.span.style || {});<EOL>                    doc.font( node.span.fontFamily).fontSize(node.span.fontSize)._fragment(node.text, node.x, node.y - page * format.height, node.span.options || {});<EOL>                    doc.restore();<EOL>                    break;<EOL>                case '<STR_LIT>':<EOL>                    doc.save();<EOL>                    setStyle(doc, node.style || {});<EOL>                    if (node.style.fillColor && node.style.strokeColor) {<EOL>                        doc.polygon.apply(doc, node.points.map(({ x: x, y: y }) => [x, y]));<EOL>                        doc.","gt":"fillAndStroke();"}
{"input":"<s> export function renderToPages(doc, format, layers, background) {<EOL>    let page_count = <NUM_LIT>;<EOL>    for (let layer of layers) {<EOL>        for ( let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            page_count = Math.max(page_count,  page);<EOL>        }<EOL>    }<EOL>    const pages = Array(page_count + <NUM_LIT>).fill([]);<EOL>    if (background) {<EOL>        for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>             for (let layer of background(page)) {<EOL>                for (let node of layer) {<EOL>                    pages[page].push(node);<EOL>                }<EOL>            }<EOL>        }<EOL>    }<EOL>    for (let layer of  layers) {<EOL>        for (let node of layer) {<EOL>            const page = Math.floor(node.y / format.height);<EOL>            pages[page].push(node);<EOL>        }<EOL>    }<EOL>    for (let page = <NUM_LIT>; page <= page_count; page++) {<EOL>        if (page != <NUM_LIT>) {<EOL>            doc.addPage();<EOL>        }<EOL>        for (let node of pages[page]) {<EOL>            doc.save();<EOL>            switch (node. type) {<EOL>                case '<STR_LIT>':<EOL>                    doc.save();<EOL>                    setStyle(doc, node.span.style || {});<EOL>                    doc.font( node.span.fontFamily).fontSize(node.span.fontSize)._fragment(node.text, node.x, node.y - page * format.height, node.span.options || {});<EOL>                    doc.restore();<EOL>                    break;<EOL>                case '<STR_LIT>':<EOL>                    doc.save();<EOL>                    setStyle(doc, node.style || {});<EOL>                    if (node.style.fillColor && node.style.strokeColor) {<EOL>                        doc.polygon.apply(doc, node.points.map(({ x: x, y: y }) => [x, y]));<EOL>                        doc. fillAndStroke();<EOL>                    }<EOL>                    else if (node.style.fillColor) {<EOL>                        doc.polygon.apply(doc, node.points.map(({ x: x, y: y }) => [x, y]));<EOL>                        doc.fill();<EOL>                    }<EOL>                    else if (node.style.strokeColor) {<EOL>                        doc.polygon.apply(doc, node.points.map(({ x: x, y: y }) => [x,","gt":"y]));"}
{"input":"<s> function shrink(span, offset) {<EOL>","gt":"if (offset == null)"}
{"input":"<s> export function left(measureText, hypher, spans, options) {<EOL>    let nodes = [];<EOL>    spans.forEach(function (span, spanIndex, spanArray) {<EOL>        let words = span.","gt":"text.split(/\\s/), spaceWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), o = {"}
{"input":"<s> export function left(measureText, hypher, spans, options) {<EOL>    let nodes = [];<EOL>    spans.forEach(function (span, spanIndex, spanArray) {<EOL>        let words = span. text.split(/\\s/), spaceWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), o = {<EOL>            space: {<EOL>                width: options && options.space.","gt":"width || <NUM_LIT>,"}
{"input":"<s> export function left(measureText, hypher, spans, options) {<EOL>    let nodes = [];<EOL>    spans.forEach(function (span, spanIndex, spanArray) {<EOL>        let words = span. text.split(/\\s/), spaceWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), o = {<EOL>            space: {<EOL>                width: options && options.space. width || <NUM_LIT>,<EOL>                stretch: options && options.space.stretch || <NUM_LIT>,<EOL>","gt":"shrink: options && options.space.shrink || <NUM_LIT>"}
{"input":"<s> export function left(measureText, hypher, spans, options) {<EOL>    let nodes = [];<EOL>    spans.forEach(function (span, spanIndex, spanArray) {<EOL>        let words = span. text.split(/\\s/), spaceWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), o = {<EOL>            space: {<EOL>                width: options && options.space. width || <NUM_LIT>,<EOL>                stretch: options && options.space.stretch || <NUM_LIT>,<EOL>                 shrink: options && options.space.shrink || <NUM_LIT><EOL>            }<EOL>        }, hyphenWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), hyphenPenalty = <NUM_LIT>, spaceStretch = (spaceWidth * o.space.width) / o.space.stretch, spaceShrink = (spaceWidth * o.space.width) / o.space.shrink;<EOL>        words.forEach(function (word, index, array) {<EOL>            let","gt":"hyphenated = span.hyphenate ? hypher.hyphenate(word) : [word];"}
{"input":"<s> export function left(measureText, hypher, spans, options) {<EOL>    let nodes = [];<EOL>    spans.forEach(function (span, spanIndex, spanArray) {<EOL>        let words = span. text.split(/\\s/), spaceWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), o = {<EOL>            space: {<EOL>                width: options && options.space. width || <NUM_LIT>,<EOL>                stretch: options && options.space.stretch || <NUM_LIT>,<EOL>                 shrink: options && options.space.shrink || <NUM_LIT><EOL>            }<EOL>        }, hyphenWidth = measureText(span.fontFamily, span.fontSize, '<STR_LIT>'), hyphenPenalty = <NUM_LIT>, spaceStretch = (spaceWidth * o.space.width) / o.space.stretch, spaceShrink = (spaceWidth * o.space.width) / o.space.shrink;<EOL>        words.forEach(function (word, index, array) {<EOL>            let  hyphenated = span.hyphenate ? hypher.hyphenate(word) : [word];<EOL>            if (hyphenated.length > <NUM_LIT> && word.length > <NUM_LIT>) {<EOL>                hyphenated.forEach(function (part, partIndex, partArray) {<EOL>                    nodes.push({ style: span, value: linebreak.box(measureText(span.fontFamily, span.fontSize, part), part) });<EOL>                    if (partIndex !== partArray.","gt":"length - <NUM_LIT>) {"}
{"input":"<s> <EOL>function quote(args) {<EOL>    let r = '<STR_LIT>';<EOL>    for (let a of args) {<EOL>        if (a.indexOf('<STR_LIT>') >= <NUM_LIT>) {<EOL>            r += '<STR_LIT>' + a +","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>function quote(args) {<EOL>    let r = '<STR_LIT>';<EOL>    for (let a of args) {<EOL>        if (a.indexOf('<STR_LIT>') >= <NUM_LIT>) {<EOL>            r += '<STR_LIT>' + a +  '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            r += a;<EOL>        }<EOL>        r +=","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>export function getLogMetadata(controllerClass, methodName) {<EOL>    return (MetadataInspector.getMethodMetadata(EXAMPLE_LOG_BINDINGS.METADATA, controllerClass.prototype,","gt":"methodName) || { level: LOG_LEVEL.OFF });"}
{"input":"<s> <EOL>export function createEmptyApiSpec() {<EOL>    return {<EOL>        openapi: '<STR_LIT>',<EOL>","gt":"info: {"}
{"input":"<s> export async function getLocalNpmRegistries(workingDir) {<EOL>    let localNpmRegistries = [];<EOL>    let npmrcPath = path.join(workingDir, '<STR_LIT>');<EOL>    if (tl.exist(npmrcPath)) {<EOL>","gt":"let npmRegistries = [];"}
{"input":"<s> export async function getLocalNpmRegistries(workingDir) {<EOL>    let localNpmRegistries = [];<EOL>    let npmrcPath = path.join(workingDir, '<STR_LIT>');<EOL>    if (tl.exist(npmrcPath)) {<EOL>         let npmRegistries = [];<EOL>        for (let registry of await getLocalRegistries(npmrcPath)) {<EOL>            npmRegistries.push(await NpmRegistry.FromFeedId(getFeedIdFromRegistry(registry), true));<EOL>        }<EOL>","gt":"localNpmRegistries = localNpmRegistries.concat(npmRegistries);"}
{"input":"<s> export function showOutputChannel() {<EOL>","gt":"getOutputChannel().show();"}
{"input":"<s> function sorter(a, b) {<EOL>    if (a.weight1 !== b.weight1) {<EOL>        return a.weight1 - b.weight1;<EOL>    }<EOL>    if (","gt":"a.command < b.command) {"}
{"input":"<s> function sorter(a, b) {<EOL>    if (a.weight1 !== b.weight1) {<EOL>        return a.weight1 - b.weight1;<EOL>    }<EOL>    if ( a.command < b.command) {<EOL>        return -<NUM_LIT>;<EOL>    }<EOL>    if (a.command > b.command) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function tsProjectFn(plugins) {<EOL>    return","gt":"plugins.typescript.createProject('<STR_LIT>', {"}
{"input":"<s> <EOL>function appVersion() {<EOL>","gt":"const pkg = require('<STR_LIT>');"}
{"input":"<s> function _assertResolveKeybinding(mapper, k, expected) {<EOL>    assertResolveKeybinding(mapper,","gt":"createKeybinding(k, OperatingSystem.Windows), expected);"}
{"input":"<s> <EOL>function getFactory(moduleOrFactory, compiler) {<EOL>    return new Promise((resolve, reject) => {<EOL>        // If module has been compiled AoT<EOL>        if (moduleOrFactory instanceof NgModuleFactory) {<EOL>            resolve(moduleOrFactory);<EOL>","gt":"return;"}
{"input":"<s> <EOL>function getFactory(moduleOrFactory, compiler) {<EOL>    return new Promise((resolve, reject) => {<EOL>        // If module has been compiled AoT<EOL>        if (moduleOrFactory instanceof NgModuleFactory) {<EOL>            resolve(moduleOrFactory);<EOL>             return;<EOL>        }<EOL>        else {<EOL>","gt":"let moduleFactory = factoryCacheMap.get(moduleOrFactory);"}
{"input":"<s> <EOL>function getFactory(moduleOrFactory, compiler) {<EOL>    return new Promise((resolve, reject) => {<EOL>        // If module has been compiled AoT<EOL>        if (moduleOrFactory instanceof NgModuleFactory) {<EOL>            resolve(moduleOrFactory);<EOL>             return;<EOL>        }<EOL>        else {<EOL>             let moduleFactory = factoryCacheMap.get(moduleOrFactory);<EOL>            // If module factory is cached<EOL>            if (moduleFactory) {<EOL>                resolve(moduleFactory);<EOL>                return;<EOL>            }<EOL>            // Compile the module and cache it<EOL>            compiler.compileModuleAsync(moduleOrFactory)<EOL>                .then((factory) => {<EOL>                factoryCacheMap.set(moduleOrFactory, factory);<EOL>                resolve(","gt":"factory);"}
{"input":"<s> <EOL>function getBuildType() {<EOL>    const type = (argv['<STR_LIT>'] || argv['<STR_LIT>'] || '<STR_LIT>').toLowerCase();<EOL>    const base = argv['<STR_LIT>'];<EOL>    const prodKeyword = !!base<EOL>        .filter(o =>","gt":"o.indexOf(BUILD_TYPES.PRODUCTION) >= <NUM_LIT>)"}
{"input":"<s> <EOL>function getBuildType() {<EOL>    const type = (argv['<STR_LIT>'] || argv['<STR_LIT>'] || '<STR_LIT>').toLowerCase();<EOL>    const base = argv['<STR_LIT>'];<EOL>    const prodKeyword = !!base<EOL>        .filter(o =>  o.indexOf(BUILD_TYPES.PRODUCTION) >= <NUM_LIT>)<EOL>        .pop();<EOL>    if ((base && prodKeyword) || type === BUILD_TYPES.PRODUCTION) {<EOL>        return BUILD_TYPES.PRODUCTION;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function getTestState() {<EOL>    // Create mock account store<EOL>    let mockAccountStore = TypeMoq.Mock.ofType(AccountStore);<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue(","gt":"noAccountProvider.id)))"}
{"input":"<s> function getTestState() {<EOL>    // Create mock account store<EOL>    let mockAccountStore = TypeMoq.Mock.ofType(AccountStore);<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue( noAccountProvider.id)))<EOL>        .returns(() => Promise.resolve([]));<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue(hasAccountProvider.id)))<EOL>        .returns(() => Promise.","gt":"resolve(accountList));"}
{"input":"<s> function getTestState() {<EOL>    // Create mock account store<EOL>    let mockAccountStore = TypeMoq.Mock.ofType(AccountStore);<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue( noAccountProvider.id)))<EOL>        .returns(() => Promise.resolve([]));<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue(hasAccountProvider.id)))<EOL>        .returns(() => Promise. resolve(accountList));<EOL>    // Create instantiation service<EOL>    let mockInstantiationService = TypeMoq.Mock.ofType(InstantiationService, TypeMoq.MockBehavior.Strict);<EOL>    mockInstantiationService.setup(x => x.createInstance(TypeMoq.It.isValue(AccountStore), TypeMoq.It.isAny()))<EOL>        .returns(() => mockAccountStore.","gt":"object);"}
{"input":"<s> function getTestState() {<EOL>    // Create mock account store<EOL>    let mockAccountStore = TypeMoq.Mock.ofType(AccountStore);<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue( noAccountProvider.id)))<EOL>        .returns(() => Promise.resolve([]));<EOL>    mockAccountStore.setup(x => x.getAccountsByProvider(TypeMoq.It.isValue(hasAccountProvider.id)))<EOL>        .returns(() => Promise. resolve(accountList));<EOL>    // Create instantiation service<EOL>    let mockInstantiationService = TypeMoq.Mock.ofType(InstantiationService, TypeMoq.MockBehavior.Strict);<EOL>    mockInstantiationService.setup(x => x.createInstance(TypeMoq.It.isValue(AccountStore), TypeMoq.It.isAny()))<EOL>        .returns(() => mockAccountStore. object);<EOL>    // Create mock memento<EOL>    let mockMemento = {};<EOL>    // Create the account management service<EOL>    let ams = new AccountManagementService(mockMemento, mockInstantiationService.object, null, null);<EOL>    // Wire up event handlers<EOL>    let evUpdate = new EventVerifierSingle();<EOL>    let evAddProvider = new","gt":"EventVerifierSingle();"}
{"input":"<s> function toEnd(node) {<EOL>    if (node && node.tokenType !== undefined) {<EOL>        return","gt":"node.endOffset + <NUM_LIT>;"}
{"input":"<s> function f2() {<EOL>","gt":"return new mExported.me.class1();"}
{"input":"<s> <EOL>export default function autoResize(elem) {<EOL>    function autoResize() {<EOL>        elem.style.height = '<STR_LIT>';<EOL>","gt":"elem.style.height = elem.scrollHeight + '<STR_LIT>';"}
{"input":"<s> export function waitUntilExists(done) {<EOL>    browser.executeScript(function () {<EOL>        return (typeof bootstrapPrebootClient !== '<STR_LIT>');<EOL>    })<EOL>        .","gt":"then((keyExists) => {"}
{"input":"<s> export function waitUntilExists(done) {<EOL>    browser.executeScript(function () {<EOL>        return (typeof bootstrapPrebootClient !== '<STR_LIT>');<EOL>    })<EOL>        . then((keyExists) => {<EOL>        if (keyExists) {<EOL>            done();<EOL>        }<EOL>        else {<EOL>","gt":"setTimeout(() => waitUntilExists(done), <NUM_LIT>);"}
{"input":"<s> function img(parts) {<EOL>    return { kind:","gt":"\"<STR_LIT>\", uri: parts[<NUM_LIT>] };"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>","gt":"for (; currentPosition < input.length; currentPosition++) {"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>","gt":"if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>                 if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            break;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>","gt":"specialCharacterFlag = true;"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>                 if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            break;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>","gt":"specialCharacterFlag = true;"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>                 if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            break;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>            specialCharacterFlag =","gt":"true;"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>                 if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            break;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>            specialCharacterFlag =  true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            //keep going till this one closes<EOL>            currentPosition = findClosingQuoteIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>            specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            //keep going till this one closes<EOL>            currentPosition = findClosingQuoteIndex(input, currentPosition + <NUM_LIT>,","gt":"\"<STR_LIT>\");"}
{"input":"<s> function findLiteral(input, currentPosition) {<EOL>    var specialCharacterFlag = false;<EOL>    for (; currentPosition < input.length; currentPosition++) {<EOL>        if (input[currentPosition] == \"<STR_LIT>\" || input[currentPosition] == \"<STR_LIT>\") {<EOL>             for (; currentPosition < input.length; currentPosition++) {<EOL>                 if (input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\" || input[currentPosition + <NUM_LIT>] != \"<STR_LIT>\") {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            break;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>             specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            currentPosition = findClosingBracketIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>            specialCharacterFlag =  true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            //keep going till this one closes<EOL>            currentPosition = findClosingQuoteIndex(input, currentPosition + <NUM_LIT>, \"<STR_LIT>\");<EOL>            specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>            //keep going till this one closes<EOL>            currentPosition = findClosingQuoteIndex(input, currentPosition + <NUM_LIT>,  \"<STR_LIT>\");<EOL>            specialCharacterFlag = true;<EOL>        }<EOL>        else if (input[currentPosition] == \"<STR_LIT>\") {<EOL>","gt":"currentPosition++;"}
{"input":"<s> function _normalizeProviders(providers, res) {<EOL>    providers.forEach(b => {<EOL>        if (b instanceof Type) {<EOL>            res.push({ provide: b, useClass: b });<EOL>        }<EOL>        else if (","gt":"b && typeof b == '<STR_LIT>' && b.provide !== undefined) {"}
{"input":"<s> function _normalizeProviders(providers, res) {<EOL>    providers.forEach(b => {<EOL>        if (b instanceof Type) {<EOL>            res.push({ provide: b, useClass: b });<EOL>        }<EOL>        else if ( b && typeof b == '<STR_LIT>' && b.provide !== undefined) {<EOL>            res.push(b);<EOL>        }<EOL>        else if (b instanceof Array) {<EOL>","gt":"_normalizeProviders(b, res);"}
{"input":"<s> function _normalizeProviders(providers, res) {<EOL>    providers.forEach(b => {<EOL>        if (b instanceof Type) {<EOL>            res.push({ provide: b, useClass: b });<EOL>        }<EOL>        else if ( b && typeof b == '<STR_LIT>' && b.provide !== undefined) {<EOL>            res.push(b);<EOL>        }<EOL>        else if (b instanceof Array) {<EOL>             _normalizeProviders(b, res);<EOL>        }<EOL>        else {<EOL>","gt":"throw invalidProviderError(b);"}
{"input":"<s> // we have to patch the instance since the proto is non-configurable<EOL>export function apply(api, _global) {<EOL>    const WS = _global.WebSocket;<EOL>    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener<EOL>    // On older Chrome, no need since EventTarget was already patched<EOL>","gt":"if (!_global.EventTarget) {"}
{"input":"<s> // we have to patch the instance since the proto is non-configurable<EOL>export function apply(api, _global) {<EOL>    const WS = _global.WebSocket;<EOL>    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener<EOL>    // On older Chrome, no need since EventTarget was already patched<EOL>     if (!_global.EventTarget) {<EOL>        patchEventTarget(_global, [WS.prototype]);<EOL>    }<EOL>    _global.WebSocket = function (x, y) {<EOL>        const socket = arguments.length >","gt":"<NUM_LIT> ? new WS(x, y) : new WS(x);"}
{"input":"<s> // we have to patch the instance since the proto is non-configurable<EOL>export function apply(api, _global) {<EOL>    const WS = _global.WebSocket;<EOL>    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener<EOL>    // On older Chrome, no need since EventTarget was already patched<EOL>     if (!_global.EventTarget) {<EOL>        patchEventTarget(_global, [WS.prototype]);<EOL>    }<EOL>    _global.WebSocket = function (x, y) {<EOL>        const socket = arguments.length >  <NUM_LIT> ? new WS(x, y) : new WS(x);<EOL>        let proxySocket;<EOL>        let proxySocketProto;<EOL>        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance<EOL>        const onmessageDesc = ObjectGetOwnPropertyDescriptor(socket, '<STR_LIT>');<EOL>        if (onmessageDesc && onmessageDesc.configurable === false) {<EOL>            proxySocket = ObjectCreate(","gt":"socket);"}
{"input":"<s> // we have to patch the instance since the proto is non-configurable<EOL>export function apply(api, _global) {<EOL>    const WS = _global.WebSocket;<EOL>    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener<EOL>    // On older Chrome, no need since EventTarget was already patched<EOL>     if (!_global.EventTarget) {<EOL>        patchEventTarget(_global, [WS.prototype]);<EOL>    }<EOL>    _global.WebSocket = function (x, y) {<EOL>        const socket = arguments.length >  <NUM_LIT> ? new WS(x, y) : new WS(x);<EOL>        let proxySocket;<EOL>        let proxySocketProto;<EOL>        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance<EOL>        const onmessageDesc = ObjectGetOwnPropertyDescriptor(socket, '<STR_LIT>');<EOL>        if (onmessageDesc && onmessageDesc.configurable === false) {<EOL>            proxySocket = ObjectCreate( socket);<EOL>            // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'<EOL>            // but proxySocket not, so we will keep socket as prototype and pass it to<EOL>            // patchOnProperties method<EOL>            proxySocketProto =","gt":"socket;"}
{"input":"<s> // we have to patch the instance since the proto is non-configurable<EOL>export function apply(api, _global) {<EOL>    const WS = _global.WebSocket;<EOL>    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener<EOL>    // On older Chrome, no need since EventTarget was already patched<EOL>     if (!_global.EventTarget) {<EOL>        patchEventTarget(_global, [WS.prototype]);<EOL>    }<EOL>    _global.WebSocket = function (x, y) {<EOL>        const socket = arguments.length >  <NUM_LIT> ? new WS(x, y) : new WS(x);<EOL>        let proxySocket;<EOL>        let proxySocketProto;<EOL>        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance<EOL>        const onmessageDesc = ObjectGetOwnPropertyDescriptor(socket, '<STR_LIT>');<EOL>        if (onmessageDesc && onmessageDesc.configurable === false) {<EOL>            proxySocket = ObjectCreate( socket);<EOL>            // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'<EOL>            // but proxySocket not, so we will keep socket as prototype and pass it to<EOL>            // patchOnProperties method<EOL>            proxySocketProto =  socket;<EOL>            [ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR, '<STR_LIT>', '<STR_LIT>'].forEach(function (propName) {<EOL>                proxySocket[propName] = function () {<EOL>                    const args = ArraySlice.call(arguments);<EOL>                    if (propName === ADD_EVENT_LISTENER_STR || propName === REMOVE_EVENT_LISTENER_STR) {<EOL>                        const eventName = args.length > <NUM_LIT> ? args[<NUM_LIT>] : undefined;<EOL>                        if (","gt":"eventName) {"}
{"input":"<s> export default function cube(x) {<EOL>    return","gt":"Math.pow(x, <NUM_LIT>);"}
{"input":"<s> function validateTasks(tasks) {<EOL>    return Object.keys(tasks)<EOL>        .map((taskName) => {<EOL>","gt":"if (!tasks[taskName] ||"}
{"input":"<s> <EOL>function Tween(dom) {<EOL>    this.dom =","gt":"Dom(dom);"}
{"input":"<s> export function multiTrim(text, allSpace = false) {<EOL>    if (typeof text == '<STR_LIT>') {<EOL>","gt":"const repl = allSpace ? '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> function getInvalidTaskErrorMessage(invalid, file) {<EOL>    let error = `<STR_LIT>`;<EOL>    if (invalid.length === <NUM_LIT>) {<EOL>","gt":"error += '<STR_LIT>';"}
{"input":"<s> export function isDigit(code) {<EOL>","gt":"return $0 <= code && code <= $9;"}
{"input":"<s> function visitTopLevelDeclarations(sourceFile, visitor) {<EOL>    let stop = false;<EOL>    let visit = (node) => {<EOL>        if (stop) {<EOL>            return;<EOL>        }<EOL>        switch (node.kind) {<EOL>            case ts.SyntaxKind.InterfaceDeclaration:<EOL>            case ts.SyntaxKind.EnumDeclaration:<EOL>            case ts.SyntaxKind.","gt":"ClassDeclaration:"}
{"input":"<s> function visitTopLevelDeclarations(sourceFile, visitor) {<EOL>    let stop = false;<EOL>    let visit = (node) => {<EOL>        if (stop) {<EOL>            return;<EOL>        }<EOL>        switch (node.kind) {<EOL>            case ts.SyntaxKind.InterfaceDeclaration:<EOL>            case ts.SyntaxKind.EnumDeclaration:<EOL>            case ts.SyntaxKind. ClassDeclaration:<EOL>            case ts.SyntaxKind.VariableStatement:<EOL>            case ts.SyntaxKind.TypeAliasDeclaration:<EOL>            case ts.SyntaxKind.","gt":"FunctionDeclaration:"}
{"input":"<s> <EOL>export function expectFocusOn(element, expected = true) {<EOL>    expect(browser.driver.switchTo().activeElement().getId()).toBe(getElement(element).","gt":"getId(), `<STR_LIT>`);"}
{"input":"<s> export function isLineBreak(ch) {<EOL>    return ch === LineFeed ||<EOL>","gt":"ch === CarriageReturn ||"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    if (!sourceDir) {<EOL>        throw new SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options.module) {<EOL>            options.module = findModuleFromOptions(host,","gt":"options);"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    if (!sourceDir) {<EOL>        throw new SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options.module) {<EOL>            options.module = findModuleFromOptions(host,  options);<EOL>        }<EOL>        const templateSource = apply(url('<STR_LIT>'), [<EOL>            options.spec ?","gt":"noop() : filter(path => !path.endsWith('<STR_LIT>')),"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    if (!sourceDir) {<EOL>        throw new SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options.module) {<EOL>            options.module = findModuleFromOptions(host,  options);<EOL>        }<EOL>        const templateSource = apply(url('<STR_LIT>'), [<EOL>            options.spec ?  noop() : filter(path => !path.endsWith('<STR_LIT>')),<EOL>            options.routing ? noop() : filter(path => !path.endsWith('<STR_LIT>')),<EOL>            template({<EOL>                ...","gt":"strings,"}
{"input":"<s> export default function (options) {<EOL>    options.path = options.path ? normalize(options.path) : options.path;<EOL>    const sourceDir = options.sourceDir;<EOL>    if (!sourceDir) {<EOL>        throw new SchematicsException(`<STR_LIT>`);<EOL>    }<EOL>    return (host, context) => {<EOL>        if (options.module) {<EOL>            options.module = findModuleFromOptions(host,  options);<EOL>        }<EOL>        const templateSource = apply(url('<STR_LIT>'), [<EOL>            options.spec ?  noop() : filter(path => !path.endsWith('<STR_LIT>')),<EOL>            options.routing ? noop() : filter(path => !path.endsWith('<STR_LIT>')),<EOL>            template({<EOL>                ... strings,<EOL>                '<STR_LIT>': (s) => options.flat ? '<STR_LIT>' : s,<EOL>                ...options,<EOL>            }),<EOL>            move(sourceDir),<EOL>        ]);<EOL>","gt":"return chain(["}
{"input":"<s> // math.ts<EOL>export function square(x) {<EOL>","gt":"return Math.pow(x, <NUM_LIT>);"}
{"input":"<s> function delay(time, value, shouldThrow = false) {<EOL>    return new Promise((resolve, reject) => {<EOL>        setTimeout(() => {<EOL>","gt":"if (shouldThrow)"}
{"input":"<s> // }}}<EOL>// {{{ TABS<EOL><EOL><EOL>//#background_helper<EOL>async function tabIndexSetActive(index) {<EOL>    tabSetActive(await idFromIndex(","gt":"index));"}
{"input":"<s> <EOL>//#background<EOL>export async function tabmove(index = \"<STR_LIT>\") {<EOL>    const aTab = await activeTab();<EOL>    let newindex;<EOL>    if (index.startsWith(\"<STR_LIT>\") || index.startsWith(","gt":"\"<STR_LIT>\")) {"}
{"input":"<s> //#background<EOL>export async function winclose() {<EOL>    browser.windows.remove((await browser.","gt":"windows.getCurrent()).id);"}
{"input":"<s> <EOL>//#background<EOL>export function set(key, ...values) {<EOL>    if (!key || !values[<NUM_LIT>]) {<EOL>        throw \"<STR_LIT>\";<EOL>    }<EOL>    const target = key.split('<STR_LIT>');<EOL>    // Special case conversions<EOL>    // TODO: Should we do any special case shit here?<EOL>    switch (target[<NUM_LIT>]) {<EOL>        case \"<STR_LIT>\":<EOL>            const map = {<EOL>                \"<STR_LIT>\": Logging.","gt":"LEVEL.NEVER,"}
{"input":"<s> <EOL>//#background<EOL>export function set(key, ...values) {<EOL>    if (!key || !values[<NUM_LIT>]) {<EOL>        throw \"<STR_LIT>\";<EOL>    }<EOL>    const target = key.split('<STR_LIT>');<EOL>    // Special case conversions<EOL>    // TODO: Should we do any special case shit here?<EOL>    switch (target[<NUM_LIT>]) {<EOL>        case \"<STR_LIT>\":<EOL>            const map = {<EOL>                \"<STR_LIT>\": Logging. LEVEL.NEVER,<EOL>                \"<STR_LIT>\": Logging.LEVEL.ERROR,<EOL>                \"<STR_LIT>\": Logging.LEVEL.WARNING,<EOL>                \"<STR_LIT>\": Logging.LEVEL.INFO,<EOL>                \"<STR_LIT>\": Logging.LEVEL.","gt":"DEBUG,"}
{"input":"<s> <EOL>//#background<EOL>export function set(key, ...values) {<EOL>    if (!key || !values[<NUM_LIT>]) {<EOL>        throw \"<STR_LIT>\";<EOL>    }<EOL>    const target = key.split('<STR_LIT>');<EOL>    // Special case conversions<EOL>    // TODO: Should we do any special case shit here?<EOL>    switch (target[<NUM_LIT>]) {<EOL>        case \"<STR_LIT>\":<EOL>            const map = {<EOL>                \"<STR_LIT>\": Logging. LEVEL.NEVER,<EOL>                \"<STR_LIT>\": Logging.LEVEL.ERROR,<EOL>                \"<STR_LIT>\": Logging.LEVEL.WARNING,<EOL>                \"<STR_LIT>\": Logging.LEVEL.INFO,<EOL>                \"<STR_LIT>\": Logging.LEVEL. DEBUG,<EOL>            };<EOL>            let level = map[values[<NUM_LIT>].toLowerCase()];<EOL>            if (level === undefined)<EOL>","gt":"throw \"<STR_LIT>\";"}
{"input":"<s> <EOL>//#background<EOL>export function set(key, ...values) {<EOL>    if (!key || !values[<NUM_LIT>]) {<EOL>        throw \"<STR_LIT>\";<EOL>    }<EOL>    const target = key.split('<STR_LIT>');<EOL>    // Special case conversions<EOL>    // TODO: Should we do any special case shit here?<EOL>    switch (target[<NUM_LIT>]) {<EOL>        case \"<STR_LIT>\":<EOL>            const map = {<EOL>                \"<STR_LIT>\": Logging. LEVEL.NEVER,<EOL>                \"<STR_LIT>\": Logging.LEVEL.ERROR,<EOL>                \"<STR_LIT>\": Logging.LEVEL.WARNING,<EOL>                \"<STR_LIT>\": Logging.LEVEL.INFO,<EOL>                \"<STR_LIT>\": Logging.LEVEL. DEBUG,<EOL>            };<EOL>            let level = map[values[<NUM_LIT>].toLowerCase()];<EOL>            if (level === undefined)<EOL>                 throw \"<STR_LIT>\";<EOL>            else<EOL>                config.set(...target, level);<EOL>            return;<EOL>    }<EOL>    const currentValue = config.get(...target);<EOL>    if (Array.isArray(currentValue)) {<EOL>","gt":"config.set(...target, values);"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===","gt":"\"<STR_LIT>\")"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintPageYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.","gt":"hintPageTextYank();"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintPageYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintPageTextYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintImage(false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.","gt":"hintImage(true);"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintPageYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintPageTextYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintImage(false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintImage(true);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintKill();<EOL>    else if (option ===","gt":"\"<STR_LIT>\")"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintPageYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintPageTextYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintImage(false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintImage(true);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintKill();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", false);<EOL>    else","gt":"if (option === \"<STR_LIT>\")"}
{"input":"<s> <EOL>//#background<EOL>export function hint(option, selectors = \"<STR_LIT>\") {<EOL>    if (option === '<STR_LIT>')<EOL>        hinting.hintPageOpenInBackground();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintPageYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintPageTextYank();<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintImage(false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting. hintImage(true);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintKill();<EOL>    else if (option ===  \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", false);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", false);<EOL>    else  if (option === \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", true);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintSave(\"<STR_LIT>\", true);<EOL>    else if (option === \"<STR_LIT>\")<EOL>        hinting.hintFocus();<EOL>","gt":"else if (option === \"<STR_LIT>\")"}
{"input":"<s> export function isType(v) {<EOL>    return","gt":"typeof v === '<STR_LIT>';"}
{"input":"<s> function createTestComponent(template) {<EOL>    return TestBed.overrideComponent(TestComponent, { set: {","gt":"template: template } })"}
{"input":"<s> <EOL>export function parseCookieValue(cookieStr, name) {<EOL>    name = encodeURIComponent(name);<EOL>    for (const cookie of cookieStr.split('<STR_LIT>')) {<EOL>        const eqIndex =","gt":"cookie.indexOf('<STR_LIT>');"}
{"input":"<s> export function setClipboard(content) {<EOL>    applyWithTmpTextArea(scratchpad => {<EOL>        scratchpad.value = content;<EOL>        scratchpad.select();<EOL>        if (","gt":"document.execCommand(\"<STR_LIT>\")) {"}
{"input":"<s> <EOL>export function init(numChars, endCommand) {<EOL>    state.mode = '<STR_LIT>';<EOL>","gt":"modeState = new GobbleState();"}
{"input":"<s> function validateTextDocument(textDocument) {<EOL>    if (textDocument.getText().length === <NUM_LIT>) {<EOL>        // ignore empty documents<EOL>        connection.sendDiagnostics({ uri: textDocument.uri, diagnostics: [] });<EOL>        return;<EOL>    }<EOL>    try {<EOL>        let jsonDocument = getJSONDocument(textDocument);<EOL>        let documentSettings = textDocument.languageId === '<STR_LIT>' ? { comments: '<STR_LIT>', trailingCommas: '<STR_LIT>' } : { comments: '<STR_LIT>', trailingCommas: '<STR_LIT>' };<EOL>        languageService.doValidation(textDocument, jsonDocument, documentSettings).","gt":"then(diagnostics => {"}
{"input":"<s> <EOL>export function outOfBoundsError(index) {<EOL>    return Error(","gt":"index} is out-of-bounds.`<STR_LIT>;"}
{"input":"<s> export function registerTab(tab) {<EOL>    dashboardRegistry.","gt":"registerTab(tab);"}
{"input":"<s> function isSelectorOperatorCharacter(code) {<EOL>    switch (code) {<EOL>        case chars.$SLASH:<EOL>        case chars.","gt":"$TILDA:"}
{"input":"<s> function caseImpl(handlers) {<EOL>    switch (this.state) {<EOL>        case PENDING:<EOL>","gt":"return handlers.pending && handlers.pending();"}
{"input":"<s> // sync call to router.set must be avoided in any `oninit` mithril component<EOL>// otherwise it makes mithril create another root component on top of the<EOL>// existing one<EOL>// making router.set async makes it safe everywhere<EOL>function set(path, replace = false) {<EOL>","gt":"setTimeout(() => doSet(path, replace), <NUM_LIT>);"}
{"input":"<s> function handleFollowingOnline(data, payload) {<EOL>    // We clone the friends online before we update it for comparison later<EOL>    const oldFriendList = cloneDeep(friendsApi.list());<EOL>    const","gt":"friendsPlaying = payload.playing;"}
{"input":"<s> function sendLocalNotif(title, text, route) {<EOL>    // for important pushs, we still want to display them as a notification<EOL>    // push received on ios is always shown; on android it's only when app in<EOL>    // background<EOL>    if (cordova.platformId === '<STR_LIT>' && !router.get().startsWith(route)) {<EOL>        window.cordova.plugins.notification.","gt":"local.schedule({"}
{"input":"<s> function sendLocalNotif(title, text, route) {<EOL>    // for important pushs, we still want to display them as a notification<EOL>    // push received on ios is always shown; on android it's only when app in<EOL>    // background<EOL>    if (cordova.platformId === '<STR_LIT>' && !router.get().startsWith(route)) {<EOL>        window.cordova.plugins.notification. local.schedule({<EOL>            title,<EOL>            text,<EOL>            at: Date.now(),<EOL>            icon:","gt":"'<STR_LIT>',"}
{"input":"<s> function handleOther(eventData) {<EOL>    const pieces = eventData.path.split('<STR_LIT>');<EOL>    if (eventData.path.search('<STR_LIT>') !== -<NUM_LIT>) {<EOL>        getChallenge(pieces[<NUM_LIT>])<EOL>            .then(() => router.set('<STR_LIT>' + pieces[<NUM_LIT>]))<EOL>            .catch(() => router.set(","gt":"'<STR_LIT>' + pieces[<NUM_LIT>]));"}
{"input":"<s> export function validateComponent(validate) {<EOL>    return {<EOL>        kind:","gt":"'<STR_LIT>',"}
{"input":"<s> export function getType(error) {<EOL>","gt":"return error[ERROR_TYPE];"}
{"input":"<s> function uniqId() {<EOL>","gt":"return String(performance.now());"}
{"input":"<s> export function init(payload) {<EOL>","gt":"return askWorker(worker, { topic: '<STR_LIT>', payload });"}
{"input":"<s> export function drop(payload) {<EOL>","gt":"return askWorker(worker, { topic: '<STR_LIT>', payload, reqid: uniqId() });"}
{"input":"<s> <EOL>export function fromStream(observable, initialValue = undefined) {<EOL>    return new","gt":"StreamListener(observable, initialValue);"}
{"input":"<s> export function addReadOnlyProp(object, propName, value) {<EOL>    Object.defineProperty(object, propName, {<EOL>        enumerable:","gt":"true,"}
{"input":"<s> <EOL>export function getActive(items, className) {<EOL>    for (const item of items) {<EOL>        if (","gt":"dom.hasClass(item, className)) {"}
{"input":"<s> <EOL>export function encodeHTML(value) {<EOL>    return value.replace(/[&<>'\"]/g, c => ({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>","gt":"\"<STR_LIT>\": \"<STR_LIT>\","}
{"input":"<s> export function emptyTest() {<EOL>    assert.","gt":"ok(func.empty);"}
{"input":"<s> <EOL>function convert(value, from, to) {<EOL>    const chars = [];<EOL>    for (let i = <NUM_LIT>; i < value.length; i++) {<EOL>        let c = value.charAt(i);<EOL>        const p = from.","gt":"indexOf(c);"}
{"input":"<s> <EOL>function convert(value, from, to) {<EOL>    const chars = [];<EOL>    for (let i = <NUM_LIT>; i < value.length; i++) {<EOL>        let c = value.charAt(i);<EOL>        const p = from. indexOf(c);<EOL>        if (p >= <NUM_LIT>) {<EOL>            c = to.charAt(p);<EOL>        }<EOL>        chars.push(","gt":"c);"}
{"input":"<s> <EOL>export function getStatus(elem, prefix) {<EOL>    for (const state of [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]) {<EOL>        if (dom.hasClass(elem,","gt":"state}`<STR_LIT>{"}
{"input":"<s> <EOL>function preload(url) {<EOL>","gt":"new Image().src = url;"}
{"input":"<s> <EOL>export function getPinYinOfChar(value) {<EOL>    const result = [];<EOL>    for (const pinyin in dict) {<EOL>        if (dict[","gt":"pinyin].indexOf(value) >= <NUM_LIT>) {"}
{"input":"<s> export function parseQueryTest() {<EOL>    assert.","gt":"deepEqual(query.parseQuery(\"<STR_LIT>\"), { foo: \"<STR_LIT>\", goo: [\"<STR_LIT>\", \"<STR_LIT>\"] });"}
{"input":"<s> <EOL>export function format(formatString, ...args) {<EOL>    return formatString ? formatString.replace(/\\{\\{|\\{(.+?)\\}|\\}\\}/g, (source, argName) => {<EOL>        if (argName == undefined) {<EOL>","gt":"return source.charAt(<NUM_LIT>);"}
{"input":"<s> export function md5Test() {<EOL>    assert.strictEqual(md5(","gt":"\"<STR_LIT>\"), \"<STR_LIT>\");"}
{"input":"<s> export function wrappedError(message, originalError) {<EOL>    const msg = `<STR_LIT>`;<EOL>    const error = Error(","gt":"msg);"}
{"input":"<s> function isIdentifierPart(target) {<EOL>    return (chars.isAsciiLetter(target) ||<EOL>        target == chars.","gt":"$BACKSLASH ||"}
{"input":"<s> // For AoT compilation to work:<EOL>export function cons() {<EOL>","gt":"return console;"}
{"input":"<s> function getEntryFromFiles(parts, files) {<EOL>    let current = files;<EOL>    while (parts.length) {<EOL>        const part = parts.shift();<EOL>        if (typeof","gt":"current === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function quickSort(iteratable, comparer = (x, y) => x < y, start = <NUM_LIT>, end = iteratable.length) {<EOL>    if (start < end) {<EOL>        const t = iteratable[start];<EOL>        let low = start;<EOL>        let high = end;<EOL>","gt":"do {"}
{"input":"<s> <EOL>export function quickSort(iteratable, comparer = (x, y) => x < y, start = <NUM_LIT>, end = iteratable.length) {<EOL>    if (start < end) {<EOL>        const t = iteratable[start];<EOL>        let low = start;<EOL>        let high = end;<EOL>         do {<EOL>            while (high > low && !comparer(iteratable[high], t)) {<EOL>                high--;<EOL>            }<EOL>            if (low < high) {<EOL>                iteratable[low++] = iteratable[high];<EOL>            }<EOL>            while (low < high && comparer(iteratable[low], t)) {<EOL>","gt":"low++;"}
{"input":"<s> <EOL>export function quickSort(iteratable, comparer = (x, y) => x < y, start = <NUM_LIT>, end = iteratable.length) {<EOL>    if (start < end) {<EOL>        const t = iteratable[start];<EOL>        let low = start;<EOL>        let high = end;<EOL>         do {<EOL>            while (high > low && !comparer(iteratable[high], t)) {<EOL>                high--;<EOL>            }<EOL>            if (low < high) {<EOL>                iteratable[low++] = iteratable[high];<EOL>            }<EOL>            while (low < high && comparer(iteratable[low], t)) {<EOL>                 low++;<EOL>            }<EOL>            if (low < high) {<EOL>                iteratable[high--] = iteratable[low];<EOL>            }<EOL>        }","gt":"while (low < high);"}
{"input":"<s> <EOL>export function isString(obj) {<EOL>    return","gt":"typeof obj === \"<STR_LIT>\";"}
{"input":"<s> function isValidStyleFunctionCharacter(code) {<EOL>    switch (code) {<EOL>        case chars.$PERIOD:<EOL>        case chars.$MINUS:<EOL>","gt":"case chars.$PLUS:"}
{"input":"<s> function isValidStyleFunctionCharacter(code) {<EOL>    switch (code) {<EOL>        case chars.$PERIOD:<EOL>        case chars.$MINUS:<EOL>         case chars.$PLUS:<EOL>        case chars.$STAR:<EOL>        case chars.$SLASH:<EOL>        case chars.$LPAREN:<EOL>        case chars.$RPAREN:<EOL>        case chars.$COMMA:<EOL>","gt":"return true;"}
{"input":"<s> function joinGame(g) {<EOL>    lastJoined = g;<EOL>    positionsCache.set(g.fullId, { fen: g.fen, orientation: g.","gt":"color });"}
{"input":"<s> export function convertRuleOptions(ruleConfiguration) {<EOL>    const output = [];<EOL>    ruleConfiguration.forEach(({ ruleArguments, ruleSeverity }, ruleName) => {<EOL>        const options = {<EOL>","gt":"disabledIntervals: [],"}
{"input":"<s> export function convertRuleOptions(ruleConfiguration) {<EOL>    const output = [];<EOL>    ruleConfiguration.forEach(({ ruleArguments, ruleSeverity }, ruleName) => {<EOL>        const options = {<EOL>             disabledIntervals: [],<EOL>            ruleArguments: ruleArguments !== null ? ruleArguments : [],<EOL>            ruleName,<EOL>            ruleSeverity: ruleSeverity !== null ? ruleSeverity : '<STR_LIT>',<EOL>        };<EOL>","gt":"output.push(options);"}
{"input":"<s> function getPageElts() {<EOL>    return {<EOL>        heroes:","gt":"element.all(by.css('<STR_LIT>')),"}
{"input":"<s> function testControlled() {<EOL>    var o;<EOL>    var c =","gt":"o.controlled();"}
{"input":"<s> function getEngine(version) {<EOL>    const values = version.properties ? version.properties.filter(p =>","gt":"p.key === PropertyType.Engine) : [];"}
{"input":"<s> // add here all your watchers<EOL>// https://github.com/yelouafi/redux-saga/blob/master/examples/real-world/sagas/index.js<EOL>function* watchLoadMembersRequest() {<EOL>    while (","gt":"true) {"}
{"input":"<s> export function currentTournaments() {<EOL>    return fetchJSON('<STR_LIT>', {},","gt":"true);"}
{"input":"<s> export function loadPage(id, p) {<EOL>    return fetchJSON('<STR_LIT>' + id +","gt":"'<STR_LIT>' + p);"}
{"input":"<s> export function unselect(state) {<EOL>    state.","gt":"selected = null;"}
{"input":"<s> export function getRelativePathBetweenNodes(base, target) {<EOL>    // PRE condition target is (a child of) base!<EOL>    if (base.root !== target.root)<EOL>        fail(`<STR_LIT>`);<EOL>    const baseParts = splitJsonPath(base.path);<EOL>    const targetParts = splitJsonPath(target.","gt":"path);"}
{"input":"<s> export function getRelativePathBetweenNodes(base, target) {<EOL>    // PRE condition target is (a child of) base!<EOL>    if (base.root !== target.root)<EOL>        fail(`<STR_LIT>`);<EOL>    const baseParts = splitJsonPath(base.path);<EOL>    const targetParts = splitJsonPath(target. path);<EOL>    let common = <NUM_LIT>;<EOL>    for (; common < baseParts.length; common++) {<EOL>        if (baseParts[common] !== targetParts[common])<EOL>","gt":"break;"}
{"input":"<s> export function getRelativePathBetweenNodes(base, target) {<EOL>    // PRE condition target is (a child of) base!<EOL>    if (base.root !== target.root)<EOL>        fail(`<STR_LIT>`);<EOL>    const baseParts = splitJsonPath(base.path);<EOL>    const targetParts = splitJsonPath(target. path);<EOL>    let common = <NUM_LIT>;<EOL>    for (; common < baseParts.length; common++) {<EOL>        if (baseParts[common] !== targetParts[common])<EOL>             break;<EOL>    }<EOL>    // TODO: assert that no targetParts paths are \"..\", \".\" or \"\"!<EOL>","gt":"return (baseParts"}
{"input":"<s> function init() {<EOL>    maxDepth = getIntParameter('<STR_LIT>');<EOL>    treeCreateCount =","gt":"<NUM_LIT>;"}
{"input":"<s> export function decoratorArgument(dec) {<EOL>    return","gt":"Maybe.lift(dec)"}
{"input":"<s> function chainedMessage(chain, indent = '<STR_LIT>') {<EOL>    return indent +","gt":"chain.message + (chain.next ? chainedMessage(chain.next, indent + '<STR_LIT>') : '<STR_LIT>');"}
{"input":"<s> function renderBody(ctrl) {<EOL>    return h('<STR_LIT>', [<EOL>        h('<STR_LIT>', '<STR_LIT>'),<EOL>        h('<STR_LIT>', {<EOL>            onsubmit: (e) => {<EOL>                e.preventDefault();<EOL>                const target = e.","gt":"target;"}
{"input":"<s> function renderBody(ctrl) {<EOL>    return h('<STR_LIT>', [<EOL>        h('<STR_LIT>', '<STR_LIT>'),<EOL>        h('<STR_LIT>', {<EOL>            onsubmit: (e) => {<EOL>                e.preventDefault();<EOL>                const target = e. target;<EOL>                const pgn = target[<NUM_LIT>].value;<EOL>                if (pgn)<EOL>                    ctrl.importGame(pgn);<EOL>            }<EOL>        }, [<EOL>            h('<STR_LIT>', i18n('<STR_LIT>') + '<STR_LIT>'),<EOL>            h('<STR_LIT>'),<EOL>            formWidgets.renderCheckbox(i18n('<STR_LIT>'),","gt":"'<STR_LIT>', settings.importer.analyse),"}
{"input":"<s> export function TemplateSrvStub() {<EOL>    this.variables = [];<EOL>    this.templateSettings = { interpolate: /\\[\\[([\\s\\S]+?)\\]\\]/g };<EOL>    this.data = {};<EOL>    this.replace = function (text) {<EOL>        return _.template(text, this.templateSettings)(this.","gt":"data);"}
{"input":"<s> export function TemplateSrvStub() {<EOL>    this.variables = [];<EOL>    this.templateSettings = { interpolate: /\\[\\[([\\s\\S]+?)\\]\\]/g };<EOL>    this.data = {};<EOL>    this.replace = function (text) {<EOL>        return _.template(text, this.templateSettings)(this. data);<EOL>    };<EOL>","gt":"this.init = function () { };"}
{"input":"<s> export function TemplateSrvStub() {<EOL>    this.variables = [];<EOL>    this.templateSettings = { interpolate: /\\[\\[([\\s\\S]+?)\\]\\]/g };<EOL>    this.data = {};<EOL>    this.replace = function (text) {<EOL>        return _.template(text, this.templateSettings)(this. data);<EOL>    };<EOL>     this.init = function () { };<EOL>    this.getAdhocFilters = function () {<EOL>        return [];<EOL>    };<EOL>    this.fillVariableValuesForUrl = function () { };<EOL>    this.updateTemplateData =","gt":"function () { };"}
{"input":"<s> export function TemplateSrvStub() {<EOL>    this.variables = [];<EOL>    this.templateSettings = { interpolate: /\\[\\[([\\s\\S]+?)\\]\\]/g };<EOL>    this.data = {};<EOL>    this.replace = function (text) {<EOL>        return _.template(text, this.templateSettings)(this. data);<EOL>    };<EOL>     this.init = function () { };<EOL>    this.getAdhocFilters = function () {<EOL>        return [];<EOL>    };<EOL>    this.fillVariableValuesForUrl = function () { };<EOL>    this.updateTemplateData =  function () { };<EOL>    this.variableExists = function () {<EOL>        return false;<EOL>    };<EOL>    this.variableInitialized = function () { };<EOL>","gt":"this.highlightVariablesAsHtml = function (str) {"}
{"input":"<s> export function renderEval(e) {<EOL>    e = Math.max(Math.min(Math.","gt":"round(e / <NUM_LIT>) / <NUM_LIT>, <NUM_LIT>), -<NUM_LIT>);"}
{"input":"<s> function objectTypeToString() {<EOL>    return getStateTreeNode(","gt":"this).toString();"}
{"input":"<s> function refresh() {<EOL>    fetchJSON('<STR_LIT>')<EOL>        .then((data) => {<EOL>        session = data;<EOL>        storeSession(data);<EOL>        // if server tells me, reload challenges<EOL>        if (session.nbChallenges !== challengesApi.","gt":"incoming().length) {"}
{"input":"<s> function refresh() {<EOL>    fetchJSON('<STR_LIT>')<EOL>        .then((data) => {<EOL>        session = data;<EOL>        storeSession(data);<EOL>        // if server tells me, reload challenges<EOL>        if (session.nbChallenges !== challengesApi. incoming().length) {<EOL>            challengesApi.refresh().then(redraw);<EOL>        }<EOL>        redraw();<EOL>    })<EOL>        .","gt":"catch((err) => {"}
{"input":"<s> function refresh() {<EOL>    fetchJSON('<STR_LIT>')<EOL>        .then((data) => {<EOL>        session = data;<EOL>        storeSession(data);<EOL>        // if server tells me, reload challenges<EOL>        if (session.nbChallenges !== challengesApi. incoming().length) {<EOL>            challengesApi.refresh().then(redraw);<EOL>        }<EOL>        redraw();<EOL>    })<EOL>        . catch((err) => {<EOL>        if (session !== undefined && err.status === <NUM_LIT>) {<EOL>            session = undefined;<EOL>            clearStoredSession();<EOL>","gt":"redraw();"}
{"input":"<s> <EOL>export function now(interval = <NUM_LIT>) {<EOL>    if (!extras.isComputingDerivation()) {<EOL>        // See #40<EOL>        return Date.now();<EOL>    }<EOL>    if (!tickers[interval]) {<EOL>        if (typeof interval === \"<STR_LIT>\")<EOL>            tickers[interval] = createIntervalTicker(interval);<EOL>        else<EOL>","gt":"tickers[interval] = createAnimationFrameTicker();"}
{"input":"<s> export function nbMoves(data, color) {<EOL>","gt":"return Math.floor((data.game.turns + (color === '<STR_LIT>' ? <NUM_LIT> : <NUM_LIT>)) / <NUM_LIT>);"}
{"input":"<s> <EOL>export function resolvePath(target, path) {<EOL>    // check all arguments<EOL>    if (process.env.NODE_ENV !== \"<STR_LIT>\") {<EOL>        if (!isStateTreeNode(","gt":"target))"}
{"input":"<s> export function isObjectType(type) {<EOL>    return isType(type) && (type.flags & TypeFlags.Object) >","gt":"<NUM_LIT>;"}
{"input":"<s> function codegen(ngOptions, cliOptions, program, host) {<EOL>    return CodeGenerator.create(ngOptions, cliOptions, program, host).codegen({","gt":"transitiveModules: true });"}
{"input":"<s> export function autoScroll(movelist) {<EOL>    if (!movelist)<EOL>        return;<EOL>    requestAnimationFrame(() => {<EOL>        const plyEl = (movelist.querySelector('<STR_LIT>') ||","gt":"movelist.querySelector('<STR_LIT>'));"}
{"input":"<s> export function autoScroll(movelist) {<EOL>    if (!movelist)<EOL>        return;<EOL>    requestAnimationFrame(() => {<EOL>        const plyEl = (movelist.querySelector('<STR_LIT>') ||  movelist.querySelector('<STR_LIT>'));<EOL>        if (plyEl) {<EOL>            movelist.scrollTop = plyEl.offsetTop - movelist.offsetHeight / <NUM_LIT> + plyEl.offsetHeight / <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>","gt":"movelist.scrollTop = <NUM_LIT>;"}
{"input":"<s> <EOL>export function walk(target, processor) {<EOL>    // check all arguments<EOL>    if (process.env.NODE_ENV !== \"<STR_LIT>\") {<EOL>        if (!isStateTreeNode(target))<EOL>            fail(\"<STR_LIT>\" + target + \"<STR_LIT>\");<EOL>","gt":"if (typeof processor !== \"<STR_LIT>\")"}
{"input":"<s> <EOL>export function walk(target, processor) {<EOL>    // check all arguments<EOL>    if (process.env.NODE_ENV !== \"<STR_LIT>\") {<EOL>        if (!isStateTreeNode(target))<EOL>            fail(\"<STR_LIT>\" + target + \"<STR_LIT>\");<EOL>         if (typeof processor !== \"<STR_LIT>\")<EOL>            fail(\"<STR_LIT>\" + processor + \"<STR_LIT>\");<EOL>    }<EOL>    const node = getStateTreeNode(target);<EOL>    // tslint:disable-next-line:no_unused-variable<EOL>    node.getChildren().forEach(child => {<EOL>        if (","gt":"isStateTreeNode(child.storedValue))"}
{"input":"<s> export function removeTest() {<EOL>    const foo = [<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>];<EOL>    assert.strictEqual(array.remove(foo, <NUM_LIT>), <NUM_LIT>);<EOL>    assert.deepEqual(foo, [<NUM_LIT>,","gt":"<NUM_LIT>, <NUM_LIT>]);"}
{"input":"<s> function throwUncaught() {<EOL>    var","gt":"e = new Error('<STR_LIT>');"}
{"input":"<s> function createStore() {<EOL>    return Store.create({<EOL>        boxes: {<EOL>            cc: { id: \"<STR_LIT>\", name: \"<STR_LIT>\", x: <NUM_LIT>, y:","gt":"<NUM_LIT> },"}
{"input":"<s> function filterRelevantStuff(stuff) {<EOL>    return stuff.map(x => {<EOL>        delete","gt":"x.context;"}
{"input":"<s> function stubPlugin() {<EOL>    return {<EOL>        afterComplete: sinon.stub(),<EOL>        afterError: sinon.stub(),<EOL>        afterNext: sinon.stub(),<EOL>        afterSubscribe:","gt":"sinon.stub(),"}
{"input":"<s> function stubPlugin() {<EOL>    return {<EOL>        afterComplete: sinon.stub(),<EOL>        afterError: sinon.stub(),<EOL>        afterNext: sinon.stub(),<EOL>        afterSubscribe:  sinon.stub(),<EOL>        afterUnsubscribe: sinon.stub(),<EOL>        beforeComplete: sinon.stub(),<EOL>        beforeError: sinon.stub(),<EOL>        beforeNext:","gt":"sinon.stub(),"}
{"input":"<s> function stubPlugin() {<EOL>    return {<EOL>        afterComplete: sinon.stub(),<EOL>        afterError: sinon.stub(),<EOL>        afterNext: sinon.stub(),<EOL>        afterSubscribe:  sinon.stub(),<EOL>        afterUnsubscribe: sinon.stub(),<EOL>        beforeComplete: sinon.stub(),<EOL>        beforeError: sinon.stub(),<EOL>        beforeNext:  sinon.stub(),<EOL>        beforeSubscribe: sinon.stub(),<EOL>        beforeUnsubscribe: sinon.stub(),<EOL>        flush: sinon.","gt":"stub(),"}
{"input":"<s> export function isClientEval(ev) {<EOL>","gt":"return ev.depth !== undefined;"}
{"input":"<s> export default function () {<EOL>    // Create the pipe in the same directory.<EOL>    const pipeDir = join('<STR_LIT>', '<STR_LIT>');<EOL>","gt":"return ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>')"}
{"input":"<s> export function generateUuid() {<EOL>    return","gt":"v4().asHex();"}
{"input":"<s> function SimpleClock(time, onFlag) {<EOL>    return IncrementClock(time, <NUM_LIT>,","gt":"onFlag);"}
{"input":"<s> export function getAvailableLanguages() {<EOL>","gt":"return loadLocalJsonFile('<STR_LIT>');"}
{"input":"<s> function shouldSpawnCliProcess(argv) {<EOL>    return !!argv['<STR_LIT>']<EOL>        || !!argv[","gt":"'<STR_LIT>']"}
{"input":"<s> <EOL>export function unsavedChangesSrv($rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {<EOL>    this.Tracker = Tracker;<EOL>    this.","gt":"init = function (dashboard, scope) {"}
{"input":"<s> export function create(options = {}) {<EOL>    return new SpyCore(","gt":"options);"}
{"input":"<s> function loadFile(code) {<EOL>    return loadLocalJsonFile('<STR_LIT>' + code + '<STR_LIT>')<EOL>        .then(data => {<EOL>        lang = code;<EOL>        messages =","gt":"data;"}
{"input":"<s> function loadFile(code) {<EOL>    return loadLocalJsonFile('<STR_LIT>' + code + '<STR_LIT>')<EOL>        .then(data => {<EOL>        lang = code;<EOL>        messages =  data;<EOL>        return code;<EOL>    })<EOL>        .catch(error => {<EOL>        if (code === defaultCode)<EOL>","gt":"throw new Error(error);"}
{"input":"<s> export function serializeQueryParameters(obj) {<EOL>    let str = '<STR_LIT>';<EOL>    const keys = Object.keys(obj);<EOL>    keys.","gt":"forEach(key => {"}
{"input":"<s> <EOL>function removeCssRule(selector, styles, styleSheetName) {<EOL>","gt":"throw \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function bounce(x) {<EOL>    for (let i = <NUM_LIT>, j = <NUM_LIT>; <NUM_LIT>; i += j, j /= <NUM_LIT>) {<EOL>        if (x >= (","gt":"<NUM_LIT> - <NUM_LIT> * i) / <NUM_LIT>) {"}
{"input":"<s> <EOL>export function extname(path) {<EOL>    return splitPath(path)[","gt":"<NUM_LIT>];"}
{"input":"<s> function resolveCommandHistory(configurationService) {<EOL>    const config = configurationService.getValue();<EOL>    let commandHistory = config.","gt":"workbench && config.workbench.commandPalette && config.workbench.commandPalette.history;"}
{"input":"<s> <EOL>export function getQuery(name, url = location.href) {<EOL>    const match = /\\?([^#]*)/.exec(url);<EOL>    if (match) {<EOL>        const match2 = new RegExp(\"<STR_LIT>\" + encodeURIComponent(name).replace(/([\\-.*+?^${}()|[\\]\\/\\\\])/g, \"<STR_LIT>\") + \"<STR_LIT>\", \"<STR_LIT>\").","gt":"exec(match[<NUM_LIT>]);"}
{"input":"<s> export function decodeHTMLTest() {<EOL>","gt":"assert.strictEqual(html.decodeHTML(\"<STR_LIT>\"), \"<STR_LIT>\");"}
{"input":"<s> <EOL>export default function md5(value) {<EOL>","gt":"return binaryToString(raw(value));"}
{"input":"<s> export function lastPly(d) {<EOL>    return d.steps[d.","gt":"steps.length - <NUM_LIT>].ply;"}
{"input":"<s> export function inCircleTest() {<EOL>    assert.deepEqual(drawing.inCircle({ x: <NUM_LIT>, y: <NUM_LIT>, r: <NUM_LIT> }, { x: <NUM_LIT>, y: <NUM_LIT> }), true);<EOL>    assert.deepEqual(drawing.inCircle({","gt":"x: <NUM_LIT>, y: <NUM_LIT>, r: <NUM_LIT> }, { x: <NUM_LIT>, y: <NUM_LIT> }), true);"}
{"input":"<s> export function compareDayTest() {<EOL>    assert.strictEqual(","gt":"date.compareDay(new Date(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), new Date(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)), <NUM_LIT>);"}
{"input":"<s> <EOL>export function isChineseId(value) {<EOL>    return /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(","gt":"value);"}
{"input":"<s> function renderBody() {<EOL>    return [<EOL>        h('<STR_LIT>', [<EOL>            h('<STR_LIT>', {<EOL>","gt":"oncreate: helper.ontapY(() => router.set('<STR_LIT>'))"}
{"input":"<s> function renderBody() {<EOL>    return [<EOL>        h('<STR_LIT>', [<EOL>            h('<STR_LIT>', {<EOL>                 oncreate: helper.ontapY(() => router.set('<STR_LIT>'))<EOL>            }, i18n('<STR_LIT>')),<EOL>            h('<STR_LIT>', {<EOL>                oncreate: helper.ontapY(() => router.set('<STR_LIT>'))<EOL>            }, i18n('<STR_LIT>')),<EOL>            h('<STR_LIT>', {<EOL>                oncreate: helper.ontapY(() => router.","gt":"set('<STR_LIT>'))"}
{"input":"<s> //== editorFormatText<EOL>export function editorFormatText(document, srcText, srcPath, lineStart, lineEnd) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let tes = [];<EOL>        editorOpen(srcPath, srcText, false, false, true)<EOL>            .then((v) => {<EOL>            // discard v<EOL>            let p = requestEditorFormatText(","gt":"srcPath, lineStart, <NUM_LIT>, document);"}
{"input":"<s> //== editorFormatText<EOL>export function editorFormatText(document, srcText, srcPath, lineStart, lineEnd) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let tes = [];<EOL>        editorOpen(srcPath, srcText, false, false, true)<EOL>            .then((v) => {<EOL>            // discard v<EOL>            let p = requestEditorFormatText( srcPath, lineStart, <NUM_LIT>, document);<EOL>            //TODO async-await<EOL>            function nextp(fts) {<EOL>                tes.","gt":"push(fts.textEdit);"}
{"input":"<s> //== editorFormatText<EOL>export function editorFormatText(document, srcText, srcPath, lineStart, lineEnd) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let tes = [];<EOL>        editorOpen(srcPath, srcText, false, false, true)<EOL>            .then((v) => {<EOL>            // discard v<EOL>            let p = requestEditorFormatText( srcPath, lineStart, <NUM_LIT>, document);<EOL>            //TODO async-await<EOL>            function nextp(fts) {<EOL>                tes. push(fts.textEdit);<EOL>                if (fts.line != lineEnd) {<EOL>                    let sPos = { line: fts.line, character: <NUM_LIT> };<EOL>                    let ePos = document.positionAt(document.offsetAt({ line: fts.line +","gt":"<NUM_LIT>, character: <NUM_LIT> }) - <NUM_LIT>);"}
{"input":"<s> //== editorFormatText<EOL>export function editorFormatText(document, srcText, srcPath, lineStart, lineEnd) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let tes = [];<EOL>        editorOpen(srcPath, srcText, false, false, true)<EOL>            .then((v) => {<EOL>            // discard v<EOL>            let p = requestEditorFormatText( srcPath, lineStart, <NUM_LIT>, document);<EOL>            //TODO async-await<EOL>            function nextp(fts) {<EOL>                tes. push(fts.textEdit);<EOL>                if (fts.line != lineEnd) {<EOL>                    let sPos = { line: fts.line, character: <NUM_LIT> };<EOL>                    let ePos = document.positionAt(document.offsetAt({ line: fts.line +  <NUM_LIT>, character: <NUM_LIT> }) - <NUM_LIT>);<EOL>                    requestEditorFormatText(srcPath, fts.line + <NUM_LIT>, <NUM_LIT>, document)<EOL>                        .then(nextp)<EOL>                        .catch((err) => {<EOL>","gt":"reject(err);"}
{"input":"<s> export function isDateTest() {<EOL>    assert.","gt":"strictEqual(check.isDate(\"<STR_LIT>\"), true);"}
{"input":"<s> function textProp(elem) {<EOL>    return /^(INPUT|SELECT|TEXTAREA)$/.test(elem.tagName) ?","gt":"\"<STR_LIT>\" : \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function set(obj, prop, value) {<EOL>    let prevObject;<EOL>    let prevKey;<EOL>    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source, propName, indexer, index) => {<EOL>        let","gt":"currentObject = prevKey ? prevObject[prevKey] : obj;"}
{"input":"<s> <EOL>export function set(obj, prop, value) {<EOL>    let prevObject;<EOL>    let prevKey;<EOL>    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source, propName, indexer, index) => {<EOL>        let  currentObject = prevKey ? prevObject[prevKey] : obj;<EOL>        if (currentObject == null) {<EOL>            currentObject = indexer ? [] : {};<EOL>","gt":"if (prevKey) {"}
{"input":"<s> <EOL>export function set(obj, prop, value) {<EOL>    let prevObject;<EOL>    let prevKey;<EOL>    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source, propName, indexer, index) => {<EOL>        let  currentObject = prevKey ? prevObject[prevKey] : obj;<EOL>        if (currentObject == null) {<EOL>            currentObject = indexer ? [] : {};<EOL>             if (prevKey) {<EOL>                prevObject[prevKey] = currentObject;<EOL>            }<EOL>            else {<EOL>                prevObject =","gt":"obj = currentObject;"}
{"input":"<s> <EOL>export function set(obj, prop, value) {<EOL>    let prevObject;<EOL>    let prevKey;<EOL>    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source, propName, indexer, index) => {<EOL>        let  currentObject = prevKey ? prevObject[prevKey] : obj;<EOL>        if (currentObject == null) {<EOL>            currentObject = indexer ? [] : {};<EOL>             if (prevKey) {<EOL>                prevObject[prevKey] = currentObject;<EOL>            }<EOL>            else {<EOL>                prevObject =  obj = currentObject;<EOL>            }<EOL>        }<EOL>        prevObject = currentObject;<EOL>        prevKey = propName || indexer;<EOL>        if (index + source.","gt":"length === prop.length) {"}
{"input":"<s> <EOL>export function addClass(elem, className) {<EOL>    toggleClass(","gt":"elem, className, true);"}
{"input":"<s> function convertValidationType(type) {<EOL>    switch (type) {<EOL>        case InputValidationType.Information: return","gt":"MessageType.INFO;"}
{"input":"<s> <EOL>export function computeStyle(elem, ...propNames) {<EOL>    let result = <NUM_LIT>;<EOL>    const computedStyle = elem.ownerDocument.","gt":"defaultView.getComputedStyle(elem);"}
{"input":"<s> <EOL>export function swap(arr, x, y) {<EOL>    const","gt":"t = arr[x];"}
{"input":"<s> <EOL>export function isLeapYear(year) {<EOL>    return (year % <NUM_LIT> == <NUM_LIT> && year % <NUM_LIT> != <NUM_LIT>) || year %","gt":"<NUM_LIT> == <NUM_LIT>;"}
{"input":"<s> export function findTest() {<EOL>    assert.","gt":"strictEqual(object.find([<NUM_LIT>, <NUM_LIT>], function (item) { return item > <NUM_LIT>; }), <NUM_LIT>);"}
{"input":"<s> <EOL>export function getWeek(date, base = new Date(date.getFullYear(), <NUM_LIT>, <NUM_LIT>)) {<EOL>    return Math.floor((date - base) / <NUM_LIT>) +","gt":"<NUM_LIT>;"}
{"input":"<s> export function trigger(elem, eventName, selector, event) {<EOL>    if (typeof selector !== \"<STR_LIT>\") {<EOL>        event = selector;<EOL>        selector = \"<STR_LIT>\";<EOL>    }<EOL>    const listeners = elem.__events__[selector ? eventName + \"<STR_LIT>\" + selector : eventName];<EOL>    if (listeners) {<EOL>        event =","gt":"event || {};"}
{"input":"<s> export function trigger(elem, eventName, selector, event) {<EOL>    if (typeof selector !== \"<STR_LIT>\") {<EOL>        event = selector;<EOL>        selector = \"<STR_LIT>\";<EOL>    }<EOL>    const listeners = elem.__events__[selector ? eventName + \"<STR_LIT>\" + selector : eventName];<EOL>    if (listeners) {<EOL>        event =  event || {};<EOL>        if (!event.type)<EOL>            event.type = eventName;<EOL>        if (!event.target)<EOL>            event.target = selector ? find(elem,","gt":"selector) : elem;"}
{"input":"<s> export function cloneTest() {<EOL>    assert.deepEqual(object.clone({ a: <NUM_LIT>, b: [<NUM_LIT>] }), {","gt":"a: <NUM_LIT>, b: [<NUM_LIT>] });"}
{"input":"<s> export function diffTest() {<EOL>    assert.deepEqual(object.diff({ a: <NUM_LIT>, c: <NUM_LIT> }, {","gt":"b: <NUM_LIT>, c: <NUM_LIT> }), { left: [\"<STR_LIT>\"], right: [\"<STR_LIT>\"], both: [\"<STR_LIT>\"] });"}
{"input":"<s> export function keyOfTest() {<EOL>    assert.strictEqual(object.","gt":"keyOf({ a: <NUM_LIT>, b: <NUM_LIT> }, <NUM_LIT>), \"<STR_LIT>\");"}
{"input":"<s> // computes the difference, in winning chances, between two evaluations<EOL>// 1  = e1 is infinately better than e2<EOL>// -1 = e1 is infinately worse  than e2<EOL>export function povDiff(color, e1, e2) {<EOL>","gt":"return (povChances(color, e1) - povChances(color, e2)) / <NUM_LIT>;"}
{"input":"<s> export function formatTournamentDuration(timeInMin) {<EOL>    const hours =","gt":"Math.floor(timeInMin / <NUM_LIT>);"}
{"input":"<s> export function getStylesFromClasses(names, elementType = \"<STR_LIT>\") {<EOL>    let elem = document.createElement(elementType);<EOL>    (typeof names == \"<STR_LIT>\" ? [names] : names).forEach(c => elem.classList.add(c));<EOL>    let result = {};<EOL>    for (let i = <NUM_LIT>; i < document.styleSheets.length; i++) {<EOL>        let sheet = document.styleSheets[i];<EOL>        let","gt":"rules = sheet.rules || sheet.cssRules;"}
{"input":"<s> export function getStylesFromClasses(names, elementType = \"<STR_LIT>\") {<EOL>    let elem = document.createElement(elementType);<EOL>    (typeof names == \"<STR_LIT>\" ? [names] : names).forEach(c => elem.classList.add(c));<EOL>    let result = {};<EOL>    for (let i = <NUM_LIT>; i < document.styleSheets.length; i++) {<EOL>        let sheet = document.styleSheets[i];<EOL>        let  rules = sheet.rules || sheet.cssRules;<EOL>        for (let j = <NUM_LIT>; j < rules.length; j++) {<EOL>            if (rules[j].type == CSSRule.STYLE_RULE) {<EOL>                let styleRule = rules[j];<EOL>                if (elem.matches(styleRule.selectorText)) {<EOL>                    for (let k = <NUM_LIT>; k < styleRule.style.","gt":"length; k++) {"}
{"input":"<s> <EOL>export function axesEditorComponent() {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict:","gt":"'<STR_LIT>',"}
{"input":"<s> function addMathStrategy(selectParts, partModel) {<EOL>    var partCount = selectParts.length;<EOL>    if (partCount > <NUM_LIT>) {<EOL>        // if last is math, replace it<EOL>        if (selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            selectParts[partCount - <NUM_LIT>] = partModel;<EOL>","gt":"return;"}
{"input":"<s> function addMathStrategy(selectParts, partModel) {<EOL>    var partCount = selectParts.length;<EOL>    if (partCount > <NUM_LIT>) {<EOL>        // if last is math, replace it<EOL>        if (selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            selectParts[partCount - <NUM_LIT>] = partModel;<EOL>             return;<EOL>        }<EOL>        // if next to last is math, replace it<EOL>        if (partCount > <NUM_LIT> && selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            selectParts[partCount - <NUM_LIT>] = partModel;<EOL>","gt":"return;"}
{"input":"<s> function addMathStrategy(selectParts, partModel) {<EOL>    var partCount = selectParts.length;<EOL>    if (partCount > <NUM_LIT>) {<EOL>        // if last is math, replace it<EOL>        if (selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            selectParts[partCount - <NUM_LIT>] = partModel;<EOL>             return;<EOL>        }<EOL>        // if next to last is math, replace it<EOL>        if (partCount > <NUM_LIT> && selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            selectParts[partCount - <NUM_LIT>] = partModel;<EOL>             return;<EOL>        }<EOL>        else if (selectParts[partCount - <NUM_LIT>].def.type === '<STR_LIT>') {<EOL>            // if last is alias add it before<EOL>            selectParts.splice(","gt":"partCount - <NUM_LIT>, <NUM_LIT>, partModel);"}
{"input":"<s> <EOL>function queryEditorRowDirective() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        controller: QueryRowCtrl,<EOL>        bindToController:","gt":"true,"}
{"input":"<s> <EOL>function queryEditorRowDirective() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        controller: QueryRowCtrl,<EOL>        bindToController:  true,<EOL>        controllerAs: '<STR_LIT>',<EOL>        templateUrl: '<STR_LIT>',<EOL>        transclude: true,<EOL>        scope: {<EOL>            queryCtrl: '<STR_LIT>',<EOL>            canCollapse:","gt":"'<STR_LIT>',"}
{"input":"<s> export function flatten(arr) {<EOL>    return arr.reduce((a, b) => a.concat(","gt":"b), []);"}
{"input":"<s> function describeSharedTooltip(desc, fn) {<EOL>    var ctx = {};<EOL>    ctx.ctrl = scope.ctrl;<EOL>    ctx.ctrl.panel = {<EOL>","gt":"tooltip: {"}
{"input":"<s> function describeSharedTooltip(desc, fn) {<EOL>    var ctx = {};<EOL>    ctx.ctrl = scope.ctrl;<EOL>    ctx.ctrl.panel = {<EOL>         tooltip: {<EOL>            shared: true,<EOL>        },<EOL>","gt":"legend: {},"}
{"input":"<s> function describeSharedTooltip(desc, fn) {<EOL>    var ctx = {};<EOL>    ctx.ctrl = scope.ctrl;<EOL>    ctx.ctrl.panel = {<EOL>         tooltip: {<EOL>            shared: true,<EOL>        },<EOL>         legend: {},<EOL>        stack: false,<EOL>    };<EOL>    ctx.setup = function (setupFn) {<EOL>        ctx.","gt":"setupFn = setupFn;"}
{"input":"<s> function describeSharedTooltip(desc, fn) {<EOL>    var ctx = {};<EOL>    ctx.ctrl = scope.ctrl;<EOL>    ctx.ctrl.panel = {<EOL>         tooltip: {<EOL>            shared: true,<EOL>        },<EOL>         legend: {},<EOL>        stack: false,<EOL>    };<EOL>    ctx.setup = function (setupFn) {<EOL>        ctx. setupFn = setupFn;<EOL>    };<EOL>    describe(desc, function () {<EOL>        beforeEach(function () {<EOL>            ctx.setupFn();<EOL>            var tooltip = new GraphTooltip(","gt":"elem, dashboard, scope);"}
{"input":"<s> function getFileContents(file, options, program) {<EOL>    // The linter retrieves the SourceFile TS node directly if a program is used<EOL>    if (program) {<EOL>        if (program.getSourceFile(file) == undefined) {<EOL>            const message = `<STR_LIT>`;<EOL>","gt":"throw new Error(message);"}
{"input":"<s> export function getDataTransferFiles(event) {<EOL>    if (isDragEvent(event) && event.dataTransfer) {<EOL>        const dt = event.dataTransfer;<EOL>        if (dt.files && dt.files.length) {<EOL>            return Array.from(dt.files);<EOL>        }<EOL>        else if (dt.items && dt.items.length) {<EOL>            // Chrome is the only browser that allows to read the file list on drag<EOL>            // events and uses `items` instead of `files` in this case.<EOL>            return","gt":"Array.from(dt.items);"}
{"input":"<s> <EOL>export function dirname(path) {<EOL>    const index = path.lastIndexOf(NormalizedSep);<EOL>","gt":"if (index === -<NUM_LIT>) {"}
{"input":"<s> export function registerAngularDirectives() {<EOL>    react2AngularDirective('<STR_LIT>', PasswordStrength, ['<STR_LIT>']);<EOL>    react2AngularDirective('<STR_LIT>', PageHeader, ['<STR_LIT>', '<STR_LIT>']);<EOL>    react2AngularDirective('<STR_LIT>', EmptyListCTA, ['<STR_LIT>']);<EOL>    react2AngularDirective('<STR_LIT>',","gt":"LoginBackground, []);"}
{"input":"<s> export function pluckDeep(obj, key) {<EOL>    if (!obj) {<EOL>        return null;<EOL>    }<EOL>    const keys = Object.keys(obj);<EOL>","gt":"for (const currKey of keys) {"}
{"input":"<s> export function pluckDeep(obj, key) {<EOL>    if (!obj) {<EOL>        return null;<EOL>    }<EOL>    const keys = Object.keys(obj);<EOL>     for (const currKey of keys) {<EOL>        if (currKey === key) {<EOL>            return obj[key];<EOL>        }<EOL>        if (isObject(obj[","gt":"currKey])) {"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then((","gt":"data) => {"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion.","gt":"version : '<STR_LIT>';"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion. version : '<STR_LIT>';<EOL>            const key = '<STR_LIT>' + v;<EOL>            const warnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>            if (warnCount === <NUM_LIT>) {<EOL>                window.navigator.notification.alert('<STR_LIT>', () => {<EOL>                    storage.set(key, <NUM_LIT>);<EOL>                });<EOL>            }<EOL>            else if (warnCount === <NUM_LIT>) {<EOL>                storage.remove(key);<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion. version : '<STR_LIT>';<EOL>            const key = '<STR_LIT>' + v;<EOL>            const warnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>            if (warnCount === <NUM_LIT>) {<EOL>                window.navigator.notification.alert('<STR_LIT>', () => {<EOL>                    storage.set(key, <NUM_LIT>);<EOL>                });<EOL>            }<EOL>            else if (warnCount === <NUM_LIT>) {<EOL>                storage.remove(key);<EOL>            }<EOL>             else {<EOL>                storage.set(key, warnCount + <NUM_LIT>);<EOL>            }<EOL>        }<EOL>        else if (data.api.current > globalConfig.apiVersion) {<EOL>            const versionInfo = data.api.olds.find(o => o.version === globalConfig.apiVersion);<EOL>            if (","gt":"versionInfo) {"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion. version : '<STR_LIT>';<EOL>            const key = '<STR_LIT>' + v;<EOL>            const warnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>            if (warnCount === <NUM_LIT>) {<EOL>                window.navigator.notification.alert('<STR_LIT>', () => {<EOL>                    storage.set(key, <NUM_LIT>);<EOL>                });<EOL>            }<EOL>            else if (warnCount === <NUM_LIT>) {<EOL>                storage.remove(key);<EOL>            }<EOL>             else {<EOL>                storage.set(key, warnCount + <NUM_LIT>);<EOL>            }<EOL>        }<EOL>        else if (data.api.current > globalConfig.apiVersion) {<EOL>            const versionInfo = data.api.olds.find(o => o.version === globalConfig.apiVersion);<EOL>            if ( versionInfo) {<EOL>                const now = new Date(), unsupportedDate = new Date(versionInfo.unsupportedAt), deprecatedDate = new Date(versionInfo.deprecatedAt);<EOL>                const key = '<STR_LIT>' + versionInfo.version;<EOL>                const deprWarnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>                if (now > unsupportedDate) {<EOL>                    window.navigator.notification.alert(i18n('<STR_LIT>'), noop);<EOL>                }<EOL>                else if (now > deprecatedDate) {<EOL>                    if (deprWarnCount === <NUM_LIT>) {<EOL>                        window.navigator.notification.alert(i18n('<STR_LIT>', window.moment(unsupportedDate).format('<STR_LIT>')), () => {<EOL>                            storage.set(key,","gt":"<NUM_LIT>);"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion. version : '<STR_LIT>';<EOL>            const key = '<STR_LIT>' + v;<EOL>            const warnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>            if (warnCount === <NUM_LIT>) {<EOL>                window.navigator.notification.alert('<STR_LIT>', () => {<EOL>                    storage.set(key, <NUM_LIT>);<EOL>                });<EOL>            }<EOL>            else if (warnCount === <NUM_LIT>) {<EOL>                storage.remove(key);<EOL>            }<EOL>             else {<EOL>                storage.set(key, warnCount + <NUM_LIT>);<EOL>            }<EOL>        }<EOL>        else if (data.api.current > globalConfig.apiVersion) {<EOL>            const versionInfo = data.api.olds.find(o => o.version === globalConfig.apiVersion);<EOL>            if ( versionInfo) {<EOL>                const now = new Date(), unsupportedDate = new Date(versionInfo.unsupportedAt), deprecatedDate = new Date(versionInfo.deprecatedAt);<EOL>                const key = '<STR_LIT>' + versionInfo.version;<EOL>                const deprWarnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>                if (now > unsupportedDate) {<EOL>                    window.navigator.notification.alert(i18n('<STR_LIT>'), noop);<EOL>                }<EOL>                else if (now > deprecatedDate) {<EOL>                    if (deprWarnCount === <NUM_LIT>) {<EOL>                        window.navigator.notification.alert(i18n('<STR_LIT>', window.moment(unsupportedDate).format('<STR_LIT>')), () => {<EOL>                            storage.set(key,  <NUM_LIT>);<EOL>                        });<EOL>                    }<EOL>                    else if (deprWarnCount === <NUM_LIT>) {<EOL>                        storage.remove(","gt":"key);"}
{"input":"<s> export function status() {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>        query: {<EOL>            v: window.AppVersion ? window.AppVersion.version : null<EOL>        }<EOL>    })<EOL>        .then(( data) => {<EOL>        // warn if buggy app<EOL>        if (data.mustUpgrade) {<EOL>            const v = window.AppVersion ? window.AppVersion. version : '<STR_LIT>';<EOL>            const key = '<STR_LIT>' + v;<EOL>            const warnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>            if (warnCount === <NUM_LIT>) {<EOL>                window.navigator.notification.alert('<STR_LIT>', () => {<EOL>                    storage.set(key, <NUM_LIT>);<EOL>                });<EOL>            }<EOL>            else if (warnCount === <NUM_LIT>) {<EOL>                storage.remove(key);<EOL>            }<EOL>             else {<EOL>                storage.set(key, warnCount + <NUM_LIT>);<EOL>            }<EOL>        }<EOL>        else if (data.api.current > globalConfig.apiVersion) {<EOL>            const versionInfo = data.api.olds.find(o => o.version === globalConfig.apiVersion);<EOL>            if ( versionInfo) {<EOL>                const now = new Date(), unsupportedDate = new Date(versionInfo.unsupportedAt), deprecatedDate = new Date(versionInfo.deprecatedAt);<EOL>                const key = '<STR_LIT>' + versionInfo.version;<EOL>                const deprWarnCount = Number(storage.get(key)) || <NUM_LIT>;<EOL>                if (now > unsupportedDate) {<EOL>                    window.navigator.notification.alert(i18n('<STR_LIT>'), noop);<EOL>                }<EOL>                else if (now > deprecatedDate) {<EOL>                    if (deprWarnCount === <NUM_LIT>) {<EOL>                        window.navigator.notification.alert(i18n('<STR_LIT>', window.moment(unsupportedDate).format('<STR_LIT>')), () => {<EOL>                            storage.set(key,  <NUM_LIT>);<EOL>                        });<EOL>                    }<EOL>                    else if (deprWarnCount === <NUM_LIT>) {<EOL>                        storage.remove( key);<EOL>                    }<EOL>","gt":"else {"}
{"input":"<s> export function generateWebConfigFile(webConfigTargetPath, appType, substitutionParameters) {<EOL>    // Get the template path for the given appType<EOL>    var webConfigTemplatePath = path.join(__dirname, '<STR_LIT>',","gt":"appType.toLowerCase());"}
{"input":"<s> export function search(query, page = <NUM_LIT>) {<EOL>    return fetchJSON('<STR_LIT>', {<EOL>","gt":"method: '<STR_LIT>',"}
{"input":"<s> export function getWeeksForMonth(month, year, weekStartsOn = <NUM_LIT>) {<EOL>    const firstOfMonth = new Date(year, month, <NUM_LIT>);<EOL>    const firstDayOfWeek = firstOfMonth.getDay();<EOL>    const weeks = [[]];<EOL>    let currentWeek = weeks[","gt":"<NUM_LIT>];"}
{"input":"<s> export function getWeeksForMonth(month, year, weekStartsOn = <NUM_LIT>) {<EOL>    const firstOfMonth = new Date(year, month, <NUM_LIT>);<EOL>    const firstDayOfWeek = firstOfMonth.getDay();<EOL>    const weeks = [[]];<EOL>    let currentWeek = weeks[ <NUM_LIT>];<EOL>    let currentDate = firstOfMonth;<EOL>    const orderedWeekday = getOrderedWeekdays(weekStartsOn);<EOL>    for (let i = <NUM_LIT>; i < orderedWeekday.","gt":"indexOf(firstDayOfWeek); i++) {"}
{"input":"<s> export function getWeeksForMonth(month, year, weekStartsOn = <NUM_LIT>) {<EOL>    const firstOfMonth = new Date(year, month, <NUM_LIT>);<EOL>    const firstDayOfWeek = firstOfMonth.getDay();<EOL>    const weeks = [[]];<EOL>    let currentWeek = weeks[ <NUM_LIT>];<EOL>    let currentDate = firstOfMonth;<EOL>    const orderedWeekday = getOrderedWeekdays(weekStartsOn);<EOL>    for (let i = <NUM_LIT>; i < orderedWeekday. indexOf(firstDayOfWeek); i++) {<EOL>        currentWeek.push(null);<EOL>    }<EOL>    while (currentDate.getMonth() === month) {<EOL>        if (currentWeek.length === WEEK_LENGTH) {<EOL>","gt":"currentWeek = [];"}
{"input":"<s> export function getWeeksForMonth(month, year, weekStartsOn = <NUM_LIT>) {<EOL>    const firstOfMonth = new Date(year, month, <NUM_LIT>);<EOL>    const firstDayOfWeek = firstOfMonth.getDay();<EOL>    const weeks = [[]];<EOL>    let currentWeek = weeks[ <NUM_LIT>];<EOL>    let currentDate = firstOfMonth;<EOL>    const orderedWeekday = getOrderedWeekdays(weekStartsOn);<EOL>    for (let i = <NUM_LIT>; i < orderedWeekday. indexOf(firstDayOfWeek); i++) {<EOL>        currentWeek.push(null);<EOL>    }<EOL>    while (currentDate.getMonth() === month) {<EOL>        if (currentWeek.length === WEEK_LENGTH) {<EOL>             currentWeek = [];<EOL>            weeks.push(currentWeek);<EOL>        }<EOL>        currentWeek.push(currentDate);<EOL>        currentDate = new","gt":"Date(year, month, currentDate.getDate() + <NUM_LIT>);"}
{"input":"<s> export function boolean(value) {<EOL>","gt":"return value === true || value === false;"}
{"input":"<s> async function uploadBlob(blobService, quality, blobName, file) {<EOL>    const blobOptions = {<EOL>        contentSettings: {<EOL>            contentType: mime.lookup(","gt":"file),"}
{"input":"<s> <EOL>export function metricsTabDirective() {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict:","gt":"'<STR_LIT>',"}
{"input":"<s> function tablebaseRelevant(fen) {<EOL>","gt":"const parts = fen.split(/\\s/);"}
{"input":"<s> export function getPreviousDisplayYear(month, year) {<EOL>    if (month === <NUM_LIT>) {<EOL>        return","gt":"year - <NUM_LIT>;"}
{"input":"<s> function aLocalExtension(id, contributes) {<EOL>    const [publisher, name] = id.split('<STR_LIT>');<EOL>    return Object.create({<EOL>        identifier: {","gt":"id },"}
{"input":"<s> function escapeSpecialChars(query) {<EOL>    return query.replace(/\\./g, '<STR_LIT>')<EOL>        .replace(","gt":"/[\\\\/+\\-&|!\"~*?:(){}\\[\\]\\^]/g, '<STR_LIT>')"}
{"input":"<s> function createBooleanProperty(args) {<EOL>    if ((args.type.flags & ts.TypeFlags.BooleanLiteral) === ts.TypeFlags.BooleanLiteral ||<EOL>        (args.type.symbol &&","gt":"args.type.symbol.name === '<STR_LIT>')) {"}
{"input":"<s> function createArrayProperty(args) {<EOL>    if (args.typechecker.isArrayLikeType(args.type)) {<EOL>        const arrayType = args.type;<EOL>        if (!arrayType.typeArguments) {<EOL>            return;<EOL>        }<EOL>        const itemType = arrayType.typeArguments[<NUM_LIT>];<EOL>        if ((itemType.flags & ts.TypeFlags.String) === ts.TypeFlags.String) {<EOL>            const property = new StringArrayProperty(args.id);<EOL>","gt":"return property;"}
{"input":"<s> function createArrayProperty(args) {<EOL>    if (args.typechecker.isArrayLikeType(args.type)) {<EOL>        const arrayType = args.type;<EOL>        if (!arrayType.typeArguments) {<EOL>            return;<EOL>        }<EOL>        const itemType = arrayType.typeArguments[<NUM_LIT>];<EOL>        if ((itemType.flags & ts.TypeFlags.String) === ts.TypeFlags.String) {<EOL>            const property = new StringArrayProperty(args.id);<EOL>             return property;<EOL>        }<EOL>        if ((itemType.flags & ts.TypeFlags.Number) === ts.TypeFlags.Number) {<EOL>            const property = new NumberArrayProperty(args.id);<EOL>            return","gt":"property;"}
{"input":"<s> export function getRectForNode(node) {<EOL>    if (!(node instanceof Element)) {<EOL>        return new Rect({<EOL>            width: window.innerWidth,<EOL>","gt":"height: window.innerHeight,"}
{"input":"<s> export function getRectForNode(node) {<EOL>    if (!(node instanceof Element)) {<EOL>        return new Rect({<EOL>            width: window.innerWidth,<EOL>             height: window.innerHeight,<EOL>        });<EOL>    }<EOL>    const rect = node.getBoundingClientRect();<EOL>    return new Rect({<EOL>        top: rect.top,<EOL>","gt":"left: rect.left,"}
{"input":"<s> export function isReactElement(x) {<EOL>    return isValidElement(","gt":"x) && x !== undefined;"}
{"input":"<s> function getEnumTypeOptions(declaration) {<EOL>    return declaration.members.map((enumMember, index) => {<EOL>        const enumMemberId = enumMember.name.getText();<EOL>        let enumMemberName = getJsDocValue(enumMember, '<STR_LIT>');<EOL>","gt":"if (enumMemberName === undefined) {"}
{"input":"<s> function getEnumTypeOptions(declaration) {<EOL>    return declaration.members.map((enumMember, index) => {<EOL>        const enumMemberId = enumMember.name.getText();<EOL>        let enumMemberName = getJsDocValue(enumMember, '<STR_LIT>');<EOL>         if (enumMemberName === undefined) {<EOL>            enumMemberName = enumMemberId;<EOL>        }<EOL>        const enumMemberOrdinal = enumMember.initializer<EOL>            ? parseInt(enumMember.initializer.getText(), <NUM_LIT>)<EOL>            :","gt":"index;"}
{"input":"<s> export function file(fileName, text) {<EOL>    return","gt":"new Fixture(fileName, text);"}
{"input":"<s> function removeDragElements(dom) {<EOL>    if (dom.elements.shadow) {<EOL>","gt":"dom.elements.shadow.style.transform = util.translate3dAway;"}
{"input":"<s> function reload(ground, data, fen, flip) {<EOL>    ground.reconfigure(","gt":"makeConfig(data, fen, flip));"}
{"input":"<s> function init() {<EOL>    return (req) => {<EOL>        // Note how even though we return a promise, the resulting rpc client will be synchronous<EOL>        const { form, ...o } = req.o || { form: undefined };<EOL>        const opts = o;<EOL>        if (form) {<EOL>            const","gt":"fd = new FormData();"}
{"input":"<s> function init() {<EOL>    return (req) => {<EOL>        // Note how even though we return a promise, the resulting rpc client will be synchronous<EOL>        const { form, ...o } = req.o || { form: undefined };<EOL>        const opts = o;<EOL>        if (form) {<EOL>            const  fd = new FormData();<EOL>            form.forEach(entry => {<EOL>                fd.append(entry.key, entry.value, entry.fileName);<EOL>            });<EOL>            opts.form =","gt":"fd;"}
{"input":"<s> function init() {<EOL>    return (req) => {<EOL>        // Note how even though we return a promise, the resulting rpc client will be synchronous<EOL>        const { form, ...o } = req.o || { form: undefined };<EOL>        const opts = o;<EOL>        if (form) {<EOL>            const  fd = new FormData();<EOL>            form.forEach(entry => {<EOL>                fd.append(entry.key, entry.value, entry.fileName);<EOL>            });<EOL>            opts.form =  fd;<EOL>        }<EOL>        return request(req.m, req.u, opts).then(response => ({<EOL>            s: response.statusCode,<EOL>","gt":"h: response.headers,"}
{"input":"<s> function buildParams(params) {<EOL>    return {","gt":"params };"}
{"input":"<s> export function initBoard(cfg) {<EOL>    const","gt":"defaults = makeDefaults();"}
{"input":"<s> export function overlay(ctrl) {<EOL>    return [<EOL>        renderPromotion(","gt":"ctrl),"}
{"input":"<s> function it(label, test) {<EOL>    testName =","gt":"label;"}
{"input":"<s> function scoreSeparatorAtPos(charCode) {<EOL>    switch (charCode) {<EOL>        case CharCode.Slash:<EOL>        case CharCode.Backslash:<EOL>            return <NUM_LIT>; // prefer path separators...<EOL>        case CharCode.","gt":"Underline:"}
{"input":"<s> function scoreSeparatorAtPos(charCode) {<EOL>    switch (charCode) {<EOL>        case CharCode.Slash:<EOL>        case CharCode.Backslash:<EOL>            return <NUM_LIT>; // prefer path separators...<EOL>        case CharCode. Underline:<EOL>        case CharCode.Dash:<EOL>        case CharCode.Period:<EOL>        case CharCode.Space:<EOL>        case CharCode.","gt":"SingleQuote:"}
{"input":"<s> function scoreSeparatorAtPos(charCode) {<EOL>    switch (charCode) {<EOL>        case CharCode.Slash:<EOL>        case CharCode.Backslash:<EOL>            return <NUM_LIT>; // prefer path separators...<EOL>        case CharCode. Underline:<EOL>        case CharCode.Dash:<EOL>        case CharCode.Period:<EOL>        case CharCode.Space:<EOL>        case CharCode. SingleQuote:<EOL>        case CharCode.DoubleQuote:<EOL>        case CharCode.Colon:<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function initialLayout() {<EOL>    return {<EOL>        berniePage: initialBerniePageLayout,<EOL>        blogPage:","gt":"initialBlogPageLayout,"}
{"input":"<s> function loadFileFromArguments(platform, args, workingDirectory) {<EOL>    const localOni = \"<STR_LIT>\";<EOL>    if (!process.env[localOni]) {<EOL>","gt":"createWindow(args.slice(<NUM_LIT>), workingDirectory);"}
{"input":"<s> export function isSection(arr) {<EOL>","gt":"return (typeof arr[<NUM_LIT>] === '<STR_LIT>' &&"}
{"input":"<s> export default function retroView(root) {<EOL>    const ctrl = root.retro;<EOL>    if (!ctrl)<EOL>        return;<EOL>    const","gt":"fb = ctrl.vm.feedback;"}
{"input":"<s> export default function retroView(root) {<EOL>    const ctrl = root.retro;<EOL>    if (!ctrl)<EOL>        return;<EOL>    const  fb = ctrl.vm.feedback;<EOL>    return h('<STR_LIT>', {<EOL>        className: ctrl.vm.minimized ? '<STR_LIT>' : '<STR_LIT>'<EOL>    }, [<EOL>","gt":"renderTitle(ctrl),"}
{"input":"<s> export function isElementInViewport(element) {<EOL>    const { top, left, bottom, right } = element.getBoundingClientRect();<EOL>","gt":"return (top >= <NUM_LIT> &&"}
{"input":"<s> export function secondsToTimestamp(numSeconds) {<EOL>    const { hours, minutes, seconds } = secondsToTimeComponents(numSeconds);<EOL>","gt":"const hasHours = numSeconds > HOUR;"}
{"input":"<s> function cancel(ctrl) {<EOL>","gt":"if (promoting)"}
{"input":"<s> function internalScriptRecord(startTime, endTime) {<EOL>    return {<EOL>        '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> function capture(chessgroundCtrl, key) {<EOL>    const exploding = [];<EOL>    const diff = {};<EOL>    const orig = key2pos(key);<EOL>    for (let x = -<NUM_LIT>; x < <NUM_LIT>; x++) {<EOL>        for (let y = -<NUM_LIT>; y < <NUM_LIT>;","gt":"y++) {"}
{"input":"<s> function capture(chessgroundCtrl, key) {<EOL>    const exploding = [];<EOL>    const diff = {};<EOL>    const orig = key2pos(key);<EOL>    for (let x = -<NUM_LIT>; x < <NUM_LIT>; x++) {<EOL>        for (let y = -<NUM_LIT>; y < <NUM_LIT>;  y++) {<EOL>            const k = pos2key([orig[<NUM_LIT>] + x, orig[<NUM_LIT>] + y]);<EOL>            if (k) {<EOL>                exploding.push(k);<EOL>                const explodes = chessgroundCtrl.state.pieces[k] && (k === key || chessgroundCtrl.state.pieces[k].","gt":"role !== '<STR_LIT>');"}
{"input":"<s> export function annotate(typeChecker, file, host, tsHost, tsOpts, sourceMapper) {<EOL>","gt":"return new Annotator(typeChecker, file, host, tsHost, tsOpts, sourceMapper).annotate();"}
{"input":"<s> <EOL>function dashRepeatOptionDirective(variableSrv) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        template: template,<EOL>        scope: {<EOL>            panel: '<STR_LIT>',<EOL>        },<EOL>        link: function (scope, element) {<EOL>            element.css({ display: '<STR_LIT>', width: '<STR_LIT>' });<EOL>","gt":"scope.variables = variableSrv.variables.map(item => {"}
{"input":"<s> <EOL>function dashRepeatOptionDirective(variableSrv) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        template: template,<EOL>        scope: {<EOL>            panel: '<STR_LIT>',<EOL>        },<EOL>        link: function (scope, element) {<EOL>            element.css({ display: '<STR_LIT>', width: '<STR_LIT>' });<EOL>             scope.variables = variableSrv.variables.map(item => {<EOL>                return { text: item.name, value: item.name };<EOL>            });<EOL>            if (","gt":"scope.variables.length === <NUM_LIT>) {"}
{"input":"<s> export function measureFont(fontFamily, fontSize, characterToTest = \"<STR_LIT>\") {<EOL>    const div = document.createElement(\"<STR_LIT>\");<EOL>    div.style.position = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>    div.style.","gt":"backgroundColor = \"<STR_LIT>\";"}
{"input":"<s> export function measureFont(fontFamily, fontSize, characterToTest = \"<STR_LIT>\") {<EOL>    const div = document.createElement(\"<STR_LIT>\");<EOL>    div.style.position = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>    div.style. backgroundColor = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>","gt":"div.textContent = characterToTest;"}
{"input":"<s> export function measureFont(fontFamily, fontSize, characterToTest = \"<STR_LIT>\") {<EOL>    const div = document.createElement(\"<STR_LIT>\");<EOL>    div.style.position = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>    div.style. backgroundColor = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>     div.textContent = characterToTest;<EOL>    div.style.fontFamily = `<STR_LIT>`;<EOL>    div.style.fontSize = fontSize;<EOL>    const isItalicAvailable = isStyleAvailable(fontFamily, \"<STR_LIT>\", fontSize);<EOL>    const isBoldAvailable = isStyleAvailable(fontFamily, \"<STR_LIT>\", fontSize);<EOL>    document.","gt":"body.appendChild(div);"}
{"input":"<s> export function measureFont(fontFamily, fontSize, characterToTest = \"<STR_LIT>\") {<EOL>    const div = document.createElement(\"<STR_LIT>\");<EOL>    div.style.position = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>    div.style. backgroundColor = \"<STR_LIT>\";<EOL>    div.style.left = \"<STR_LIT>\";<EOL>    div.style.top = \"<STR_LIT>\";<EOL>     div.textContent = characterToTest;<EOL>    div.style.fontFamily = `<STR_LIT>`;<EOL>    div.style.fontSize = fontSize;<EOL>    const isItalicAvailable = isStyleAvailable(fontFamily, \"<STR_LIT>\", fontSize);<EOL>    const isBoldAvailable = isStyleAvailable(fontFamily, \"<STR_LIT>\", fontSize);<EOL>    document. body.appendChild(div);<EOL>    const rect = div.getBoundingClientRect();<EOL>    const width = rect.width;<EOL>    const height = rect.height;<EOL>    document.body.removeChild(div);<EOL>","gt":"return {"}
{"input":"<s> function removeTagPrefix(value) {<EOL>    return value.","gt":"replace(TAG_PREFIX, '<STR_LIT>');"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:","gt":"function (scope, elem, attrs) {"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:  function (scope, elem, attrs) {<EOL>            var ngchange = attrs.change ? '<STR_LIT>' + attrs.change + '<STR_LIT>' : '<STR_LIT>';<EOL>            var tip = attrs.tip ? '<STR_LIT>' + attrs.tip + '<STR_LIT>' : '<STR_LIT>';<EOL>            var showIf = attrs.showIf ?","gt":"'<STR_LIT>' + attrs.showIf + '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:  function (scope, elem, attrs) {<EOL>            var ngchange = attrs.change ? '<STR_LIT>' + attrs.change + '<STR_LIT>' : '<STR_LIT>';<EOL>            var tip = attrs.tip ? '<STR_LIT>' + attrs.tip + '<STR_LIT>' : '<STR_LIT>';<EOL>            var showIf = attrs.showIf ?  '<STR_LIT>' + attrs.showIf + '<STR_LIT>' : '<STR_LIT>';<EOL>            var template = '<STR_LIT>' +<EOL>                showIf +<EOL>                '<STR_LIT>' +<EOL>","gt":"'<STR_LIT>' +"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:  function (scope, elem, attrs) {<EOL>            var ngchange = attrs.change ? '<STR_LIT>' + attrs.change + '<STR_LIT>' : '<STR_LIT>';<EOL>            var tip = attrs.tip ? '<STR_LIT>' + attrs.tip + '<STR_LIT>' : '<STR_LIT>';<EOL>            var showIf = attrs.showIf ?  '<STR_LIT>' + attrs.showIf + '<STR_LIT>' : '<STR_LIT>';<EOL>            var template = '<STR_LIT>' +<EOL>                showIf +<EOL>                '<STR_LIT>' +<EOL>                 '<STR_LIT>' +<EOL>                attrs.model +<EOL>                '<STR_LIT>' +<EOL>                attrs.","gt":"text +"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:  function (scope, elem, attrs) {<EOL>            var ngchange = attrs.change ? '<STR_LIT>' + attrs.change + '<STR_LIT>' : '<STR_LIT>';<EOL>            var tip = attrs.tip ? '<STR_LIT>' + attrs.tip + '<STR_LIT>' : '<STR_LIT>';<EOL>            var showIf = attrs.showIf ?  '<STR_LIT>' + attrs.showIf + '<STR_LIT>' : '<STR_LIT>';<EOL>            var template = '<STR_LIT>' +<EOL>                showIf +<EOL>                '<STR_LIT>' +<EOL>                 '<STR_LIT>' +<EOL>                attrs.model +<EOL>                '<STR_LIT>' +<EOL>                attrs. text +<EOL>                tip +<EOL>                '<STR_LIT>' +<EOL>                '<STR_LIT>' +<EOL>","gt":"attrs.model +"}
{"input":"<s> <EOL>function editorOptBool($compile) {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        link:  function (scope, elem, attrs) {<EOL>            var ngchange = attrs.change ? '<STR_LIT>' + attrs.change + '<STR_LIT>' : '<STR_LIT>';<EOL>            var tip = attrs.tip ? '<STR_LIT>' + attrs.tip + '<STR_LIT>' : '<STR_LIT>';<EOL>            var showIf = attrs.showIf ?  '<STR_LIT>' + attrs.showIf + '<STR_LIT>' : '<STR_LIT>';<EOL>            var template = '<STR_LIT>' +<EOL>                showIf +<EOL>                '<STR_LIT>' +<EOL>                 '<STR_LIT>' +<EOL>                attrs.model +<EOL>                '<STR_LIT>' +<EOL>                attrs. text +<EOL>                tip +<EOL>                '<STR_LIT>' +<EOL>                '<STR_LIT>' +<EOL>                 attrs.model +<EOL>                '<STR_LIT>' +<EOL>                '<STR_LIT>' +<EOL>                attrs.model +<EOL>                '<STR_LIT>' +<EOL>                ngchange +<EOL>                '<STR_LIT>' +<EOL>","gt":"attrs.model +"}
{"input":"<s> export function userPicker() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        template: template,<EOL>        controller: UserPickerCtrl,<EOL>","gt":"bindToController: true,"}
{"input":"<s> export function userPicker() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        template: template,<EOL>        controller: UserPickerCtrl,<EOL>         bindToController: true,<EOL>        controllerAs: '<STR_LIT>',<EOL>        scope: {<EOL>            userPicked: '<STR_LIT>',<EOL>        },<EOL>        link: function (scope, elem, attrs, ctrl) {<EOL>            scope.$on('<STR_LIT>', () => {<EOL>","gt":"ctrl.reset();"}
{"input":"<s> function hasExplicitStyle(domElement, key) {<EOL>    if (!domElement.__haikuExplicitStyles) {<EOL>","gt":"return false;"}
{"input":"<s> // Can't move to +multi-player yet because of `provideStore`.<EOL>export function p2pGameReducer(state = initialGame.get('<STR_LIT>'), action) {<EOL>    switch (action.type) {<EOL>        case START_GAME:<EOL>            state = fromJS({});<EOL>","gt":"break;"}
{"input":"<s> // Can't move to +multi-player yet because of `provideStore`.<EOL>export function p2pGameReducer(state = initialGame.get('<STR_LIT>'), action) {<EOL>    switch (action.type) {<EOL>        case START_GAME:<EOL>            state = fromJS({});<EOL>             break;<EOL>        case PARTNER_PROGRESS:<EOL>            state = state.set('<STR_LIT>', action.payload.text);<EOL>            break;<EOL>        case PARTNER_COMPLETED:<EOL>            state = state.set('<STR_LIT>', true);<EOL>","gt":"break;"}
{"input":"<s> <EOL>export function dashboardViewStateSrv($location, $timeout, $rootScope) {<EOL>    return {<EOL>","gt":"create: function ($scope) {"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if (","gt":"error) {"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if ( error) {<EOL>","gt":"return {"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if ( error) {<EOL>             return {<EOL>                project,<EOL>                errors: [error],<EOL>","gt":"rootNames: [],"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if ( error) {<EOL>             return {<EOL>                project,<EOL>                errors: [error],<EOL>                 rootNames: [],<EOL>                options: {},<EOL>                emitFlags: api.EmitFlags.Default<EOL>            };<EOL>        }<EOL>        const parseConfigHost = {<EOL>            useCaseSensitiveFileNames: true,<EOL>            fileExists: fs.existsSync,<EOL>            readDirectory: ts.sys.readDirectory,<EOL>","gt":"readFile: ts.sys.readFile"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if ( error) {<EOL>             return {<EOL>                project,<EOL>                errors: [error],<EOL>                 rootNames: [],<EOL>                options: {},<EOL>                emitFlags: api.EmitFlags.Default<EOL>            };<EOL>        }<EOL>        const parseConfigHost = {<EOL>            useCaseSensitiveFileNames: true,<EOL>            fileExists: fs.existsSync,<EOL>            readDirectory: ts.sys.readDirectory,<EOL>             readFile: ts.sys.readFile<EOL>        };<EOL>        const parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);<EOL>        const rootNames = parsed.fileNames.map(f => path.normalize(f));<EOL>        const options = createNgCompilerOptions(basePath,","gt":"config, parsed.options);"}
{"input":"<s> export function readConfiguration(project, existingOptions) {<EOL>    try {<EOL>        const { projectFile, basePath } = calcProjectFileAndBasePath(project);<EOL>        let { config, error } = ts.readConfigFile(projectFile, ts.sys.readFile);<EOL>        if ( error) {<EOL>             return {<EOL>                project,<EOL>                errors: [error],<EOL>                 rootNames: [],<EOL>                options: {},<EOL>                emitFlags: api.EmitFlags.Default<EOL>            };<EOL>        }<EOL>        const parseConfigHost = {<EOL>            useCaseSensitiveFileNames: true,<EOL>            fileExists: fs.existsSync,<EOL>            readDirectory: ts.sys.readDirectory,<EOL>             readFile: ts.sys.readFile<EOL>        };<EOL>        const parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);<EOL>        const rootNames = parsed.fileNames.map(f => path.normalize(f));<EOL>        const options = createNgCompilerOptions(basePath,  config, parsed.options);<EOL>        let emitFlags = api.EmitFlags.Default;<EOL>        if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {<EOL>            emitFlags |= api.EmitFlags.Metadata;<EOL>        }<EOL>        if (options.skipTemplateCodegen) {<EOL>            emitFlags = emitFlags & ~api.EmitFlags.Codegen;<EOL>        }<EOL>        return { project: projectFile, rootNames, options, errors: parsed.errors,","gt":"emitFlags };"}
{"input":"<s> export function setScrollRegion(top, bottom, left, right) {<EOL>    return {<EOL>        type: SET_SCROLL_REGION,<EOL>","gt":"top,"}
{"input":"<s> <EOL>export function updateIDs(state, action) {<EOL>    const entities = action.payload;<EOL>    return","gt":"Object.assign({}, state, {"}
{"input":"<s> <EOL>export function dispatchFakeEvent(node, type, canBubble) {<EOL>    return","gt":"dispatchEvent(node, createFakeEvent(type, canBubble));"}
{"input":"<s> <EOL>export function spectrumPicker() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>        scope:","gt":"true,"}
{"input":"<s> <EOL>export function spectrumPicker() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>        scope:  true,<EOL>        replace: true,<EOL>        template: '<STR_LIT>',<EOL>        link: function (scope, element, attrs, ngModel) {<EOL>            scope.ngModel = ngModel;<EOL>            scope.onColorChange = color => {<EOL>","gt":"ngModel.$setViewValue(color);"}
{"input":"<s> export default function functionToRFO(fn) {<EOL>    let str = fn.toString();<EOL>    // HACK: Remove paren wrapping if any was provided<EOL>","gt":"if (str[str.length - <NUM_LIT>] === '<STR_LIT>') {"}
{"input":"<s> export default function functionToRFO(fn) {<EOL>    let str = fn.toString();<EOL>    // HACK: Remove paren wrapping if any was provided<EOL>     if (str[str.length - <NUM_LIT>] === '<STR_LIT>') {<EOL>        if (str[<NUM_LIT>] === '<STR_LIT>') {<EOL>            str = str.slice(<NUM_LIT>);<EOL>        }<EOL>    }<EOL>    const pidx1 = str.indexOf('<STR_LIT>');<EOL>    const pidx2 = str.indexOf('<STR_LIT>');<EOL>","gt":"const prefix = str.slice(<NUM_LIT>, pidx1);"}
{"input":"<s> export default function functionToRFO(fn) {<EOL>    let str = fn.toString();<EOL>    // HACK: Remove paren wrapping if any was provided<EOL>     if (str[str.length - <NUM_LIT>] === '<STR_LIT>') {<EOL>        if (str[<NUM_LIT>] === '<STR_LIT>') {<EOL>            str = str.slice(<NUM_LIT>);<EOL>        }<EOL>    }<EOL>    const pidx1 = str.indexOf('<STR_LIT>');<EOL>    const pidx2 = str.indexOf('<STR_LIT>');<EOL>     const prefix = str.slice(<NUM_LIT>, pidx1);<EOL>    const signature = str.slice(pidx1, pidx2 + <NUM_LIT>);<EOL>    const suffix = str.slice(pidx2 + <NUM_LIT>, str.length);<EOL>    const body = suffix.slice(suffix.indexOf('<STR_LIT>') + <NUM_LIT>, suffix.length - <NUM_LIT>).trim(); // Don't include braces or padding<EOL>    const type = suffix.match(","gt":"/^\\s*=>\\s*{/)"}
{"input":"<s> export default function functionToRFO(fn) {<EOL>    let str = fn.toString();<EOL>    // HACK: Remove paren wrapping if any was provided<EOL>     if (str[str.length - <NUM_LIT>] === '<STR_LIT>') {<EOL>        if (str[<NUM_LIT>] === '<STR_LIT>') {<EOL>            str = str.slice(<NUM_LIT>);<EOL>        }<EOL>    }<EOL>    const pidx1 = str.indexOf('<STR_LIT>');<EOL>    const pidx2 = str.indexOf('<STR_LIT>');<EOL>     const prefix = str.slice(<NUM_LIT>, pidx1);<EOL>    const signature = str.slice(pidx1, pidx2 + <NUM_LIT>);<EOL>    const suffix = str.slice(pidx2 + <NUM_LIT>, str.length);<EOL>    const body = suffix.slice(suffix.indexOf('<STR_LIT>') + <NUM_LIT>, suffix.length - <NUM_LIT>).trim(); // Don't include braces or padding<EOL>    const type = suffix.match( /^\\s*=>\\s*{/)<EOL>        ? '<STR_LIT>'<EOL>        : '<STR_LIT>';<EOL>    const name = nth(<NUM_LIT>, '<STR_LIT>', tokenize(prefix)).value;<EOL>    const params = signatureToParams(","gt":"signature);"}
{"input":"<s> export function clear() {<EOL>","gt":"return {"}
{"input":"<s> function f1() {<EOL>","gt":"return instance1;"}
{"input":"<s> export function addToLocal$(actions$, slice, db, localStoreKey) {<EOL>    return actions$<EOL>        .","gt":"ofType(typeFor(slice, actions.ADD))"}
{"input":"<s> function copyMatrix(m) {<EOL>    return [...","gt":"m];"}
{"input":"<s> function captureStream(stream) {<EOL>    var oldWrite = stream.write;<EOL>    var buf = '<STR_LIT>';<EOL>    stream.write = function (chunk, encoding, callback) {<EOL>        buf += chunk.toString(); // chunk is a String or Buffer<EOL>        oldWrite.apply(","gt":"stream, arguments);"}
{"input":"<s> function captureStream(stream) {<EOL>    var oldWrite = stream.write;<EOL>    var buf = '<STR_LIT>';<EOL>    stream.write = function (chunk, encoding, callback) {<EOL>        buf += chunk.toString(); // chunk is a String or Buffer<EOL>        oldWrite.apply( stream, arguments);<EOL>    };<EOL>    return {<EOL>        unhook: function unhook() {<EOL>            stream.write = oldWrite;<EOL>        },<EOL>        captured:","gt":"function () {"}
{"input":"<s> function flexIdIfSame(virtual, dom) {<EOL>    if (virtual.attributes) {<EOL>        if (virtual.attributes['<STR_LIT>']) {<EOL>            if (dom.getAttribute('<STR_LIT>') === virtual.attributes['<STR_LIT>']) {<EOL>                return virtual.attributes[","gt":"'<STR_LIT>'];"}
{"input":"<s> function interpolate(now, curve, started, ends, origin, destination) {<EOL>    if (Array.isArray(origin) && Array.isArray(destination)) {<EOL>        const arrayOutput = [];<EOL>        for (let i = <NUM_LIT>; i < origin.length; i++) {<EOL>            arrayOutput[i] = interpolate(now, curve, started, ends, origin[i], destination[i]);<EOL>        }<EOL>","gt":"return arrayOutput;"}
{"input":"<s> function interpolate(now, curve, started, ends, origin, destination) {<EOL>    if (Array.isArray(origin) && Array.isArray(destination)) {<EOL>        const arrayOutput = [];<EOL>        for (let i = <NUM_LIT>; i < origin.length; i++) {<EOL>            arrayOutput[i] = interpolate(now, curve, started, ends, origin[i], destination[i]);<EOL>        }<EOL>         return arrayOutput;<EOL>    }<EOL>    if (origin && typeof origin === OBJECT && destination && typeof destination === OBJECT) {<EOL>        const objectOutput = {};<EOL>        for (","gt":"const key in origin) {"}
{"input":"<s> function ascendingSort(a, b) {<EOL>    return","gt":"a - b;"}
{"input":"<s> function getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {<EOL>    let bounds = getLogScaleBucketBounds(","gt":"value, yBucketSplitFactor, logBase);"}
{"input":"<s> export function isDirectory(filePath) {<EOL>    let stat;<EOL>    try {<EOL>        stat = fs.statSync(filePath);<EOL>    }<EOL>    catch (e) {<EOL>        if (e && (e.code === '<STR_LIT>' || e.code === '<STR_LIT>')) {<EOL>            return false;<EOL>        }<EOL>","gt":"throw e;"}
{"input":"<s> function _build(logger) {<EOL>    logger.info('<STR_LIT>');<EOL>    const tsConfigPath = path.relative(process.cwd(), path.join(__dirname, '<STR_LIT>'));<EOL>    // Load the Compiler Options.<EOL>    const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);<EOL>    const parsedTsConfig = ts.parseJsonConfigFileContent(tsConfig.","gt":"config, ts.sys, '<STR_LIT>');"}
{"input":"<s> function _build(logger) {<EOL>    logger.info('<STR_LIT>');<EOL>    const tsConfigPath = path.relative(process.cwd(), path.join(__dirname, '<STR_LIT>'));<EOL>    // Load the Compiler Options.<EOL>    const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);<EOL>    const parsedTsConfig = ts.parseJsonConfigFileContent(tsConfig. config, ts.sys, '<STR_LIT>');<EOL>    // Create the program and emit.<EOL>    const program = ts.createProgram(parsedTsConfig.fileNames, parsedTsConfig.options);<EOL>    const result =","gt":"program.emit();"}
{"input":"<s> function _build(logger) {<EOL>    logger.info('<STR_LIT>');<EOL>    const tsConfigPath = path.relative(process.cwd(), path.join(__dirname, '<STR_LIT>'));<EOL>    // Load the Compiler Options.<EOL>    const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);<EOL>    const parsedTsConfig = ts.parseJsonConfigFileContent(tsConfig. config, ts.sys, '<STR_LIT>');<EOL>    // Create the program and emit.<EOL>    const program = ts.createProgram(parsedTsConfig.fileNames, parsedTsConfig.options);<EOL>    const result =  program.emit();<EOL>    if (result.emitSkipped) {<EOL>        logger.error(`<STR_LIT>`);<EOL>        const diagLogger = logger.createChild(","gt":"'<STR_LIT>');"}
{"input":"<s> function _build(logger) {<EOL>    logger.info('<STR_LIT>');<EOL>    const tsConfigPath = path.relative(process.cwd(), path.join(__dirname, '<STR_LIT>'));<EOL>    // Load the Compiler Options.<EOL>    const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);<EOL>    const parsedTsConfig = ts.parseJsonConfigFileContent(tsConfig. config, ts.sys, '<STR_LIT>');<EOL>    // Create the program and emit.<EOL>    const program = ts.createProgram(parsedTsConfig.fileNames, parsedTsConfig.options);<EOL>    const result =  program.emit();<EOL>    if (result.emitSkipped) {<EOL>        logger.error(`<STR_LIT>`);<EOL>        const diagLogger = logger.createChild( '<STR_LIT>');<EOL>        result.diagnostics.forEach(diagnostic => {<EOL>            const messageText = ts.flattenDiagnosticMessageText(diagnostic.messageText, '<STR_LIT>');<EOL>            if (diagnostic.","gt":"file) {"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path.","gt":"length;"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const","gt":"pathLength = hasPath ? path.length : <NUM_LIT>;"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const  pathLength = hasPath ? path.length : <NUM_LIT>;<EOL>    const key = path[path.length - <NUM_LIT>];<EOL>    let val = {};<EOL>","gt":"let pos = pathLength;"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const  pathLength = hasPath ? path.length : <NUM_LIT>;<EOL>    const key = path[path.length - <NUM_LIT>];<EOL>    let val = {};<EOL>     let pos = pathLength;<EOL>    // object<EOL>    if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // return [val, pos];<EOL>        val = action.","gt":"payload.val;"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const  pathLength = hasPath ? path.length : <NUM_LIT>;<EOL>    const key = path[path.length - <NUM_LIT>];<EOL>    let val = {};<EOL>     let pos = pathLength;<EOL>    // object<EOL>    if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // return [val, pos];<EOL>        val = action. payload.val;<EOL>    }<EOL>    else if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // function<EOL>        val[key] = action.payload.val(state);<EOL>","gt":"pos--;"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const  pathLength = hasPath ? path.length : <NUM_LIT>;<EOL>    const key = path[path.length - <NUM_LIT>];<EOL>    let val = {};<EOL>     let pos = pathLength;<EOL>    // object<EOL>    if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // return [val, pos];<EOL>        val = action. payload.val;<EOL>    }<EOL>    else if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // function<EOL>        val[key] = action.payload.val(state);<EOL>         pos--;<EOL>        patch = true;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>function patchOrUpdate(state, action, update) {<EOL>    let obj = [state];<EOL>    let patch = !update;<EOL>    const path = action.payload.path;<EOL>    const hasPath = path && path. length;<EOL>    const  pathLength = hasPath ? path.length : <NUM_LIT>;<EOL>    const key = path[path.length - <NUM_LIT>];<EOL>    let val = {};<EOL>     let pos = pathLength;<EOL>    // object<EOL>    if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // return [val, pos];<EOL>        val = action. payload.val;<EOL>    }<EOL>    else if (typeof action.payload.val === '<STR_LIT>') {<EOL>        // function<EOL>        val[key] = action.payload.val(state);<EOL>         pos--;<EOL>        patch = true;<EOL>    }<EOL>     else {<EOL>        // primitive<EOL>        val[key] = action.payload.val;<EOL>        pos--;<EOL>        patch = true;<EOL>    }<EOL>    let i = <NUM_LIT>;<EOL>    for (i = <NUM_LIT>; i < pos; i++) {<EOL>        obj[i + <NUM_LIT>] = obj[i][path[i]];<EOL>    }<EOL>","gt":"if (patch) {"}
{"input":"<s> function httpToRemote$(method, actions$, slice, dataService, triggerAction, successAction, errorAction, responseTransform = ((resp) => resp)) {<EOL>    return actions$<EOL>        .ofType(typeFor(slice, triggerAction))<EOL>        .switchMap((action) => dataService[method](action.payload.route, action.payload.requestObject || {})<EOL>        .map(","gt":"responseTransform)"}
{"input":"<s> function httpToRemote$(method, actions$, slice, dataService, triggerAction, successAction, errorAction, responseTransform = ((resp) => resp)) {<EOL>    return actions$<EOL>        .ofType(typeFor(slice, triggerAction))<EOL>        .switchMap((action) => dataService[method](action.payload.route, action.payload.requestObject || {})<EOL>        .map( responseTransform)<EOL>        .map((responseSlice) => {<EOL>        successAction.payload = responseSlice;<EOL>        return successAction;<EOL>    })<EOL>        .catch((error) => {<EOL>        errorAction.payload =","gt":"error;"}
{"input":"<s> <EOL>function hasPreserve3d(window) {<EOL>    if (!window) {<EOL>        return false;<EOL>    }<EOL>    if (!window.document) {<EOL>        return","gt":"false;"}
{"input":"<s> <EOL>function hasPreserve3d(window) {<EOL>    if (!window) {<EOL>        return false;<EOL>    }<EOL>    if (!window.document) {<EOL>        return  false;<EOL>    }<EOL>    let outerAnchor;<EOL>    let","gt":"innerAnchor;"}
{"input":"<s> <EOL>function hasPreserve3d(window) {<EOL>    if (!window) {<EOL>        return false;<EOL>    }<EOL>    if (!window.document) {<EOL>        return  false;<EOL>    }<EOL>    let outerAnchor;<EOL>    let  innerAnchor;<EOL>    const CSS = window.CSS;<EOL>    let result = false;<EOL>","gt":"let tmp;"}
{"input":"<s> // safely copy vec2/vec3 to a vec3<EOL>function copyVec3(out, a) {<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] || <NUM_LIT>;<EOL>    out[<NUM_LIT>] =","gt":"a[<NUM_LIT>] || <NUM_LIT>;"}
{"input":"<s> export function replacePrefixWithCompletion(bufferLine, basePosition, cursorColumn, completion) {<EOL>    const startPosition = basePosition;<EOL>    const before = bufferLine.substring(","gt":"<NUM_LIT>, startPosition);"}
{"input":"<s> export function createFakeScopedLineTokens(rawTokens) {<EOL>    let tokens = new Uint32Array(rawTokens.length << <NUM_LIT>);<EOL>    let line = '<STR_LIT>';<EOL>    for (let i = <NUM_LIT>, len = rawTokens.length; i < len; i++) {<EOL>        let rawToken =","gt":"rawTokens[i];"}
{"input":"<s> export function createFakeScopedLineTokens(rawTokens) {<EOL>    let tokens = new Uint32Array(rawTokens.length << <NUM_LIT>);<EOL>    let line = '<STR_LIT>';<EOL>    for (let i = <NUM_LIT>, len = rawTokens.length; i < len; i++) {<EOL>        let rawToken =  rawTokens[i];<EOL>        let startOffset = line.length;<EOL>        let metadata = ((rawToken.type << MetadataConsts.TOKEN_TYPE_OFFSET)) >>> <NUM_LIT>;<EOL>        tokens[(i << <NUM_LIT>)] = startOffset;<EOL>        tokens[(i << <NUM_LIT>) + <NUM_LIT>] = metadata;<EOL>","gt":"line += rawToken.text;"}
{"input":"<s> function constructTimingAst(value, errors) {<EOL>    let timings = null;<EOL>    if (value.hasOwnProperty('<STR_LIT>')) {<EOL>        timings = value;<EOL>    }<EOL>    else if (typeof value == '<STR_LIT>') {<EOL>","gt":"const duration = resolveTiming(value, errors).duration;"}
{"input":"<s> function constructTimingAst(value, errors) {<EOL>    let timings = null;<EOL>    if (value.hasOwnProperty('<STR_LIT>')) {<EOL>        timings = value;<EOL>    }<EOL>    else if (typeof value == '<STR_LIT>') {<EOL>         const duration = resolveTiming(value, errors).duration;<EOL>        return makeTimingAst(duration, <NUM_LIT>, '<STR_LIT>');<EOL>    }<EOL>    const strValue = value;<EOL>    const isDynamic = strValue.split(/\\s+/).some(v => v.charAt(<NUM_LIT>) ==","gt":"'<STR_LIT>' && v.charAt(<NUM_LIT>) == '<STR_LIT>');"}
{"input":"<s> function constructTimingAst(value, errors) {<EOL>    let timings = null;<EOL>    if (value.hasOwnProperty('<STR_LIT>')) {<EOL>        timings = value;<EOL>    }<EOL>    else if (typeof value == '<STR_LIT>') {<EOL>         const duration = resolveTiming(value, errors).duration;<EOL>        return makeTimingAst(duration, <NUM_LIT>, '<STR_LIT>');<EOL>    }<EOL>    const strValue = value;<EOL>    const isDynamic = strValue.split(/\\s+/).some(v => v.charAt(<NUM_LIT>) ==  '<STR_LIT>' && v.charAt(<NUM_LIT>) == '<STR_LIT>');<EOL>    if (isDynamic) {<EOL>        const ast = makeTimingAst(<NUM_LIT>, <NUM_LIT>, '<STR_LIT>');<EOL>        ast.dynamic = true;<EOL>        ast.strValue =","gt":"strValue;"}
{"input":"<s> <EOL>export default function scale(out, a, v) {<EOL>    const x = v[<NUM_LIT>];<EOL>    const y = v[<NUM_LIT>];<EOL>    const z = v[<NUM_LIT>];<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] *","gt":"x;"}
{"input":"<s> <EOL>export default function scale(out, a, v) {<EOL>    const x = v[<NUM_LIT>];<EOL>    const y = v[<NUM_LIT>];<EOL>    const z = v[<NUM_LIT>];<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] *  x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>","gt":"out[<NUM_LIT>] = a[<NUM_LIT>] * x;"}
{"input":"<s> <EOL>export default function scale(out, a, v) {<EOL>    const x = v[<NUM_LIT>];<EOL>    const y = v[<NUM_LIT>];<EOL>    const z = v[<NUM_LIT>];<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] *  x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>     out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>","gt":"out[<NUM_LIT>] = a[<NUM_LIT>] * y;"}
{"input":"<s> <EOL>export default function scale(out, a, v) {<EOL>    const x = v[<NUM_LIT>];<EOL>    const y = v[<NUM_LIT>];<EOL>    const z = v[<NUM_LIT>];<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] *  x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>     out[<NUM_LIT>] = a[<NUM_LIT>] * x;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>     out[<NUM_LIT>] = a[<NUM_LIT>] * y;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * z;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * z;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * z;<EOL>    out[<NUM_LIT>] = a[<NUM_LIT>] * z;<EOL>    out[<NUM_LIT>] =","gt":"a[<NUM_LIT>];"}
{"input":"<s> // Run through an array of numbers, emitting one value<EOL>// per second until it gets to the end of the array.<EOL>function doSequence(observer, arr, idx) {<EOL>    return setTimeout(() => {<EOL>        observer.next(arr[idx]);<EOL>        if (idx === arr.length -","gt":"<NUM_LIT>) {"}
{"input":"<s> //const loggerMiddleware = createLogger();<EOL>export default function configureStore() {<EOL>    let userService = new UserService();<EOL>    let questionService =","gt":"new QuestionService();"}
{"input":"<s> // Creates compressed archive of all files(recusively) inside sourceFolder directory (excluding the sourceFolder directly itself)<EOL>export function createArchive(sourceFolder, archiveType, archiveFile) {<EOL>    rootFolder = sourceFolder;<EOL>    if (tl.osType().match(/^Win/)) { // windows only<EOL>        var sourcePath = sourceFolder + \"<STR_LIT>\";<EOL>        if (archiveType == \"<STR_LIT>\") {<EOL>            sevenZipArchive(archiveFile, \"<STR_LIT>\", [","gt":"sourcePath]);"}
{"input":"<s> // Creates compressed archive of all files(recusively) inside sourceFolder directory (excluding the sourceFolder directly itself)<EOL>export function createArchive(sourceFolder, archiveType, archiveFile) {<EOL>    rootFolder = sourceFolder;<EOL>    if (tl.osType().match(/^Win/)) { // windows only<EOL>        var sourcePath = sourceFolder + \"<STR_LIT>\";<EOL>        if (archiveType == \"<STR_LIT>\") {<EOL>            sevenZipArchive(archiveFile, \"<STR_LIT>\", [ sourcePath]);<EOL>        }<EOL>        else if (archiveType == \"<STR_LIT>\") {<EOL>            var tarFile = archiveFile.substring(<NUM_LIT>, archiveFile.lastIndexOf('<STR_LIT>'));<EOL>","gt":"try {"}
{"input":"<s> // Creates compressed archive of all files(recusively) inside sourceFolder directory (excluding the sourceFolder directly itself)<EOL>export function createArchive(sourceFolder, archiveType, archiveFile) {<EOL>    rootFolder = sourceFolder;<EOL>    if (tl.osType().match(/^Win/)) { // windows only<EOL>        var sourcePath = sourceFolder + \"<STR_LIT>\";<EOL>        if (archiveType == \"<STR_LIT>\") {<EOL>            sevenZipArchive(archiveFile, \"<STR_LIT>\", [ sourcePath]);<EOL>        }<EOL>        else if (archiveType == \"<STR_LIT>\") {<EOL>            var tarFile = archiveFile.substring(<NUM_LIT>, archiveFile.lastIndexOf('<STR_LIT>'));<EOL>             try {<EOL>                // create the tar file<EOL>                sevenZipArchive(tarFile, \"<STR_LIT>\", [sourcePath]);<EOL>                // compress the tar file<EOL>                sevenZipArchive(archiveFile, \"<STR_LIT>\", [tarFile]);<EOL>            }<EOL>","gt":"finally {"}
{"input":"<s> // Creates compressed archive of all files(recusively) inside sourceFolder directory (excluding the sourceFolder directly itself)<EOL>export function createArchive(sourceFolder, archiveType, archiveFile) {<EOL>    rootFolder = sourceFolder;<EOL>    if (tl.osType().match(/^Win/)) { // windows only<EOL>        var sourcePath = sourceFolder + \"<STR_LIT>\";<EOL>        if (archiveType == \"<STR_LIT>\") {<EOL>            sevenZipArchive(archiveFile, \"<STR_LIT>\", [ sourcePath]);<EOL>        }<EOL>        else if (archiveType == \"<STR_LIT>\") {<EOL>            var tarFile = archiveFile.substring(<NUM_LIT>, archiveFile.lastIndexOf('<STR_LIT>'));<EOL>             try {<EOL>                // create the tar file<EOL>                sevenZipArchive(tarFile, \"<STR_LIT>\", [sourcePath]);<EOL>                // compress the tar file<EOL>                sevenZipArchive(archiveFile, \"<STR_LIT>\", [tarFile]);<EOL>            }<EOL>             finally {<EOL>                tl.rmRF(tarFile);<EOL>            }<EOL>        }<EOL>    }<EOL>    else { // not windows<EOL>        if (","gt":"archiveType == \"<STR_LIT>\") {"}
{"input":"<s> function getPm2File() {<EOL>    return path.join(","gt":"__dirname, '<STR_LIT>');"}
{"input":"<s> function resolveElementFromTarget(target) {<EOL>    switch (target) {<EOL>        case '<STR_LIT>':<EOL>            return document.body;<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function resolveElementFromTarget(target) {<EOL>    switch (target) {<EOL>        case '<STR_LIT>':<EOL>            return document.body;<EOL>        case  '<STR_LIT>':<EOL>            return document;<EOL>        case '<STR_LIT>':<EOL>            return window;<EOL>","gt":"default:"}
{"input":"<s> <EOL>function encodeEntities(value) {<EOL>    return value.replace(/&/g, '<STR_LIT>')<EOL>        .replace(SURROGATE_PAIR_REGEXP, function (match) {<EOL>        const","gt":"hi = match.charCodeAt(<NUM_LIT>);"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case","gt":"SyncUserDataSuccessType: {"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const","gt":"activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>","gt":"case SaveStressType: {"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action.","gt":"value };"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case","gt":"StressStatusType: {"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,","gt":"tasks, currentTask, currentStressId } = action.value;"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>","gt":"tasks: tasks,"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>                 tasks: tasks,<EOL>                currentRunStressName: currentTask,<EOL>                currentRunStressId: currentStressId<EOL>            };<EOL>        }<EOL>        case StressChunkDataType: {<EOL>            return {<EOL>                ...state,<EOL>                runState: action.","gt":"value.data"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>                 tasks: tasks,<EOL>                currentRunStressName: currentTask,<EOL>                currentRunStressId: currentStressId<EOL>            };<EOL>        }<EOL>        case StressChunkDataType: {<EOL>            return {<EOL>                ...state,<EOL>                runState: action. value.data<EOL>            };<EOL>        }<EOL>        case RunStressFulfillType: {<EOL>            const stressId = action.value.currentStressId;<EOL>            const stress = state.stresses[","gt":"stressId];"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>                 tasks: tasks,<EOL>                currentRunStressName: currentTask,<EOL>                currentRunStressId: currentStressId<EOL>            };<EOL>        }<EOL>        case StressChunkDataType: {<EOL>            return {<EOL>                ...state,<EOL>                runState: action. value.data<EOL>            };<EOL>        }<EOL>        case RunStressFulfillType: {<EOL>            const stressId = action.value.currentStressId;<EOL>            const stress = state.stresses[ stressId];<EOL>            if (!stress) {<EOL>","gt":"return state;"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>                 tasks: tasks,<EOL>                currentRunStressName: currentTask,<EOL>                currentRunStressId: currentStressId<EOL>            };<EOL>        }<EOL>        case StressChunkDataType: {<EOL>            return {<EOL>                ...state,<EOL>                runState: action. value.data<EOL>            };<EOL>        }<EOL>        case RunStressFulfillType: {<EOL>            const stressId = action.value.currentStressId;<EOL>            const stress = state.stresses[ stressId];<EOL>            if (!stress) {<EOL>                 return state;<EOL>            }<EOL>            const stresses = {<EOL>                ...state.stresses, [stressId]: {<EOL>                    ...stress,<EOL>                    stressRecords: [<EOL>                        {<EOL>                            stressId,<EOL>                            result: action.value.data,<EOL>","gt":"createDate: new Date()"}
{"input":"<s> export function stressTestState(state = stressDefaultValue, action) {<EOL>    switch (action.type) {<EOL>        case LoginSuccessType:<EOL>        case  SyncUserDataSuccessType: {<EOL>            const stresses = action.value.result.stresses;<EOL>            const stressIds = _.keys(stresses);<EOL>            const  activeStress = state.activeStress || (stressIds.length > <NUM_LIT> ? (stressIds[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>');<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>         case SaveStressType: {<EOL>            const stress = action.value.stress;<EOL>            return { ...state, stresses: { ...state.stresses, [stress.id]: stress }, activeStress: stress.id };<EOL>        }<EOL>        case ActiveStressType: {<EOL>            return { ...state, activeStress: action. value };<EOL>        }<EOL>        case DeleteStressType: {<EOL>            const stresses = { ...state.stresses };<EOL>            Reflect.deleteProperty(stresses, action.value);<EOL>            const activeStress = state.activeStress === action.value ? (_.keys(stresses).length > <NUM_LIT> ? (_.keys(stresses)[<NUM_LIT>] || '<STR_LIT>') : '<STR_LIT>') : state.activeStress;<EOL>            return { ...state, stresses, activeStress };<EOL>        }<EOL>        case  StressStatusType: {<EOL>            const { workerInfos,  tasks, currentTask, currentStressId } = action.value;<EOL>            if (currentTask) {<EOL>                tasks.unshift(currentStressId);<EOL>            }<EOL>            return {<EOL>                ...state,<EOL>                workerInfos: workerInfos,<EOL>                 tasks: tasks,<EOL>                currentRunStressName: currentTask,<EOL>                currentRunStressId: currentStressId<EOL>            };<EOL>        }<EOL>        case StressChunkDataType: {<EOL>            return {<EOL>                ...state,<EOL>                runState: action. value.data<EOL>            };<EOL>        }<EOL>        case RunStressFulfillType: {<EOL>            const stressId = action.value.currentStressId;<EOL>            const stress = state.stresses[ stressId];<EOL>            if (!stress) {<EOL>                 return state;<EOL>            }<EOL>            const stresses = {<EOL>                ...state.stresses, [stressId]: {<EOL>                    ...stress,<EOL>                    stressRecords: [<EOL>                        {<EOL>                            stressId,<EOL>                            result: action.value.data,<EOL>                             createDate: new Date()<EOL>                        },<EOL>                        ...stress.stressRecords<EOL>                    ],<EOL>                    lastRunDate: new Date()<EOL>                }<EOL>            };<EOL>            return {<EOL>                ...","gt":"state,"}
{"input":"<s> // Arrow function used in function<EOL>function someOtherFn() {<EOL>    var arr = (","gt":"n) => '<STR_LIT>' + n;"}
{"input":"<s> <EOL>export function generateOutfileCompilerOptions(outFile) {<EOL>    return {<EOL>","gt":"outFile,"}
{"input":"<s> // appends given text to file.<EOL>export function appendTextToFileSync(filePath, fileContent) {<EOL>    if (isFileExists(filePath)) {<EOL>        fs.appendFileSync(filePath,","gt":"fileContent);"}
{"input":"<s> export function* stopStress() {<EOL>    yield takeLatest(StopStressType,","gt":"function* (action) {"}
{"input":"<s> // Small helper functions<EOL><EOL>export function empty(s) {<EOL>    return (","gt":"s ? false : true);"}
{"input":"<s> export function SuccessResponse(name, description) {<EOL>","gt":"return () => { return; };"}
{"input":"<s> export function createDir(path) {<EOL>    return _recursiveMkDir(","gt":"path);"}
{"input":"<s> export function root(state = displayRecordsDefaultValue, action) {<EOL>    const intermediateState = combineReducers({<EOL>        activeKey,<EOL>","gt":"recordStates,"}
{"input":"<s> function parseTriggerCallbackName(triggerName) {<EOL>    const dotIndex = triggerName.indexOf('<STR_LIT>');<EOL>    const","gt":"trigger = triggerName.substring(<NUM_LIT>, dotIndex);"}
{"input":"<s> function broadcastMsgToUsers(type, data) {<EOL>","gt":"Log.info(`<STR_LIT>`);"}
{"input":"<s> export function* changePassword() {<EOL>    yield takeLatest(ChangePasswordType, function* (action) {<EOL>        try {<EOL>            yield put(actionCreator(ChangePasswordPendingType));<EOL>            const res = yield call(RequestManager.put, Urls.getUrl(`<STR_LIT>`), action.value);<EOL>            const body = yield","gt":"res.json();"}
{"input":"<s> export function* changePassword() {<EOL>    yield takeLatest(ChangePasswordType, function* (action) {<EOL>        try {<EOL>            yield put(actionCreator(ChangePasswordPendingType));<EOL>            const res = yield call(RequestManager.put, Urls.getUrl(`<STR_LIT>`), action.value);<EOL>            const body = yield  res.json();<EOL>            if (body.success) {<EOL>                yield put(actionCreator(ChangePasswordSuccessType, body.message));<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function* changePassword() {<EOL>    yield takeLatest(ChangePasswordType, function* (action) {<EOL>        try {<EOL>            yield put(actionCreator(ChangePasswordPendingType));<EOL>            const res = yield call(RequestManager.put, Urls.getUrl(`<STR_LIT>`), action.value);<EOL>            const body = yield  res.json();<EOL>            if (body.success) {<EOL>                yield put(actionCreator(ChangePasswordSuccessType, body.message));<EOL>            }<EOL>             else {<EOL>                yield put(actionCreator(ChangePasswordFailedType, body.message));<EOL>            }<EOL>        }<EOL>","gt":"catch (err) {"}
{"input":"<s> export function Post(value) {<EOL>","gt":"return () => { return; };"}
{"input":"<s> function handleMsg(msg) {<EOL>    switch (msg.type) {<EOL>        case StressMessageType.task:<EOL>            testCase = msg.testCase;<EOL>            send(createMsg(WorkerStatus.ready, StressMessageType.status));<EOL>","gt":"Log.info('<STR_LIT>');"}
{"input":"<s> function handleMsg(msg) {<EOL>    switch (msg.type) {<EOL>        case StressMessageType.task:<EOL>            testCase = msg.testCase;<EOL>            send(createMsg(WorkerStatus.ready, StressMessageType.status));<EOL>             Log.info('<STR_LIT>');<EOL>            break;<EOL>        case StressMessageType.start:<EOL>            Log.info(","gt":"'<STR_LIT>');"}
{"input":"<s> function handleMsg(msg) {<EOL>    switch (msg.type) {<EOL>        case StressMessageType.task:<EOL>            testCase = msg.testCase;<EOL>            send(createMsg(WorkerStatus.ready, StressMessageType.status));<EOL>             Log.info('<STR_LIT>');<EOL>            break;<EOL>        case StressMessageType.start:<EOL>            Log.info( '<STR_LIT>');<EOL>            send(createMsg(WorkerStatus.working, StressMessageType.status));<EOL>            run();<EOL>","gt":"break;"}
{"input":"<s> function handleMsg(msg) {<EOL>    switch (msg.type) {<EOL>        case StressMessageType.task:<EOL>            testCase = msg.testCase;<EOL>            send(createMsg(WorkerStatus.ready, StressMessageType.status));<EOL>             Log.info('<STR_LIT>');<EOL>            break;<EOL>        case StressMessageType.start:<EOL>            Log.info( '<STR_LIT>');<EOL>            send(createMsg(WorkerStatus.working, StressMessageType.status));<EOL>            run();<EOL>             break;<EOL>        case StressMessageType.fileStart:<EOL>            Log.info('<STR_LIT>');<EOL>","gt":"willReceiveFile = true;"}
{"input":"<s> function handleMsg(msg) {<EOL>    switch (msg.type) {<EOL>        case StressMessageType.task:<EOL>            testCase = msg.testCase;<EOL>            send(createMsg(WorkerStatus.ready, StressMessageType.status));<EOL>             Log.info('<STR_LIT>');<EOL>            break;<EOL>        case StressMessageType.start:<EOL>            Log.info( '<STR_LIT>');<EOL>            send(createMsg(WorkerStatus.working, StressMessageType.status));<EOL>            run();<EOL>             break;<EOL>        case StressMessageType.fileStart:<EOL>            Log.info('<STR_LIT>');<EOL>             willReceiveFile = true;<EOL>            break;<EOL>        case StressMessageType.finish:<EOL>            Log.info('<STR_LIT>');<EOL>            finish();<EOL>            break;<EOL>","gt":"case StressMessageType.stop:"}
{"input":"<s> export function throwDialogContentAlreadyAttachedError() {<EOL>    throw","gt":"Error('<STR_LIT>');"}
{"input":"<s> function getNodeDescription(node) {<EOL>    const symbol = MetadataGenerator.current.typeChecker.getSymbolAtLocation(node.name);<EOL>    if (!symbol) {<EOL>        return undefined;<EOL>    }<EOL>    <EOL>    if (node.kind === ts.SyntaxKind.Parameter) {<EOL>        // TypeScript won't parse jsdoc if the flag is 4, i.e. 'Property'<EOL>        symbol.flags = <NUM_LIT>;<EOL>    }<EOL>    const comments = symbol.getDocumentationComment(undefined);<EOL>    if (comments.","gt":"length) {"}
{"input":"<s> export function setupTestingRouter(urlSerializer, childrenOutletContexts, location, loader, compiler, injector, routes) {<EOL>    return new Router(null, urlSerializer,","gt":"childrenOutletContexts, location, injector, loader, compiler, ɵflatten(routes));"}
{"input":"<s> export function createDom(component) {<EOL>    component.data =","gt":"buildTable();"}
{"input":"<s> function createMessageBus(zone) {<EOL>    let sink = new ElectronMessageBusSink(electron['<STR_LIT>']);<EOL>","gt":"let source = new ElectronMessageBusSource(electron['<STR_LIT>']);"}
{"input":"<s> export function _getAngularFireAuth(app) {<EOL>    return","gt":"new AngularFireAuth(app);"}
{"input":"<s> export function extractStyleParams(value) {<EOL>    let params = [];<EOL>    if (typeof value === '<STR_LIT>') {<EOL>        const val = value.toString();<EOL>","gt":"let match;"}
{"input":"<s> export function extractStyleParams(value) {<EOL>    let params = [];<EOL>    if (typeof value === '<STR_LIT>') {<EOL>        const val = value.toString();<EOL>         let match;<EOL>        while (match = PARAM_REGEX.exec(val)) {<EOL>            params.push(match[<NUM_LIT>]);<EOL>        }<EOL>        PARAM_REGEX.","gt":"lastIndex = <NUM_LIT>;"}
{"input":"<s> function uploadSymbols(uploadUrl, file, userAgent) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    let defer = Q.defer();<EOL>    tl.debug(`<STR_LIT>`);<EOL>    let stat = fs.statSync(file);<EOL>    let headers = {<EOL>","gt":"\"<STR_LIT>\": \"<STR_LIT>\","}
{"input":"<s> function uploadSymbols(uploadUrl, file, userAgent) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    let defer = Q.defer();<EOL>    tl.debug(`<STR_LIT>`);<EOL>    let stat = fs.statSync(file);<EOL>    let headers = {<EOL>         \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": stat.size,<EOL>        \"<STR_LIT>\": userAgent,<EOL>        \"<STR_LIT>\": \"<STR_LIT>\"<EOL>    };<EOL>    fs.createReadStream(file).pipe(request.put({ url: uploadUrl, headers: headers }, (err, res, body) => {<EOL>        responseHandler(defer, err, res, body, () => {<EOL>            tl.","gt":"debug('<STR_LIT>');"}
{"input":"<s> function tarExtract(file, destinationFolder) {<EOL>    console.log(tl.loc('<STR_LIT>', file));<EOL>    if (typeof xpTarLocation == \"<STR_LIT>\") {<EOL>        xpTarLocation = tl.which('<STR_LIT>', true);<EOL>    }<EOL>    var tar = tl.tool(xpTarLocation);<EOL>    tar.arg('<STR_LIT>'); // tar will correctly handle compression types outlined in isTar()<EOL>    tar.arg(file);<EOL>    tar.arg(","gt":"'<STR_LIT>');"}
{"input":"<s> function addRouterModule(options) {<EOL>    return (host) => {<EOL>        const config = getConfig(host);<EOL>        const app = getAppFromConfig(config, options.clientApp || '<STR_LIT>');<EOL>        if (app === null) {<EOL>            throw new SchematicsException(formatMissingAppMsg(","gt":"'<STR_LIT>', options.clientApp));"}
{"input":"<s> function addRouterModule(options) {<EOL>    return (host) => {<EOL>        const config = getConfig(host);<EOL>        const app = getAppFromConfig(config, options.clientApp || '<STR_LIT>');<EOL>        if (app === null) {<EOL>            throw new SchematicsException(formatMissingAppMsg( '<STR_LIT>', options.clientApp));<EOL>        }<EOL>        const modulePath = getAppModulePath(host, app);<EOL>        const moduleSource = getSourceFile(host, modulePath);<EOL>        const changes = addImportToModule(moduleSource,","gt":"modulePath, '<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> function getkubectlDownloadURL(version) {<EOL>    switch (os.type()) {<EOL>        case '<STR_LIT>':<EOL>            return util.format(\"<STR_LIT>\",","gt":"version);"}
{"input":"<s> <EOL>export function sequence(steps, options = null) {<EOL>    return { type: AnimationMetadataType.Sequence, steps,","gt":"options };"}
{"input":"<s> function destroyDom() {<EOL>","gt":"table.data = emptyTable;"}
{"input":"<s> function addRange(to, from) {<EOL>    if (to && from) {<EOL>        for (","gt":"const v of from) {"}
{"input":"<s> // Extract sorted Category[] from resource JSON data<EOL>function mkCategories(categoryJson) {<EOL>    return Object.keys(categoryJson).map(catKey => {<EOL>        const cat = categoryJson[catKey];<EOL>        return {<EOL>","gt":"id: makeId(catKey),"}
{"input":"<s> // Extract sorted Category[] from resource JSON data<EOL>function mkCategories(categoryJson) {<EOL>    return Object.keys(categoryJson).map(catKey => {<EOL>        const cat = categoryJson[catKey];<EOL>        return {<EOL>             id: makeId(catKey),<EOL>            title: catKey,<EOL>            order: cat.order,<EOL>            subCategories: mkSubCategories(cat.subCategories, catKey)<EOL>        }","gt":";"}
{"input":"<s> <EOL>export function ngcCompile(flags) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const ngcPath = resolvePath('<STR_LIT>');<EOL>        const childProcess =","gt":"spawn(ngcPath, flags, { shell: true });"}
{"input":"<s> function f2(x, y) {<EOL>    x = y;<EOL>","gt":"y = x;"}
{"input":"<s> export function getColorRegistry() {<EOL>    return","gt":"colorRegistry;"}
{"input":"<s> function kvcrAsString(kvcr) {<EOL>    return looseIdentical(kvcr.previousValue, kvcr.currentValue) ?<EOL>        stringify(kvcr.","gt":"key) :"}
{"input":"<s> function createTestComponent(template) {<EOL>    return TestBed.","gt":"overrideComponent(TestComponent, { set: { template: template } })"}
{"input":"<s> <EOL>export function getSortInvalidDirectionError(direction) {<EOL>    return Error(","gt":"direction} is not a valid sort direction ('<STR_LIT>' or '<STR_LIT>').`<STR_LIT>;"}
{"input":"<s> export function genStubs() {<EOL>    console.log(\"<STR_LIT>\");<EOL>    usageCounts = loadJson(\"<STR_LIT>\");<EOL>    var libPath =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function genStubs() {<EOL>    console.log(\"<STR_LIT>\");<EOL>    usageCounts = loadJson(\"<STR_LIT>\");<EOL>    var libPath =  \"<STR_LIT>\";<EOL>    fs.readdirSync(libPath).forEach((fn) => {<EOL>        fileCnt++;<EOL>        processFile(path.join(libPath, fn));<EOL>    });<EOL>    var srcPaths = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>    srcPaths.forEach(pth => {<EOL>        fs.readdirSync(pth).forEach((fn) => {<EOL>","gt":"fileCnt++;"}
{"input":"<s> export function genStubs() {<EOL>    console.log(\"<STR_LIT>\");<EOL>    usageCounts = loadJson(\"<STR_LIT>\");<EOL>    var libPath =  \"<STR_LIT>\";<EOL>    fs.readdirSync(libPath).forEach((fn) => {<EOL>        fileCnt++;<EOL>        processFile(path.join(libPath, fn));<EOL>    });<EOL>    var srcPaths = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>    srcPaths.forEach(pth => {<EOL>        fs.readdirSync(pth).forEach((fn) => {<EOL>             fileCnt++;<EOL>            processLf(path.join(pth,","gt":"fn));"}
{"input":"<s> export function genStubs() {<EOL>    console.log(\"<STR_LIT>\");<EOL>    usageCounts = loadJson(\"<STR_LIT>\");<EOL>    var libPath =  \"<STR_LIT>\";<EOL>    fs.readdirSync(libPath).forEach((fn) => {<EOL>        fileCnt++;<EOL>        processFile(path.join(libPath, fn));<EOL>    });<EOL>    var srcPaths = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>    srcPaths.forEach(pth => {<EOL>        fs.readdirSync(pth).forEach((fn) => {<EOL>             fileCnt++;<EOL>            processLf(path.join(pth,  fn));<EOL>        });<EOL>    });<EOL>","gt":"processLf(\"<STR_LIT>\");"}
{"input":"<s> export function genStubs() {<EOL>    console.log(\"<STR_LIT>\");<EOL>    usageCounts = loadJson(\"<STR_LIT>\");<EOL>    var libPath =  \"<STR_LIT>\";<EOL>    fs.readdirSync(libPath).forEach((fn) => {<EOL>        fileCnt++;<EOL>        processFile(path.join(libPath, fn));<EOL>    });<EOL>    var srcPaths = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>    srcPaths.forEach(pth => {<EOL>        fs.readdirSync(pth).forEach((fn) => {<EOL>             fileCnt++;<EOL>            processLf(path.join(pth,  fn));<EOL>        });<EOL>    });<EOL>     processLf(\"<STR_LIT>\");<EOL>    [\"<STR_LIT>\"].forEach(pth => {<EOL>        fs.readdirSync(pth).forEach((fn) => {<EOL>            fileCnt++;<EOL>            processLib(path.join(pth, fn));<EOL>        });<EOL>    });<EOL>    Object.keys(translationHelpStrings).forEach(k => translationStrings[k] = <NUM_LIT>);<EOL>    var tr = Object.keys(translationStrings);<EOL>    tr.sort();<EOL>    <EOL>    console.log('<STR_LIT>' + tr.length);<EOL>    fs.writeFileSync(\"<STR_LIT>\", JSON.stringify({ strings: tr }, null, <NUM_LIT>));<EOL>    helpDefinitions += \"<STR_LIT>\" + JSON.stringify(loadText(\"<STR_LIT>\").replace(","gt":"/\\r/g, \"<STR_LIT>\")) + \"<STR_LIT>\";"}
{"input":"<s> export function registerEditorContribution(ctor) {<EOL>    EditorContributionRegistry.","gt":"INSTANCE.registerEditorContribution(ctor);"}
{"input":"<s> <EOL>export function registerDropdown() {<EOL>    if (!ko.bindingHandlers.msoptions)<EOL>        addMsDropdownBindingHandler();<EOL>    if (!ko.components.isRegistered(","gt":"DROPDOWN_COMPONENT)) {"}
{"input":"<s> <EOL>export function validateOptions(opts) {<EOL>    if (!opts.appRoot || !opts.appRoot.length) {<EOL>        throw new Error(","gt":"'<STR_LIT>' +"}
{"input":"<s> <EOL>export function validateCache() {<EOL>    const exists = [];<EOL>    const unused = [];<EOL>    for (const fileName of iterableToArray(missingCache.keys())) {<EOL>        if (","gt":"fs.existsSync(fileName)) {"}
{"input":"<s> // Note: This is an internal property in TypeScript. Use it only for assertions and tests.<EOL>export function tsStructureIsReused(program) {<EOL>    return","gt":"program.structureIsReused;"}
{"input":"<s> <EOL>function timeZoneGetter(width) {<EOL>    return function (date, locale, offset) {<EOL>        const zone = -<NUM_LIT> * offset;<EOL>        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);<EOL>        const hours = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);<EOL>        switch (","gt":"width) {"}
{"input":"<s> <EOL>function timeZoneGetter(width) {<EOL>    return function (date, locale, offset) {<EOL>        const zone = -<NUM_LIT> * offset;<EOL>        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);<EOL>        const hours = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);<EOL>        switch ( width) {<EOL>            case ZoneWidth.Short:<EOL>                return ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) +<EOL>","gt":"padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);"}
{"input":"<s> <EOL>function timeZoneGetter(width) {<EOL>    return function (date, locale, offset) {<EOL>        const zone = -<NUM_LIT> * offset;<EOL>        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);<EOL>        const hours = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);<EOL>        switch ( width) {<EOL>            case ZoneWidth.Short:<EOL>                return ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) +<EOL>                     padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);<EOL>            case ZoneWidth.ShortGMT:<EOL>                return '<STR_LIT>' + ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign);<EOL>            case ZoneWidth.","gt":"Long:"}
{"input":"<s> <EOL>function timeZoneGetter(width) {<EOL>    return function (date, locale, offset) {<EOL>        const zone = -<NUM_LIT> * offset;<EOL>        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);<EOL>        const hours = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);<EOL>        switch ( width) {<EOL>            case ZoneWidth.Short:<EOL>                return ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) +<EOL>                     padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);<EOL>            case ZoneWidth.ShortGMT:<EOL>                return '<STR_LIT>' + ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign);<EOL>            case ZoneWidth. Long:<EOL>                return '<STR_LIT>' + ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) + '<STR_LIT>' +<EOL>                    padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);<EOL>","gt":"case ZoneWidth.Extended:"}
{"input":"<s> <EOL>function timeZoneGetter(width) {<EOL>    return function (date, locale, offset) {<EOL>        const zone = -<NUM_LIT> * offset;<EOL>        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);<EOL>        const hours = zone > <NUM_LIT> ? Math.floor(zone / <NUM_LIT>) : Math.ceil(zone / <NUM_LIT>);<EOL>        switch ( width) {<EOL>            case ZoneWidth.Short:<EOL>                return ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) +<EOL>                     padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);<EOL>            case ZoneWidth.ShortGMT:<EOL>                return '<STR_LIT>' + ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign);<EOL>            case ZoneWidth. Long:<EOL>                return '<STR_LIT>' + ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') + padNumber(hours, <NUM_LIT>, minusSign) + '<STR_LIT>' +<EOL>                    padNumber(Math.abs(zone % <NUM_LIT>), <NUM_LIT>, minusSign);<EOL>             case ZoneWidth.Extended:<EOL>                if (offset === <NUM_LIT>) {<EOL>                    return '<STR_LIT>';<EOL>                }<EOL>                else {<EOL>                    return ((zone >= <NUM_LIT>) ? '<STR_LIT>' : '<STR_LIT>') +","gt":"padNumber(hours, <NUM_LIT>, minusSign) + '<STR_LIT>' +"}
{"input":"<s> <EOL>export function getBasicHandler(username, password) {<EOL>    return","gt":"new basicm.BasicCredentialHandler(username, password);"}
{"input":"<s> <EOL>export function select(queryName) {<EOL>","gt":"return (target, propertyKey) => {"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>","gt":"expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =","gt":"stepHeaders[<NUM_LIT>].nativeElement;"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        .","gt":"toBe(<NUM_LIT>, '<STR_LIT>');"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        . toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', ENTER);<EOL>","gt":"fixture.detectChanges();"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        . toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', ENTER);<EOL>     fixture.detectChanges();<EOL>","gt":"expect(stepperComponent._focusIndex)"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        . toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', ENTER);<EOL>     fixture.detectChanges();<EOL>     expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].","gt":"nativeElement;"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        . toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', ENTER);<EOL>     fixture.detectChanges();<EOL>     expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>]. nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', prevKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    // When the focus is on the last step and right arrow key is pressed, the focus should cycle<EOL>    // through to the first step.<EOL>    stepperComponent._focusIndex = <NUM_LIT>;<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>',","gt":"SPACE);"}
{"input":"<s> <EOL>function assertCorrectKeyboardInteraction(fixture, stepHeaders, orientation) {<EOL>    let stepperComponent = fixture.debugElement.query(By.directive(MatStepper)).componentInstance;<EOL>    let nextKey = orientation === '<STR_LIT>' ? DOWN_ARROW : RIGHT_ARROW;<EOL>    let prevKey = orientation === '<STR_LIT>' ? UP_ARROW : LEFT_ARROW;<EOL>     expect(stepperComponent._focusIndex).toBe(<NUM_LIT>);<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>);<EOL>    let stepHeaderEl =  stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        . toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', ENTER);<EOL>     fixture.detectChanges();<EOL>     expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>]. nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', prevKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    // When the focus is on the last step and right arrow key is pressed, the focus should cycle<EOL>    // through to the first step.<EOL>    stepperComponent._focusIndex = <NUM_LIT>;<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>', nextKey);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    stepHeaderEl = stepHeaders[<NUM_LIT>].nativeElement;<EOL>    dispatchKeyboardEvent(stepHeaderEl, '<STR_LIT>',  SPACE);<EOL>    fixture.detectChanges();<EOL>    expect(stepperComponent._focusIndex)<EOL>        .toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    expect(stepperComponent.selectedIndex)<EOL>        .toBe(<NUM_LIT>,","gt":"'<STR_LIT>');"}
{"input":"<s> // require dependencies within the target project<EOL>export function requireProjectModule(root, moduleName) {<EOL>    return require(resolve.sync(moduleName, {","gt":"basedir: root }));"}
{"input":"<s> export function isSortedMap(arg) {<EOL>    return isObject(arg) &&","gt":"arg instanceof SortedMapStructure;"}
{"input":"<s> function f4() {<EOL>    const rec = { foo: \"<STR_LIT>\", bar: \"<STR_LIT>\",","gt":"baz: \"<STR_LIT>\" };"}
{"input":"<s> export function rootView(arg) {<EOL>    var view = arg instanceof View ? arg : firstActiveView(arg);<EOL>    while (","gt":"view && view.parent && view.parent.parent)"}
{"input":"<s> export function deleteTasksDirectory(agentFolder) {<EOL>","gt":"var config = createTestConfig();"}
{"input":"<s> function commitSymbols(apiServer, apiVersion, appSlug, symbol_upload_id, token, userAgent) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    let defer = Q.defer();<EOL>    let commitSymbolsUrl = `<STR_LIT>`;<EOL>    tl.debug(`<STR_LIT>`);<EOL>    let","gt":"headers = {"}
{"input":"<s> function commitSymbols(apiServer, apiVersion, appSlug, symbol_upload_id, token, userAgent) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    let defer = Q.defer();<EOL>    let commitSymbolsUrl = `<STR_LIT>`;<EOL>    tl.debug(`<STR_LIT>`);<EOL>    let  headers = {<EOL>        \"<STR_LIT>\": token,<EOL>        \"<STR_LIT>\": userAgent,<EOL>        \"<STR_LIT>\": \"<STR_LIT>\"<EOL>    };<EOL>    let commitBody = { \"<STR_LIT>\": \"<STR_LIT>\" };<EOL>    request.patch({ url: commitSymbolsUrl, headers: headers, json: commitBody }, (err, res, body) => {<EOL>        responseHandler(defer, err, res, body, () => {<EOL>            defer.","gt":"resolve();"}
{"input":"<s> function greeter(person) {<EOL>    return '<STR_LIT>' + person.firstName + '<STR_LIT>' + person.","gt":"lastName;"}
{"input":"<s> export function searchQuestions(searchText, categoryFilter) {<EOL>    return (dispatch) => {<EOL>        dispatch(updateSearchText(","gt":"searchText));"}
{"input":"<s> export function addList(spHttpClient, currentWebUrl, listTitle) {<EOL>    return async (dispatch) => {<EOL>        //Fire the 'request' action if you want to update the state to specify that an ajax request is being made.<EOL>        //This can be used to show a loading screen or a spinner.<EOL>        dispatch(addListRequest());<EOL>        const spOpts = {<EOL>","gt":"body: `<STR_LIT>`"}
{"input":"<s> export function addList(spHttpClient, currentWebUrl, listTitle) {<EOL>    return async (dispatch) => {<EOL>        //Fire the 'request' action if you want to update the state to specify that an ajax request is being made.<EOL>        //This can be used to show a loading screen or a spinner.<EOL>        dispatch(addListRequest());<EOL>        const spOpts = {<EOL>             body: `<STR_LIT>`<EOL>        };<EOL>        try {<EOL>            const response = await spHttpClient.post(`<STR_LIT>`, SPHttpClient.configurations.v1, spOpts);<EOL>","gt":"const list = await response.json();"}
{"input":"<s> export function addList(spHttpClient, currentWebUrl, listTitle) {<EOL>    return async (dispatch) => {<EOL>        //Fire the 'request' action if you want to update the state to specify that an ajax request is being made.<EOL>        //This can be used to show a loading screen or a spinner.<EOL>        dispatch(addListRequest());<EOL>        const spOpts = {<EOL>             body: `<STR_LIT>`<EOL>        };<EOL>        try {<EOL>            const response = await spHttpClient.post(`<STR_LIT>`, SPHttpClient.configurations.v1, spOpts);<EOL>             const list = await response.json();<EOL>            //Fire the 'success' action when you want to update the state based on a successfull request.  <EOL>            dispatch(addListSuccess(list.Title));<EOL>        }<EOL>","gt":"catch (error) {"}
{"input":"<s> function resolve(...filePart) {<EOL>    return","gt":"path.resolve(__dirname, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', ...filePart);"}
{"input":"<s> function addDevHeaders(res) {<EOL>","gt":"res.setHeader('<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function cloneHashSet(set, mutability) {<EOL>    if (isUndefined(mutability))<EOL>        mutability = isMutable(","gt":"set);"}
{"input":"<s> export function generateCssString(meta, minify, stylable, assetsIds) {<EOL>    const css = meta<EOL>        .outputAst.toString()<EOL>        .replace(/__stylable_url_asset_(.*?)__/g, (_$0, $1) =>","gt":"assetsIds[Number($1)]);"}
{"input":"<s> function testMoveCaretLeftCommand(lines, selection, expectedLines, expectedSelection) {<EOL>    testCommand(","gt":"lines, null, selection, (sel) => new MoveCaretCommand(sel, true), expectedLines, expectedSelection);"}
{"input":"<s> export function main() {<EOL>    let component;<EOL>    if (typeof window !== '<STR_LIT>') {<EOL>","gt":"component = renderComponent(LargeTableComponent);"}
{"input":"<s> export function getRawMessage(error) {<EOL>","gt":"return error[ERROR_RAW_MESSAGE];"}
{"input":"<s> function getPlatform() {<EOL>","gt":"return PlatformInformation.GetCurrent().then(platformInfo => {"}
{"input":"<s> function loginIsEmptyGroupValidator(c) {<EOL>    return c.controls['<STR_LIT>'].value == '<STR_LIT>' ? {","gt":"'<STR_LIT>': true } : null;"}
{"input":"<s> function getPageStubs() {<EOL>","gt":"return {"}
{"input":"<s> export function headSize(arg, t) {<EOL>    return headSlot(arg,","gt":"t).slots.length;"}
{"input":"<s> export function resolveGlobalYarnPath(tracer) {<EOL>    let yarnCommand = isWindows() ? '<STR_LIT>' : '<STR_LIT>';<EOL>    let results = spawnSync(yarnCommand, ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], {<EOL>        encoding: '<STR_LIT>'<EOL>    });<EOL>    let stdout =","gt":"results.stdout;"}
{"input":"<s> export function resolveGlobalYarnPath(tracer) {<EOL>    let yarnCommand = isWindows() ? '<STR_LIT>' : '<STR_LIT>';<EOL>    let results = spawnSync(yarnCommand, ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], {<EOL>        encoding: '<STR_LIT>'<EOL>    });<EOL>    let stdout =  results.stdout;<EOL>    if (!stdout) {<EOL>        if (tracer) {<EOL>            tracer(`<STR_LIT>`);<EOL>            if (","gt":"results.stderr) {"}
{"input":"<s> export function resolveGlobalYarnPath(tracer) {<EOL>    let yarnCommand = isWindows() ? '<STR_LIT>' : '<STR_LIT>';<EOL>    let results = spawnSync(yarnCommand, ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], {<EOL>        encoding: '<STR_LIT>'<EOL>    });<EOL>    let stdout =  results.stdout;<EOL>    if (!stdout) {<EOL>        if (tracer) {<EOL>            tracer(`<STR_LIT>`);<EOL>            if ( results.stderr) {<EOL>                tracer(results.stderr);<EOL>            }<EOL>        }<EOL>        return undefined;<EOL>    }<EOL>    let lines =","gt":"stdout.trim().split(/\\r?\\n/);"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.","gt":"hostedmodels = {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,","gt":"callback) {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>","gt":"const rootUrl = options.rootUrl || '<STR_LIT>';"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .","gt":"replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>","gt":"return createAPIRequest(parameters, callback);"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>","gt":"options: Object.assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,","gt":"'<STR_LIT>'),"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:","gt":"self"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if (","gt":"typeof options === '<STR_LIT>') {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:","gt":"Object.assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: (","gt":"rootUrl + '<STR_LIT>')"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>","gt":"method: '<STR_LIT>'"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.","gt":"assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [","gt":"'<STR_LIT>'],"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>","gt":"context: self"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback =","gt":"options;"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback =  options;<EOL>                options = {};<EOL>            }<EOL>            options =","gt":"options || {};"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback =  options;<EOL>                options = {};<EOL>            }<EOL>            options =  options || {};<EOL>            const rootUrl = options.","gt":"rootUrl || '<STR_LIT>';"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params, options,  callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>             const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        . replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>             return createAPIRequest(parameters, callback);<EOL>        }<EOL>    };<EOL>    self.trainedmodels = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context:  self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options:  Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                     method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback =  options;<EOL>                options = {};<EOL>            }<EOL>            options =  options || {};<EOL>            const rootUrl = options. rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (","gt":"rootUrl + '<STR_LIT>')"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>","gt":"debuggees: {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>","gt":"if (typeof options === '<STR_LIT>') {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const","gt":"parameters = {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (","gt":"rootUrl + '<STR_LIT>')"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:","gt":"self"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>","gt":"const rootUrl = options.rootUrl || '<STR_LIT>';"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>","gt":"options: Object.assign({"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>","gt":"context: self"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.","gt":"rootUrl ||"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>","gt":"const parameters = {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [","gt":"'<STR_LIT>', '<STR_LIT>'],"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>","gt":"debuggees: {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =","gt":"options || {};"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>","gt":"const parameters = {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,","gt":"'<STR_LIT>'),"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>","gt":"pathParams: [],"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete(","gt":"params, options, callback) {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (","gt":"rootUrl +"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>","gt":"pathParams: ['<STR_LIT>',"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',","gt":"'<STR_LIT>'],"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>","gt":"context: self"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>","gt":"options: Object.assign({"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>","gt":"'<STR_LIT>')"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                 '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                        context:","gt":"self"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                 '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                        context:  self<EOL>                    };<EOL>                    return","gt":"createAPIRequest(parameters, callback);"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                 '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                        context:  self<EOL>                    };<EOL>                    return  createAPIRequest(parameters, callback);<EOL>                },<EOL>                set(params, options, callback) {<EOL>                    if (typeof","gt":"options === '<STR_LIT>') {"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                 '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                        context:  self<EOL>                    };<EOL>                    return  createAPIRequest(parameters, callback);<EOL>                },<EOL>                set(params, options, callback) {<EOL>                    if (typeof  options === '<STR_LIT>') {<EOL>","gt":"callback = options;"}
{"input":"<s> <EOL>function Clouddebugger(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.controller = {<EOL>         debuggees: {<EOL>            <EOL>            register(params, options, callback) {<EOL>                 if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options = options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                const  parameters = {<EOL>                    options: Object.assign({<EOL>                        url: ( rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                    pathParams: [],<EOL>                    context:  self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                     const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                update(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options. rootUrl ||  '<STR_LIT>';<EOL>                     const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: [ '<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                }<EOL>            }<EOL>        }<EOL>    };<EOL>    self.debugger = {<EOL>         debuggees: {<EOL>            <EOL>            list(params, options, callback) {<EOL>                if (typeof options === '<STR_LIT>') {<EOL>                    callback = options;<EOL>                    options = {};<EOL>                }<EOL>                options =  options || {};<EOL>                const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                 const parameters = {<EOL>                    options: Object.assign({<EOL>                        url: (rootUrl + '<STR_LIT>')<EOL>                            .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                        method: '<STR_LIT>'<EOL>                    }, options),<EOL>                    params,<EOL>                    requiredParams: [],<EOL>                     pathParams: [],<EOL>                    context: self<EOL>                };<EOL>                return createAPIRequest(parameters, callback);<EOL>            },<EOL>            breakpoints: {<EOL>                <EOL>                delete( params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: ( rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                         pathParams: ['<STR_LIT>',  '<STR_LIT>'],<EOL>                         context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                get(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                         options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                        options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>', '<STR_LIT>'],<EOL>                        context: self<EOL>                    };<EOL>                    return createAPIRequest(parameters, callback);<EOL>                },<EOL>                list(params, options, callback) {<EOL>                    if (typeof options === '<STR_LIT>') {<EOL>                        callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>                    const parameters = {<EOL>                         options: Object.assign({<EOL>                            url: (rootUrl +<EOL>                                 '<STR_LIT>')<EOL>                                .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                            method: '<STR_LIT>'<EOL>                        }, options),<EOL>                        params,<EOL>                        requiredParams: ['<STR_LIT>'],<EOL>                        pathParams: ['<STR_LIT>'],<EOL>                        context:  self<EOL>                    };<EOL>                    return  createAPIRequest(parameters, callback);<EOL>                },<EOL>                set(params, options, callback) {<EOL>                    if (typeof  options === '<STR_LIT>') {<EOL>                         callback = options;<EOL>                        options = {};<EOL>                    }<EOL>                    options = options || {};<EOL>                    const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>","gt":"const parameters = {"}
{"input":"<s> export function firstValue(map) {<EOL>    const item = getFirstItem(","gt":"map._sorted);"}
{"input":"<s> export function flatMatch(chai, util) {<EOL>    const { flag } = util;<EOL>    chai.Assertion.addMethod('<STR_LIT>', function (obj, maxDepth =","gt":"<NUM_LIT>) {"}
{"input":"<s> <EOL>export function createReducer(initialState, handlers) {<EOL>    return createReducerFromObject(initialState, mapValues(handlers, (value) => (state, action) => reducerCreator({<EOL>","gt":"state,"}
{"input":"<s> <EOL>export function isExt(path, ext) {<EOL>    return path && ext && path.indexOf(ext, path.","gt":"length - ext.length) !== -<NUM_LIT>;"}
{"input":"<s> export function generateModuleSource(stylableResult, moduleId, beforeModule, renderer, createFunction, createRenderableFunction, css, depth, exportsArgument, afterModule, renderableOnly = false) {<EOL>    const { exports, meta } = stylableResult;<EOL>    const localsExports = JSON.stringify(exports);<EOL>    const namespace = JSON.stringify(meta.","gt":"namespace);"}
{"input":"<s> export function set(index, value, list) {<EOL>","gt":"list = modify(list);"}
{"input":"<s> <EOL>function isNumeric(input) {<EOL>    return input !==","gt":"undefined"}
{"input":"<s> export function total(...numbers) {<EOL>    return numbers.reduce((a,","gt":"b) => a + b);"}
{"input":"<s> function factoryMethod(defaults) {<EOL>    return (overrides) =>","gt":"Object.assign({}, defaults(), overrides);"}
{"input":"<s> function supportMediaQuery() {<EOL>    const _global = typeof window === '<STR_LIT>' && window ||","gt":"typeof self === '<STR_LIT>' && self || global;"}
{"input":"<s> export function configureTestingModule(mock, testCpt, declarations = [], modules = []) {<EOL>    const tb = TestBed.configureTestingModule({<EOL>        imports: [ReactNativeAndroidModule].concat(modules),<EOL>        providers: getTestingProviders(","gt":"mock, testCpt),"}
{"input":"<s> export function render(text, rL) {<EOL>    if (needsInit(rL)) {<EOL>","gt":"init(rL);"}
{"input":"<s> <EOL>export function PropertyFieldListPicker(targetProperty, properties) {<EOL>    //Create an internal properties object from the given properties<EOL>    const newProperties = {<EOL>        label: properties.label,<EOL>        targetProperty: targetProperty,<EOL>        context: properties.","gt":"context,"}
{"input":"<s> <EOL>export function PropertyFieldListPicker(targetProperty, properties) {<EOL>    //Create an internal properties object from the given properties<EOL>    const newProperties = {<EOL>        label: properties.label,<EOL>        targetProperty: targetProperty,<EOL>        context: properties. context,<EOL>        selectedList: typeof properties.selectedList === '<STR_LIT>' ? properties.selectedList : null,<EOL>        selectedLists: typeof properties.selectedList !== '<STR_LIT>' ? properties.selectedList : null,<EOL>","gt":"baseTemplate: properties.baseTemplate,"}
{"input":"<s> <EOL>export function PropertyFieldListPicker(targetProperty, properties) {<EOL>    //Create an internal properties object from the given properties<EOL>    const newProperties = {<EOL>        label: properties.label,<EOL>        targetProperty: targetProperty,<EOL>        context: properties. context,<EOL>        selectedList: typeof properties.selectedList === '<STR_LIT>' ? properties.selectedList : null,<EOL>        selectedLists: typeof properties.selectedList !== '<STR_LIT>' ? properties.selectedList : null,<EOL>         baseTemplate: properties.baseTemplate,<EOL>        orderBy: properties.orderBy,<EOL>        multiSelect: properties.multiSelect || false,<EOL>        includeHidden: properties.includeHidden,<EOL>        onPropertyChange: properties.onPropertyChange,<EOL>        properties:","gt":"properties.properties,"}
{"input":"<s> <EOL>export function PropertyFieldListPicker(targetProperty, properties) {<EOL>    //Create an internal properties object from the given properties<EOL>    const newProperties = {<EOL>        label: properties.label,<EOL>        targetProperty: targetProperty,<EOL>        context: properties. context,<EOL>        selectedList: typeof properties.selectedList === '<STR_LIT>' ? properties.selectedList : null,<EOL>        selectedLists: typeof properties.selectedList !== '<STR_LIT>' ? properties.selectedList : null,<EOL>         baseTemplate: properties.baseTemplate,<EOL>        orderBy: properties.orderBy,<EOL>        multiSelect: properties.multiSelect || false,<EOL>        includeHidden: properties.includeHidden,<EOL>        onPropertyChange: properties.onPropertyChange,<EOL>        properties:  properties.properties,<EOL>        onDispose: null,<EOL>        onRender: null,<EOL>        key: properties.key,<EOL>        disabled: properties.disabled,<EOL>        onGetErrorMessage:","gt":"properties.onGetErrorMessage,"}
{"input":"<s> export function getCodeActions(model, range) {<EOL>    const allResults = [];<EOL>    const promises = CodeActionProviderRegistry.all(model).map(support => {<EOL>        return asWinJsPromise(token => support.provideCodeActions(model, range, token)).then(result => {<EOL>            if (Array.isArray(result)) {<EOL>                for (const quickFix of","gt":"result) {"}
{"input":"<s> export function getCodeActions(model, range) {<EOL>    const allResults = [];<EOL>    const promises = CodeActionProviderRegistry.all(model).map(support => {<EOL>        return asWinJsPromise(token => support.provideCodeActions(model, range, token)).then(result => {<EOL>            if (Array.isArray(result)) {<EOL>                for (const quickFix of  result) {<EOL>                    if (quickFix) {<EOL>                        allResults.push(quickFix);<EOL>                    }<EOL>                }<EOL>            }<EOL>        }, err => {<EOL>            onUnexpectedExternalError(","gt":"err);"}
{"input":"<s> export function allowPreviousPlayerStylesMerge(duration, delay) {<EOL>","gt":"return duration === <NUM_LIT> || delay === <NUM_LIT>;"}
{"input":"<s> export function isWillNotExecutedPayload(v) {<EOL>    return v.","gt":"type === TYPE;"}
{"input":"<s> export default function applyMiddleware(...middleware) {<EOL>    var next = finalDispatch;<EOL>    for (var i = middleware.length -","gt":"<NUM_LIT>; i >= <NUM_LIT>; i--) {"}
{"input":"<s> export function getStartAtObservable(query) {<EOL>    if (query.startAt instanceof Observable) {<EOL>        return query.startAt;<EOL>    }<EOL>    else","gt":"if (hasKey(query, '<STR_LIT>')) {"}
{"input":"<s> export function getStartAtObservable(query) {<EOL>    if (query.startAt instanceof Observable) {<EOL>        return query.startAt;<EOL>    }<EOL>    else  if (hasKey(query, '<STR_LIT>')) {<EOL>        return new Observable(subscriber => {<EOL>            subscriber.next(query.startAt);<EOL>        });<EOL>    }<EOL>    else {<EOL>","gt":"return new Observable(subscriber => {"}
{"input":"<s> export function isWillExecutedPayload(v) {<EOL>","gt":"return v.type === TYPE;"}
{"input":"<s> export function isDidExecutedPayload(v) {<EOL>    return","gt":"v.type === TYPE;"}
{"input":"<s> function _exceptionHandler() {<EOL>    return new ExceptionHandler(new","gt":"PrintLogger());"}
{"input":"<s> <EOL>function createBlockElement() {<EOL>    let element = document.createElement('<STR_LIT>');<EOL>","gt":"element.style.width = `<STR_LIT>`;"}
{"input":"<s> function valueOf(item) {<EOL>    return item.","gt":"value;"}
{"input":"<s> <EOL>export function rgErrorMsgForDisplay(msg) {<EOL>    const firstLine = msg.split('<STR_LIT>')[<NUM_LIT>];<EOL>    if (strings.startsWith(firstLine, '<STR_LIT>')) {<EOL>        return firstLine;<EOL>    }<EOL>    if (strings.startsWith(firstLine,","gt":"'<STR_LIT>') ||"}
{"input":"<s> export function getStyles(context) {<EOL>    if (getStylesOverride)<EOL>        return getStylesOverride(context);<EOL>    const","gt":"textEditorStyles = document.createElement('<STR_LIT>');"}
{"input":"<s> //<EOL>// Find the closest ancestor of an element that is not a decendant of either<EOL>// `span.math` or `span.atom-text-editor`.<EOL>//<EOL>// @param {HTMLElement} element The element from which the search for a<EOL>//   closest ancestor begins.<EOL>// @return {HTMLElement} The closest ancestor to `element` that does not<EOL>//   contain either `span.math` or `span.atom-text-editor`.<EOL>//<EOL>export function bubbleToContainerElement(element) {<EOL>    let testElement = element;<EOL>    for (;;) {<EOL>        const parent = testElement.parentElement;<EOL>        if (!parent)<EOL>","gt":"break;"}
{"input":"<s> function registerGrammars(grammars, disp, cm) {<EOL>    for (const gr of grammars) {<EOL>        const grs = gr.replace(/\\./g, '<STR_LIT>');<EOL>        const selector = `<STR_LIT>`;<EOL>        disp.add(atom.commands.add(selector, {<EOL>            '<STR_LIT>': (e) => {<EOL>                toggle(e.currentTarget.","gt":"getModel());"}
{"input":"<s> function registerGrammars(grammars, disp, cm) {<EOL>    for (const gr of grammars) {<EOL>        const grs = gr.replace(/\\./g, '<STR_LIT>');<EOL>        const selector = `<STR_LIT>`;<EOL>        disp.add(atom.commands.add(selector, {<EOL>            '<STR_LIT>': (e) => {<EOL>                toggle(e.currentTarget. getModel());<EOL>            },<EOL>            '<STR_LIT>': (e) => {<EOL>                handlePromise(copyHtmlInternal(e.currentTarget.getModel()));<EOL>            },<EOL>        }));<EOL>        cm[selector] = [<EOL>            {<EOL>                label:","gt":"'<STR_LIT>',"}
{"input":"<s> function getImageData(name) {<EOL>    return","gt":"images[name].data;"}
{"input":"<s> function checkMacros(macrosObject) {<EOL>    const namePattern = /^[^a-zA-Z\\d\\s]$|^[a-zA-Z]*$/; // letters, but no numerals.<EOL>    for (const name in macrosObject) {<EOL>","gt":"const value = macrosObject[name];"}
{"input":"<s> export function getPrevPagedQuestions() {<EOL>    return (dispatch, getState) => {<EOL>        const {","gt":"previousPagedQuestions } = getState();"}
{"input":"<s> function toKey(item) {<EOL>","gt":"return item.key;"}
{"input":"<s> function init() {<EOL>    const rootEl = document.querySelector('<STR_LIT>');<EOL>    rootEl.textContent = '<STR_LIT>';<EOL>    tree =","gt":"new TreeComponent(rootEl);"}
{"input":"<s> export function generateOpportunity(seed) {<EOL>","gt":"const res = new Opportunity();"}
{"input":"<s> function pairFromNumber(n) {<EOL>    return [n,","gt":"n}`<STR_LIT>;"}
{"input":"<s> export function iterateValues(map) {<EOL>","gt":"return values(map._sorted);"}
{"input":"<s> function getFoo1() {<EOL>    return {<EOL>        method1(arg) {<EOL>            arg.","gt":"numProp = <NUM_LIT>;"}
{"input":"<s> <EOL>function formatMadgeCircularModules(circularModules) {<EOL>    return circularModules.map((modulePaths) =>","gt":"modulePaths.join('<STR_LIT>')}`<STR_LIT>;"}
{"input":"<s> export function createWatchEvent(filePath, fs = nodeFs) {<EOL>    return {<EOL>        path:","gt":"filePath,"}
{"input":"<s> export function replaceMappedCSSAssetPlaceholders({ stylableBuildData, staticPublicPath, assetsModules, chunkGraph, moduleGraph, runtime, runtimeTemplate, dependencyTemplates, }) {<EOL>    return replaceCSSAssetPlaceholders(stylableBuildData, staticPublicPath, (resourcePath, publicPath) => {<EOL>        const assetModule = assetsModules.get(resourcePath);<EOL>        if (!assetModule) {<EOL>            throw new Error('<STR_LIT>' + resourcePath);<EOL>        }<EOL>        if (isLoadedWithKnownAssetLoader(assetModule)) {<EOL>            return extractFilenameFromAssetModule(assetModule, publicPath);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export function replaceMappedCSSAssetPlaceholders({ stylableBuildData, staticPublicPath, assetsModules, chunkGraph, moduleGraph, runtime, runtimeTemplate, dependencyTemplates, }) {<EOL>    return replaceCSSAssetPlaceholders(stylableBuildData, staticPublicPath, (resourcePath, publicPath) => {<EOL>        const assetModule = assetsModules.get(resourcePath);<EOL>        if (!assetModule) {<EOL>            throw new Error('<STR_LIT>' + resourcePath);<EOL>        }<EOL>        if (isLoadedWithKnownAssetLoader(assetModule)) {<EOL>            return extractFilenameFromAssetModule(assetModule, publicPath);<EOL>        }<EOL>         else {<EOL>            const data = new Map();<EOL>            const assetModuleSource = assetModule.generator.generate(assetModule, {<EOL>","gt":"chunkGraph,"}
{"input":"<s> export function replaceMappedCSSAssetPlaceholders({ stylableBuildData, staticPublicPath, assetsModules, chunkGraph, moduleGraph, runtime, runtimeTemplate, dependencyTemplates, }) {<EOL>    return replaceCSSAssetPlaceholders(stylableBuildData, staticPublicPath, (resourcePath, publicPath) => {<EOL>        const assetModule = assetsModules.get(resourcePath);<EOL>        if (!assetModule) {<EOL>            throw new Error('<STR_LIT>' + resourcePath);<EOL>        }<EOL>        if (isLoadedWithKnownAssetLoader(assetModule)) {<EOL>            return extractFilenameFromAssetModule(assetModule, publicPath);<EOL>        }<EOL>         else {<EOL>            const data = new Map();<EOL>            const assetModuleSource = assetModule.generator.generate(assetModule, {<EOL>                 chunkGraph,<EOL>                moduleGraph,<EOL>                runtime,<EOL>                runtimeRequirements: new","gt":"Set(),"}
{"input":"<s> export function replaceMappedCSSAssetPlaceholders({ stylableBuildData, staticPublicPath, assetsModules, chunkGraph, moduleGraph, runtime, runtimeTemplate, dependencyTemplates, }) {<EOL>    return replaceCSSAssetPlaceholders(stylableBuildData, staticPublicPath, (resourcePath, publicPath) => {<EOL>        const assetModule = assetsModules.get(resourcePath);<EOL>        if (!assetModule) {<EOL>            throw new Error('<STR_LIT>' + resourcePath);<EOL>        }<EOL>        if (isLoadedWithKnownAssetLoader(assetModule)) {<EOL>            return extractFilenameFromAssetModule(assetModule, publicPath);<EOL>        }<EOL>         else {<EOL>            const data = new Map();<EOL>            const assetModuleSource = assetModule.generator.generate(assetModule, {<EOL>                 chunkGraph,<EOL>                moduleGraph,<EOL>                runtime,<EOL>                runtimeRequirements: new  Set(),<EOL>                runtimeTemplate,<EOL>                dependencyTemplates,<EOL>                type: '<STR_LIT>',<EOL>                getData: () => data,<EOL>            });<EOL>            if (assetModule.","gt":"buildInfo.dataUrl) {"}
{"input":"<s> function removeLocationMarkers(value) {<EOL>    return value.replace(locationMarker,","gt":"'<STR_LIT>');"}
{"input":"<s> function error(t0, t1) {<EOL>    currErrs += \"<STR_LIT>\" + t2s(t0) + \"<STR_LIT>\" + t2s(t1) +","gt":"\"<STR_LIT>\";"}
{"input":"<s> function nullContent(o) {<EOL>    (Array.isArray(o) ? o : Object.keys(o)).forEach((k) => {<EOL>        if (k === '<STR_LIT>') {<EOL>            o[","gt":"k] = null;"}
{"input":"<s> function listCollaborators(commandName, yargs) {<EOL>    isValidCommand = true;<EOL>    yargs.usage(USAGE_PREFIX + \"<STR_LIT>\" + commandName + \"<STR_LIT>\")<EOL>        .demand( <NUM_LIT>,","gt":"<NUM_LIT>)"}
{"input":"<s> function createColor(red, green, blue, alpha) {<EOL>    return { red, green, blue,","gt":"alpha };"}
{"input":"<s> <EOL>export function parseJson(input, mode = JsonParseMode.Default) {<EOL>    // Try parsing for the fastest path available, if error, uses our own parser for better errors.<EOL>    if (mode == JsonParseMode.Strict) {<EOL>        try {<EOL>            return","gt":"JSON.parse(input);"}
{"input":"<s> export function at(index, map) {<EOL>    return getItemByIndex(","gt":"index, map._sorted);"}
{"input":"<s> export function utf8Encode(str) {<EOL>    let encoded = '<STR_LIT>';<EOL>    for (let index = <NUM_LIT>; index < str.length; index++) {<EOL>        let codePoint = str.charCodeAt(index);<EOL>        // decode surrogate<EOL>        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae<EOL>        if (codePoint >= <NUM_LIT> && codePoint <= <NUM_LIT> && str.length > (index + <NUM_LIT>)) {<EOL>            const low = str.charCodeAt(index + <NUM_LIT>);<EOL>            if (","gt":"low >= <NUM_LIT> && low <= <NUM_LIT>) {"}
{"input":"<s> export function utf8Encode(str) {<EOL>    let encoded = '<STR_LIT>';<EOL>    for (let index = <NUM_LIT>; index < str.length; index++) {<EOL>        let codePoint = str.charCodeAt(index);<EOL>        // decode surrogate<EOL>        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae<EOL>        if (codePoint >= <NUM_LIT> && codePoint <= <NUM_LIT> && str.length > (index + <NUM_LIT>)) {<EOL>            const low = str.charCodeAt(index + <NUM_LIT>);<EOL>            if ( low >= <NUM_LIT> && low <= <NUM_LIT>) {<EOL>                index++;<EOL>                codePoint = ((codePoint - <NUM_LIT>) << <NUM_LIT>) + low - <NUM_LIT> + <NUM_LIT>;<EOL>            }<EOL>        }<EOL>        if (codePoint <= <NUM_LIT>) {<EOL>            encoded += String.fromCharCode(","gt":"codePoint);"}
{"input":"<s> export function utf8Encode(str) {<EOL>    let encoded = '<STR_LIT>';<EOL>    for (let index = <NUM_LIT>; index < str.length; index++) {<EOL>        let codePoint = str.charCodeAt(index);<EOL>        // decode surrogate<EOL>        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae<EOL>        if (codePoint >= <NUM_LIT> && codePoint <= <NUM_LIT> && str.length > (index + <NUM_LIT>)) {<EOL>            const low = str.charCodeAt(index + <NUM_LIT>);<EOL>            if ( low >= <NUM_LIT> && low <= <NUM_LIT>) {<EOL>                index++;<EOL>                codePoint = ((codePoint - <NUM_LIT>) << <NUM_LIT>) + low - <NUM_LIT> + <NUM_LIT>;<EOL>            }<EOL>        }<EOL>        if (codePoint <= <NUM_LIT>) {<EOL>            encoded += String.fromCharCode( codePoint);<EOL>        }<EOL>        else if (codePoint <= <NUM_LIT>) {<EOL>            encoded += String.fromCharCode(((codePoint >> <NUM_LIT>) & <NUM_LIT>) | <NUM_LIT>, (codePoint & <NUM_LIT>) | <NUM_LIT>);<EOL>        }<EOL>        else if (codePoint <= <NUM_LIT>) {<EOL>            encoded += String.fromCharCode((codePoint >>","gt":"<NUM_LIT>) | <NUM_LIT>, ((codePoint >> <NUM_LIT>) & <NUM_LIT>) | <NUM_LIT>, (codePoint & <NUM_LIT>) | <NUM_LIT>);"}
{"input":"<s> export function spODataEntityArray(factory) {<EOL>    return new SPODataEntityArrayParserImpl(","gt":"factory);"}
{"input":"<s> <EOL><EOL>export function coerceBooleanProperty(value) {<EOL>    return value != null && `<STR_LIT>` !==","gt":"'<STR_LIT>';"}
{"input":"<s> function getNodes(treeElement) {<EOL>    return [].slice.call(","gt":"treeElement.querySelectorAll('<STR_LIT>'));"}
{"input":"<s> export default function SystemStatusReducer(state = defaultStatus, action = { type: \"<STR_LIT>\" }) {<EOL>    <EOL>    const newstate = _.clone(state);<EOL>    if (action.type.startsWith(\"<STR_LIT>\")) {<EOL>","gt":"newstate.currentAction = action.type;"}
{"input":"<s> function fakeOverlayRef(overlayElement) {<EOL>    return { overlayElement }","gt":";"}
{"input":"<s> function listReducer(state = INITIAL_STATE, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case ADD_LIST:<EOL>            //https://spin.atomicobject.com/2016/09/27/typed-redux-reducers-typescript-2-0/<EOL>            let newarray = _.clone(state);<EOL>            newarray.push(action.payload.list);<EOL>","gt":"return newarray;"}
{"input":"<s> function listReducer(state = INITIAL_STATE, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case ADD_LIST:<EOL>            //https://spin.atomicobject.com/2016/09/27/typed-redux-reducers-typescript-2-0/<EOL>            let newarray = _.clone(state);<EOL>            newarray.push(action.payload.list);<EOL>             return newarray;<EOL>        case SAVE_LIST:<EOL>            let newarray2 = _.clone(state);<EOL>            let item = _.find(newarray2, item => item.guid === action.payload.list.guid);<EOL>            item = action.payload.","gt":"list;"}
{"input":"<s> function listReducer(state = INITIAL_STATE, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case ADD_LIST:<EOL>            //https://spin.atomicobject.com/2016/09/27/typed-redux-reducers-typescript-2-0/<EOL>            let newarray = _.clone(state);<EOL>            newarray.push(action.payload.list);<EOL>             return newarray;<EOL>        case SAVE_LIST:<EOL>            let newarray2 = _.clone(state);<EOL>            let item = _.find(newarray2, item => item.guid === action.payload.list.guid);<EOL>            item = action.payload. list;<EOL>            return newarray2;<EOL>        case REMOVE_LIST:<EOL>            let newArr = _.filter(state, (","gt":"o) => { return o.guid !== action.payload.list.guid; });"}
{"input":"<s> function listReducer(state = INITIAL_STATE, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case ADD_LIST:<EOL>            //https://spin.atomicobject.com/2016/09/27/typed-redux-reducers-typescript-2-0/<EOL>            let newarray = _.clone(state);<EOL>            newarray.push(action.payload.list);<EOL>             return newarray;<EOL>        case SAVE_LIST:<EOL>            let newarray2 = _.clone(state);<EOL>            let item = _.find(newarray2, item => item.guid === action.payload.list.guid);<EOL>            item = action.payload. list;<EOL>            return newarray2;<EOL>        case REMOVE_LIST:<EOL>            let newArr = _.filter(state, ( o) => { return o.guid !== action.payload.list.guid; });<EOL>            return newArr;<EOL>        case REMOVE_ALLLISTS:<EOL>            return [];<EOL>","gt":"case ADD_LISTS:"}
{"input":"<s> function listReducer(state = INITIAL_STATE, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case ADD_LIST:<EOL>            //https://spin.atomicobject.com/2016/09/27/typed-redux-reducers-typescript-2-0/<EOL>            let newarray = _.clone(state);<EOL>            newarray.push(action.payload.list);<EOL>             return newarray;<EOL>        case SAVE_LIST:<EOL>            let newarray2 = _.clone(state);<EOL>            let item = _.find(newarray2, item => item.guid === action.payload.list.guid);<EOL>            item = action.payload. list;<EOL>            return newarray2;<EOL>        case REMOVE_LIST:<EOL>            let newArr = _.filter(state, ( o) => { return o.guid !== action.payload.list.guid; });<EOL>            return newArr;<EOL>        case REMOVE_ALLLISTS:<EOL>            return [];<EOL>         case ADD_LISTS:<EOL>            return _.union(state, action.payload.lists);<EOL>        case REMOVE_COLUMN:<EOL>            let listrefs = _.clone(state);<EOL>            for (const listref of listrefs) {<EOL>                for (let i = listref.columnReferences.length - <NUM_LIT>; i >= <NUM_LIT>; i--) {<EOL>                    if (listref.columnReferences[i].columnDefinitionId === action.payload.column.guid) {<EOL>                        listref.columnReferences.","gt":"splice(i, <NUM_LIT>);"}
{"input":"<s> export function saveOpenFile(filePath) {<EOL>    let file =","gt":"getOpenFile(filePath);"}
{"input":"<s> export function moveColumnDown(state, action) {<EOL>    let newstate = _.clone(state);<EOL>    let index = _.findIndex(newstate, c => c.guid === action.payload.column.","gt":"guid);"}
{"input":"<s> function f3(x) {<EOL>    if (x) {<EOL>","gt":"x;"}
{"input":"<s> export default function PageContextReducer(state = {}, action = { type: \"<STR_LIT>\" }) {<EOL>    switch (action.type) {<EOL>        case","gt":"ADD_PAGECONTEXT:"}
{"input":"<s> function typeScript() {<EOL>    let obj =","gt":"new testClass(<NUM_LIT>);"}
{"input":"<s> <EOL>export function getDirectory(filePath) {<EOL>    let directory = filePath.substring(<NUM_LIT>, filePath.","gt":"lastIndexOf(\"<STR_LIT>\"));"}
{"input":"<s> export function deleteFromDisk(data) {<EOL>    data.files.forEach(filePath => {<EOL>        var file = getOpenFile(filePath);<EOL>        if (file) {<EOL>","gt":"file.delete();"}
{"input":"<s> export function deleteFromDisk(data) {<EOL>    data.files.forEach(filePath => {<EOL>        var file = getOpenFile(filePath);<EOL>        if (file) {<EOL>             file.delete();<EOL>            openFiles = openFiles.filter(f => f.config.filePath !== filePath);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export function deleteFromDisk(data) {<EOL>    data.files.forEach(filePath => {<EOL>        var file = getOpenFile(filePath);<EOL>        if (file) {<EOL>             file.delete();<EOL>            openFiles = openFiles.filter(f => f.config.filePath !== filePath);<EOL>        }<EOL>         else {<EOL>            fsu.deleteFile(filePath);<EOL>        }<EOL>    });<EOL>    data.dirs.","gt":"forEach(dirPath => {"}
{"input":"<s> export function deleteFromDisk(data) {<EOL>    data.files.forEach(filePath => {<EOL>        var file = getOpenFile(filePath);<EOL>        if (file) {<EOL>             file.delete();<EOL>            openFiles = openFiles.filter(f => f.config.filePath !== filePath);<EOL>        }<EOL>         else {<EOL>            fsu.deleteFile(filePath);<EOL>        }<EOL>    });<EOL>    data.dirs. forEach(dirPath => {<EOL>        // delete any open files<EOL>        let toClose = (filePath) => {<EOL>            return filePath.startsWith(dirPath);<EOL>        };<EOL>        openFiles.filter(f => toClose(f.config.filePath)).forEach(f =>","gt":"f.delete());"}
{"input":"<s> <EOL>function normalizeQuery(mediaQuery) {<EOL>    return (","gt":"typeof mediaQuery === '<STR_LIT>') ? [] :"}
{"input":"<s> <EOL>export function arraysEqual(a, b) {<EOL>    if (a === b)<EOL>        return true;<EOL>    if (a == null || b == null)<EOL>","gt":"return false;"}
{"input":"<s> <EOL>export function arraysEqual(a, b) {<EOL>    if (a === b)<EOL>        return true;<EOL>    if (a == null || b == null)<EOL>         return false;<EOL>    if (a.length !== b.length)<EOL>        return false;<EOL>    for (var i = <NUM_LIT>; i < a.length; ++i) {<EOL>        if (a[i] !== b[i])<EOL>","gt":"return false;"}
{"input":"<s> export function reduce(fn, seed, set) {<EOL>    var it = iterateValues(set);<EOL>    var current;<EOL>    var index =","gt":"<NUM_LIT>;"}
{"input":"<s> export function handleHttpError(error) {<EOL>    switch (error.status) {<EOL>        case <NUM_LIT>:<EOL>            return strings.ErrorMessage_HTTP_BadRequest;<EOL>        case","gt":"<NUM_LIT>:"}
{"input":"<s> export function handleHttpError(error) {<EOL>    switch (error.status) {<EOL>        case <NUM_LIT>:<EOL>            return strings.ErrorMessage_HTTP_BadRequest;<EOL>        case  <NUM_LIT>:<EOL>            return strings.ErrorMessage_HTTP_AccessDenied;<EOL>        case <NUM_LIT>:<EOL>            return strings.ErrorMessage_HTTP_NotFound;<EOL>        case undefined:<EOL>            return error.message;<EOL>","gt":"default:"}
{"input":"<s> export function getCaretOffsetAndCleanContent(content) {<EOL>    const offset = content.indexOf('<STR_LIT>');<EOL>    if (offset === -<NUM_LIT>) {<EOL>        throw Error(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>function formatDiagnostics(diagnostics, baseDir = '<STR_LIT>') {<EOL>    return diagnostics.map(diagnostic => {<EOL>        let res = `<STR_LIT>`;<EOL>        if (diagnostic.file) {<EOL>            const { line, character } =","gt":"diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);"}
{"input":"<s> <EOL>function formatDiagnostics(diagnostics, baseDir = '<STR_LIT>') {<EOL>    return diagnostics.map(diagnostic => {<EOL>        let res = `<STR_LIT>`;<EOL>        if (diagnostic.file) {<EOL>            const { line, character } =  diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);<EOL>            const filePath = path.relative(baseDir, diagnostic.file.fileName);<EOL>            res += `<STR_LIT>`;<EOL>        }<EOL>        res +=","gt":"messageText, '<STR_LIT>')}`<STR_LIT>;"}
{"input":"<s> function leftOf(node) {<EOL>    return node.","gt":"_left;"}
{"input":"<s> export default function () {<EOL>    return","gt":"ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>')"}
{"input":"<s> export default function () {<EOL>    return Promise.resolve()<EOL>        .then(() => ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>',","gt":"'<STR_LIT>'))"}
{"input":"<s> <EOL>function createWordRegExp(allowInWords = '<STR_LIT>') {<EOL>    let source = '<STR_LIT>';<EOL>    for (let i = <NUM_LIT>; i < USUAL_WORD_SEPARATORS.length; i++) {<EOL>        if (allowInWords.indexOf(USUAL_WORD_SEPARATORS[i]) >=","gt":"<NUM_LIT>) {"}
{"input":"<s> export function prependValues(list, values, fn) {<EOL>    TreeWorker.focusHead(list, true);<EOL>    var collector = increaseCapacity(list, values.length, true);<EOL>    if (isUndefined(fn)) {<EOL>        collector.populate(","gt":"values, <NUM_LIT>);"}
{"input":"<s> export function makeAbsoluteUrl(relativeUrl) {<EOL>    let { filePath: relativeFilePath, protocol } =","gt":"utils.getFilePathAndProtocolFromUrl(relativeUrl);"}
{"input":"<s> <EOL>export function formatMilliseconds(ms) {<EOL>    if (ms < <NUM_LIT>)<EOL>        return `<STR_LIT>`;<EOL>    const","gt":"s = ms / <NUM_LIT>;"}
{"input":"<s> function earlyResult([transpiledMutant, sandbox]) {<EOL>    if (transpiledMutant.transpileResult.error) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.TranspileError, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>","gt":"else if (!transpiledMutant.mutant.selectedTests.length) {"}
{"input":"<s> function earlyResult([transpiledMutant, sandbox]) {<EOL>    if (transpiledMutant.transpileResult.error) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.TranspileError, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>     else if (!transpiledMutant.mutant.selectedTests.length) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.NoCoverage, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>    else","gt":"if (!transpiledMutant.changedAnyTranspiledFiles) {"}
{"input":"<s> function earlyResult([transpiledMutant, sandbox]) {<EOL>    if (transpiledMutant.transpileResult.error) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.TranspileError, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>     else if (!transpiledMutant.mutant.selectedTests.length) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.NoCoverage, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>    else  if (!transpiledMutant.changedAnyTranspiledFiles) {<EOL>        const result = transpiledMutant.mutant.result(MutantStatus.Survived, []);<EOL>        return [transpiledMutant, sandbox, result];<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function getComputedColor(page, text) {<EOL>    return page.$eval('<STR_LIT>' + text, (el) =>","gt":"window.getComputedStyle(el).color);"}
{"input":"<s> <EOL>export function getOccurrencesAtPosition(query) {<EOL>    let project = getProject(query.filePath);<EOL>    const { languageServiceHost } = project;<EOL>    const position = languageServiceHost.getPositionOfLineAndCharacter(query.filePath, query.editorPosition.line, query.editorPosition.ch);<EOL>    const tsresults = project.languageService.getOccurrencesAtPosition(query.filePath, position) || [];<EOL>","gt":"const results = tsresults.map(res => {"}
{"input":"<s> export function isEmpty(list) {<EOL>","gt":"return list._size === <NUM_LIT>;"}
{"input":"<s> export function base64Decode(base64EncodedString) {<EOL>    return Buffer.from(base64EncodedString, '<STR_LIT>').","gt":"toString('<STR_LIT>');"}
{"input":"<s> export function getWebpackStatsConfig(verbose = false) {<EOL>","gt":"return verbose"}
{"input":"<s> <EOL>export function isEqual(tree, other) {<EOL>    if (tree === other)<EOL>        return true;<EOL>    if (size(tree) !== size(other))<EOL>        return","gt":"false;"}
{"input":"<s> <EOL>export function isEqual(tree, other) {<EOL>    if (tree === other)<EOL>        return true;<EOL>    if (size(tree) !== size(other))<EOL>        return  false;<EOL>    // Iterator is required because two trees may have the same set of keys and values but slightly different structures<EOL>    var ita = iterateFromFirst(tree), itb = iterateFromFirst(other);<EOL>    do {<EOL>        var ca = ita.next();<EOL>        var cb = itb.next();<EOL>        if (!equals(ca.","gt":"value, cb.value))"}
{"input":"<s> function _ngProbeTokensToMap(tokens) {<EOL>    return tokens.reduce((prev, t) => (","gt":"prev[t.name] = t.token, prev), {});"}
{"input":"<s> function collectClasses(config) {<EOL>    const { sourceFile, program, collect } = config;<EOL>    ts.forEachChild(config.node, node => {<EOL>        if (node.kind == ts.SyntaxKind.ClassDeclaration) {<EOL>","gt":"collect(transformClass(node, sourceFile, program));"}
{"input":"<s> function collectClasses(config) {<EOL>    const { sourceFile, program, collect } = config;<EOL>    ts.forEachChild(config.node, node => {<EOL>        if (node.kind == ts.SyntaxKind.ClassDeclaration) {<EOL>             collect(transformClass(node, sourceFile, program));<EOL>        }<EOL>        // Support recursively looking into `a.b.c` style namespaces as well<EOL>        if (node.kind === ts.SyntaxKind.ModuleDeclaration) {<EOL>            collectClasses({ node: node, collect, program, sourceFile });<EOL>        }<EOL>        if (node.kind ===","gt":"ts.SyntaxKind.ModuleBlock) {"}
{"input":"<s> export function requireMonaco(callback) {<EOL>    const g = global;<EOL>    const nodeRequire = g.require;<EOL>    const loaderScript = document.createElement(\"<STR_LIT>\");<EOL>    loaderScript.type = \"<STR_LIT>\";<EOL>    loaderScript.src = \"<STR_LIT>\";<EOL>","gt":"loaderScript.addEventListener(\"<STR_LIT>\", () => {"}
{"input":"<s> export function requireMonaco(callback) {<EOL>    const g = global;<EOL>    const nodeRequire = g.require;<EOL>    const loaderScript = document.createElement(\"<STR_LIT>\");<EOL>    loaderScript.type = \"<STR_LIT>\";<EOL>    loaderScript.src = \"<STR_LIT>\";<EOL>     loaderScript.addEventListener(\"<STR_LIT>\", () => {<EOL>        const amdRequire = g.require;<EOL>        g.require = nodeRequire;<EOL>        // require node modules before loader.js comes in<EOL>        const path = require(\"<STR_LIT>\");<EOL>        function uriFromPath(_path) {<EOL>            let pathName = path.resolve(_path).replace(/\\\\/g,","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function requireMonaco(callback) {<EOL>    const g = global;<EOL>    const nodeRequire = g.require;<EOL>    const loaderScript = document.createElement(\"<STR_LIT>\");<EOL>    loaderScript.type = \"<STR_LIT>\";<EOL>    loaderScript.src = \"<STR_LIT>\";<EOL>     loaderScript.addEventListener(\"<STR_LIT>\", () => {<EOL>        const amdRequire = g.require;<EOL>        g.require = nodeRequire;<EOL>        // require node modules before loader.js comes in<EOL>        const path = require(\"<STR_LIT>\");<EOL>        function uriFromPath(_path) {<EOL>            let pathName = path.resolve(_path).replace(/\\\\/g,  \"<STR_LIT>\");<EOL>            if (pathName.length > <NUM_LIT> && pathName.charAt(<NUM_LIT>) !== \"<STR_LIT>\") {<EOL>                pathName = \"<STR_LIT>\" + pathName;<EOL>            }<EOL>            return encodeURI(\"<STR_LIT>\" + pathName);<EOL>        }<EOL>        amdRequire.config({<EOL>            baseUrl: uriFromPath(path.join(__dirname, \"<STR_LIT>\")),<EOL>        });<EOL>        // workaround monaco-css not understanding the environment<EOL>","gt":"self.module = undefined;"}
{"input":"<s> export function has(key, map) {<EOL>    return _has(key, map.","gt":"_indexed);"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self.","gt":"hostedmodels = {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,","gt":"options, callback) {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const","gt":"rootUrl = options.rootUrl || '<STR_LIT>';"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,","gt":"'<STR_LIT>'),"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(","gt":"parameters, callback);"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>","gt":"options: Object.assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,","gt":"'<STR_LIT>'),"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>","gt":"context: self"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if (","gt":"typeof options === '<STR_LIT>') {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>","gt":"options = {};"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>","gt":"options: Object.assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (","gt":"rootUrl + '<STR_LIT>')"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:","gt":"'<STR_LIT>'"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const","gt":"parameters = {"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object.","gt":"assign({"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [","gt":"'<STR_LIT>'],"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>","gt":"context: self"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>","gt":"callback = options;"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                 callback = options;<EOL>                options = {};<EOL>            }<EOL>            options =","gt":"options || {};"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                 callback = options;<EOL>                options = {};<EOL>            }<EOL>            options =  options || {};<EOL>            const rootUrl = options.rootUrl ||","gt":"'<STR_LIT>';"}
{"input":"<s> <EOL>function Prediction(options) {<EOL>    const self = this;<EOL>    self._options = options || {};<EOL>    self. hostedmodels = {<EOL>        <EOL>        predict(params,  options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const  rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +<EOL>                        '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest( parameters, callback);<EOL>        }<EOL>    };<EOL>    self.training = {<EOL>        <EOL>        delete(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g,  '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        get(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: ['<STR_LIT>'],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        insert(params, options, callback) {<EOL>            if ( typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                 options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const parameters = {<EOL>                 options: Object.assign({<EOL>                    url: ( rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method:  '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: [],<EOL>                pathParams: [],<EOL>                context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        predict(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                callback = options;<EOL>                options = {};<EOL>            }<EOL>            options = options || {};<EOL>            const rootUrl = options.rootUrl || '<STR_LIT>';<EOL>            const  parameters = {<EOL>                options: Object. assign({<EOL>                    url: (rootUrl + '<STR_LIT>')<EOL>                        .replace(/([^:]\\/)\\/+/g, '<STR_LIT>'),<EOL>                    method: '<STR_LIT>'<EOL>                }, options),<EOL>                params,<EOL>                requiredParams: ['<STR_LIT>'],<EOL>                pathParams: [ '<STR_LIT>'],<EOL>                 context: self<EOL>            };<EOL>            return createAPIRequest(parameters, callback);<EOL>        },<EOL>        update(params, options, callback) {<EOL>            if (typeof options === '<STR_LIT>') {<EOL>                 callback = options;<EOL>                options = {};<EOL>            }<EOL>            options =  options || {};<EOL>            const rootUrl = options.rootUrl ||  '<STR_LIT>';<EOL>            const parameters = {<EOL>                options: Object.assign({<EOL>                    url: (rootUrl +","gt":"'<STR_LIT>')"}
{"input":"<s> function createCallback(callback) {<EOL>    return typeof callback === '<STR_LIT>' ? callback : (err) => {<EOL>","gt":"if (err) {"}
{"input":"<s> export function registerLayerType(name, layerConstructor) {<EOL>","gt":"layerTypes.set(name, layerConstructor);"}
{"input":"<s> function isShadowRoot(node) {<EOL>    return node instanceof","gt":"DocumentFragment;"}
{"input":"<s> function stringify(buffer) {<EOL>    return byte2hex[buffer[<NUM_LIT>]] + byte2hex[buffer[<NUM_LIT>]] +<EOL>        byte2hex[buffer[<NUM_LIT>]] + byte2hex[buffer[<NUM_LIT>]] + \"<STR_LIT>\" +<EOL>","gt":"byte2hex[buffer[<NUM_LIT>]] + byte2hex[buffer[<NUM_LIT>]] + \"<STR_LIT>\" +"}
{"input":"<s> export function nil(value) {<EOL>","gt":"return value === null;"}
{"input":"<s> function normalizePlatforms(rawPlatforms) {<EOL>    const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? rawPlatforms : [rawPlatforms];<EOL>    if (platforms == null || platforms.length === <NUM_LIT>) {<EOL>        return [Platform.fromString(process.platform)];<EOL>    }<EOL>    else if (platforms[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        if (","gt":"process.platform === Platform.MAC.nodeName) {"}
{"input":"<s> function normalizePlatforms(rawPlatforms) {<EOL>    const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? rawPlatforms : [rawPlatforms];<EOL>    if (platforms == null || platforms.length === <NUM_LIT>) {<EOL>        return [Platform.fromString(process.platform)];<EOL>    }<EOL>    else if (platforms[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        if ( process.platform === Platform.MAC.nodeName) {<EOL>            return [Platform.MAC, Platform.LINUX, Platform.WINDOWS];<EOL>        }<EOL>        else if (process.platform === Platform.LINUX.nodeName) {<EOL>            // macOS code sign works only on macOS<EOL>","gt":"return [Platform.LINUX, Platform.WINDOWS];"}
{"input":"<s> function isCustomMapping(stateDefinition) {<EOL>    return stateDefinition.","gt":"nodes.length === <NUM_LIT> && stateDefinition.nodes[<NUM_LIT>].type === '<STR_LIT>';"}
{"input":"<s> function resolveBooleanState(mappedStates, stateDefinition) {<EOL>    const currentState = mappedStates[stateDefinition.type];<EOL>    if (!currentState) {<EOL>        mappedStates[stateDefinition.","gt":"value] = null;"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =","gt":"isDeprecatedInput"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:","gt":"result,"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:","gt":"null,"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const","gt":"expectedTestAmount = expectedTestInput ??"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const","gt":"testCommentTarget = isDeprecatedInput"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +","gt":"input.shift();"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input.","gt":"shift();"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input. shift();<EOL>                    }<EOL>                    if (testInput) {<EOL>                        if (isDeprecatedInput &&<EOL>                            (","gt":"testScope === `<STR_LIT>` || testScope === `<STR_LIT>`)) {"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input. shift();<EOL>                    }<EOL>                    if (testInput) {<EOL>                        if (isDeprecatedInput &&<EOL>                            ( testScope === `<STR_LIT>` || testScope === `<STR_LIT>`)) {<EOL>                            // not possible with just AST root<EOL>                            const result = {<EOL>","gt":"type: testScope,"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input. shift();<EOL>                    }<EOL>                    if (testInput) {<EOL>                        if (isDeprecatedInput &&<EOL>                            ( testScope === `<STR_LIT>` || testScope === `<STR_LIT>`)) {<EOL>                            // not possible with just AST root<EOL>                            const result = {<EOL>                                 type: testScope,<EOL>                                expectation: testInput.trim(),<EOL>                                errors: [<EOL>                                    testInlineExpectsErrors.deprecatedRootInputNotSupported(testScope + testInput),<EOL>                                ],<EOL>                            };<EOL>                            errors.push(...result.errors);<EOL>                            checks.push(","gt":"result);"}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input. shift();<EOL>                    }<EOL>                    if (testInput) {<EOL>                        if (isDeprecatedInput &&<EOL>                            ( testScope === `<STR_LIT>` || testScope === `<STR_LIT>`)) {<EOL>                            // not possible with just AST root<EOL>                            const result = {<EOL>                                 type: testScope,<EOL>                                expectation: testInput.trim(),<EOL>                                errors: [<EOL>                                    testInlineExpectsErrors.deprecatedRootInputNotSupported(testScope + testInput),<EOL>                                ],<EOL>                            };<EOL>                            errors.push(...result.errors);<EOL>                            checks.push( result);<EOL>                        }<EOL>                        else {<EOL>                            const result = tests[testScope](context, testInput.trim(), isRemoved ? undefined : nodeTarget, nodeSrc);<EOL>                            result.type = testScope;<EOL>                            errors.push(...result.errors);<EOL>","gt":"checks.push("}
{"input":"<s> <EOL>export function testInlineExpects(result, expectedTestInput) {<EOL>    // backward compatibility (no diagnostic checks)<EOL>    const isDeprecatedInput = isRoot(result);<EOL>    const context =  isDeprecatedInput<EOL>        ? {<EOL>            meta: {<EOL>                outputAst:  result,<EOL>                rawAst: result,<EOL>                diagnostics: null,<EOL>                transformDiagnostics:  null,<EOL>            },<EOL>        }<EOL>        : result;<EOL>    const rootAst = context.meta.rawAst;<EOL>    const  expectedTestAmount = expectedTestInput ??<EOL>        (rootAst.toString().match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))?.length || <NUM_LIT>);<EOL>    const checks = [];<EOL>    const errors = [];<EOL>    // collect checks<EOL>    rootAst.walkComments((comment) => {<EOL>        const input = comment.text.split(/@/gm);<EOL>        const testCommentSrc = comment;<EOL>        const  testCommentTarget = isDeprecatedInput<EOL>            ? comment<EOL>            : getTargetComment(context.meta, comment) || comment;<EOL>        const nodeTarget = testCommentTarget.next();<EOL>        const nodeSrc = testCommentSrc.next();<EOL>        const isRemoved = isRemovedFromTarget(nodeTarget, nodeSrc);<EOL>        if (nodeTarget || nodeSrc) {<EOL>            while (input.length) {<EOL>                const next = `<STR_LIT>` +  input.shift();<EOL>                const testMatch = next.match(new RegExp(`<STR_LIT>`, `<STR_LIT>`));<EOL>                if (testMatch) {<EOL>                    const testScope = testMatch[<NUM_LIT>];<EOL>                    let testInput = next.replace(testScope, `<STR_LIT>`);<EOL>                    // collect expectation inner `@` fragments<EOL>                    while (input.length &&<EOL>                        !(`<STR_LIT>` + input[<NUM_LIT>]).match(new RegExp(`<STR_LIT>`, `<STR_LIT>`))) {<EOL>                        testInput += `<STR_LIT>` + input. shift();<EOL>                    }<EOL>                    if (testInput) {<EOL>                        if (isDeprecatedInput &&<EOL>                            ( testScope === `<STR_LIT>` || testScope === `<STR_LIT>`)) {<EOL>                            // not possible with just AST root<EOL>                            const result = {<EOL>                                 type: testScope,<EOL>                                expectation: testInput.trim(),<EOL>                                errors: [<EOL>                                    testInlineExpectsErrors.deprecatedRootInputNotSupported(testScope + testInput),<EOL>                                ],<EOL>                            };<EOL>                            errors.push(...result.errors);<EOL>                            checks.push( result);<EOL>                        }<EOL>                        else {<EOL>                            const result = tests[testScope](context, testInput.trim(), isRemoved ? undefined : nodeTarget, nodeSrc);<EOL>                            result.type = testScope;<EOL>                            errors.push(...result.errors);<EOL>                             checks.push(","gt":"result);"}
{"input":"<s> <EOL>export async function installAppDeps(args) {<EOL>    try {<EOL>        log.info({ version: PACKAGE_VERSION }, \"<STR_LIT>\");<EOL>    }<EOL>    catch (e) {<EOL>        // error in dev mode without babel<EOL>        if (!(e instanceof ReferenceError)) {<EOL>            throw e;<EOL>        }<EOL>    }<EOL>    const projectDir = process.cwd();<EOL>    const packageMetadata = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"<STR_LIT>\"))));<EOL>    const config = await getConfig(projectDir, null, null, packageMetadata);<EOL>    const","gt":"muonVersion = config.muonVersion;"}
{"input":"<s> <EOL>export async function installAppDeps(args) {<EOL>    try {<EOL>        log.info({ version: PACKAGE_VERSION }, \"<STR_LIT>\");<EOL>    }<EOL>    catch (e) {<EOL>        // error in dev mode without babel<EOL>        if (!(e instanceof ReferenceError)) {<EOL>            throw e;<EOL>        }<EOL>    }<EOL>    const projectDir = process.cwd();<EOL>    const packageMetadata = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"<STR_LIT>\"))));<EOL>    const config = await getConfig(projectDir, null, null, packageMetadata);<EOL>    const  muonVersion = config.muonVersion;<EOL>    const results = await BluebirdPromise.all([<EOL>        computeDefaultAppDirectory(projectDir, use(config.directories, it => it.app)),<EOL>        muonVersion == null ? getElectronVersion(projectDir, config, packageMetadata) : BluebirdPromise.resolve(muonVersion),<EOL>    ]);<EOL>    // if two package.json — force full install (user wants to install/update app deps in addition to dev)<EOL>    await installOrRebuild(config,","gt":"results[<NUM_LIT>], {"}
{"input":"<s> function main() {<EOL>    return installAppDeps(configureInstallAppDepsCommand(yargs).","gt":"argv);"}
{"input":"<s> function toAccelerator(event) {<EOL>    let parts = [];<EOL>    if (event.ctrlKey) {<EOL>        parts.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (event.shiftKey) {<EOL>","gt":"parts.push(\"<STR_LIT>\");"}
{"input":"<s> function waitForElement(selector) {<EOL>    const EC =","gt":"ExpectedConditions;"}
{"input":"<s> <EOL>export function updateTree(callback, tree) {<EOL>    callback(tree = C.modify(","gt":"tree));"}
{"input":"<s> export function join(separator, list) {<EOL>","gt":"return arrayFrom(list).join(separator);"}
{"input":"<s> <EOL>export function jsonpCallbackContext() {<EOL>    if (typeof window === '<STR_LIT>') {<EOL>","gt":"return window;"}
{"input":"<s> <EOL><EOL>export function zipStatic(...observables) {<EOL>    const project = observables[observables.length - <NUM_LIT>];<EOL>    if (","gt":"typeof project === '<STR_LIT>') {"}
{"input":"<s> export async function configureTypescript(configurator) {<EOL>    const hasTsChecker = configurator.hasDevDependency(\"<STR_LIT>\") || configurator.hasDevDependency(\"<STR_LIT>\");<EOL>    if (!(hasTsChecker || configurator.hasDevDependency(\"<STR_LIT>\"))) {<EOL>        return;<EOL>    }<EOL>    // add after js<EOL>    configurator.extensions.splice(","gt":"<NUM_LIT>, <NUM_LIT>, \"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> export async function configureTypescript(configurator) {<EOL>    const hasTsChecker = configurator.hasDevDependency(\"<STR_LIT>\") || configurator.hasDevDependency(\"<STR_LIT>\");<EOL>    if (!(hasTsChecker || configurator.hasDevDependency(\"<STR_LIT>\"))) {<EOL>        return;<EOL>    }<EOL>    // add after js<EOL>    configurator.extensions.splice( <NUM_LIT>, <NUM_LIT>, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction);<EOL>    const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"<STR_LIT>\"), path.join(configurator.projectDir, \"<STR_LIT>\")], null);<EOL>    // check to produce clear error message if no tsconfig.json<EOL>","gt":"if (tsConfigFile == null) {"}
{"input":"<s> export async function configureTypescript(configurator) {<EOL>    const hasTsChecker = configurator.hasDevDependency(\"<STR_LIT>\") || configurator.hasDevDependency(\"<STR_LIT>\");<EOL>    if (!(hasTsChecker || configurator.hasDevDependency(\"<STR_LIT>\"))) {<EOL>        return;<EOL>    }<EOL>    // add after js<EOL>    configurator.extensions.splice( <NUM_LIT>, <NUM_LIT>, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction);<EOL>    const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"<STR_LIT>\"), path.join(configurator.projectDir, \"<STR_LIT>\")], null);<EOL>    // check to produce clear error message if no tsconfig.json<EOL>     if (tsConfigFile == null) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (configurator.debug.enabled) {<EOL>        configurator.debug(`<STR_LIT>`);<EOL>    }<EOL>    // no sense to use fork-ts-checker-webpack-plugin for production build<EOL>    if (isTranspileOnly && !configurator.isTest) {<EOL>        const ForkTsCheckerWebpackPlugin = require(\"<STR_LIT>\");<EOL>        configurator.plugins.push(new ForkTsCheckerWebpackPlugin({<EOL>            tsconfig: tsConfigFile,<EOL>","gt":"logger: configurator.env.forkTsCheckerLogger || {"}
{"input":"<s> export async function configureTypescript(configurator) {<EOL>    const hasTsChecker = configurator.hasDevDependency(\"<STR_LIT>\") || configurator.hasDevDependency(\"<STR_LIT>\");<EOL>    if (!(hasTsChecker || configurator.hasDevDependency(\"<STR_LIT>\"))) {<EOL>        return;<EOL>    }<EOL>    // add after js<EOL>    configurator.extensions.splice( <NUM_LIT>, <NUM_LIT>, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction);<EOL>    const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"<STR_LIT>\"), path.join(configurator.projectDir, \"<STR_LIT>\")], null);<EOL>    // check to produce clear error message if no tsconfig.json<EOL>     if (tsConfigFile == null) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (configurator.debug.enabled) {<EOL>        configurator.debug(`<STR_LIT>`);<EOL>    }<EOL>    // no sense to use fork-ts-checker-webpack-plugin for production build<EOL>    if (isTranspileOnly && !configurator.isTest) {<EOL>        const ForkTsCheckerWebpackPlugin = require(\"<STR_LIT>\");<EOL>        configurator.plugins.push(new ForkTsCheckerWebpackPlugin({<EOL>            tsconfig: tsConfigFile,<EOL>             logger: configurator.env.forkTsCheckerLogger || {<EOL>                info: () => {<EOL>                    // ignore<EOL>                },<EOL>                warn: console.warn.bind(console),<EOL>                error: console.error.bind(console),<EOL>            }<EOL>        }));<EOL>    }<EOL>    const tsLoaderOptions = {<EOL>        // use transpileOnly mode to speed-up compilation<EOL>        // in the test mode also, because checked during dev or production build<EOL>        transpileOnly: isTranspileOnly,<EOL>        appendTsSuffixTo: [/\\.vue$/],<EOL>        configFile: tsConfigFile,<EOL>    };<EOL>","gt":"if (configurator.debug.enabled) {"}
{"input":"<s> export async function configureTypescript(configurator) {<EOL>    const hasTsChecker = configurator.hasDevDependency(\"<STR_LIT>\") || configurator.hasDevDependency(\"<STR_LIT>\");<EOL>    if (!(hasTsChecker || configurator.hasDevDependency(\"<STR_LIT>\"))) {<EOL>        return;<EOL>    }<EOL>    // add after js<EOL>    configurator.extensions.splice( <NUM_LIT>, <NUM_LIT>, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const isTranspileOnly = configurator.isTest || (hasTsChecker && !configurator.isProduction);<EOL>    const tsConfigFile = await getFirstExistingFile([path.join(configurator.sourceDir, \"<STR_LIT>\"), path.join(configurator.projectDir, \"<STR_LIT>\")], null);<EOL>    // check to produce clear error message if no tsconfig.json<EOL>     if (tsConfigFile == null) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (configurator.debug.enabled) {<EOL>        configurator.debug(`<STR_LIT>`);<EOL>    }<EOL>    // no sense to use fork-ts-checker-webpack-plugin for production build<EOL>    if (isTranspileOnly && !configurator.isTest) {<EOL>        const ForkTsCheckerWebpackPlugin = require(\"<STR_LIT>\");<EOL>        configurator.plugins.push(new ForkTsCheckerWebpackPlugin({<EOL>            tsconfig: tsConfigFile,<EOL>             logger: configurator.env.forkTsCheckerLogger || {<EOL>                info: () => {<EOL>                    // ignore<EOL>                },<EOL>                warn: console.warn.bind(console),<EOL>                error: console.error.bind(console),<EOL>            }<EOL>        }));<EOL>    }<EOL>    const tsLoaderOptions = {<EOL>        // use transpileOnly mode to speed-up compilation<EOL>        // in the test mode also, because checked during dev or production build<EOL>        transpileOnly: isTranspileOnly,<EOL>        appendTsSuffixTo: [/\\.vue$/],<EOL>        configFile: tsConfigFile,<EOL>    };<EOL>     if (configurator.debug.enabled) {<EOL>        configurator.debug(`<STR_LIT>`);<EOL>    }<EOL>    configurator.rules.push({<EOL>        test:","gt":"/\\.tsx?$/,"}
{"input":"<s> export function parseUpdateInfo(rawData, channelFile, channelFileUrl) {<EOL>    if (rawData == null) {<EOL>        throw newError(`<STR_LIT>`, \"<STR_LIT>\");<EOL>    }<EOL>    let","gt":"result;"}
{"input":"<s> export function parseUpdateInfo(rawData, channelFile, channelFileUrl) {<EOL>    if (rawData == null) {<EOL>        throw newError(`<STR_LIT>`, \"<STR_LIT>\");<EOL>    }<EOL>    let  result;<EOL>    try {<EOL>        result = safeLoad(rawData);<EOL>    }<EOL>    catch (e) {<EOL>        throw newError(","gt":"}, rawData: ${rawData}`<STR_LIT>;"}
{"input":"<s> export function createBooleanStateClassName(stateName, namespace) {<EOL>    const","gt":"escapedNamespace = cssesc(namespace, { isIdentifier: true });"}
{"input":"<s> export function configureVue(configurator) {<EOL>    if (!configurator.hasDependency(\"<STR_LIT>\")) {<EOL>        return;<EOL>    }<EOL>    configurator.extensions.","gt":"push(\"<STR_LIT>\");"}
{"input":"<s> export function configureVue(configurator) {<EOL>    if (!configurator.hasDependency(\"<STR_LIT>\")) {<EOL>        return;<EOL>    }<EOL>    configurator.extensions. push(\"<STR_LIT>\");<EOL>    Object.assign(configurator.config.resolve.alias, {<EOL>        vue$: \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>    });<EOL>    if (!configurator.","gt":"isProduction && configurator.type === \"<STR_LIT>\") {"}
{"input":"<s> function action(name) {<EOL>    return","gt":"toUpperCase()}`<STR_LIT>;"}
{"input":"<s> function wrap(task) {<EOL>    return (args) => {<EOL>        checkIsOutdated();<EOL>        loadEnv(","gt":"path.join(process.cwd(), \"<STR_LIT>\"))"}
{"input":"<s> export function isImage(extension) {<EOL>","gt":"return imageExtensions.includes(extension);"}
{"input":"<s> function registerCordovaCommands(context) {<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.","gt":"registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));"}
{"input":"<s> function registerCordovaCommands(context) {<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands. registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => {<EOL>        return selectProject()<EOL>            .then((project) => {<EOL>            return launchSimulateCommand(project.cordovaProjectRoot, {","gt":"dir: project.folder.uri.fsPath, target: '<STR_LIT>', platform: '<STR_LIT>' });"}
{"input":"<s> function registerCordovaCommands(context) {<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>'])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands. registerCommand('<STR_LIT>', () => commandWrapper(CordovaCommandHelper.executeCordovaCommand, ['<STR_LIT>', true])));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => {<EOL>        return selectProject()<EOL>            .then((project) => {<EOL>            return launchSimulateCommand(project.cordovaProjectRoot, {  dir: project.folder.uri.fsPath, target: '<STR_LIT>', platform: '<STR_LIT>' });<EOL>        });<EOL>    }));<EOL>    context.subscriptions.push(vscode.commands.registerCommand('<STR_LIT>', () => {<EOL>        return","gt":"selectProject()"}
{"input":"<s> export function provide(provider) {<EOL>","gt":"return provider;"}
{"input":"<s> export function withEditorModel(text, callback) {<EOL>    var model =","gt":"TextModel.createFromString(text.join('<STR_LIT>'));"}
{"input":"<s> function canonizeBranchAlias(alias) {<EOL>    if (alias[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const steps =","gt":"parseInt(alias.slice(<NUM_LIT>), <NUM_LIT>) || <NUM_LIT>;"}
{"input":"<s> function getSetting(key) {<EOL>    return localStorage[localStoragePrefix +","gt":"key] === '<STR_LIT>' ? true : false;"}
{"input":"<s> function dispatchNext(subscriber) {<EOL>    subscriber.","gt":"debouncedNext();"}
{"input":"<s> export async function transformBackgroundFileIfNeed(file, tmpDir) {<EOL>    if (file.endsWith(\"<STR_LIT>\") || file.endsWith(\"<STR_LIT>\")) {<EOL>        return file;<EOL>    }<EOL>    const retinaFile = file.replace(","gt":"/\\.([a-z]+)$/, \"<STR_LIT>\");"}
{"input":"<s> export async function transformBackgroundFileIfNeed(file, tmpDir) {<EOL>    if (file.endsWith(\"<STR_LIT>\") || file.endsWith(\"<STR_LIT>\")) {<EOL>        return file;<EOL>    }<EOL>    const retinaFile = file.replace( /\\.([a-z]+)$/, \"<STR_LIT>\");<EOL>    if (await exists(retinaFile)) {<EOL>        const tiffFile = await tmpDir.getTempFile({ suffix: \"<STR_LIT>\" });<EOL>        await exec(\"<STR_LIT>\", [\"<STR_LIT>\", file, retinaFile, \"<STR_LIT>\", tiffFile]);<EOL>        return","gt":"tiffFile;"}
{"input":"<s> <EOL>export function serializeString(data) {<EOL>    return '<STR_LIT>' + data.","gt":"match(/.{1,32}/g).map(it => it.match(/.{1,4}/g).join(\"<STR_LIT>\")).join('<STR_LIT>') + '<STR_LIT>';"}
{"input":"<s> export async function tsc(root, opts) {<EOL>    let tscOptions = [];<EOL>    root = ensureAbsolutePath(root);<EOL>    opts.project = root;<EOL>    for (const key in opts) {<EOL>        if (opts[key] !==","gt":"undefined) {"}
{"input":"<s> export async function tsc(root, opts) {<EOL>    let tscOptions = [];<EOL>    root = ensureAbsolutePath(root);<EOL>    opts.project = root;<EOL>    for (const key in opts) {<EOL>        if (opts[key] !==  undefined) {<EOL>            if (key === '<STR_LIT>') {<EOL>                tscOptions.push(`<STR_LIT>`);<EOL>            }<EOL>            else {<EOL>                tscOptions.push(`<STR_LIT>`, String(opts[key]));<EOL>            }<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        const proc = spawn(\"<STR_LIT>\" + (/^win/.test(process.platform) ? \"<STR_LIT>\" : \"<STR_LIT>\"), tscOptions, {<EOL>            stdio: \"<STR_LIT>\"<EOL>        });<EOL>        proc.on(\"<STR_LIT>\", function (code) {<EOL>            if (","gt":"code === <NUM_LIT>) {"}
{"input":"<s> export function processProjects({ projects, presets }, { defaultOptions = createDefaultOptions() } = {}) {<EOL>    const entities = [];<EOL>    if (!Array.isArray(projects) && typeof projects !== '<STR_LIT>') {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    if (Array.isArray(projects)) {<EOL>","gt":"for (const entry of projects) {"}
{"input":"<s> export function processProjects({ projects, presets }, { defaultOptions = createDefaultOptions() } = {}) {<EOL>    const entities = [];<EOL>    if (!Array.isArray(projects) && typeof projects !== '<STR_LIT>') {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    if (Array.isArray(projects)) {<EOL>         for (const entry of projects) {<EOL>            entities.push(resolveProjectEntry(typeof entry === '<STR_LIT>' ? [entry] : entry, defaultOptions, presets));<EOL>        }<EOL>    }<EOL>","gt":"else if (typeof projects === '<STR_LIT>') {"}
{"input":"<s> function doGetBin(name, url, checksum) {<EOL>    const args = [\"<STR_LIT>\", \"<STR_LIT>\", url, \"<STR_LIT>\", name];<EOL>","gt":"if (checksum != null) {"}
{"input":"<s> export function configureRequestOptionsFromUrl(url, options) {<EOL>    const parsedUrl = parseUrl(url);<EOL>    options.protocol = parsedUrl.protocol;<EOL>    options.hostname = parsedUrl.hostname;<EOL>    if (parsedUrl.","gt":"port == null) {"}
{"input":"<s> export function configureRequestOptionsFromUrl(url, options) {<EOL>    const parsedUrl = parseUrl(url);<EOL>    options.protocol = parsedUrl.protocol;<EOL>    options.hostname = parsedUrl.hostname;<EOL>    if (parsedUrl. port == null) {<EOL>        if (options.port != null) {<EOL>            delete options.port;<EOL>        }<EOL>    }<EOL>    else {<EOL>        options.port = parsedUrl.","gt":"port;"}
{"input":"<s> export function reportDiagnostics(log, diagnosticsMessages, diagnosticsMode) {<EOL>    let message = '<STR_LIT>';<EOL>    for (const [filePath, diagnostics] of diagnosticsMessages.entries()) {<EOL>        message +=","gt":"diagnostics"}
{"input":"<s> export function isAsset(url) {<EOL>","gt":"return !isExternal(url);"}
{"input":"<s> <EOL>function tests(heroClick) {<EOL>    it('<STR_LIT>', () => {<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    it(","gt":"'<STR_LIT>', () => {"}
{"input":"<s> <EOL>function tests(heroClick) {<EOL>    it('<STR_LIT>', () => {<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    it( '<STR_LIT>', () => {<EOL>","gt":"fixture.detectChanges();"}
{"input":"<s> <EOL>function tests(heroClick) {<EOL>    it('<STR_LIT>', () => {<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    it( '<STR_LIT>', () => {<EOL>         fixture.detectChanges(); // runs initial lifecycle hooks<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    describe('<STR_LIT>', () => {<EOL>        let router;<EOL>        // Trigger component so it gets heroes and binds to them<EOL>        beforeEach(async(() => {<EOL>            router = fixture.debugElement.injector.","gt":"get(Router);"}
{"input":"<s> <EOL>function tests(heroClick) {<EOL>    it('<STR_LIT>', () => {<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    it( '<STR_LIT>', () => {<EOL>         fixture.detectChanges(); // runs initial lifecycle hooks<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    describe('<STR_LIT>', () => {<EOL>        let router;<EOL>        // Trigger component so it gets heroes and binds to them<EOL>        beforeEach(async(() => {<EOL>            router = fixture.debugElement.injector. get(Router);<EOL>            fixture.detectChanges(); // runs ngOnInit -> getHeroes<EOL>            fixture.whenStable() // No need for the `lastPromise` hack!<EOL>                .then(() => fixture.detectChanges()); // bind to heroes<EOL>        }));<EOL>        it('<STR_LIT>', () => {<EOL>            expect(comp.heroes.length).toBeGreaterThan(<NUM_LIT>, '<STR_LIT>');<EOL>        });<EOL>        it(","gt":"'<STR_LIT>', () => {"}
{"input":"<s> <EOL>function tests(heroClick) {<EOL>    it('<STR_LIT>', () => {<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    it( '<STR_LIT>', () => {<EOL>         fixture.detectChanges(); // runs initial lifecycle hooks<EOL>        expect(comp.heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>    });<EOL>    describe('<STR_LIT>', () => {<EOL>        let router;<EOL>        // Trigger component so it gets heroes and binds to them<EOL>        beforeEach(async(() => {<EOL>            router = fixture.debugElement.injector. get(Router);<EOL>            fixture.detectChanges(); // runs ngOnInit -> getHeroes<EOL>            fixture.whenStable() // No need for the `lastPromise` hack!<EOL>                .then(() => fixture.detectChanges()); // bind to heroes<EOL>        }));<EOL>        it('<STR_LIT>', () => {<EOL>            expect(comp.heroes.length).toBeGreaterThan(<NUM_LIT>, '<STR_LIT>');<EOL>        });<EOL>        it( '<STR_LIT>', () => {<EOL>            // Find and examine the displayed heroes<EOL>            // Look for them in the DOM by css class<EOL>            const heroes = fixture.nativeElement.querySelectorAll('<STR_LIT>');<EOL>            expect(heroes.length).toBe(<NUM_LIT>, '<STR_LIT>');<EOL>        });<EOL>        // #docregion navigate-test<EOL>        it('<STR_LIT>', () => {<EOL>","gt":"heroClick();"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>","gt":"case ts.SyntaxKind.StringLiteral:"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>         case ts.SyntaxKind.StringLiteral:<EOL>            modulePath = ms.text;<EOL>","gt":"break;"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>         case ts.SyntaxKind.StringLiteral:<EOL>            modulePath = ms.text;<EOL>             break;<EOL>        default:<EOL>            return {};<EOL>    }<EOL>    if (!modulePath.startsWith('<STR_LIT>')) {<EOL>        return {};<EOL>    }<EOL>    if (node.importClause) {<EOL>        if (node.importClause.","gt":"name) {"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>         case ts.SyntaxKind.StringLiteral:<EOL>            modulePath = ms.text;<EOL>             break;<EOL>        default:<EOL>            return {};<EOL>    }<EOL>    if (!modulePath.startsWith('<STR_LIT>')) {<EOL>        return {};<EOL>    }<EOL>    if (node.importClause) {<EOL>        if (node.importClause. name) {<EOL>            // This is of the form `import Name from 'path'`. Ignore.<EOL>            return {};<EOL>        }<EOL>        else if (node.importClause.namedBindings) {<EOL>            const","gt":"nb = node.importClause.namedBindings;"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>         case ts.SyntaxKind.StringLiteral:<EOL>            modulePath = ms.text;<EOL>             break;<EOL>        default:<EOL>            return {};<EOL>    }<EOL>    if (!modulePath.startsWith('<STR_LIT>')) {<EOL>        return {};<EOL>    }<EOL>    if (node.importClause) {<EOL>        if (node.importClause. name) {<EOL>            // This is of the form `import Name from 'path'`. Ignore.<EOL>            return {};<EOL>        }<EOL>        else if (node.importClause.namedBindings) {<EOL>            const  nb = node.importClause.namedBindings;<EOL>            if (nb.kind == ts.SyntaxKind.NamespaceImport) {<EOL>                // This is of the form `import * as name from 'path'`. Return `name.`.<EOL>                return {<EOL>                    [nb.name.text + '<STR_LIT>']:","gt":"modulePath,"}
{"input":"<s> function _angularImportsFromNode(node, _sourceFile) {<EOL>    const ms = node.moduleSpecifier;<EOL>    let modulePath;<EOL>    switch (ms.kind) {<EOL>         case ts.SyntaxKind.StringLiteral:<EOL>            modulePath = ms.text;<EOL>             break;<EOL>        default:<EOL>            return {};<EOL>    }<EOL>    if (!modulePath.startsWith('<STR_LIT>')) {<EOL>        return {};<EOL>    }<EOL>    if (node.importClause) {<EOL>        if (node.importClause. name) {<EOL>            // This is of the form `import Name from 'path'`. Ignore.<EOL>            return {};<EOL>        }<EOL>        else if (node.importClause.namedBindings) {<EOL>            const  nb = node.importClause.namedBindings;<EOL>            if (nb.kind == ts.SyntaxKind.NamespaceImport) {<EOL>                // This is of the form `import * as name from 'path'`. Return `name.`.<EOL>                return {<EOL>                    [nb.name.text + '<STR_LIT>']:  modulePath,<EOL>                };<EOL>            }<EOL>            else {<EOL>                // This is of the form `import {a,b,c} from 'path'`<EOL>                const namedImports = nb;<EOL>                return namedImports.elements<EOL>                    .map((is) => is.propertyName ? is.propertyName.text : is.name.text)<EOL>                    .reduce((acc, curr) => {<EOL>","gt":"acc[curr] = modulePath;"}
{"input":"<s> function getChannelFilePrefix() {<EOL>    const currentPlatform = getCurrentPlatform();<EOL>    if (currentPlatform === \"<STR_LIT>\") {<EOL>        const arch = process.","gt":"env.TEST_UPDATER_ARCH || process.arch;"}
{"input":"<s> export function ajaxGet(url, headers = null) {<EOL>    return new AjaxObservable({","gt":"method: '<STR_LIT>', url, headers });"}
{"input":"<s> <EOL>export function copyDir(src, destination, options = {}) {<EOL>    const fileCopier = new FileCopier(options.isUseHardLink, options.transformer);<EOL>    if (log.isDebugEnabled) {<EOL>        log.debug({ src, destination }, `<STR_LIT>`);<EOL>    }<EOL>    const createdSourceDirs = new","gt":"Set();"}
{"input":"<s> <EOL>export function copyDir(src, destination, options = {}) {<EOL>    const fileCopier = new FileCopier(options.isUseHardLink, options.transformer);<EOL>    if (log.isDebugEnabled) {<EOL>        log.debug({ src, destination }, `<STR_LIT>`);<EOL>    }<EOL>    const createdSourceDirs = new  Set();<EOL>    const links = [];<EOL>    return walk(src, options.filter, {<EOL>        consume: async (","gt":"file, stat, parent) => {"}
{"input":"<s> <EOL>export function copyDir(src, destination, options = {}) {<EOL>    const fileCopier = new FileCopier(options.isUseHardLink, options.transformer);<EOL>    if (log.isDebugEnabled) {<EOL>        log.debug({ src, destination }, `<STR_LIT>`);<EOL>    }<EOL>    const createdSourceDirs = new  Set();<EOL>    const links = [];<EOL>    return walk(src, options.filter, {<EOL>        consume: async ( file, stat, parent) => {<EOL>            if (!stat.isFile() && !stat.isSymbolicLink()) {<EOL>                return;<EOL>            }<EOL>            if (!createdSourceDirs.has(parent)) {<EOL>                await ensureDir(parent.replace(src, destination));<EOL>                createdSourceDirs.","gt":"add(parent);"}
{"input":"<s> export function tuneNsisUpdater(updater) {<EOL>","gt":"updater.httpExecutor = httpExecutor;"}
{"input":"<s> function clean(version) {<EOL>    return version.split(\"<STR_LIT>\").length ===","gt":"<NUM_LIT> ? `<STR_LIT>` : version;"}
{"input":"<s> export function assertSyncedModels(text, callback, setup = null) {<EOL>    var model = new TextModel(text, TextModel.DEFAULT_CREATION_OPTIONS, null);<EOL>    model.setEOL(EndOfLineSequence.LF);<EOL>    assertLineMapping(model, '<STR_LIT>');<EOL>    if (setup) {<EOL>","gt":"setup(model);"}
{"input":"<s> export function assertSyncedModels(text, callback, setup = null) {<EOL>    var model = new TextModel(text, TextModel.DEFAULT_CREATION_OPTIONS, null);<EOL>    model.setEOL(EndOfLineSequence.LF);<EOL>    assertLineMapping(model, '<STR_LIT>');<EOL>    if (setup) {<EOL>         setup(model);<EOL>        assertLineMapping(model, '<STR_LIT>');<EOL>    }<EOL>    var mirrorModel2 =","gt":"new MirrorTextModel(null, model.getLinesContent(), model.getEOL(), model.getVersionId());"}
{"input":"<s> export function assertSyncedModels(text, callback, setup = null) {<EOL>    var model = new TextModel(text, TextModel.DEFAULT_CREATION_OPTIONS, null);<EOL>    model.setEOL(EndOfLineSequence.LF);<EOL>    assertLineMapping(model, '<STR_LIT>');<EOL>    if (setup) {<EOL>         setup(model);<EOL>        assertLineMapping(model, '<STR_LIT>');<EOL>    }<EOL>    var mirrorModel2 =  new MirrorTextModel(null, model.getLinesContent(), model.getEOL(), model.getVersionId());<EOL>    var mirrorModel2PrevVersionId = model.getVersionId();<EOL>    model.onDidChangeContent((e) => {<EOL>        let versionId =","gt":"e.versionId;"}
{"input":"<s> export function assertSyncedModels(text, callback, setup = null) {<EOL>    var model = new TextModel(text, TextModel.DEFAULT_CREATION_OPTIONS, null);<EOL>    model.setEOL(EndOfLineSequence.LF);<EOL>    assertLineMapping(model, '<STR_LIT>');<EOL>    if (setup) {<EOL>         setup(model);<EOL>        assertLineMapping(model, '<STR_LIT>');<EOL>    }<EOL>    var mirrorModel2 =  new MirrorTextModel(null, model.getLinesContent(), model.getEOL(), model.getVersionId());<EOL>    var mirrorModel2PrevVersionId = model.getVersionId();<EOL>    model.onDidChangeContent((e) => {<EOL>        let versionId =  e.versionId;<EOL>        if (versionId < mirrorModel2PrevVersionId) {<EOL>            console.warn('<STR_LIT>');<EOL>        }<EOL>        mirrorModel2PrevVersionId = versionId;<EOL>        mirrorModel2.onEvents(e);<EOL>    });<EOL>    var assertMirrorModels = () => {<EOL>        assertLineMapping(model,","gt":"'<STR_LIT>');"}
{"input":"<s> async function addDependencies(packageJson, options) {<EOL>    let edits = false;<EOL>    const deps = { '<STR_LIT>': `<STR_LIT>`, '<STR_LIT>': '<STR_LIT>' };<EOL>    if (!packageJson.devDependencies) {<EOL>        packageJson.devDependencies = {};<EOL>    }<EOL>    for (const dep of Object.keys(deps)) {<EOL>        let","gt":"install = true;"}
{"input":"<s> async function addDependencies(packageJson, options) {<EOL>    let edits = false;<EOL>    const deps = { '<STR_LIT>': `<STR_LIT>`, '<STR_LIT>': '<STR_LIT>' };<EOL>    if (!packageJson.devDependencies) {<EOL>        packageJson.devDependencies = {};<EOL>    }<EOL>    for (const dep of Object.keys(deps)) {<EOL>        let  install = true;<EOL>        const existing = packageJson.devDependencies[dep];<EOL>        const target = deps[dep];<EOL>        if (existing !== target) {<EOL>            if (existing) {<EOL>","gt":"const message = `<STR_LIT>` +"}
{"input":"<s> async function addDependencies(packageJson, options) {<EOL>    let edits = false;<EOL>    const deps = { '<STR_LIT>': `<STR_LIT>`, '<STR_LIT>': '<STR_LIT>' };<EOL>    if (!packageJson.devDependencies) {<EOL>        packageJson.devDependencies = {};<EOL>    }<EOL>    for (const dep of Object.keys(deps)) {<EOL>        let  install = true;<EOL>        const existing = packageJson.devDependencies[dep];<EOL>        const target = deps[dep];<EOL>        if (existing !== target) {<EOL>            if (existing) {<EOL>                 const message = `<STR_LIT>` +<EOL>                    `<STR_LIT>`;<EOL>                install = await query(message, '<STR_LIT>', false, options);<EOL>            }<EOL>            if (install) {<EOL>                packageJson.devDependencies[","gt":"dep] = deps[dep];"}
{"input":"<s> function updateLaunchJsonDecorations(editor) {<EOL>    if (!editor || path.basename(editor.document.fileName) !== '<STR_LIT>') {<EOL>        return;<EOL>    }<EOL>    const ranges = [];<EOL>    let addPropertyAndValue = false;<EOL>","gt":"let depthInArray = <NUM_LIT>;"}
{"input":"<s> function updateLaunchJsonDecorations(editor) {<EOL>    if (!editor || path.basename(editor.document.fileName) !== '<STR_LIT>') {<EOL>        return;<EOL>    }<EOL>    const ranges = [];<EOL>    let addPropertyAndValue = false;<EOL>     let depthInArray = <NUM_LIT>;<EOL>    visit(editor.document.getText(), {<EOL>        onObjectProperty: (property, offset, length) => {<EOL>            // Decorate attributes which are unlikely to be edited by the user.<EOL>            // Only decorate \"configurations\" if it is not inside an array (compounds have a configurations property which should not be decorated).<EOL>            addPropertyAndValue = property === '<STR_LIT>' || property === '<STR_LIT>' || property === '<STR_LIT>' || property === '<STR_LIT>' || (property === '<STR_LIT>' && depthInArray === <NUM_LIT>);<EOL>            if (","gt":"addPropertyAndValue) {"}
{"input":"<s> function updateLaunchJsonDecorations(editor) {<EOL>    if (!editor || path.basename(editor.document.fileName) !== '<STR_LIT>') {<EOL>        return;<EOL>    }<EOL>    const ranges = [];<EOL>    let addPropertyAndValue = false;<EOL>     let depthInArray = <NUM_LIT>;<EOL>    visit(editor.document.getText(), {<EOL>        onObjectProperty: (property, offset, length) => {<EOL>            // Decorate attributes which are unlikely to be edited by the user.<EOL>            // Only decorate \"configurations\" if it is not inside an array (compounds have a configurations property which should not be decorated).<EOL>            addPropertyAndValue = property === '<STR_LIT>' || property === '<STR_LIT>' || property === '<STR_LIT>' || property === '<STR_LIT>' || (property === '<STR_LIT>' && depthInArray === <NUM_LIT>);<EOL>            if ( addPropertyAndValue) {<EOL>                ranges.push(new vscode.Range(editor.document.positionAt(offset), editor.document.positionAt(offset + length)));<EOL>            }<EOL>        },<EOL>        onLiteralValue: (value, offset, length) => {<EOL>            if (addPropertyAndValue) {<EOL>                ranges.push(new vscode.Range(editor.document.positionAt(offset), editor.document.positionAt(offset + length)));<EOL>            }<EOL>        },<EOL>        onArrayBegin: (offset, length) => {<EOL>","gt":"depthInArray++;"}
{"input":"<s> <EOL><EOL>export function timeoutWith(due, withObservable, scheduler = async) {<EOL>    let","gt":"absoluteTimeout = isDate(due);"}
{"input":"<s> export function createAtImportProps(importObj) {<EOL>    const named = Object.entries(importObj.named || {});<EOL>    const keyframes = Object.entries(importObj.keyframes || {});<EOL>    let params = '<STR_LIT>';<EOL>    if (importObj.defaultExport) {<EOL>","gt":"params += importObj.defaultExport;"}
{"input":"<s> export function createAtImportProps(importObj) {<EOL>    const named = Object.entries(importObj.named || {});<EOL>    const keyframes = Object.entries(importObj.keyframes || {});<EOL>    let params = '<STR_LIT>';<EOL>    if (importObj.defaultExport) {<EOL>         params += importObj.defaultExport;<EOL>    }<EOL>    if (importObj.defaultExport && (named.length || keyframes.length)) {<EOL>        params +=","gt":"'<STR_LIT>';"}
{"input":"<s> export function createAtImportProps(importObj) {<EOL>    const named = Object.entries(importObj.named || {});<EOL>    const keyframes = Object.entries(importObj.keyframes || {});<EOL>    let params = '<STR_LIT>';<EOL>    if (importObj.defaultExport) {<EOL>         params += importObj.defaultExport;<EOL>    }<EOL>    if (importObj.defaultExport && (named.length || keyframes.length)) {<EOL>        params +=  '<STR_LIT>';<EOL>    }<EOL>    if (named.length || keyframes.length) {<EOL>        params += '<STR_LIT>';<EOL>        const namedParts = getNamedImportParts(named);<EOL>","gt":"const keyFramesParts = getNamedImportParts(keyframes);"}
{"input":"<s> export function createAtImportProps(importObj) {<EOL>    const named = Object.entries(importObj.named || {});<EOL>    const keyframes = Object.entries(importObj.keyframes || {});<EOL>    let params = '<STR_LIT>';<EOL>    if (importObj.defaultExport) {<EOL>         params += importObj.defaultExport;<EOL>    }<EOL>    if (importObj.defaultExport && (named.length || keyframes.length)) {<EOL>        params +=  '<STR_LIT>';<EOL>    }<EOL>    if (named.length || keyframes.length) {<EOL>        params += '<STR_LIT>';<EOL>        const namedParts = getNamedImportParts(named);<EOL>         const keyFramesParts = getNamedImportParts(keyframes);<EOL>        params += namedParts.join('<STR_LIT>');<EOL>        if (keyFramesParts.length) {<EOL>            if (namedParts.length) {<EOL>                params += '<STR_LIT>';<EOL>            }<EOL>","gt":"params += `<STR_LIT>`;"}
{"input":"<s> function _transformProvider(provider, { useExisting, useValue, deps }) {<EOL>    return {<EOL>        token: provider.token,<EOL>","gt":"useClass: provider.useClass,"}
{"input":"<s> export function createChecker(types) {<EOL>    return () => {<EOL>        let index = <NUM_LIT>;<EOL>        return (node) => {<EOL>            const matcher = types[index];<EOL>            if (Array.isArray(matcher)) {<EOL>                return matcher.","gt":"includes(node.type);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =","gt":"appInfo.productFilename;"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>","gt":"const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[","gt":"\"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =","gt":"parsePlist(fileContents[<NUM_LIT>]);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,","gt":"macOptions.extendInfo);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const","gt":"appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>","gt":"appPlist.CFBundleIdentifier = appBundleIdentifier;"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist.","gt":"CFBundleExecutable = `<STR_LIT>`;"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier =","gt":"helperBundleIdentifier}.EH`<STR_LIT>;"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:","gt":"protocol.name,"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:","gt":"schemes.slice()"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const","gt":"fileAssociations = packager.fileAssociations;"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>","gt":"if (fileAssociations.length > <NUM_LIT>) {"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await","gt":"packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>","gt":"appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>         appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);<EOL>    }<EOL>","gt":"const promises = ["}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>         appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);<EOL>    }<EOL>     const promises = [<EOL>        writeFile(appPlistFilename, buildPlist(appPlist)),<EOL>        writeFile(helperPlistFilename, buildPlist(helperPlist)),<EOL>        writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),<EOL>","gt":"writeFile("}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>         appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);<EOL>    }<EOL>     const promises = [<EOL>        writeFile(appPlistFilename, buildPlist(appPlist)),<EOL>        writeFile(helperPlistFilename, buildPlist(helperPlist)),<EOL>        writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),<EOL>         writeFile(","gt":"helperNPPlistFilename, buildPlist(helperNPPlist)),"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>         appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);<EOL>    }<EOL>     const promises = [<EOL>        writeFile(appPlistFilename, buildPlist(appPlist)),<EOL>        writeFile(helperPlistFilename, buildPlist(helperPlist)),<EOL>        writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),<EOL>         writeFile( helperNPPlistFilename, buildPlist(helperNPPlist)),<EOL>        doRename(path.join(contentsPath, \"<STR_LIT>\"), packager.electronDistMacOsExecutableName, appPlist.CFBundleExecutable),<EOL>","gt":"unlinkIfExists(path.join(appOutDir,"}
{"input":"<s> <EOL>export async function createMacApp(packager, appOutDir, asarIntegrity) {<EOL>    const appInfo = packager.appInfo;<EOL>    const appFilename =  appInfo.productFilename;<EOL>    const contentsPath = path.join(appOutDir, packager.electronDistMacOsAppName, \"<STR_LIT>\");<EOL>    const frameworksPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>     const appPlistFilename = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const helperPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperEHPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const helperNPPlistFilename = path.join(frameworksPath, `<STR_LIT>`, \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const buildMetadata = packager.config;<EOL>    const fileContents = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, buildMetadata[ \"<STR_LIT>\"]], it => it == null ? it : readFile(it, \"<STR_LIT>\"));<EOL>    const appPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperEHPlist = parsePlist(fileContents[<NUM_LIT>]);<EOL>    const helperNPPlist =  parsePlist(fileContents[<NUM_LIT>]);<EOL>    // if an extend-info file was supplied, copy its contents in first<EOL>    if (fileContents[<NUM_LIT>] != null) {<EOL>        Object.assign(appPlist, parsePlist(fileContents[<NUM_LIT>]));<EOL>    }<EOL>    const macOptions = buildMetadata.mac || {};<EOL>    if (macOptions.extendInfo != null) {<EOL>        Object.assign(appPlist,  macOptions.extendInfo);<EOL>    }<EOL>    const  appBundleIdentifier = filterCFBundleIdentifier(appInfo.id);<EOL>    const oldHelperBundleId = buildMetadata[\"<STR_LIT>\"];<EOL>    if (oldHelperBundleId != null) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>    }<EOL>    const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `<STR_LIT>`);<EOL>    const icon = await packager.getIconPath();<EOL>    const oldIcon = appPlist.CFBundleIconFile;<EOL>    if (icon != null) {<EOL>        appPlist.CFBundleIconFile = `<STR_LIT>`;<EOL>    }<EOL>    appPlist.CFBundleDisplayName = appInfo.productName;<EOL>     appPlist.CFBundleIdentifier = appBundleIdentifier;<EOL>    appPlist.CFBundleName = appInfo.productName;<EOL>    // https://github.com/electron-userland/electron-builder/issues/1278<EOL>    appPlist.CFBundleExecutable = !appFilename.endsWith(\"<STR_LIT>\") ? appFilename : appFilename.substring(<NUM_LIT>, appFilename.length - \"<STR_LIT>\".length);<EOL>    helperPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperEHPlist. CFBundleExecutable = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleExecutable = `<STR_LIT>`;<EOL>    helperPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperEHPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleDisplayName = `<STR_LIT>`;<EOL>    helperPlist.CFBundleIdentifier = helperBundleIdentifier;<EOL>    helperEHPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    helperNPPlist.CFBundleIdentifier = `<STR_LIT>`;<EOL>    appPlist.CFBundleShortVersionString = macOptions.bundleShortVersion || appInfo.version;<EOL>    appPlist.CFBundleVersion = appInfo.buildVersion;<EOL>    if (macOptions.minimumSystemVersion != null) {<EOL>        appPlist.LSMinimumSystemVersion = macOptions.minimumSystemVersion;<EOL>    }<EOL>    const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols));<EOL>    if (protocols.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleURLTypes = protocols.map(protocol => {<EOL>            const schemes = asArray(protocol.schemes);<EOL>            if (schemes.length === <NUM_LIT>) {<EOL>                throw new InvalidConfigurationError(`<STR_LIT>`);<EOL>            }<EOL>            return {<EOL>                CFBundleURLName:  protocol.name,<EOL>                CFBundleTypeRole: protocol.role || \"<STR_LIT>\",<EOL>                CFBundleURLSchemes:  schemes.slice()<EOL>            };<EOL>        });<EOL>    }<EOL>    const resourcesPath = path.join(contentsPath, \"<STR_LIT>\");<EOL>    const  fileAssociations = packager.fileAssociations;<EOL>     if (fileAssociations.length > <NUM_LIT>) {<EOL>        appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async (fileAssociation) => {<EOL>            const extensions = asArray(fileAssociation.ext).map(normalizeExt);<EOL>            const customIcon = await  packager.getResource(getPlatformIconFileName(fileAssociation.icon, true), `<STR_LIT>`);<EOL>            let iconFile = appPlist.CFBundleIconFile;<EOL>            if (customIcon != null) {<EOL>                iconFile = path.basename(customIcon);<EOL>                await copyOrLinkFile(customIcon, path.join(resourcesPath, iconFile));<EOL>            }<EOL>            const result = {<EOL>                CFBundleTypeExtensions: extensions,<EOL>                CFBundleTypeName: fileAssociation.name || extensions[<NUM_LIT>],<EOL>                CFBundleTypeRole: fileAssociation.role || \"<STR_LIT>\",<EOL>                CFBundleTypeIconFile: iconFile<EOL>            };<EOL>            if (fileAssociation.isPackage) {<EOL>                result.LSTypeIsPackage = true;<EOL>            }<EOL>            return result;<EOL>        });<EOL>    }<EOL>    use(packager.platformSpecificBuildOptions.category || buildMetadata.category, it => appPlist.LSApplicationCategoryType = it);<EOL>    appPlist.NSHumanReadableCopyright = appInfo.copyright;<EOL>    if (asarIntegrity != null) {<EOL>         appPlist.AsarIntegrity = JSON.stringify(asarIntegrity);<EOL>    }<EOL>     const promises = [<EOL>        writeFile(appPlistFilename, buildPlist(appPlist)),<EOL>        writeFile(helperPlistFilename, buildPlist(helperPlist)),<EOL>        writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),<EOL>         writeFile( helperNPPlistFilename, buildPlist(helperNPPlist)),<EOL>        doRename(path.join(contentsPath, \"<STR_LIT>\"), packager.electronDistMacOsExecutableName, appPlist.CFBundleExecutable),<EOL>         unlinkIfExists(path.join(appOutDir,","gt":"\"<STR_LIT>\")),"}
{"input":"<s> export function registerRedrawWhenSegmentationDisplayStateChanged(displayState, renderLayer) {<EOL>    const dispatchRedrawNeeded = renderLayer.redrawNeeded.dispatch;<EOL>    renderLayer.registerDisposer(","gt":"displayState.segmentColorHash.changed.add(dispatchRedrawNeeded));"}
{"input":"<s> function getOutputPath(inputPath, hash) {<EOL>    const","gt":"extension = path.extname(inputPath);"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>","gt":"const args = debug7zArgs(\"<STR_LIT>\");"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =","gt":"false;"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>","gt":"isLevelSet = true;"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>         isLevelSet = true;<EOL>    }<EOL>    if (format === \"<STR_LIT>\" && options.compression === \"<STR_LIT>\") {<EOL>        // http://superuser.com/a/742034<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (!isLevelSet && !storeOnly) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.dictSize !=","gt":"null) {"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>         isLevelSet = true;<EOL>    }<EOL>    if (format === \"<STR_LIT>\" && options.compression === \"<STR_LIT>\") {<EOL>        // http://superuser.com/a/742034<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (!isLevelSet && !storeOnly) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.dictSize !=  null) {<EOL>        args.push(`<STR_LIT>`);<EOL>    }<EOL>    // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z<EOL>    // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input<EOL>    // tc and ta are off by default, but to be sure, we explicitly set it to off<EOL>    // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data<EOL>    if (!options.isRegularFile) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (format === \"<STR_LIT>\" || format.endsWith(\"<STR_LIT>\")) {<EOL>        if (options.solid === false) {<EOL>            args.","gt":"push(\"<STR_LIT>\");"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>         isLevelSet = true;<EOL>    }<EOL>    if (format === \"<STR_LIT>\" && options.compression === \"<STR_LIT>\") {<EOL>        // http://superuser.com/a/742034<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (!isLevelSet && !storeOnly) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.dictSize !=  null) {<EOL>        args.push(`<STR_LIT>`);<EOL>    }<EOL>    // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z<EOL>    // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input<EOL>    // tc and ta are off by default, but to be sure, we explicitly set it to off<EOL>    // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data<EOL>    if (!options.isRegularFile) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (format === \"<STR_LIT>\" || format.endsWith(\"<STR_LIT>\")) {<EOL>        if (options.solid === false) {<EOL>            args. push(\"<STR_LIT>\");<EOL>        }<EOL>        if (options.isArchiveHeaderCompressed === false) {<EOL>            args.push(\"<STR_LIT>\");<EOL>        }<EOL>        // args valid only for 7z<EOL>        // -mtm=off disable \"Stores last Modified timestamps for files.\"<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (options.method != null) {<EOL>        if (options.method !== \"<STR_LIT>\") {<EOL>            args.","gt":"push(`<STR_LIT>`);"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>         isLevelSet = true;<EOL>    }<EOL>    if (format === \"<STR_LIT>\" && options.compression === \"<STR_LIT>\") {<EOL>        // http://superuser.com/a/742034<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (!isLevelSet && !storeOnly) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.dictSize !=  null) {<EOL>        args.push(`<STR_LIT>`);<EOL>    }<EOL>    // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z<EOL>    // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input<EOL>    // tc and ta are off by default, but to be sure, we explicitly set it to off<EOL>    // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data<EOL>    if (!options.isRegularFile) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (format === \"<STR_LIT>\" || format.endsWith(\"<STR_LIT>\")) {<EOL>        if (options.solid === false) {<EOL>            args. push(\"<STR_LIT>\");<EOL>        }<EOL>        if (options.isArchiveHeaderCompressed === false) {<EOL>            args.push(\"<STR_LIT>\");<EOL>        }<EOL>        // args valid only for 7z<EOL>        // -mtm=off disable \"Stores last Modified timestamps for files.\"<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (options.method != null) {<EOL>        if (options.method !== \"<STR_LIT>\") {<EOL>            args. push(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    else if (format === \"<STR_LIT>\" || storeOnly) {<EOL>        args.","gt":"push(`<STR_LIT>`);"}
{"input":"<s> export function compute7zCompressArgs(format, options = {}) {<EOL>    let storeOnly = options.compression === \"<STR_LIT>\";<EOL>     const args = debug7zArgs(\"<STR_LIT>\");<EOL>    let isLevelSet = false;<EOL>    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {<EOL>        storeOnly =  false;<EOL>        args.push(`<STR_LIT>`);<EOL>         isLevelSet = true;<EOL>    }<EOL>    if (format === \"<STR_LIT>\" && options.compression === \"<STR_LIT>\") {<EOL>        // http://superuser.com/a/742034<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (!isLevelSet && !storeOnly) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (options.dictSize !=  null) {<EOL>        args.push(`<STR_LIT>`);<EOL>    }<EOL>    // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z<EOL>    // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input<EOL>    // tc and ta are off by default, but to be sure, we explicitly set it to off<EOL>    // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data<EOL>    if (!options.isRegularFile) {<EOL>        args.push(\"<STR_LIT>\");<EOL>    }<EOL>    if (format === \"<STR_LIT>\" || format.endsWith(\"<STR_LIT>\")) {<EOL>        if (options.solid === false) {<EOL>            args. push(\"<STR_LIT>\");<EOL>        }<EOL>        if (options.isArchiveHeaderCompressed === false) {<EOL>            args.push(\"<STR_LIT>\");<EOL>        }<EOL>        // args valid only for 7z<EOL>        // -mtm=off disable \"Stores last Modified timestamps for files.\"<EOL>        args.push(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    if (options.method != null) {<EOL>        if (options.method !== \"<STR_LIT>\") {<EOL>            args. push(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    else if (format === \"<STR_LIT>\" || storeOnly) {<EOL>        args. push(`<STR_LIT>`);<EOL>    }<EOL>","gt":"if (format === \"<STR_LIT>\") {"}
{"input":"<s> function getCommonSliceViewerState(viewer) {<EOL>    return {<EOL>        ...","gt":"getCommonViewerState(viewer),"}
{"input":"<s> // Intercepts the specified file path and inserts the mock file path.<EOL>function insertWellKnownFilePathIntoAuth(auth, filePath, mockFilePath) {<EOL>    const originalMockWellKnownFilePathFunction = auth._mockWellKnownFilePath;<EOL>    auth._mockWellKnownFilePath = (kfpath) => {<EOL>        if (","gt":"kfpath === filePath) {"}
{"input":"<s> async function checkWindowsResult(packager, checkOptions, artifacts, nameToTarget) {<EOL>    const appInfo = packager.appInfo;<EOL>    let squirrel = false;<EOL>    for (const target of nameToTarget.keys()) {<EOL>        if (target === \"<STR_LIT>\") {<EOL>","gt":"squirrel = true;"}
{"input":"<s> async function checkWindowsResult(packager, checkOptions, artifacts, nameToTarget) {<EOL>    const appInfo = packager.appInfo;<EOL>    let squirrel = false;<EOL>    for (const target of nameToTarget.keys()) {<EOL>        if (target === \"<STR_LIT>\") {<EOL>             squirrel = true;<EOL>            break;<EOL>        }<EOL>    }<EOL>    if (!squirrel) {<EOL>        return;<EOL>    }<EOL>    const packageFile = artifacts.find(it => it.file.endsWith(\"<STR_LIT>\")).file;<EOL>    const unZipper = new DecompressZip(packageFile);<EOL>    const fileDescriptors = await","gt":"unZipper.getFiles();"}
{"input":"<s> async function checkWindowsResult(packager, checkOptions, artifacts, nameToTarget) {<EOL>    const appInfo = packager.appInfo;<EOL>    let squirrel = false;<EOL>    for (const target of nameToTarget.keys()) {<EOL>        if (target === \"<STR_LIT>\") {<EOL>             squirrel = true;<EOL>            break;<EOL>        }<EOL>    }<EOL>    if (!squirrel) {<EOL>        return;<EOL>    }<EOL>    const packageFile = artifacts.find(it => it.file.endsWith(\"<STR_LIT>\")).file;<EOL>    const unZipper = new DecompressZip(packageFile);<EOL>    const fileDescriptors = await  unZipper.getFiles();<EOL>    // we test app-update.yml separately, don't want to complicate general assert (yes, it is not good that we write app-update.yml for squirrel.windows if we build nsis and squirrel.windows in parallel, but as squirrel.windows is deprecated, it is ok)<EOL>    const files = pathSorter(fileDescriptors.map(it => it.path.replace(/\\\\/g, \"<STR_LIT>\")).filter(it => (!it.startsWith(\"<STR_LIT>\") || it === \"<STR_LIT>\") && !it.endsWith(\"<STR_LIT>\") && !it.endsWith(\"<STR_LIT>\")));<EOL>    expect(files).toMatchSnapshot();<EOL>    if (checkOptions == null) {<EOL>        await unZipper.extractFile(fileDescriptors.filter(it => it.","gt":"path === \"<STR_LIT>\")[<NUM_LIT>], {"}
{"input":"<s> function getType(target) {<EOL>    let what = typeof target;<EOL>    if (what ===","gt":"'<STR_LIT>') {"}
{"input":"<s> // We will never lower expressions in a nested lexical scope so avoid entering them.<EOL>// This also avoids a bug in TypeScript 2.3 where the lexical scopes get out of sync<EOL>// when using visitEachChild.<EOL>function isLexicalScope(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.ArrowFunction:<EOL>        case ts.SyntaxKind.FunctionExpression:<EOL>","gt":"case ts.SyntaxKind.FunctionDeclaration:"}
{"input":"<s> // We will never lower expressions in a nested lexical scope so avoid entering them.<EOL>// This also avoids a bug in TypeScript 2.3 where the lexical scopes get out of sync<EOL>// when using visitEachChild.<EOL>function isLexicalScope(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.ArrowFunction:<EOL>        case ts.SyntaxKind.FunctionExpression:<EOL>         case ts.SyntaxKind.FunctionDeclaration:<EOL>        case ts.SyntaxKind.ClassExpression:<EOL>        case ts.SyntaxKind.ClassDeclaration:<EOL>        case ts.SyntaxKind.FunctionType:<EOL>        case ts.SyntaxKind.TypeLiteral:<EOL>        case ts.SyntaxKind.ArrayType:<EOL>            return","gt":"true;"}
{"input":"<s> function baselineCopy(subfolder = \"<STR_LIT>\") {<EOL>","gt":"return gulp.src([`<STR_LIT>`, `<STR_LIT>`])"}
{"input":"<s> // Node 6 compatibility.<EOL>function entries(x) {<EOL>    return Object.keys(x).map(k => [k, x[","gt":"k]]);"}
{"input":"<s> export function jwtdecode() {<EOL>","gt":"console.log(decode);"}
{"input":"<s> function parseVertexAttributeInfo(x) {<EOL>    verifyObject(x);<EOL>","gt":"return {"}
{"input":"<s> <EOL>export function addDeclarationToModule(source, modulePath, classifiedName, importPath) {<EOL>    return addSymbolToNgModuleMetadata(source, modulePath,","gt":"'<STR_LIT>', classifiedName, importPath);"}
{"input":"<s> function handleCyclicValues(context, passedThrough, refUniqID, node, value, parsedNode) {<EOL>    if (node) {<EOL>        const cyclicChain = passedThrough.map((variable) => variable || '<STR_LIT>');<EOL>        cyclicChain.push(","gt":"refUniqID);"}
{"input":"<s> export function getRuleScopeSelector(rule) {<EOL>    return","gt":"ignoreDeprecationWarn(() => rule.stScopeSelector);"}
{"input":"<s> export function getVolume(chunkManager, path) {<EOL>    let match = path.match(urlPattern);<EOL>    if (match ===","gt":"null) {"}
{"input":"<s> export function addGlobals(meta, selectorAst) {<EOL>    for (const ast of selectorAst) {<EOL>        walkSelector(ast, (inner) => {<EOL>","gt":"if (inner.type === '<STR_LIT>') {"}
{"input":"<s> export function getTrackableFragmentMain(value = DEFAULT_FRAGMENT_MAIN) {<EOL>","gt":"return new TrackableValue(value, verifyString);"}
{"input":"<s> export function computeStackHierarchy(stackInfo, tileSize) {<EOL>    let maxBound = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>        maxBound < stackInfo.upperVoxelBound[i] ? maxBound = stackInfo.upperVoxelBound[i] :<EOL>            maxBound = maxBound;<EOL>    }<EOL>    if (tileSize >= maxBound) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    let counter = <NUM_LIT>;<EOL>    while (maxBound > tileSize) {<EOL>        maxBound = maxBound /","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===","gt":"<NUM_LIT>) {"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>","gt":"return ref.server;"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace(","gt":"/@@/g, \"<STR_LIT>\")"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace( /@@/g, \"<STR_LIT>\")<EOL>            .replace(/@/g, \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        let pkg = $packages[ref.pkgName];<EOL>        if (pkg) {<EOL>            let batch = {};<EOL>            for (let n in pkg.f) {<EOL>                if (safeRegEx.test(n)) {<EOL>                    batch[n] = $import(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            return batch;<EOL>        }<EOL>    }<EOL>    if (!file) {<EOL>        let asyncMode = typeof o === \"<STR_LIT>\";<EOL>        let processStopped = $trigger(\"<STR_LIT>\", [name, o]);<EOL>        if (processStopped === false) {<EOL>            return;<EOL>        }<EOL>        return $async(name, (result) => asyncMode ? o(result) : null, o);<EOL>        // throw `File not found ${ref.validPath}`;<EOL>    }<EOL>    // pkgName<EOL>    let pkg = ref.pkgName;<EOL>    if (file.locals && file.locals.module)<EOL>","gt":"return file.locals.module.exports;"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace( /@@/g, \"<STR_LIT>\")<EOL>            .replace(/@/g, \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        let pkg = $packages[ref.pkgName];<EOL>        if (pkg) {<EOL>            let batch = {};<EOL>            for (let n in pkg.f) {<EOL>                if (safeRegEx.test(n)) {<EOL>                    batch[n] = $import(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            return batch;<EOL>        }<EOL>    }<EOL>    if (!file) {<EOL>        let asyncMode = typeof o === \"<STR_LIT>\";<EOL>        let processStopped = $trigger(\"<STR_LIT>\", [name, o]);<EOL>        if (processStopped === false) {<EOL>            return;<EOL>        }<EOL>        return $async(name, (result) => asyncMode ? o(result) : null, o);<EOL>        // throw `File not found ${ref.validPath}`;<EOL>    }<EOL>    // pkgName<EOL>    let pkg = ref.pkgName;<EOL>    if (file.locals && file.locals.module)<EOL>         return file.locals.module.exports;<EOL>    let locals = file.locals = {};<EOL>    // @NOTE: is fuseBoxDirname<EOL>    const path = $getDir(ref.validPath);<EOL>    locals.exports = {};<EOL>    locals.module = { exports: locals.exports };<EOL>    locals.require = (name, optionalCallback) => {<EOL>        const result = $import(name, {<EOL>","gt":"pkg,"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace( /@@/g, \"<STR_LIT>\")<EOL>            .replace(/@/g, \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        let pkg = $packages[ref.pkgName];<EOL>        if (pkg) {<EOL>            let batch = {};<EOL>            for (let n in pkg.f) {<EOL>                if (safeRegEx.test(n)) {<EOL>                    batch[n] = $import(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            return batch;<EOL>        }<EOL>    }<EOL>    if (!file) {<EOL>        let asyncMode = typeof o === \"<STR_LIT>\";<EOL>        let processStopped = $trigger(\"<STR_LIT>\", [name, o]);<EOL>        if (processStopped === false) {<EOL>            return;<EOL>        }<EOL>        return $async(name, (result) => asyncMode ? o(result) : null, o);<EOL>        // throw `File not found ${ref.validPath}`;<EOL>    }<EOL>    // pkgName<EOL>    let pkg = ref.pkgName;<EOL>    if (file.locals && file.locals.module)<EOL>         return file.locals.module.exports;<EOL>    let locals = file.locals = {};<EOL>    // @NOTE: is fuseBoxDirname<EOL>    const path = $getDir(ref.validPath);<EOL>    locals.exports = {};<EOL>    locals.module = { exports: locals.exports };<EOL>    locals.require = (name, optionalCallback) => {<EOL>        const result = $import(name, {<EOL>             pkg,<EOL>            path,<EOL>            v: ref.versions,<EOL>        });<EOL>        if (FuseBox[\"<STR_LIT>\"]) {<EOL>            syntheticDefaultExportPolyfill(result);<EOL>        }<EOL>","gt":"return result;"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace( /@@/g, \"<STR_LIT>\")<EOL>            .replace(/@/g, \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        let pkg = $packages[ref.pkgName];<EOL>        if (pkg) {<EOL>            let batch = {};<EOL>            for (let n in pkg.f) {<EOL>                if (safeRegEx.test(n)) {<EOL>                    batch[n] = $import(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            return batch;<EOL>        }<EOL>    }<EOL>    if (!file) {<EOL>        let asyncMode = typeof o === \"<STR_LIT>\";<EOL>        let processStopped = $trigger(\"<STR_LIT>\", [name, o]);<EOL>        if (processStopped === false) {<EOL>            return;<EOL>        }<EOL>        return $async(name, (result) => asyncMode ? o(result) : null, o);<EOL>        // throw `File not found ${ref.validPath}`;<EOL>    }<EOL>    // pkgName<EOL>    let pkg = ref.pkgName;<EOL>    if (file.locals && file.locals.module)<EOL>         return file.locals.module.exports;<EOL>    let locals = file.locals = {};<EOL>    // @NOTE: is fuseBoxDirname<EOL>    const path = $getDir(ref.validPath);<EOL>    locals.exports = {};<EOL>    locals.module = { exports: locals.exports };<EOL>    locals.require = (name, optionalCallback) => {<EOL>        const result = $import(name, {<EOL>             pkg,<EOL>            path,<EOL>            v: ref.versions,<EOL>        });<EOL>        if (FuseBox[\"<STR_LIT>\"]) {<EOL>            syntheticDefaultExportPolyfill(result);<EOL>        }<EOL>         return result;<EOL>    };<EOL>    if ($isBrowser || !g[\"<STR_LIT>\"].main) {<EOL>        locals.","gt":"require.main = { filename: \"<STR_LIT>\", paths: [] };"}
{"input":"<s> <EOL>function $import(name, o = {}) {<EOL>    // Test for external URLS<EOL>    // Basically : symbol can occure only at 4 and 5 position<EOL>    // Cuz \":\" is a not a valid symbol in filesystem<EOL>    // Charcode test is 3-4 times faster than regexp<EOL>    // 58 charCode is \":\"\"<EOL>    // console.log( \":\".charCodeAt(0) )<EOL>    // if (/^(http(s)?:|\\/\\/)/.test(name)) {<EOL>    //     return $loadURL(name);<EOL>    // }<EOL>    if (name.charCodeAt(<NUM_LIT>) === <NUM_LIT> || name.charCodeAt(<NUM_LIT>) ===  <NUM_LIT>) {<EOL>        return $loadURL(name);<EOL>    }<EOL>    let ref = $getRef(name, o);<EOL>    if (ref.server) {<EOL>         return ref.server;<EOL>    }<EOL>    let file = ref.file;<EOL>    // Wild card reference<EOL>    if (ref.wildcard) {<EOL>        // Prepare wildcard regexp<EOL>        let safeRegEx = new RegExp(ref.wildcard<EOL>            .replace(/\\*/g, \"<STR_LIT>\")<EOL>            .replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"<STR_LIT>\")<EOL>            .replace( /@@/g, \"<STR_LIT>\")<EOL>            .replace(/@/g, \"<STR_LIT>\"), \"<STR_LIT>\");<EOL>        let pkg = $packages[ref.pkgName];<EOL>        if (pkg) {<EOL>            let batch = {};<EOL>            for (let n in pkg.f) {<EOL>                if (safeRegEx.test(n)) {<EOL>                    batch[n] = $import(`<STR_LIT>`);<EOL>                }<EOL>            }<EOL>            return batch;<EOL>        }<EOL>    }<EOL>    if (!file) {<EOL>        let asyncMode = typeof o === \"<STR_LIT>\";<EOL>        let processStopped = $trigger(\"<STR_LIT>\", [name, o]);<EOL>        if (processStopped === false) {<EOL>            return;<EOL>        }<EOL>        return $async(name, (result) => asyncMode ? o(result) : null, o);<EOL>        // throw `File not found ${ref.validPath}`;<EOL>    }<EOL>    // pkgName<EOL>    let pkg = ref.pkgName;<EOL>    if (file.locals && file.locals.module)<EOL>         return file.locals.module.exports;<EOL>    let locals = file.locals = {};<EOL>    // @NOTE: is fuseBoxDirname<EOL>    const path = $getDir(ref.validPath);<EOL>    locals.exports = {};<EOL>    locals.module = { exports: locals.exports };<EOL>    locals.require = (name, optionalCallback) => {<EOL>        const result = $import(name, {<EOL>             pkg,<EOL>            path,<EOL>            v: ref.versions,<EOL>        });<EOL>        if (FuseBox[\"<STR_LIT>\"]) {<EOL>            syntheticDefaultExportPolyfill(result);<EOL>        }<EOL>         return result;<EOL>    };<EOL>    if ($isBrowser || !g[\"<STR_LIT>\"].main) {<EOL>        locals. require.main = { filename: \"<STR_LIT>\", paths: [] };<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export async function installOrRebuild(config, appDir, options, forceInstall = false) {<EOL>    const effectiveOptions = {<EOL>        buildFromSource: config.buildDependenciesFromSource === true,<EOL>        additionalArgs: asArray(config.npmArgs), ...options<EOL>    };<EOL>    if (forceInstall || !(await exists(path.join(appDir, \"<STR_LIT>\")))) {<EOL>        await installDependencies(appDir, effectiveOptions);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function getPackageToolPath() {<EOL>    if (process.env.FORCE_YARN === \"<STR_LIT>\") {<EOL>        return process.","gt":"platform === \"<STR_LIT>\" ? \"<STR_LIT>\" : \"<STR_LIT>\";"}
{"input":"<s> export function matchesIfStatementProcessEnv(node) {<EOL>    if (node.type && node.type === \"<STR_LIT>\") {<EOL>        // prevent detecting if else statement<EOL>        if (node.$parent && node.$parent.type === \"<STR_LIT>\") {<EOL>","gt":"return;"}
{"input":"<s> function createVariableStatementForDeclarations(declarations) {<EOL>    const varDecls = declarations.map(i => ts.createVariableDeclaration(i.name, undefined,","gt":"i.node));"}
{"input":"<s> function onInputEntered(responseText) {<EOL>    if (responseText !== undefined) {<EOL>        return {<EOL>            promptCancelled: false,<EOL>","gt":"responseText,"}
{"input":"<s> function onInputEntered(responseText) {<EOL>    if (responseText !== undefined) {<EOL>        return {<EOL>            promptCancelled: false,<EOL>             responseText,<EOL>        };<EOL>    }<EOL>    else {<EOL>        return {<EOL>            promptCancelled: true,<EOL>            responseText:","gt":"undefined,"}
{"input":"<s> export function getWebpackStatsConfig(verbose = false) {<EOL>","gt":"return verbose"}
{"input":"<s> // All lines / columns indexes are 0-based<EOL>// Note: source-map line indexes are 1-based, column 0-based<EOL>function expectMap(ctx, genLine, genCol, source = null, srcLine = null, srcCol = null) {<EOL>    const sm = ctx.toSourceMapGenerator('<STR_LIT>').toJSON();<EOL>    const genPosition = { line: genLine + <NUM_LIT>, column:","gt":"genCol };"}
{"input":"<s> function comparePaths(a, b, currentDirectory, ignoreCase) {<EOL>    if (a === b)<EOL>        return Comparison.EqualTo;<EOL>    if (a === undefined)<EOL>        return Comparison.LessThan;<EOL>    if (b === undefined)<EOL>        return","gt":"Comparison.GreaterThan;"}
{"input":"<s> function comparePaths(a, b, currentDirectory, ignoreCase) {<EOL>    if (a === b)<EOL>        return Comparison.EqualTo;<EOL>    if (a === undefined)<EOL>        return Comparison.LessThan;<EOL>    if (b === undefined)<EOL>        return  Comparison.GreaterThan;<EOL>    a = removeTrailingDirectorySeparator(a);<EOL>    b = removeTrailingDirectorySeparator(b);<EOL>    const aComponents = getNormalizedPathComponents(a, currentDirectory);<EOL>","gt":"const bComponents = getNormalizedPathComponents(b, currentDirectory);"}
{"input":"<s> function comparePaths(a, b, currentDirectory, ignoreCase) {<EOL>    if (a === b)<EOL>        return Comparison.EqualTo;<EOL>    if (a === undefined)<EOL>        return Comparison.LessThan;<EOL>    if (b === undefined)<EOL>        return  Comparison.GreaterThan;<EOL>    a = removeTrailingDirectorySeparator(a);<EOL>    b = removeTrailingDirectorySeparator(b);<EOL>    const aComponents = getNormalizedPathComponents(a, currentDirectory);<EOL>     const bComponents = getNormalizedPathComponents(b, currentDirectory);<EOL>    const sharedLength = Math.min(aComponents.length, bComponents.length);<EOL>    for (let i = <NUM_LIT>; i < sharedLength; i++) {<EOL>        const result = compareStrings(aComponents[i], bComponents[i], ignoreCase);<EOL>        if (","gt":"result !== Comparison.EqualTo) {"}
{"input":"<s> export function getAppModulePath(host, app) {<EOL>    const mainPath = normalize(`<STR_LIT>`);<EOL>    const moduleRelativePath = findBootstrapModulePath(host,","gt":"mainPath);"}
{"input":"<s> export function registerSingleMeshVertexAttributesFactory(name, factory) {<EOL>    singleMeshVertexAttributesFactories.set(","gt":"name, factory);"}
{"input":"<s> <EOL>export function getProcessStartTime(pid) {<EOL>    let args;<EOL>    if (process.platform === '<STR_LIT>') {<EOL>        args = [`<STR_LIT>`, '<STR_LIT>'];<EOL>    }<EOL>","gt":"else if (process.platform === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function getProcessStartTime(pid) {<EOL>    let args;<EOL>    if (process.platform === '<STR_LIT>') {<EOL>        args = [`<STR_LIT>`, '<STR_LIT>'];<EOL>    }<EOL>     else if (process.platform === '<STR_LIT>') {<EOL>        args = ['<STR_LIT>', pid.toString(), '<STR_LIT>', '<STR_LIT>'];<EOL>    }<EOL>    else {<EOL>        throw new Error(","gt":"process.platform}`<STR_LIT>;"}
{"input":"<s> <EOL>export function getProcessStartTime(pid) {<EOL>    let args;<EOL>    if (process.platform === '<STR_LIT>') {<EOL>        args = [`<STR_LIT>`, '<STR_LIT>'];<EOL>    }<EOL>     else if (process.platform === '<STR_LIT>') {<EOL>        args = ['<STR_LIT>', pid.toString(), '<STR_LIT>', '<STR_LIT>'];<EOL>    }<EOL>    else {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    const psResult = child_process.spawnSync('<STR_LIT>', args).stdout.toString();<EOL>    // there was an error executing psresult<EOL>    if (!psResult) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    const psSplit = psResult.split('<STR_LIT>');<EOL>    // successfuly able to run \"ps\", but no process was found<EOL>    if (psSplit[<NUM_LIT>] === '<STR_LIT>') {<EOL>        return undefined;<EOL>    }<EOL>    if (","gt":"psSplit[<NUM_LIT>]) {"}
{"input":"<s> export function _localeFactory(locale) {<EOL>    return","gt":"locale || '<STR_LIT>';"}
{"input":"<s> <EOL>function computeSourcesChunkBounds(sourcesLowerBound, sourcesUpperBound, sources) {<EOL>    for (let i = <NUM_LIT>; i < <NUM_LIT>; ++i) {<EOL>        sourcesLowerBound[i] = Number.POSITIVE_INFINITY;<EOL>        sourcesUpperBound[i] = Number.NEGATIVE_INFINITY;<EOL>    }<EOL>    for (let source of sources) {<EOL>        let { spec } = source;<EOL>        let { lowerChunkBound, upperChunkBound } = spec;<EOL>        for (let i = <NUM_LIT>; i < <NUM_LIT>; ++i) {<EOL>            sourcesLowerBound[i] = Math.min(sourcesLowerBound[i], lowerChunkBound[i]);<EOL>            sourcesUpperBound[i] = Math.max(","gt":"sourcesUpperBound[i], upperChunkBound[i]);"}
{"input":"<s> function getWebglDataType(dataType) {<EOL>    switch (dataType) {<EOL>","gt":"case DataType.FLOAT32:"}
{"input":"<s> export function decodeSwcSkeletonChunk(chunk, swcStr) {<EOL>    let swcObjects = parseSwc(swcStr);<EOL>    if (swcObjects.length < <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    let glVertices = new Float32Array(<NUM_LIT> * (swcObjects.length));<EOL>    let","gt":"glIndices = new Uint32Array(<NUM_LIT> * (swcObjects.length - <NUM_LIT>));"}
{"input":"<s> export function decodeSwcSkeletonChunk(chunk, swcStr) {<EOL>    let swcObjects = parseSwc(swcStr);<EOL>    if (swcObjects.length < <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    let glVertices = new Float32Array(<NUM_LIT> * (swcObjects.length));<EOL>    let  glIndices = new Uint32Array(<NUM_LIT> * (swcObjects.length - <NUM_LIT>));<EOL>    swcObjects.forEach(function (swc_obj, i) {<EOL>        glVertices[<NUM_LIT> * i] = swc_obj.z;<EOL>        glVertices[<NUM_LIT> * i + <NUM_LIT>] = swc_obj.y;<EOL>        glVertices[<NUM_LIT> *","gt":"i + <NUM_LIT>] = swc_obj.x;"}
{"input":"<s> export function decodeSwcSkeletonChunk(chunk, swcStr) {<EOL>    let swcObjects = parseSwc(swcStr);<EOL>    if (swcObjects.length < <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    let glVertices = new Float32Array(<NUM_LIT> * (swcObjects.length));<EOL>    let  glIndices = new Uint32Array(<NUM_LIT> * (swcObjects.length - <NUM_LIT>));<EOL>    swcObjects.forEach(function (swc_obj, i) {<EOL>        glVertices[<NUM_LIT> * i] = swc_obj.z;<EOL>        glVertices[<NUM_LIT> * i + <NUM_LIT>] = swc_obj.y;<EOL>        glVertices[<NUM_LIT> *  i + <NUM_LIT>] = swc_obj.x;<EOL>        if (swc_obj.parent !== -<NUM_LIT>) {<EOL>            glIndices[<NUM_LIT> * (i - <NUM_LIT>)] = i;<EOL>","gt":"glIndices[<NUM_LIT> * i - <NUM_LIT>] = swc_obj.parent;"}
{"input":"<s> export function getDefaultPerspectivePanelBindings() {<EOL>    if (defaultPerspectivePanelBindings === undefined) {<EOL>        defaultPerspectivePanelBindings = EventActionMap.fromObject({<EOL>            '<STR_LIT>': { action: '<STR_LIT>', stopPropagation:","gt":"true },"}
{"input":"<s> function set_scale(url, options) {<EOL>    if (options.y1 && options.y1.scale) {<EOL>        switch (options.y1.scale) {<EOL>            case","gt":"AxisScale.LOG:"}
{"input":"<s> <EOL>export function add_query(dashboard, name, target) {<EOL>    log.debug('<STR_LIT>');<EOL>    let query = new Query({ name: name, targets: target });<EOL>","gt":"manager.without_updates(() => {"}
{"input":"<s> function extractStyle(styleList) {<EOL>    var rv = { scoped: '<STR_LIT>', global: '<STR_LIT>', some: false };<EOL>    if (styleList)<EOL>        for (let s in styleList) {<EOL>            let style = styleList[","gt":"s], content = style.content;"}
{"input":"<s> function _simpleAsString(modifiers, key, labels) {<EOL>    if (key === null) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    let","gt":"result = [];"}
{"input":"<s> function _simpleAsString(modifiers, key, labels) {<EOL>    if (key === null) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    let  result = [];<EOL>    // translate modifier keys: Ctrl-Shift-Alt-Meta<EOL>    if (modifiers.ctrlKey) {<EOL>        result.push(labels.","gt":"ctrlKey);"}
{"input":"<s> function _simpleAsString(modifiers, key, labels) {<EOL>    if (key === null) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    let  result = [];<EOL>    // translate modifier keys: Ctrl-Shift-Alt-Meta<EOL>    if (modifiers.ctrlKey) {<EOL>        result.push(labels. ctrlKey);<EOL>    }<EOL>    if (modifiers.shiftKey) {<EOL>        result.push(labels.shiftKey);<EOL>    }<EOL>    if (modifiers.altKey) {<EOL>        result.push(labels.altKey);<EOL>    }<EOL>    if (modifiers.metaKey) {<EOL>        result.push(","gt":"labels.metaKey);"}
{"input":"<s> export function provideReferences(model, position) {<EOL>    // collect references from all providers<EOL>    const promises = ReferenceProviderRegistry.ordered(model).map(provider => {<EOL>        return asWinJsPromise((token) => {<EOL>            return provider.provideReferences(model, position, { includeDeclaration: true }, token);<EOL>        }).","gt":"then(result => {"}
{"input":"<s> export function provideReferences(model, position) {<EOL>    // collect references from all providers<EOL>    const promises = ReferenceProviderRegistry.ordered(model).map(provider => {<EOL>        return asWinJsPromise((token) => {<EOL>            return provider.provideReferences(model, position, { includeDeclaration: true }, token);<EOL>        }). then(result => {<EOL>            if (Array.isArray(result)) {<EOL>","gt":"return result;"}
{"input":"<s> export function provideReferences(model, position) {<EOL>    // collect references from all providers<EOL>    const promises = ReferenceProviderRegistry.ordered(model).map(provider => {<EOL>        return asWinJsPromise((token) => {<EOL>            return provider.provideReferences(model, position, { includeDeclaration: true }, token);<EOL>        }). then(result => {<EOL>            if (Array.isArray(result)) {<EOL>                 return result;<EOL>            }<EOL>            return undefined;<EOL>        }, err => {<EOL>            onUnexpectedExternalError(err);<EOL>        });<EOL>    });<EOL>    return TPromise.join(promises).then(references => {<EOL>        let result = [];<EOL>        for (let ref of references) {<EOL>","gt":"if (ref) {"}
{"input":"<s> export function setup() {<EOL>    describe('<STR_LIT>', () => {<EOL>        before(async function () {<EOL>            this.app.suiteName = '<STR_LIT>';<EOL>            const app = this.app","gt":";"}
{"input":"<s> export function setup() {<EOL>    describe('<STR_LIT>', () => {<EOL>        before(async function () {<EOL>            this.app.suiteName = '<STR_LIT>';<EOL>            const app = this.app ;<EOL>            // restart with preventing additional windows from restoring<EOL>            // to ensure the window after restart is the multi-root workspace<EOL>            await app.restart({ workspaceOrFolder: app.workspaceFilePath, extraArgs: [","gt":"'<STR_LIT>'] });"}
{"input":"<s> export function setup() {<EOL>    describe('<STR_LIT>', () => {<EOL>        before(async function () {<EOL>            this.app.suiteName = '<STR_LIT>';<EOL>            const app = this.app ;<EOL>            // restart with preventing additional windows from restoring<EOL>            // to ensure the window after restart is the multi-root workspace<EOL>            await app.restart({ workspaceOrFolder: app.workspaceFilePath, extraArgs: [ '<STR_LIT>'] });<EOL>        });<EOL>        it('<STR_LIT>', async function () {<EOL>            const app = this.app;<EOL>            await app.workbench.quickopen.openQuickOpen('<STR_LIT>');<EOL>            await app.workbench.quickopen.","gt":"waitForQuickOpenElements(names => names.length === <NUM_LIT>);"}
{"input":"<s> export function setup() {<EOL>    describe('<STR_LIT>', () => {<EOL>        before(async function () {<EOL>            this.app.suiteName = '<STR_LIT>';<EOL>            const app = this.app ;<EOL>            // restart with preventing additional windows from restoring<EOL>            // to ensure the window after restart is the multi-root workspace<EOL>            await app.restart({ workspaceOrFolder: app.workspaceFilePath, extraArgs: [ '<STR_LIT>'] });<EOL>        });<EOL>        it('<STR_LIT>', async function () {<EOL>            const app = this.app;<EOL>            await app.workbench.quickopen.openQuickOpen('<STR_LIT>');<EOL>            await app.workbench.quickopen. waitForQuickOpenElements(names => names.length === <NUM_LIT>);<EOL>            await app.workbench.quickopen.closeQuickOpen();<EOL>        });<EOL>        it('<STR_LIT>', async function () {<EOL>            const app =","gt":"this.app;"}
{"input":"<s> export function mapEvent(event, map) {<EOL>    return (listener, thisArgs =","gt":"null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables);"}
{"input":"<s> <EOL>export function subscribeOn(scheduler, delay = <NUM_LIT>) {<EOL>    return this.lift(new","gt":"SubscribeOnOperator(scheduler, delay));"}
{"input":"<s> function getBodyUTF8(res) {<EOL>    return res.getBody(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function addBootstrapToModule(source, modulePath, classifiedName, importPath) {<EOL>    return addSymbolToNgModuleMetadata(","gt":"source, modulePath, '<STR_LIT>', classifiedName, importPath);"}
{"input":"<s> export function makeDefaultViewer(options) {<EOL>    disableContextMenu();<EOL>    disableWheel();<EOL>    try {<EOL>        let display = new","gt":"DisplayContext(document.getElementById('<STR_LIT>'));"}
{"input":"<s> export function makeDefaultViewer(options) {<EOL>    disableContextMenu();<EOL>    disableWheel();<EOL>    try {<EOL>        let display = new  DisplayContext(document.getElementById('<STR_LIT>'));<EOL>        return new Viewer(display, options);<EOL>    }<EOL>    catch (error) {<EOL>        StatusMessage.","gt":"showMessage(`<STR_LIT>`);"}
{"input":"<s> function addToArray(arr, index, value) {<EOL>    // perf: array.push is faster than array.splice!<EOL>    if (index >= arr.length) {<EOL>","gt":"arr.push(value);"}
{"input":"<s> function getRandomInt(min, max) {<EOL>    return Math.floor(","gt":"Math.random() * (max - min + <NUM_LIT>)) + min;"}
{"input":"<s> <EOL>export function sampleTime(period, scheduler = async) {<EOL>    return this.lift(","gt":"new SampleTimeOperator(period, scheduler));"}
{"input":"<s> function is_line_chart(item) {<EOL>","gt":"return ((item instanceof StandardTimeSeries)"}
{"input":"<s> <EOL>export function getLocaleId(locale) {<EOL>","gt":"return findLocaleData(locale)[LocaleDataIndex.LocaleId];"}
{"input":"<s> export function bindDefaultCopyHandler(viewer) {<EOL>    viewer.registerEventListener(document, '<STR_LIT>', (event) => {<EOL>        if (eventHasInputTextTarget(event)) {<EOL>","gt":"return;"}
{"input":"<s> // Sort chunks according to a predefined order:<EOL>// inline, polyfills, all styles, vendor, main<EOL>export function packageChunkSort(appConfig) {<EOL>    const entryPoints = generateEntryPoints(appConfig);<EOL>    function sort(left, right) {<EOL>        let leftIndex = entryPoints.indexOf(left.names[<NUM_LIT>]);<EOL>        let rightindex = entryPoints.indexOf(right.names[<NUM_LIT>]);<EOL>        if (leftIndex > rightindex) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> <EOL>export function windowCount(windowSize, startWindowEvery = <NUM_LIT>) {<EOL>    return this.lift(new WindowCountOperator(windowSize,","gt":"startWindowEvery));"}
{"input":"<s> export function encodeBytesToFloat32(x) {<EOL>    let xBytes = new Uint8Array(x.buffer, x.byteOffset, x.byteLength);<EOL>    let length = xBytes.length;<EOL>    let result = new","gt":"Float32Array(length);"}
{"input":"<s> <EOL>export function observeOn(scheduler, delay = <NUM_LIT>) {<EOL>    return","gt":"this.lift(new ObserveOnOperator(scheduler, delay));"}
{"input":"<s> export function removeSignalBinding(signal, handler) {<EOL>    signal.","gt":"remove(handler);"}
{"input":"<s> export function addSignalBinding(signal, handler) {<EOL>","gt":"signal.add(handler);"}
{"input":"<s> export function _window() {<EOL>    return {<EOL>        prebootData: window[","gt":"'<STR_LIT>'],"}
{"input":"<s> <EOL><EOL>export function switchMapTo(innerObservable, resultSelector) {<EOL>    return this.lift(new","gt":"SwitchMapToOperator(innerObservable, resultSelector));"}
{"input":"<s> function cursorCommandAndTokenize(model, cursor, command, extraData, overwriteSource) {<EOL>    cursor.trigger(overwriteSource || '<STR_LIT>',","gt":"command, extraData);"}
{"input":"<s> <EOL>export function UsePipes(...pipes) {<EOL>    return (target, key, descriptor) => {<EOL>        if (descriptor) {<EOL>            Reflect.defineMetadata(","gt":"PIPES_METADATA, pipes, descriptor.value);"}
{"input":"<s> export function withModule(moduleDef, fn) {<EOL>    if (fn) {<EOL>        // Not using an arrow function to preserve context passed from call site<EOL>        return function () {<EOL>","gt":"const testBed = getTestBed();"}
{"input":"<s> export function make(data, init) {<EOL>    if (data instanceof DashboardItem) {<EOL>        return data;<EOL>    }<EOL>    if ((","gt":"typeof (data) === '<STR_LIT>') && constructors.has(data)) {"}
{"input":"<s> function doRemoveFromValueTree(valueTree, segments) {<EOL>    const first = segments.shift();<EOL>    if (segments.length === <NUM_LIT>) {<EOL>        // Reached last segment<EOL>        delete valueTree[first];<EOL>","gt":"return;"}
{"input":"<s> function doRemoveFromValueTree(valueTree, segments) {<EOL>    const first = segments.shift();<EOL>    if (segments.length === <NUM_LIT>) {<EOL>        // Reached last segment<EOL>        delete valueTree[first];<EOL>         return;<EOL>    }<EOL>    if (Object.keys(valueTree).indexOf(first) !== -<NUM_LIT>) {<EOL>        const value = valueTree[first];<EOL>        if (typeof value === '<STR_LIT>' && !Array.","gt":"isArray(value)) {"}
{"input":"<s> function doRemoveFromValueTree(valueTree, segments) {<EOL>    const first = segments.shift();<EOL>    if (segments.length === <NUM_LIT>) {<EOL>        // Reached last segment<EOL>        delete valueTree[first];<EOL>         return;<EOL>    }<EOL>    if (Object.keys(valueTree).indexOf(first) !== -<NUM_LIT>) {<EOL>        const value = valueTree[first];<EOL>        if (typeof value === '<STR_LIT>' && !Array. isArray(value)) {<EOL>            doRemoveFromValueTree(value, segments);<EOL>            if (Object.keys(value).length === <NUM_LIT>) {<EOL>                delete valueTree[","gt":"first];"}
{"input":"<s> export function isNewline(code) {<EOL>    switch (code) {<EOL>        case chars.$FF:<EOL>","gt":"case chars.$CR:"}
{"input":"<s> // Checks that `x' is an array, maps each element by parseElement.<EOL>export function parseArray(x, parseElement) {<EOL>    if (!Array.isArray(x)) {<EOL>        throw new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> export function openShardedHttpRequest(baseUrls, path, method = '<STR_LIT>') {<EOL>    let xhr = new XMLHttpRequest();<EOL>    const url = pickShard(baseUrls,","gt":"path);"}
{"input":"<s> function assertAggregatedLevelEqual(level, expected) {<EOL>    assert.ok(level.price.eq(expected.price), `<STR_LIT>`);<EOL>    assert.ok(level.totalSize.eq(expected.totalSize), '<STR_LIT>');<EOL>    assert.ok(level.value.eq(expected.","gt":"value), '<STR_LIT>');"}
{"input":"<s> function hasLifecycleHook(hook, directive) {<EOL>    return hasLifecycleHookImpl(new JitReflector(),","gt":"hook, directive);"}
{"input":"<s> function _flattenGroupPlayersRecur(players, finalPlayers) {<EOL>    for (let i = <NUM_LIT>; i < players.length; i++) {<EOL>        const player = players[i];<EOL>        if (player instanceof","gt":"AnimationGroupPlayer) {"}
{"input":"<s> // TODO: add a working example after alpha38 is released<EOL><EOL>export function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {<EOL>    return Error(","gt":"provider1} ${provider2}`<STR_LIT>;"}
{"input":"<s> <EOL>export function state(name, styles) {<EOL>    return _state(name,","gt":"styles);"}
{"input":"<s> function expectEntries(locationMarker, info, ...names) {<EOL>    let entries = {};<EOL>    if (!info) {<EOL>        throw new Error(","gt":"locationMarker} to include ${names.join('<STR_LIT>')} but no result provided`<STR_LIT>;"}
{"input":"<s> function expectEntries(locationMarker, info, ...names) {<EOL>    let entries = {};<EOL>    if (!info) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    else {<EOL>","gt":"for (let entry of info.entries) {"}
{"input":"<s> function expectEntries(locationMarker, info, ...names) {<EOL>    let entries = {};<EOL>    if (!info) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    else {<EOL>         for (let entry of info.entries) {<EOL>            entries[entry.name] = true;<EOL>        }<EOL>        let shouldContains = names.filter(name => !name.startsWith('<STR_LIT>'));<EOL>        let shouldNotContain = names.filter(name => name.startsWith('<STR_LIT>'));<EOL>        let missing =","gt":"shouldContains.filter(name => !entries[name]);"}
{"input":"<s> function generateRandomBook(n) {<EOL>    const result = {<EOL>        orders: [],<EOL>        totalBids: ZERO,<EOL>        totalAsks: ZERO,<EOL>        totalBidValue:","gt":"ZERO,"}
{"input":"<s> function generateRandomBook(n) {<EOL>    const result = {<EOL>        orders: [],<EOL>        totalBids: ZERO,<EOL>        totalAsks: ZERO,<EOL>        totalBidValue:  ZERO,<EOL>        totalAsksValue: ZERO<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < n; i++) {<EOL>        const side =","gt":"Math.random() >= <NUM_LIT> ? '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> function generateRandomBook(n) {<EOL>    const result = {<EOL>        orders: [],<EOL>        totalBids: ZERO,<EOL>        totalAsks: ZERO,<EOL>        totalBidValue:  ZERO,<EOL>        totalAsksValue: ZERO<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < n; i++) {<EOL>        const side =  Math.random() >= <NUM_LIT> ? '<STR_LIT>' : '<STR_LIT>';<EOL>        const size = Big(String(Math.random() * <NUM_LIT>)).round(<NUM_LIT>);<EOL>        const price = side === '<STR_LIT>' ? Big(String(<NUM_LIT> - Math.random() * <NUM_LIT>)).round(<NUM_LIT>) : Big(String(<NUM_LIT> + Math.random() * <NUM_LIT>)).round(<NUM_LIT>);<EOL>","gt":"result.orders.push({"}
{"input":"<s> function generateRandomBook(n) {<EOL>    const result = {<EOL>        orders: [],<EOL>        totalBids: ZERO,<EOL>        totalAsks: ZERO,<EOL>        totalBidValue:  ZERO,<EOL>        totalAsksValue: ZERO<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < n; i++) {<EOL>        const side =  Math.random() >= <NUM_LIT> ? '<STR_LIT>' : '<STR_LIT>';<EOL>        const size = Big(String(Math.random() * <NUM_LIT>)).round(<NUM_LIT>);<EOL>        const price = side === '<STR_LIT>' ? Big(String(<NUM_LIT> - Math.random() * <NUM_LIT>)).round(<NUM_LIT>) : Big(String(<NUM_LIT> + Math.random() * <NUM_LIT>)).round(<NUM_LIT>);<EOL>         result.orders.push({<EOL>            id: `<STR_LIT>`,<EOL>            side: side,<EOL>","gt":"size: size,"}
{"input":"<s> export function mixin(mixinClass) {<EOL>    this.offset = this.offset ? ++this.offset : Math.random() * <NUM_LIT>;<EOL>    Object.defineProperty(","gt":"mixinClass, '<STR_LIT>', {"}
{"input":"<s> function rejectWithError(msg, error) {<EOL>    const err = new GTTError(`<STR_LIT>`,","gt":"error);"}
{"input":"<s> function validateSingle(document, publishDiagnostics = true) {<EOL>    // We validate document in a queue but open / close documents directly. So we need to deal with the<EOL>    // fact that a document might be gone from the server.<EOL>    if (!documents.get(document.uri)) {<EOL>        return Promise.resolve(undefined);<EOL>    }<EOL>    return resolveSettings(document).then((settings) => {<EOL>        if (!settings.validate) {<EOL>","gt":"return;"}
{"input":"<s> function validateSingle(document, publishDiagnostics = true) {<EOL>    // We validate document in a queue but open / close documents directly. So we need to deal with the<EOL>    // fact that a document might be gone from the server.<EOL>    if (!documents.get(document.uri)) {<EOL>        return Promise.resolve(undefined);<EOL>    }<EOL>    return resolveSettings(document).then((settings) => {<EOL>        if (!settings.validate) {<EOL>             return;<EOL>        }<EOL>        try {<EOL>","gt":"validate(document, settings, publishDiagnostics);"}
{"input":"<s> function validateSingle(document, publishDiagnostics = true) {<EOL>    // We validate document in a queue but open / close documents directly. So we need to deal with the<EOL>    // fact that a document might be gone from the server.<EOL>    if (!documents.get(document.uri)) {<EOL>        return Promise.resolve(undefined);<EOL>    }<EOL>    return resolveSettings(document).then((settings) => {<EOL>        if (!settings.validate) {<EOL>             return;<EOL>        }<EOL>        try {<EOL>             validate(document, settings, publishDiagnostics);<EOL>            connection.sendNotification(StatusNotification.type, { state: Status.ok });<EOL>        }<EOL>        catch (","gt":"err) {"}
{"input":"<s> <EOL>export function getLocaleDateFormat(locale, width) {<EOL>    const data = findLocaleData(","gt":"locale);"}
{"input":"<s> export default function (options, logger) {<EOL>    _buildRules(logger);<EOL>    const lintOptions = {<EOL>","gt":"fix: options.fix,"}
{"input":"<s> export default function (options, logger) {<EOL>    _buildRules(logger);<EOL>    const lintOptions = {<EOL>         fix: options.fix,<EOL>    };<EOL>    const program = Linter.createProgram(path.join(__dirname, '<STR_LIT>'));<EOL>    const","gt":"linter = new Linter(lintOptions, program);"}
{"input":"<s> export default function (options, logger) {<EOL>    _buildRules(logger);<EOL>    const lintOptions = {<EOL>         fix: options.fix,<EOL>    };<EOL>    const program = Linter.createProgram(path.join(__dirname, '<STR_LIT>'));<EOL>    const  linter = new Linter(lintOptions, program);<EOL>    const tsLintPath = path.join(__dirname, '<STR_LIT>');<EOL>    const tsLintConfig = Configuration.loadConfigurationFromPath(tsLintPath);<EOL>    program.getRootFileNames().forEach(fileName => {<EOL>        linter.lint(fileName,","gt":"ts.sys.readFile(fileName) || '<STR_LIT>', tsLintConfig);"}
{"input":"<s> export default function (options, logger) {<EOL>    _buildRules(logger);<EOL>    const lintOptions = {<EOL>         fix: options.fix,<EOL>    };<EOL>    const program = Linter.createProgram(path.join(__dirname, '<STR_LIT>'));<EOL>    const  linter = new Linter(lintOptions, program);<EOL>    const tsLintPath = path.join(__dirname, '<STR_LIT>');<EOL>    const tsLintConfig = Configuration.loadConfigurationFromPath(tsLintPath);<EOL>    program.getRootFileNames().forEach(fileName => {<EOL>        linter.lint(fileName,  ts.sys.readFile(fileName) || '<STR_LIT>', tsLintConfig);<EOL>    });<EOL>    const result = linter.getResult();<EOL>    const Formatter = findFormatter(","gt":"'<STR_LIT>');"}
{"input":"<s> export default function (options, logger) {<EOL>    _buildRules(logger);<EOL>    const lintOptions = {<EOL>         fix: options.fix,<EOL>    };<EOL>    const program = Linter.createProgram(path.join(__dirname, '<STR_LIT>'));<EOL>    const  linter = new Linter(lintOptions, program);<EOL>    const tsLintPath = path.join(__dirname, '<STR_LIT>');<EOL>    const tsLintConfig = Configuration.loadConfigurationFromPath(tsLintPath);<EOL>    program.getRootFileNames().forEach(fileName => {<EOL>        linter.lint(fileName,  ts.sys.readFile(fileName) || '<STR_LIT>', tsLintConfig);<EOL>    });<EOL>    const result = linter.getResult();<EOL>    const Formatter = findFormatter( '<STR_LIT>');<EOL>    if (!Formatter) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const formatter =","gt":"new Formatter();"}
{"input":"<s> function getNgZone(ngZoneOption) {<EOL>    let ngZone;<EOL>    if (ngZoneOption === '<STR_LIT>') {<EOL>        ngZone =","gt":"new NoopNgZone();"}
{"input":"<s> function toReadable(value, throwError) {<EOL>    const totalChunks = Math.ceil(value.length / chunkSize);<EOL>    const stringChunks = [];<EOL>    for (let i = <NUM_LIT>, j = <NUM_LIT>; i < totalChunks; ++i, j += chunkSize) {<EOL>        stringChunks[i] = value.substr(j, chunkSize);<EOL>    }<EOL>    let counter = <NUM_LIT>;<EOL>    return new Readable({<EOL>","gt":"read: function () {"}
{"input":"<s> function toReadable(value, throwError) {<EOL>    const totalChunks = Math.ceil(value.length / chunkSize);<EOL>    const stringChunks = [];<EOL>    for (let i = <NUM_LIT>, j = <NUM_LIT>; i < totalChunks; ++i, j += chunkSize) {<EOL>        stringChunks[i] = value.substr(j, chunkSize);<EOL>    }<EOL>    let counter = <NUM_LIT>;<EOL>    return new Readable({<EOL>         read: function () {<EOL>            if (throwError) {<EOL>                this.emit('<STR_LIT>', new Error(readError));<EOL>            }<EOL>            let res;<EOL>            let canPush =","gt":"true;"}
{"input":"<s> function toReadable(value, throwError) {<EOL>    const totalChunks = Math.ceil(value.length / chunkSize);<EOL>    const stringChunks = [];<EOL>    for (let i = <NUM_LIT>, j = <NUM_LIT>; i < totalChunks; ++i, j += chunkSize) {<EOL>        stringChunks[i] = value.substr(j, chunkSize);<EOL>    }<EOL>    let counter = <NUM_LIT>;<EOL>    return new Readable({<EOL>         read: function () {<EOL>            if (throwError) {<EOL>                this.emit('<STR_LIT>', new Error(readError));<EOL>            }<EOL>            let res;<EOL>            let canPush =  true;<EOL>            while (canPush && (res = stringChunks[counter++])) {<EOL>                canPush = this.push(res);<EOL>            }<EOL>            // EOS<EOL>","gt":"if (!res) {"}
{"input":"<s> <EOL>export function isResourceFileEdit(thing) {<EOL>    return isObject(thing) && (Boolean(thing.newUri) || Boolean(thing.","gt":"oldUri));"}
{"input":"<s> export function unwrapValue(view, nodeIdx, bindingIdx, value) {<EOL>    if (WrappedValue.isWrapped(value)) {<EOL>        value = WrappedValue.unwrap(value);<EOL>        const globalBindingIdx = view.","gt":"def.nodes[nodeIdx].bindingIndex + bindingIdx;"}
{"input":"<s> export function PriceLevelFactory(price, size, side) {<EOL>    const p = Big(price);<EOL>    const s = Big(size);<EOL>    return {<EOL>","gt":"price: p,"}
{"input":"<s> export function PriceLevelFactory(price, size, side) {<EOL>    const p = Big(price);<EOL>    const s = Big(size);<EOL>    return {<EOL>         price: p,<EOL>        totalSize: s,<EOL>        orders: [{<EOL>                id: p.toString(),<EOL>                price: p,<EOL>                size: s,<EOL>","gt":"side: side"}
{"input":"<s> <EOL>export function eachParallelAndFinish(arr, iteratorFn) {<EOL>    const result = [];<EOL>    let itemsLeft = arr.length;<EOL>    return new Promise((resolve) => {<EOL>        arr.forEach((item, i) => {<EOL>            iteratorFn(item).then((val) => {<EOL>                result[","gt":"i] = val;"}
{"input":"<s> <EOL>export function eachParallelAndFinish(arr, iteratorFn) {<EOL>    const result = [];<EOL>    let itemsLeft = arr.length;<EOL>    return new Promise((resolve) => {<EOL>        arr.forEach((item, i) => {<EOL>            iteratorFn(item).then((val) => {<EOL>                result[ i] = val;<EOL>                if (--itemsLeft === <NUM_LIT>) {<EOL>                    return resolve(result);<EOL>                }<EOL>            }).","gt":"catch((err) => {"}
{"input":"<s> <EOL>export function eachParallelAndFinish(arr, iteratorFn) {<EOL>    const result = [];<EOL>    let itemsLeft = arr.length;<EOL>    return new Promise((resolve) => {<EOL>        arr.forEach((item, i) => {<EOL>            iteratorFn(item).then((val) => {<EOL>                result[ i] = val;<EOL>                if (--itemsLeft === <NUM_LIT>) {<EOL>                    return resolve(result);<EOL>                }<EOL>            }). catch((err) => {<EOL>                result[i] = err;<EOL>                if (--itemsLeft === <NUM_LIT>) {<EOL>","gt":"return resolve(result);"}
{"input":"<s> export default function (options) {<EOL>    return () => {<EOL>        const root = ('<STR_LIT>' in options) ? options.root : '<STR_LIT>';<EOL>        const map = new VirtualTree();<EOL>        const nbFiles = ('<STR_LIT>' in options)<EOL>            ? (","gt":"typeof options.multiFiles == '<STR_LIT>' ? options.multiFiles : random(<NUM_LIT>, <NUM_LIT>))"}
{"input":"<s> export default function (options) {<EOL>    return () => {<EOL>        const root = ('<STR_LIT>' in options) ? options.root : '<STR_LIT>';<EOL>        const map = new VirtualTree();<EOL>        const nbFiles = ('<STR_LIT>' in options)<EOL>            ? ( typeof options.multiFiles == '<STR_LIT>' ? options.multiFiles : random(<NUM_LIT>, <NUM_LIT>))<EOL>            : <NUM_LIT>;<EOL>        for (let i = <NUM_LIT>; i < nbFiles; i++) {<EOL>            const path = '<STR_LIT>'.slice(Math.random() * <NUM_LIT>);<EOL>            const fileName = generateStringOfLength(<NUM_LIT>);<EOL>            const content = generateStringOfLength(<NUM_LIT>);<EOL>            map.create(","gt":"root + '<STR_LIT>' + path + '<STR_LIT>' + fileName, content);"}
{"input":"<s> export function fallbackCompare(itemA, itemB, query, accessor) {<EOL>    // check for label + description length and prefer shorter<EOL>    const labelA = accessor.getItemLabel(itemA);<EOL>    const labelB = accessor.","gt":"getItemLabel(itemB);"}
{"input":"<s> export function fallbackCompare(itemA, itemB, query, accessor) {<EOL>    // check for label + description length and prefer shorter<EOL>    const labelA = accessor.getItemLabel(itemA);<EOL>    const labelB = accessor. getItemLabel(itemB);<EOL>    const descriptionA = accessor.getItemDescription(itemA);<EOL>    const descriptionB = accessor.getItemDescription(itemB);<EOL>    const labelDescriptionALength =","gt":"labelA.length + (descriptionA ? descriptionA.length : <NUM_LIT>);"}
{"input":"<s> export function fallbackCompare(itemA, itemB, query, accessor) {<EOL>    // check for label + description length and prefer shorter<EOL>    const labelA = accessor.getItemLabel(itemA);<EOL>    const labelB = accessor. getItemLabel(itemB);<EOL>    const descriptionA = accessor.getItemDescription(itemA);<EOL>    const descriptionB = accessor.getItemDescription(itemB);<EOL>    const labelDescriptionALength =  labelA.length + (descriptionA ? descriptionA.length : <NUM_LIT>);<EOL>    const labelDescriptionBLength = labelB.length + (descriptionB ? descriptionB.length : <NUM_LIT>);<EOL>    if (labelDescriptionALength !== labelDescriptionBLength) {<EOL>        return labelDescriptionALength - labelDescriptionBLength;<EOL>    }<EOL>    // check for path length and prefer shorter<EOL>    const pathA = accessor.getItemPath(itemA);<EOL>    const pathB = accessor.getItemPath(","gt":"itemB);"}
{"input":"<s> export function fallbackCompare(itemA, itemB, query, accessor) {<EOL>    // check for label + description length and prefer shorter<EOL>    const labelA = accessor.getItemLabel(itemA);<EOL>    const labelB = accessor. getItemLabel(itemB);<EOL>    const descriptionA = accessor.getItemDescription(itemA);<EOL>    const descriptionB = accessor.getItemDescription(itemB);<EOL>    const labelDescriptionALength =  labelA.length + (descriptionA ? descriptionA.length : <NUM_LIT>);<EOL>    const labelDescriptionBLength = labelB.length + (descriptionB ? descriptionB.length : <NUM_LIT>);<EOL>    if (labelDescriptionALength !== labelDescriptionBLength) {<EOL>        return labelDescriptionALength - labelDescriptionBLength;<EOL>    }<EOL>    // check for path length and prefer shorter<EOL>    const pathA = accessor.getItemPath(itemA);<EOL>    const pathB = accessor.getItemPath( itemB);<EOL>    if (pathA && pathB && pathA.length !== pathB.length) {<EOL>        return pathA.length - pathB.length;<EOL>    }<EOL>    // 7.) finally we have equal scores and equal length, we fallback to comparer<EOL>    // compare by label<EOL>    if (labelA !== labelB) {<EOL>        return compareAnything(labelA, labelB, query.value);<EOL>    }<EOL>    // compare by description<EOL>    if (descriptionA && descriptionB && descriptionA !== descriptionB) {<EOL>","gt":"return compareAnything(descriptionA, descriptionB, query.value);"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>","gt":"return [];"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>","gt":"const specialCaseNames = new Set();"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit(","gt":"node) {"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>","gt":"if (ts.isImportDeclaration(node)) {"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>         if (ts.isImportDeclaration(node)) {<EOL>            imports.push(node);<EOL>            return;<EOL>        }<EOL>        if (ts.isIdentifier(node)) {<EOL>            usedSymbols.add(typeChecker.getSymbolAtLocation(node));<EOL>        }<EOL>        else if (ts.isExportSpecifier(node)) {<EOL>            // Export specifiers return the non-local symbol from the above<EOL>            // so check the name string instead<EOL>            specialCaseNames.add((node.propertyName || node.name).text);<EOL>            return;<EOL>        }<EOL>        else if (ts.isShorthandPropertyAssignment(node)) {<EOL>            // Shorthand property assignments return the object property's symbol not the import's<EOL>            specialCaseNames.add(node.name.text);<EOL>        }<EOL>        ts.forEachChild(","gt":"node, visit);"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>         if (ts.isImportDeclaration(node)) {<EOL>            imports.push(node);<EOL>            return;<EOL>        }<EOL>        if (ts.isIdentifier(node)) {<EOL>            usedSymbols.add(typeChecker.getSymbolAtLocation(node));<EOL>        }<EOL>        else if (ts.isExportSpecifier(node)) {<EOL>            // Export specifiers return the non-local symbol from the above<EOL>            // so check the name string instead<EOL>            specialCaseNames.add((node.propertyName || node.name).text);<EOL>            return;<EOL>        }<EOL>        else if (ts.isShorthandPropertyAssignment(node)) {<EOL>            // Shorthand property assignments return the object property's symbol not the import's<EOL>            specialCaseNames.add(node.name.text);<EOL>        }<EOL>        ts.forEachChild( node, visit);<EOL>    });<EOL>    if (imports.length === <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const isUnused = (node) => {<EOL>        if (specialCaseNames.has(node.text)) {<EOL>            return false;<EOL>        }<EOL>","gt":"const symbol = typeChecker.getSymbolAtLocation(node);"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>         if (ts.isImportDeclaration(node)) {<EOL>            imports.push(node);<EOL>            return;<EOL>        }<EOL>        if (ts.isIdentifier(node)) {<EOL>            usedSymbols.add(typeChecker.getSymbolAtLocation(node));<EOL>        }<EOL>        else if (ts.isExportSpecifier(node)) {<EOL>            // Export specifiers return the non-local symbol from the above<EOL>            // so check the name string instead<EOL>            specialCaseNames.add((node.propertyName || node.name).text);<EOL>            return;<EOL>        }<EOL>        else if (ts.isShorthandPropertyAssignment(node)) {<EOL>            // Shorthand property assignments return the object property's symbol not the import's<EOL>            specialCaseNames.add(node.name.text);<EOL>        }<EOL>        ts.forEachChild( node, visit);<EOL>    });<EOL>    if (imports.length === <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const isUnused = (node) => {<EOL>        if (specialCaseNames.has(node.text)) {<EOL>            return false;<EOL>        }<EOL>         const symbol = typeChecker.getSymbolAtLocation(node);<EOL>        return symbol && !usedSymbols.has(symbol);<EOL>    };<EOL>    for (const node of imports) {<EOL>        if (!node.importClause) {<EOL>            // \"import 'abc';\"<EOL>            continue;<EOL>        }<EOL>        if (node.importClause.name) {<EOL>            // \"import XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.name)) {<EOL>                ops.push(new RemoveNodeOperation(sourceFile, node));<EOL>            }<EOL>        }<EOL>        else if (ts.isNamespaceImport(node.importClause.namedBindings)) {<EOL>            // \"import * as XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.namedBindings.name)) {<EOL>                ops.push(new","gt":"RemoveNodeOperation(sourceFile, node));"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>         if (ts.isImportDeclaration(node)) {<EOL>            imports.push(node);<EOL>            return;<EOL>        }<EOL>        if (ts.isIdentifier(node)) {<EOL>            usedSymbols.add(typeChecker.getSymbolAtLocation(node));<EOL>        }<EOL>        else if (ts.isExportSpecifier(node)) {<EOL>            // Export specifiers return the non-local symbol from the above<EOL>            // so check the name string instead<EOL>            specialCaseNames.add((node.propertyName || node.name).text);<EOL>            return;<EOL>        }<EOL>        else if (ts.isShorthandPropertyAssignment(node)) {<EOL>            // Shorthand property assignments return the object property's symbol not the import's<EOL>            specialCaseNames.add(node.name.text);<EOL>        }<EOL>        ts.forEachChild( node, visit);<EOL>    });<EOL>    if (imports.length === <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const isUnused = (node) => {<EOL>        if (specialCaseNames.has(node.text)) {<EOL>            return false;<EOL>        }<EOL>         const symbol = typeChecker.getSymbolAtLocation(node);<EOL>        return symbol && !usedSymbols.has(symbol);<EOL>    };<EOL>    for (const node of imports) {<EOL>        if (!node.importClause) {<EOL>            // \"import 'abc';\"<EOL>            continue;<EOL>        }<EOL>        if (node.importClause.name) {<EOL>            // \"import XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.name)) {<EOL>                ops.push(new RemoveNodeOperation(sourceFile, node));<EOL>            }<EOL>        }<EOL>        else if (ts.isNamespaceImport(node.importClause.namedBindings)) {<EOL>            // \"import * as XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.namedBindings.name)) {<EOL>                ops.push(new  RemoveNodeOperation(sourceFile, node));<EOL>            }<EOL>        }<EOL>        else if (ts.isNamedImports(node.importClause.namedBindings)) {<EOL>            // \"import { XYZ, ... } from 'abc';\"<EOL>","gt":"const specifierOps = [];"}
{"input":"<s> // Remove imports for which all identifiers have been removed.<EOL>// Needs type checker, and works even if it's not the first transformer.<EOL>// Works by removing imports for symbols whose identifiers have all been removed.<EOL>// Doesn't use the `symbol.declarations` because that previous transforms might have removed nodes<EOL>// but the type checker doesn't know.<EOL>// See https://github.com/Microsoft/TypeScript/issues/17552 for more information.<EOL>export function elideImports(sourceFile, removedNodes, getTypeChecker) {<EOL>    const ops = [];<EOL>    if (removedNodes.length === <NUM_LIT>) {<EOL>         return [];<EOL>    }<EOL>    const typeChecker = getTypeChecker();<EOL>    // Collect all imports and used identifiers<EOL>     const specialCaseNames = new Set();<EOL>    const usedSymbols = new Set();<EOL>    const imports = new Array();<EOL>    ts.forEachChild(sourceFile, function visit( node) {<EOL>        // Skip removed nodes<EOL>        if (removedNodes.includes(node)) {<EOL>            return;<EOL>        }<EOL>        // Record import and skip<EOL>         if (ts.isImportDeclaration(node)) {<EOL>            imports.push(node);<EOL>            return;<EOL>        }<EOL>        if (ts.isIdentifier(node)) {<EOL>            usedSymbols.add(typeChecker.getSymbolAtLocation(node));<EOL>        }<EOL>        else if (ts.isExportSpecifier(node)) {<EOL>            // Export specifiers return the non-local symbol from the above<EOL>            // so check the name string instead<EOL>            specialCaseNames.add((node.propertyName || node.name).text);<EOL>            return;<EOL>        }<EOL>        else if (ts.isShorthandPropertyAssignment(node)) {<EOL>            // Shorthand property assignments return the object property's symbol not the import's<EOL>            specialCaseNames.add(node.name.text);<EOL>        }<EOL>        ts.forEachChild( node, visit);<EOL>    });<EOL>    if (imports.length === <NUM_LIT>) {<EOL>        return [];<EOL>    }<EOL>    const isUnused = (node) => {<EOL>        if (specialCaseNames.has(node.text)) {<EOL>            return false;<EOL>        }<EOL>         const symbol = typeChecker.getSymbolAtLocation(node);<EOL>        return symbol && !usedSymbols.has(symbol);<EOL>    };<EOL>    for (const node of imports) {<EOL>        if (!node.importClause) {<EOL>            // \"import 'abc';\"<EOL>            continue;<EOL>        }<EOL>        if (node.importClause.name) {<EOL>            // \"import XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.name)) {<EOL>                ops.push(new RemoveNodeOperation(sourceFile, node));<EOL>            }<EOL>        }<EOL>        else if (ts.isNamespaceImport(node.importClause.namedBindings)) {<EOL>            // \"import * as XYZ from 'abc';\"<EOL>            if (isUnused(node.importClause.namedBindings.name)) {<EOL>                ops.push(new  RemoveNodeOperation(sourceFile, node));<EOL>            }<EOL>        }<EOL>        else if (ts.isNamedImports(node.importClause.namedBindings)) {<EOL>            // \"import { XYZ, ... } from 'abc';\"<EOL>             const specifierOps = [];<EOL>            for (const specifier of","gt":"node.importClause.namedBindings.elements) {"}
{"input":"<s> export function getPipesTable(source, program, checker, pipes) {<EOL>    return new PipesTable(pipes, { program,","gt":"checker, node: source });"}
{"input":"<s> function uniqueElements(a, b) {<EOL>    const s = new Set();<EOL>    for (const aItem of a) {<EOL>        s.add(aItem);<EOL>    }<EOL>    const result = [];<EOL>    const reported = new Set();<EOL>    for (const bItem of b) {<EOL>        if (!s.has(bItem) && !reported.has(bItem)) {<EOL>            reported.add(bItem);<EOL>","gt":"result.push(bItem);"}
{"input":"<s> function updateControl(control, dir) {<EOL>    if (control._pendingDirty)<EOL>        control.","gt":"markAsDirty();"}
{"input":"<s> export default function () {<EOL>    const modulePath = join('<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    return ng('<STR_LIT>', '<STR_LIT>', '<STR_LIT>',","gt":"'<STR_LIT>')"}
{"input":"<s> <EOL>export function createPriceTrigger(feed, product, priceThreshold) {<EOL>    let initialPrice = null;<EOL>    const targetPrice = Big(priceThreshold);<EOL>    const trigger = new Trigger(feed);<EOL>    const triggerCondition = (msg) => {<EOL>","gt":"if (msg.type !== '<STR_LIT>') {"}
{"input":"<s> <EOL>export function createPriceTrigger(feed, product, priceThreshold) {<EOL>    let initialPrice = null;<EOL>    const targetPrice = Big(priceThreshold);<EOL>    const trigger = new Trigger(feed);<EOL>    const triggerCondition = (msg) => {<EOL>         if (msg.type !== '<STR_LIT>') {<EOL>            return;<EOL>        }<EOL>        const","gt":"ticker = msg;"}
{"input":"<s> <EOL>export function createPriceTrigger(feed, product, priceThreshold) {<EOL>    let initialPrice = null;<EOL>    const targetPrice = Big(priceThreshold);<EOL>    const trigger = new Trigger(feed);<EOL>    const triggerCondition = (msg) => {<EOL>         if (msg.type !== '<STR_LIT>') {<EOL>            return;<EOL>        }<EOL>        const  ticker = msg;<EOL>        if (ticker.productId !== product) {<EOL>            return;<EOL>        }<EOL>        if (initialPrice === null) {<EOL>","gt":"initialPrice = ticker.price;"}
{"input":"<s> export function typedArray(value, check) {<EOL>","gt":"return Array.isArray(value) && value.every(check);"}
{"input":"<s> function getWin32IPCHandle(userDataPath, type) {<EOL>    const scope = crypto.createHash('<STR_LIT>').","gt":"update(userDataPath).digest('<STR_LIT>');"}
{"input":"<s> // ---------------------------------------  API authenticated function calls  ----------------------------------------//<EOL>function authRequest(auth, options) {<EOL>    // build payload<EOL>    const payload = {<EOL>        request: options.path,<EOL>        nonce: Date.now().toString()<EOL>    };<EOL>    if (options.fields) {<EOL>        Object.assign(payload, options.fields);<EOL>        // don't leak request parameters in request object<EOL>        delete options.fields;<EOL>    }<EOL>    const b64Payload = new Buffer(JSON.stringify(payload)).toString('<STR_LIT>');<EOL>    // all authenticated api calls require a signature<EOL>    const","gt":"sig = getSignature(auth, b64Payload, '<STR_LIT>');"}
{"input":"<s> // ---------------------------------------  API authenticated function calls  ----------------------------------------//<EOL>function authRequest(auth, options) {<EOL>    // build payload<EOL>    const payload = {<EOL>        request: options.path,<EOL>        nonce: Date.now().toString()<EOL>    };<EOL>    if (options.fields) {<EOL>        Object.assign(payload, options.fields);<EOL>        // don't leak request parameters in request object<EOL>        delete options.fields;<EOL>    }<EOL>    const b64Payload = new Buffer(JSON.stringify(payload)).toString('<STR_LIT>');<EOL>    // all authenticated api calls require a signature<EOL>    const  sig = getSignature(auth, b64Payload, '<STR_LIT>');<EOL>    // all authenticated api calls require headers<EOL>    const headers = {<EOL>        '<STR_LIT>': auth.key,<EOL>        '<STR_LIT>': b64Payload,<EOL>","gt":"'<STR_LIT>': sig"}
{"input":"<s> export function contentTemplate(options) {<EOL>    return forEach(applyContentTemplate(","gt":"options));"}
{"input":"<s> function createOptions(multiCursorModifier) {<EOL>    if (multiCursorModifier === '<STR_LIT>') {<EOL>        if (platform.isMacintosh) {<EOL>            return new ClickLinkOptions(KeyCode.Meta, '<STR_LIT>', KeyCode.Alt, '<STR_LIT>');<EOL>        }<EOL>        return new ClickLinkOptions(KeyCode.Ctrl, '<STR_LIT>', KeyCode.Alt, '<STR_LIT>');<EOL>    }<EOL>    if (platform.isMacintosh) {<EOL>        return","gt":"new ClickLinkOptions(KeyCode.Alt, '<STR_LIT>', KeyCode.Meta, '<STR_LIT>');"}
{"input":"<s> <EOL>export function resetFakeAsyncZone() {<EOL>    _fakeAsyncTestZoneSpec =","gt":"null;"}
{"input":"<s> export function isMetadataSymbolicPrefixExpression(value) {<EOL>    return value && value.__symbolic ===","gt":"'<STR_LIT>';"}
{"input":"<s> function createSuggestionResolver(provider, suggestion, model, position) {<EOL>    return () => {<EOL>        if (typeof provider.resolveCompletionItem === '<STR_LIT>') {<EOL>            return asWinJsPromise(token => provider.resolveCompletionItem(model, position,","gt":"suggestion, token))"}
{"input":"<s> <EOL>export function FeedFactory(logger, productIds, auth) {<EOL>    auth = auth || {<EOL>        key: process.","gt":"env.BITTREX_KEY,"}
{"input":"<s> export function getLastActiveWindow(windows) {<EOL>    const lastFocusedDate = Math.max.apply(","gt":"Math, windows.map(window => window.lastFocusTime));"}
{"input":"<s> export function generateTokensCSSForColorMap(colorMap) {<EOL>    let rules = [];<EOL>    for (let i = <NUM_LIT>, len = colorMap.length; i < len; i++) {<EOL>","gt":"let color = colorMap[i];"}
{"input":"<s> async function bar2() {<EOL>    delete await","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>export function task(taskName, taskExecutable) {<EOL>    taskExecutable = serial(cleanFlag, taskExecutable);<EOL>    _taskMap[","gt":"taskName] = taskExecutable;"}
{"input":"<s> export function overrideOptions(original, overrides) {<EOL>    let copy = cloneDeep(original);<EOL>    overrides.forEach(override => {<EOL>        const","gt":"option = copy.find((opt) => opt.name == override.name);"}
{"input":"<s> function binarySubdivide(aX, aA, aB, mX1, mX2) {<EOL>    var currentX, currentT, i = <NUM_LIT>;<EOL>    do {<EOL>        currentT = aA + (aB - aA) / <NUM_LIT>;<EOL>        currentX =","gt":"calcBezier(currentT, mX1, mX2) - aX;"}
{"input":"<s> // based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)<EOL>function byteStringToDecString(str) {<EOL>    let decimal = '<STR_LIT>';<EOL>    let toThePower = '<STR_LIT>';<EOL>    for (let i = str.","gt":"length - <NUM_LIT>; i >= <NUM_LIT>; i--) {"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return","gt":"HTMLELEMENT_IF;"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return","gt":"'<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return","gt":"'<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return","gt":"'<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>","gt":"return SVG_PREFIX + '<STR_LIT>';"}
{"input":"<s> function extractName(type) {<EOL>    let name = type['<STR_LIT>'];<EOL>    switch (name) {<EOL>        // see https://www.w3.org/TR/html5/index.html<EOL>        // TODO(vicb): generate this map from all the element types<EOL>         case '<STR_LIT>':<EOL>            return ELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return  HTMLELEMENT_IF;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return  '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return SVG_PREFIX + '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>             return SVG_PREFIX + '<STR_LIT>';<EOL>        default:<EOL>            const isSVG = name.startsWith('<STR_LIT>');<EOL>            if (name.startsWith('<STR_LIT>') || isSVG) {<EOL>                name = name.replace('<STR_LIT>', '<STR_LIT>').replace(","gt":"'<STR_LIT>', '<STR_LIT>').replace('<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function convertSimple2RegExpPattern(pattern) {<EOL>    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '<STR_LIT>').","gt":"replace(/[\\*]/g, '<STR_LIT>');"}
{"input":"<s> export function stripGeneratedFileSuffix(filePath) {<EOL>    return filePath.","gt":"replace(GENERATED_FILE, '<STR_LIT>');"}
{"input":"<s> function shrink(span, offset) {<EOL>    if (","gt":"offset == null)"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>","gt":"origContent = contents)"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>  origContent = contents)<EOL>        // Add a major static analysis error on a non-main file to the initial build.<EOL>        .then(() => replaceInFile('<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`))<EOL>        // Should have an error.<EOL>        .then(() => execAndWaitForOutputToMatch('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>'], failedRe))<EOL>        .then((results) => {<EOL>        const stderr = results.stderr;<EOL>        if (!stderr.includes('<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(successRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add an syntax error to a non-main file.<EOL>        // Build should still be successfull and error reported on forked type checker.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent + '<STR_LIT>')<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes(","gt":"'<STR_LIT>')) {"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>  origContent = contents)<EOL>        // Add a major static analysis error on a non-main file to the initial build.<EOL>        .then(() => replaceInFile('<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`))<EOL>        // Should have an error.<EOL>        .then(() => execAndWaitForOutputToMatch('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>'], failedRe))<EOL>        .then((results) => {<EOL>        const stderr = results.stderr;<EOL>        if (!stderr.includes('<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(successRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add an syntax error to a non-main file.<EOL>        // Build should still be successfull and error reported on forked type checker.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent + '<STR_LIT>')<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        // We have to wait for the type checker to run, so we expect to NOT<EOL>        // have an error message in 5s.<EOL>        .then(() => Promise.all([<EOL>        expectToFail(() => waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>)),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add a major static analysis error on a rebuild.<EOL>        // Should fail the rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(failedRe, <NUM_LIT>),<EOL>        replaceInFile(","gt":"'<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`)"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>  origContent = contents)<EOL>        // Add a major static analysis error on a non-main file to the initial build.<EOL>        .then(() => replaceInFile('<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`))<EOL>        // Should have an error.<EOL>        .then(() => execAndWaitForOutputToMatch('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>'], failedRe))<EOL>        .then((results) => {<EOL>        const stderr = results.stderr;<EOL>        if (!stderr.includes('<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(successRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add an syntax error to a non-main file.<EOL>        // Build should still be successfull and error reported on forked type checker.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent + '<STR_LIT>')<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        // We have to wait for the type checker to run, so we expect to NOT<EOL>        // have an error message in 5s.<EOL>        .then(() => Promise.all([<EOL>        expectToFail(() => waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>)),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add a major static analysis error on a rebuild.<EOL>        // Should fail the rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(failedRe, <NUM_LIT>),<EOL>        replaceInFile( '<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`)<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes(","gt":"'<STR_LIT>')"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>  origContent = contents)<EOL>        // Add a major static analysis error on a non-main file to the initial build.<EOL>        .then(() => replaceInFile('<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`))<EOL>        // Should have an error.<EOL>        .then(() => execAndWaitForOutputToMatch('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>'], failedRe))<EOL>        .then((results) => {<EOL>        const stderr = results.stderr;<EOL>        if (!stderr.includes('<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(successRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add an syntax error to a non-main file.<EOL>        // Build should still be successfull and error reported on forked type checker.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent + '<STR_LIT>')<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        // We have to wait for the type checker to run, so we expect to NOT<EOL>        // have an error message in 5s.<EOL>        .then(() => Promise.all([<EOL>        expectToFail(() => waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>)),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add a major static analysis error on a rebuild.<EOL>        // Should fail the rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(failedRe, <NUM_LIT>),<EOL>        replaceInFile( '<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`)<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> export default function () {<EOL>    if (process.platform.startsWith('<STR_LIT>')) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this in ejected tests.<EOL>    if (getGlobalVariable('<STR_LIT>').eject) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    // Skip this test in Angular 2/4.<EOL>    if (getGlobalVariable('<STR_LIT>').ng2 || getGlobalVariable('<STR_LIT>').ng4) {<EOL>        return Promise.resolve();<EOL>    }<EOL>    let origContent;<EOL>    return Promise.resolve()<EOL>        // Save the original contents of `./src/app/app.component.ts`.<EOL>        .then(() => readFile('<STR_LIT>'))<EOL>        .then((contents) =>  origContent = contents)<EOL>        // Add a major static analysis error on a non-main file to the initial build.<EOL>        .then(() => replaceInFile('<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`))<EOL>        // Should have an error.<EOL>        .then(() => execAndWaitForOutputToMatch('<STR_LIT>', ['<STR_LIT>', '<STR_LIT>'], failedRe))<EOL>        .then((results) => {<EOL>        const stderr = results.stderr;<EOL>        if (!stderr.includes('<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(successRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add an syntax error to a non-main file.<EOL>        // Build should still be successfull and error reported on forked type checker.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>),<EOL>        writeFile('<STR_LIT>', origContent + '<STR_LIT>')<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>    })<EOL>        // Fix the error, should trigger a successful rebuild.<EOL>        // We have to wait for the type checker to run, so we expect to NOT<EOL>        // have an error message in 5s.<EOL>        .then(() => Promise.all([<EOL>        expectToFail(() => waitForAnyProcessOutputToMatch(errorRe, <NUM_LIT>)),<EOL>        writeFile('<STR_LIT>', origContent)<EOL>    ]))<EOL>        .then(() => wait(<NUM_LIT>))<EOL>        // Add a major static analysis error on a rebuild.<EOL>        // Should fail the rebuild.<EOL>        .then(() => Promise.all([<EOL>        waitForAnyProcessOutputToMatch(failedRe, <NUM_LIT>),<EOL>        replaceInFile( '<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`)<EOL>    ]))<EOL>        .then((results) => {<EOL>        const stderr = results[<NUM_LIT>].stderr;<EOL>        if (!stderr.includes( '<STR_LIT>')<EOL>            && !stderr.includes('<STR_LIT>')) {<EOL>            throw new  Error(`<STR_LIT>`);<EOL>        }<EOL>        if (extraErrors.some((e) => stderr.includes(e))) {<EOL>            throw new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> export function digest(message) {<EOL>    return message.id || sha1(","gt":"serializeNodes(message.nodes).join('<STR_LIT>') + `<STR_LIT>`);"}
{"input":"<s> function getPerformanceImpl() {<EOL>    const g = typeof global !== '<STR_LIT>' ? global : undefined;<EOL>    const w = typeof window !== '<STR_LIT>' ? window : undefined;<EOL>    const { performance } = (g || w || {});<EOL>","gt":"if (performance && performance.mark && performance.measure) {"}
{"input":"<s> function getPerformanceImpl() {<EOL>    const g = typeof global !== '<STR_LIT>' ? global : undefined;<EOL>    const w = typeof window !== '<STR_LIT>' ? window : undefined;<EOL>    const { performance } = (g || w || {});<EOL>     if (performance && performance.mark && performance.measure) {<EOL>        return performance;<EOL>    }<EOL>    return {<EOL>        mark: _.","gt":"noop,"}
{"input":"<s> function testLStaticData(tagName, attrs) {<EOL>    return {<EOL>        tagName,<EOL>","gt":"attrs,"}
{"input":"<s> export function merge(base, add, overwrite) {<EOL>    Object.keys(add).forEach(key => {<EOL>        if (key in base) {<EOL>            if (types.isObject(base[key]) && types.isObject(add[key])) {<EOL>","gt":"merge(base[key], add[key], overwrite);"}
{"input":"<s> export function merge(base, add, overwrite) {<EOL>    Object.keys(add).forEach(key => {<EOL>        if (key in base) {<EOL>            if (types.isObject(base[key]) && types.isObject(add[key])) {<EOL>                 merge(base[key], add[key], overwrite);<EOL>            }<EOL>            else if (overwrite) {<EOL>                base[key] = add[key];<EOL>            }<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> // Transforms a parsed number into a percentage by multiplying it by 100<EOL>function toPercent(parsedNumber) {<EOL>    // if the number is 0, don't do anything<EOL>    if (parsedNumber.digits[<NUM_LIT>] === <NUM_LIT>) {<EOL>        return parsedNumber;<EOL>    }<EOL>    // Getting the current number of decimals<EOL>    const fractionLen = parsedNumber.digits.length - parsedNumber.","gt":"integerLen;"}
{"input":"<s> // Transforms a parsed number into a percentage by multiplying it by 100<EOL>function toPercent(parsedNumber) {<EOL>    // if the number is 0, don't do anything<EOL>    if (parsedNumber.digits[<NUM_LIT>] === <NUM_LIT>) {<EOL>        return parsedNumber;<EOL>    }<EOL>    // Getting the current number of decimals<EOL>    const fractionLen = parsedNumber.digits.length - parsedNumber. integerLen;<EOL>    if (parsedNumber.exponent) {<EOL>        parsedNumber.exponent += <NUM_LIT>;<EOL>    }<EOL>    else {<EOL>        if (fractionLen ===","gt":"<NUM_LIT>) {"}
{"input":"<s> // Transforms a parsed number into a percentage by multiplying it by 100<EOL>function toPercent(parsedNumber) {<EOL>    // if the number is 0, don't do anything<EOL>    if (parsedNumber.digits[<NUM_LIT>] === <NUM_LIT>) {<EOL>        return parsedNumber;<EOL>    }<EOL>    // Getting the current number of decimals<EOL>    const fractionLen = parsedNumber.digits.length - parsedNumber. integerLen;<EOL>    if (parsedNumber.exponent) {<EOL>        parsedNumber.exponent += <NUM_LIT>;<EOL>    }<EOL>    else {<EOL>        if (fractionLen ===  <NUM_LIT>) {<EOL>            parsedNumber.digits.push(<NUM_LIT>, <NUM_LIT>);<EOL>        }<EOL>        else if (fractionLen === <NUM_LIT>) {<EOL>","gt":"parsedNumber.digits.push(<NUM_LIT>);"}
{"input":"<s> export function done(promise) {<EOL>    return promise.then(() => void <NUM_LIT>, () =>","gt":"void <NUM_LIT>);"}
{"input":"<s> function tokenizeWithoutErrors(input, tokenizeExpansionForms = false, interpolationConfig) {<EOL>    const tokenizeResult = lex.tokenize(input, '<STR_LIT>', getHtmlTagDefinition, tokenizeExpansionForms, interpolationConfig);<EOL>    if (tokenizeResult.","gt":"errors.length > <NUM_LIT>) {"}
{"input":"<s> function isSignatureCheck(statement) {<EOL>    return (statement.type === \"<STR_LIT>\" ||<EOL>        (statement.","gt":"type === \"<STR_LIT>\" &&"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    return","gt":"<NUM_LIT>;"}
{"input":"<s> function makeMetadataFactory(name, props) {<EOL>    const factory = (...args) => {<EOL>        const values = props ? props(...args) : {};<EOL>        return {<EOL>            ngMetadataName:","gt":"name,"}
{"input":"<s> function makeMetadataFactory(name, props) {<EOL>    const factory = (...args) => {<EOL>        const values = props ? props(...args) : {};<EOL>        return {<EOL>            ngMetadataName:  name,<EOL>            ...values,<EOL>        };<EOL>    };<EOL>    factory.isTypeOf = (","gt":"obj) => obj && obj.ngMetadataName === name;"}
{"input":"<s> <EOL>function createFilesForSecondaryEntryPoint(buildPackage, releasePath) {<EOL>    const { name } = buildPackage;<EOL>    const packageOut = buildPackage.outputDir;<EOL>    buildPackage.secondaryEntryPoints.forEach(entryPointName => {<EOL>        // Create a directory in the root of the package for this entry point that contains<EOL>        // * A package.json that lists the different bundle locations<EOL>        // * An index.d.ts file that re-exports the index.d.ts from the typings/ directory<EOL>        // * A metadata.json re-export for this entry-point's metadata.<EOL>        const entryPointDir = join(releasePath, entryPointName);<EOL>        const importAsName = `<STR_LIT>`;<EOL>        mkdirpSync(entryPointDir);<EOL>        createEntryPointPackageJson(entryPointDir, name, entryPointName);<EOL>        // Copy typings and metadata from tsc output location into the entry-point.<EOL>        copyFiles(join(packageOut, entryPointName), '<STR_LIT>', join(entryPointDir, '<STR_LIT>'));<EOL>        // Create a typings and a metadata re-export within the entry-point to point to the<EOL>        // typings we just copied.<EOL>        createTypingsReexportFile(entryPointDir, `<STR_LIT>`, '<STR_LIT>');<EOL>","gt":"createMetadataReexportFile(entryPointDir, `<STR_LIT>`, '<STR_LIT>', importAsName);"}
{"input":"<s> // Pure functions<EOL>export function getWinnerFromBoard(board) {<EOL>    const allWinningLists = [].concat(board, // rows<EOL>","gt":"zip(board),"}
{"input":"<s> <EOL>function copySecondaryEntryPointStylesheets(buildPackage, releasePath) {<EOL>    buildPackage.secondaryEntryPoints.forEach(entryPointName => {<EOL>        const","gt":"entryPointDir = join(buildPackage.outputDir, entryPointName);"}
{"input":"<s> export function testPrefixClasses(content) {<EOL>    const exportVarSetter = /(?:export )?(?:var|const)\\s+(\\S+)\\s*=\\s*/;<EOL>    const multiLineComment = /\\s*(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*/;<EOL>    const newLine = /\\s*\\r?\\n\\s*/;<EOL>","gt":"const regexes = ["}
{"input":"<s> export function testPrefixClasses(content) {<EOL>    const exportVarSetter = /(?:export )?(?:var|const)\\s+(\\S+)\\s*=\\s*/;<EOL>    const multiLineComment = /\\s*(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*/;<EOL>    const newLine = /\\s*\\r?\\n\\s*/;<EOL>     const regexes = [<EOL>        [<EOL>            /^/,<EOL>","gt":"exportVarSetter, multiLineComment,"}
{"input":"<s> export function testPrefixClasses(content) {<EOL>    const exportVarSetter = /(?:export )?(?:var|const)\\s+(\\S+)\\s*=\\s*/;<EOL>    const multiLineComment = /\\s*(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*/;<EOL>    const newLine = /\\s*\\r?\\n\\s*/;<EOL>     const regexes = [<EOL>        [<EOL>            /^/,<EOL>             exportVarSetter, multiLineComment,<EOL>            /\\(/, multiLineComment,<EOL>            /\\s*function \\(\\) {/, newLine,<EOL>            multiLineComment,<EOL>            /function \\1\\([^\\)]*\\) \\{/, newLine,<EOL>        ],<EOL>        [<EOL>            /^/,<EOL>            exportVarSetter, multiLineComment,<EOL>            /\\(/,","gt":"multiLineComment,"}
{"input":"<s> function trimLongName(name) {<EOL>    if (name && name.length > <NUM_LIT>) {<EOL>        return","gt":"<NUM_LIT>, <NUM_LIT>)}...`<STR_LIT>;"}
{"input":"<s> function tickAndDetect(fixture) {<EOL>","gt":"tick();"}
{"input":"<s> function add32to64(a, b) {<EOL>    const","gt":"low = (a & <NUM_LIT>) + (b & <NUM_LIT>);"}
{"input":"<s> <EOL>export function setTestabilityGetter(getter) {<EOL>    _testabilityGetter =","gt":"getter;"}
{"input":"<s> function foo() {<EOL>    var","gt":"a;"}
{"input":"<s> function f(a) {<EOL>","gt":"x = a;"}
{"input":"<s> export function createTypeSignature(inputs, output) {<EOL>    return {<EOL>        type:","gt":"\"<STR_LIT>\","}
{"input":"<s> export default function nextId(id) {<EOL>    return","gt":"id !== undefined ? `<STR_LIT>` : '<STR_LIT>';"}
{"input":"<s> export function startPlayback(payload) {<EOL>    return (dispatch) => {<EOL>        dispatch(","gt":"DagHistoryActions.jumpToState(payload.stateId));"}
{"input":"<s> export function InsertModeExecute(key, editor) {<EOL>    editor.InsertCharactorAtCurrentPosition(","gt":"key);"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup.","gt":"Spaces;"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (","gt":"charCode <= <NUM_LIT>) {"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return","gt":"CharGroup.AlphabetAndNumber;"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // `<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // a - z<EOL>        return","gt":"CharGroup.AlphabetAndNumber;"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // `<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // a - z<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // { - ~<EOL>        return","gt":"CharGroup.Marks;"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // `<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // a - z<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // { - ~<EOL>        return  CharGroup.Marks;<EOL>    }<EOL>","gt":"if (charCode === <NUM_LIT>) {"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // `<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // a - z<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // { - ~<EOL>        return  CharGroup.Marks;<EOL>    }<EOL>     if (charCode === <NUM_LIT>) {<EOL>        // DEL<EOL>        return CharGroup.Spaces;<EOL>    }<EOL>    if (charCode < <NUM_LIT>) {<EOL>        // 漢字とか<EOL>        return CharGroup.","gt":"Other;"}
{"input":"<s> export function GetCharClass(charCode) {<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // Space,Tab,LF...<EOL>        return CharGroup. Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // ! - /<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 0 - 9<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if ( charCode <= <NUM_LIT>) {<EOL>        // : - @<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // A - Z<EOL>        return CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // [ - ^<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // _<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // `<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // a - z<EOL>        return  CharGroup.AlphabetAndNumber;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // { - ~<EOL>        return  CharGroup.Marks;<EOL>    }<EOL>     if (charCode === <NUM_LIT>) {<EOL>        // DEL<EOL>        return CharGroup.Spaces;<EOL>    }<EOL>    if (charCode < <NUM_LIT>) {<EOL>        // 漢字とか<EOL>        return CharGroup. Other;<EOL>    }<EOL>    if (charCode === <NUM_LIT>) {<EOL>        // 全角スペース<EOL>        return CharGroup.Spaces;<EOL>    }<EOL>    if (charCode <= <NUM_LIT>) {<EOL>        // 全角記号<EOL>        return CharGroup.Marks;<EOL>    }<EOL>    if (","gt":"charCode <= <NUM_LIT>) {"}
{"input":"<s> function isEventTarget() {<EOL>    return","gt":"isBrowser;"}
{"input":"<s> function wordAt(str, index, endian) {<EOL>    let word = <NUM_LIT>;<EOL>    if (endian === Endian.Big) {<EOL>        for (let i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>            word += byteAt(str,","gt":"index + i) << (<NUM_LIT> - <NUM_LIT> * i);"}
{"input":"<s> export function Intersect(...intersectees) {<EOL>    return create(x => {<EOL>        for (","gt":"const { check } of intersectees)"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function isToken(value) {<EOL>    return value != null && typeof value === '<STR_LIT>' && value.kind >=","gt":"ts.SyntaxKind.FirstToken &&"}
{"input":"<s> function extractCharChangeRepresentation(change, expectedChange) {<EOL>    var hasOriginal = expectedChange && expectedChange.originalStartLineNumber > <NUM_LIT>;<EOL>    var hasModified = expectedChange && expectedChange.modifiedStartLineNumber > <NUM_LIT>;<EOL>    return {<EOL>        originalStartLineNumber: hasOriginal ? change.","gt":"originalStartLineNumber : <NUM_LIT>,"}
{"input":"<s> function extractCharChangeRepresentation(change, expectedChange) {<EOL>    var hasOriginal = expectedChange && expectedChange.originalStartLineNumber > <NUM_LIT>;<EOL>    var hasModified = expectedChange && expectedChange.modifiedStartLineNumber > <NUM_LIT>;<EOL>    return {<EOL>        originalStartLineNumber: hasOriginal ? change. originalStartLineNumber : <NUM_LIT>,<EOL>        originalStartColumn: hasOriginal ? change.originalStartColumn : <NUM_LIT>,<EOL>        originalEndLineNumber: hasOriginal ? change.originalEndLineNumber : <NUM_LIT>,<EOL>        originalEndColumn: hasOriginal ? change.originalEndColumn : <NUM_LIT>,<EOL>        modifiedStartLineNumber: hasModified ? change.modifiedStartLineNumber : <NUM_LIT>,<EOL>        modifiedStartColumn: hasModified ? change.modifiedStartColumn : <NUM_LIT>,<EOL>        modifiedEndLineNumber:","gt":"hasModified ? change.modifiedEndLineNumber : <NUM_LIT>,"}
{"input":"<s> // Log function. Only logs prior to calls to flushLogs.<EOL>export function logOnce(...thingsToLog) {<EOL>    if (!shouldLog()) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object.","gt":"keys(parsedArgs)) {"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object. keys(parsedArgs)) {<EOL>        switch (flag) {<EOL>            case '<STR_LIT>':<EOL>            case '<STR_LIT>':<EOL>","gt":"usage();"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object. keys(parsedArgs)) {<EOL>        switch (flag) {<EOL>            case '<STR_LIT>':<EOL>            case '<STR_LIT>':<EOL>                 usage();<EOL>                process.exit(<NUM_LIT>);<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.externsPath = parsedArgs[","gt":"flag];"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object. keys(parsedArgs)) {<EOL>        switch (flag) {<EOL>            case '<STR_LIT>':<EOL>            case '<STR_LIT>':<EOL>                 usage();<EOL>                process.exit(<NUM_LIT>);<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.externsPath = parsedArgs[ flag];<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.isTyped =","gt":"true;"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object. keys(parsedArgs)) {<EOL>        switch (flag) {<EOL>            case '<STR_LIT>':<EOL>            case '<STR_LIT>':<EOL>                 usage();<EOL>                process.exit(<NUM_LIT>);<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.externsPath = parsedArgs[ flag];<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.isTyped =  true;<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.verbose =","gt":"true;"}
{"input":"<s> <EOL>function loadSettingsFromArgs(args) {<EOL>    const settings = {};<EOL>    const parsedArgs = minimist(args);<EOL>    for (const flag of Object. keys(parsedArgs)) {<EOL>        switch (flag) {<EOL>            case '<STR_LIT>':<EOL>            case '<STR_LIT>':<EOL>                 usage();<EOL>                process.exit(<NUM_LIT>);<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.externsPath = parsedArgs[ flag];<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.isTyped =  true;<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.verbose =  true;<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                settings.disableAutoQuoting = true;<EOL>                break;<EOL>            case '<STR_LIT>':<EOL>                // This is part of the minimist API, and holds args after the '--'.<EOL>","gt":"break;"}
{"input":"<s> export function wait(ms) {<EOL>    return new","gt":"Promise(resolve => setTimeout(() => resolve(), ms));"}
{"input":"<s> // Synchronize evernote account. For metadata.<EOL>async function syncAccount() {<EOL>    try {<EOL>        // lazy initilation.<EOL>        // TODO: configuration update event should be awared, so that a token can be reconfigured.<EOL>        const config = vscode.workspace.getConfiguration(\"<STR_LIT>\");<EOL>        await vscode.window.setStatusBarMessage(\"<STR_LIT>\", <NUM_LIT>);<EOL>","gt":"client = new EvernoteClient(config.token, config.noteStoreUrl);"}
{"input":"<s> // Synchronize evernote account. For metadata.<EOL>async function syncAccount() {<EOL>    try {<EOL>        // lazy initilation.<EOL>        // TODO: configuration update event should be awared, so that a token can be reconfigured.<EOL>        const config = vscode.workspace.getConfiguration(\"<STR_LIT>\");<EOL>        await vscode.window.setStatusBarMessage(\"<STR_LIT>\", <NUM_LIT>);<EOL>         client = new EvernoteClient(config.token, config.noteStoreUrl);<EOL>        const tags = await client.listTags();<EOL>        tags.forEach(tag => tagCache[tag.guid] = tag.name);<EOL>        notebooks = await client.listNotebooks();<EOL>        let promises = notebooks.","gt":"map(notebook => client.listAllNoteMetadatas(notebook.guid));"}
{"input":"<s> // Synchronize evernote account. For metadata.<EOL>async function syncAccount() {<EOL>    try {<EOL>        // lazy initilation.<EOL>        // TODO: configuration update event should be awared, so that a token can be reconfigured.<EOL>        const config = vscode.workspace.getConfiguration(\"<STR_LIT>\");<EOL>        await vscode.window.setStatusBarMessage(\"<STR_LIT>\", <NUM_LIT>);<EOL>         client = new EvernoteClient(config.token, config.noteStoreUrl);<EOL>        const tags = await client.listTags();<EOL>        tags.forEach(tag => tagCache[tag.guid] = tag.name);<EOL>        notebooks = await client.listNotebooks();<EOL>        let promises = notebooks. map(notebook => client.listAllNoteMetadatas(notebook.guid));<EOL>        const allMetas = await Promise.all(promises);<EOL>        const notes = _.flattenDeep(allMetas.map((meta) => meta.notes));<EOL>        notesMap = _.groupBy(notes, \"<STR_LIT>\");<EOL>        vscode.window.","gt":"setStatusBarMessage(\"<STR_LIT>\", <NUM_LIT>);"}
{"input":"<s> // open an attachment, use default app.<EOL>async function openAttachment(attachment, source, uri) {<EOL>    switch (source) {<EOL>        case ATTACHMENT_SOURCE_LOCAL:<EOL>            try {<EOL>                open(uri);<EOL>            }<EOL>            catch (","gt":"err) {"}
{"input":"<s> // open an attachment, use default app.<EOL>async function openAttachment(attachment, source, uri) {<EOL>    switch (source) {<EOL>        case ATTACHMENT_SOURCE_LOCAL:<EOL>            try {<EOL>                open(uri);<EOL>            }<EOL>            catch ( err) {<EOL>                wrapError(err);<EOL>            }<EOL>","gt":"break;"}
{"input":"<s> // open an attachment, use default app.<EOL>async function openAttachment(attachment, source, uri) {<EOL>    switch (source) {<EOL>        case ATTACHMENT_SOURCE_LOCAL:<EOL>            try {<EOL>                open(uri);<EOL>            }<EOL>            catch ( err) {<EOL>                wrapError(err);<EOL>            }<EOL>             break;<EOL>        case ATTACHMENT_SOURCE_SERVER:<EOL>            const resource = await client.getResource(attachment.guid);<EOL>","gt":"const fileName = resource.attributes.fileName;"}
{"input":"<s> // open an attachment, use default app.<EOL>async function openAttachment(attachment, source, uri) {<EOL>    switch (source) {<EOL>        case ATTACHMENT_SOURCE_LOCAL:<EOL>            try {<EOL>                open(uri);<EOL>            }<EOL>            catch ( err) {<EOL>                wrapError(err);<EOL>            }<EOL>             break;<EOL>        case ATTACHMENT_SOURCE_SERVER:<EOL>            const resource = await client.getResource(attachment.guid);<EOL>             const fileName = resource.attributes.fileName;<EOL>            const data = resource.data.body;<EOL>            try {<EOL>                const","gt":"isExist = await fs.exsit(ATTACHMENT_FOLDER_PATH);"}
{"input":"<s> // open an attachment, use default app.<EOL>async function openAttachment(attachment, source, uri) {<EOL>    switch (source) {<EOL>        case ATTACHMENT_SOURCE_LOCAL:<EOL>            try {<EOL>                open(uri);<EOL>            }<EOL>            catch ( err) {<EOL>                wrapError(err);<EOL>            }<EOL>             break;<EOL>        case ATTACHMENT_SOURCE_SERVER:<EOL>            const resource = await client.getResource(attachment.guid);<EOL>             const fileName = resource.attributes.fileName;<EOL>            const data = resource.data.body;<EOL>            try {<EOL>                const  isExist = await fs.exsit(ATTACHMENT_FOLDER_PATH);<EOL>                if (!isExist) {<EOL>                    await fs.mkdirAsync(ATTACHMENT_FOLDER_PATH);<EOL>                }<EOL>                const tmpDir = await fs.mkdtempAsync(path.join(ATTACHMENT_FOLDER_PATH, \"<STR_LIT>\"));<EOL>                const filepath = path.join(tmpDir, fileName);<EOL>                await fs.writeFileAsync(filepath, data);<EOL>","gt":"open(filepath);"}
{"input":"<s> // Create an new note.<EOL>async function createNote(meta, content, resources) {<EOL>    try {<EOL>        let tagNames = meta[\"<STR_LIT>\"];<EOL>        let title = meta[\"<STR_LIT>\"];<EOL>        let notebook =","gt":"meta[\"<STR_LIT>\"];"}
{"input":"<s> // Create an new note.<EOL>async function createNote(meta, content, resources) {<EOL>    try {<EOL>        let tagNames = meta[\"<STR_LIT>\"];<EOL>        let title = meta[\"<STR_LIT>\"];<EOL>        let notebook =  meta[\"<STR_LIT>\"];<EOL>        const notebookGuid = await getNotebookGuid(notebook);<EOL>        return client.createNote(title, notebookGuid, content, tagNames, resources);<EOL>    }<EOL>","gt":"catch (err) {"}
{"input":"<s> function main(args) {<EOL>    const { settings, tscArgs } = loadSettingsFromArgs(args);<EOL>    const config = loadTscConfig(tscArgs);<EOL>    if (config.errors.length) {<EOL>        console.error(tsickle.formatDiagnostics(config.errors));<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> function main(args) {<EOL>    const { settings, tscArgs } = loadSettingsFromArgs(args);<EOL>    const config = loadTscConfig(tscArgs);<EOL>    if (config.errors.length) {<EOL>        console.error(tsickle.formatDiagnostics(config.errors));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    if (config.options.module !== ts.ModuleKind.CommonJS) {<EOL>        // This is not an upstream TypeScript diagnostic, therefore it does not go<EOL>        // through the diagnostics array mechanism.<EOL>        console.error('<STR_LIT>' +<EOL>            '<STR_LIT>');<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> function main(args) {<EOL>    const { settings, tscArgs } = loadSettingsFromArgs(args);<EOL>    const config = loadTscConfig(tscArgs);<EOL>    if (config.errors.length) {<EOL>        console.error(tsickle.formatDiagnostics(config.errors));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    if (config.options.module !== ts.ModuleKind.CommonJS) {<EOL>        // This is not an upstream TypeScript diagnostic, therefore it does not go<EOL>        // through the diagnostics array mechanism.<EOL>        console.error('<STR_LIT>' +<EOL>            '<STR_LIT>');<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // Run tsickle+TSC to convert inputs to Closure JS files.<EOL>    const result = toClosureJS(","gt":"config.options, config.fileNames, settings, (filePath, contents) => {"}
{"input":"<s> function main(args) {<EOL>    const { settings, tscArgs } = loadSettingsFromArgs(args);<EOL>    const config = loadTscConfig(tscArgs);<EOL>    if (config.errors.length) {<EOL>        console.error(tsickle.formatDiagnostics(config.errors));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    if (config.options.module !== ts.ModuleKind.CommonJS) {<EOL>        // This is not an upstream TypeScript diagnostic, therefore it does not go<EOL>        // through the diagnostics array mechanism.<EOL>        console.error('<STR_LIT>' +<EOL>            '<STR_LIT>');<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // Run tsickle+TSC to convert inputs to Closure JS files.<EOL>    const result = toClosureJS( config.options, config.fileNames, settings, (filePath, contents) => {<EOL>        mkdirp.sync(path.dirname(filePath));<EOL>        fs.writeFileSync(filePath, contents, { encoding: '<STR_LIT>' });<EOL>    });<EOL>    if (result.diagnostics.length) {<EOL>        console.error(tsickle.formatDiagnostics(result.diagnostics));<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function unhide() {<EOL>","gt":"driver.unhide();"}
{"input":"<s> function addEventHandlers() {<EOL>    for (const id of ['<STR_LIT>', '<STR_LIT>']) {<EOL>        const node = document.getElementById(id);<EOL>        if (!node)<EOL>            break;<EOL>        if (reset && (id ===","gt":"'<STR_LIT>')) {"}
{"input":"<s> function addEventHandlers() {<EOL>    for (const id of ['<STR_LIT>', '<STR_LIT>']) {<EOL>        const node = document.getElementById(id);<EOL>        if (!node)<EOL>            break;<EOL>        if (reset && (id ===  '<STR_LIT>')) {<EOL>            node.checked = false;<EOL>            reset = false;<EOL>            node.setAttribute('<STR_LIT>', Zotero.BetterBibTeX.getString('<STR_LIT>'));<EOL>        }<EOL>        if (node.getAttribute('<STR_LIT>'))<EOL>            return;<EOL>        debug(","gt":"'<STR_LIT>', id);"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts.","gt":"push(`<STR_LIT>`);"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts. push(`<STR_LIT>`);<EOL>    if (typeof branchName === '<STR_LIT>') {<EOL>        queryParts.push(","gt":"branchName)}`<STR_LIT>;"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts. push(`<STR_LIT>`);<EOL>    if (typeof branchName === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    // if (store.settings.file) {<EOL>    //     queryParts.push(`file=${encodeURIComponent(store.settings.file)}`);<EOL>    // }<EOL>    // if (store.settings.selectedBranchType) {<EOL>    //     queryParts.push(`branchSelection=${encodeURIComponent(store.settings.selectedBranchType.toString())}`);<EOL>    // }<EOL>    if (typeof","gt":"searchText === '<STR_LIT>') {"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts. push(`<STR_LIT>`);<EOL>    if (typeof branchName === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    // if (store.settings.file) {<EOL>    //     queryParts.push(`file=${encodeURIComponent(store.settings.file)}`);<EOL>    // }<EOL>    // if (store.settings.selectedBranchType) {<EOL>    //     queryParts.push(`branchSelection=${encodeURIComponent(store.settings.selectedBranchType.toString())}`);<EOL>    // }<EOL>    if (typeof  searchText === '<STR_LIT>') {<EOL>        queryParts.push(","gt":"searchText)}`<STR_LIT>;"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts. push(`<STR_LIT>`);<EOL>    if (typeof branchName === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    // if (store.settings.file) {<EOL>    //     queryParts.push(`file=${encodeURIComponent(store.settings.file)}`);<EOL>    // }<EOL>    // if (store.settings.selectedBranchType) {<EOL>    //     queryParts.push(`branchSelection=${encodeURIComponent(store.settings.selectedBranchType.toString())}`);<EOL>    // }<EOL>    if (typeof  searchText === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (refreshData === true) {<EOL>        queryParts.push('<STR_LIT>');<EOL>    }<EOL>    if (typeof pageIndex === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (typeof author === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (pageSize) {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    dispatch(notifyIsLoading());<EOL>    return axios.get(`<STR_LIT>`)<EOL>        .then((result) => {<EOL>        if (Array.isArray(result.data.items)) {<EOL>            result.","gt":"data.items.forEach(fixDates);"}
{"input":"<s> // tslint:disable-next-line:no-any<EOL>function fetchCommits(dispatch, store, pageIndex, pageSize, searchText, refreshData, branchName, author) {<EOL>    // pageSize = pageSize || store.logEntries.pageSize;<EOL>    const id = store.settings.id || '<STR_LIT>';<EOL>    const queryParts = [];<EOL>    queryParts. push(`<STR_LIT>`);<EOL>    if (typeof branchName === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    // if (store.settings.file) {<EOL>    //     queryParts.push(`file=${encodeURIComponent(store.settings.file)}`);<EOL>    // }<EOL>    // if (store.settings.selectedBranchType) {<EOL>    //     queryParts.push(`branchSelection=${encodeURIComponent(store.settings.selectedBranchType.toString())}`);<EOL>    // }<EOL>    if (typeof  searchText === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (refreshData === true) {<EOL>        queryParts.push('<STR_LIT>');<EOL>    }<EOL>    if (typeof pageIndex === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (typeof author === '<STR_LIT>') {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    if (pageSize) {<EOL>        queryParts.push(`<STR_LIT>`);<EOL>    }<EOL>    dispatch(notifyIsLoading());<EOL>    return axios.get(`<STR_LIT>`)<EOL>        .then((result) => {<EOL>        if (Array.isArray(result.data.items)) {<EOL>            result. data.items.forEach(fixDates);<EOL>        }<EOL>        dispatch(addResults(result.data));<EOL>        if (result.data && Array.isArray(result.data.items) && result.data.items.length > <NUM_LIT>) {<EOL>            fetchAvatars(result.data.items.map(item => item.","gt":"author), dispatch, () => store);"}
{"input":"<s> function null2Undefined(value) {<EOL>    if (value === null) {<EOL>        return","gt":"void <NUM_LIT>;"}
{"input":"<s> function tokenExpr(ctx, tokenMeta) {<EOL>","gt":"return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :"}
{"input":"<s> <EOL>export function isBuiltinLibDTS(fileName) {<EOL>","gt":"return fileName.match(/\\blib\\.(?:[^/]+\\.)?d\\.ts$/) != null;"}
{"input":"<s> <EOL>export function RepeatLastChange() {<EOL>    return","gt":"new RepeatLastChangeAction();"}
{"input":"<s> function containsSegmentGroupHelper(container, containee, containeePaths) {<EOL>    if (container.segments.length > containeePaths.length) {<EOL>        const current = container.segments.slice(<NUM_LIT>, containeePaths.length);<EOL>        if (!equalPath(current, containeePaths))<EOL>            return false;<EOL>        if (containee.hasChildren())<EOL>            return","gt":"false;"}
{"input":"<s> function containsSegmentGroupHelper(container, containee, containeePaths) {<EOL>    if (container.segments.length > containeePaths.length) {<EOL>        const current = container.segments.slice(<NUM_LIT>, containeePaths.length);<EOL>        if (!equalPath(current, containeePaths))<EOL>            return false;<EOL>        if (containee.hasChildren())<EOL>            return  false;<EOL>        return true;<EOL>    }<EOL>    else if (container.segments.length ===","gt":"containeePaths.length) {"}
{"input":"<s> function containsSegmentGroupHelper(container, containee, containeePaths) {<EOL>    if (container.segments.length > containeePaths.length) {<EOL>        const current = container.segments.slice(<NUM_LIT>, containeePaths.length);<EOL>        if (!equalPath(current, containeePaths))<EOL>            return false;<EOL>        if (containee.hasChildren())<EOL>            return  false;<EOL>        return true;<EOL>    }<EOL>    else if (container.segments.length ===  containeePaths.length) {<EOL>        if (!equalPath(container.segments, containeePaths))<EOL>            return false;<EOL>        for (const c in containee.","gt":"children) {"}
{"input":"<s> function containsSegmentGroupHelper(container, containee, containeePaths) {<EOL>    if (container.segments.length > containeePaths.length) {<EOL>        const current = container.segments.slice(<NUM_LIT>, containeePaths.length);<EOL>        if (!equalPath(current, containeePaths))<EOL>            return false;<EOL>        if (containee.hasChildren())<EOL>            return  false;<EOL>        return true;<EOL>    }<EOL>    else if (container.segments.length ===  containeePaths.length) {<EOL>        if (!equalPath(container.segments, containeePaths))<EOL>            return false;<EOL>        for (const c in containee. children) {<EOL>            if (!container.children[c])<EOL>                return false;<EOL>","gt":"if (!containsSegmentGroup(container.children[c], containee.children[c]))"}
{"input":"<s> function containsSegmentGroupHelper(container, containee, containeePaths) {<EOL>    if (container.segments.length > containeePaths.length) {<EOL>        const current = container.segments.slice(<NUM_LIT>, containeePaths.length);<EOL>        if (!equalPath(current, containeePaths))<EOL>            return false;<EOL>        if (containee.hasChildren())<EOL>            return  false;<EOL>        return true;<EOL>    }<EOL>    else if (container.segments.length ===  containeePaths.length) {<EOL>        if (!equalPath(container.segments, containeePaths))<EOL>            return false;<EOL>        for (const c in containee. children) {<EOL>            if (!container.children[c])<EOL>                return false;<EOL>             if (!containsSegmentGroup(container.children[c], containee.children[c]))<EOL>                return false;<EOL>        }<EOL>        return true;<EOL>    }<EOL>    else {<EOL>        const current = containeePaths.slice(<NUM_LIT>, container.segments.length);<EOL>        const","gt":"next = containeePaths.slice(container.segments.length);"}
{"input":"<s> export function createFileSystemPreferences(preferences) {<EOL>    return createPreferenceProxy(","gt":"preferences, filesystemPreferenceSchema);"}
{"input":"<s> <EOL>export function ObjectID(target, name) {<EOL>    Property(MongoDB.ObjectID)(","gt":"target, name);"}
{"input":"<s> function needsAdditionalRootNode(astNodes) {<EOL>    const lastAstNode = astNodes[astNodes.length - <NUM_LIT>];<EOL>    if (lastAstNode instanceof EmbeddedTemplateAst) {<EOL>        return lastAstNode.hasViewContainer;<EOL>    }<EOL>    if (lastAstNode instanceof ElementAst) {<EOL>        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {<EOL>            return needsAdditionalRootNode(lastAstNode.children);<EOL>        }<EOL>        return","gt":"lastAstNode.hasViewContainer;"}
{"input":"<s> function escapeBlocks(input) {<EOL>    const inputParts = input.split(_curlyRe);<EOL>    const resultParts = [];<EOL>","gt":"const escapedBlocks = [];"}
{"input":"<s> function escapeBlocks(input) {<EOL>    const inputParts = input.split(_curlyRe);<EOL>    const resultParts = [];<EOL>     const escapedBlocks = [];<EOL>    let bracketCount = <NUM_LIT>;<EOL>    let currentBlockParts = [];<EOL>","gt":"for (let partIndex = <NUM_LIT>; partIndex < inputParts.length; partIndex++) {"}
{"input":"<s> function escapeBlocks(input) {<EOL>    const inputParts = input.split(_curlyRe);<EOL>    const resultParts = [];<EOL>     const escapedBlocks = [];<EOL>    let bracketCount = <NUM_LIT>;<EOL>    let currentBlockParts = [];<EOL>     for (let partIndex = <NUM_LIT>; partIndex < inputParts.length; partIndex++) {<EOL>        const part = inputParts[partIndex];<EOL>        if (part == CLOSE_CURLY) {<EOL>            bracketCount--;<EOL>        }<EOL>        if (bracketCount > <NUM_LIT>) {<EOL>            currentBlockParts.push(part);<EOL>        }<EOL>        else {<EOL>            if (currentBlockParts.length > <NUM_LIT>) {<EOL>                escapedBlocks.push(currentBlockParts.join('<STR_LIT>'));<EOL>","gt":"resultParts.push(BLOCK_PLACEHOLDER);"}
{"input":"<s> export function deps(args) {<EOL>    args.forEach((arg) => {<EOL>        var","gt":"req = { script: fs.readFileSync(arg, \"<STR_LIT>\") };"}
{"input":"<s> export function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {<EOL>    const bindLen = def.bindings.length;<EOL>    let changed = false;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v0))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view,","gt":"def, <NUM_LIT>, v1))"}
{"input":"<s> export function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {<EOL>    const bindLen = def.bindings.length;<EOL>    let changed = false;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v0))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view,  def, <NUM_LIT>, v1))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v2))<EOL>","gt":"changed = true;"}
{"input":"<s> export function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {<EOL>    const bindLen = def.bindings.length;<EOL>    let changed = false;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v0))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view,  def, <NUM_LIT>, v1))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v2))<EOL>         changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v3))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v4))<EOL>        changed = true;<EOL>    if (","gt":"bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v5))"}
{"input":"<s> export function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {<EOL>    const bindLen = def.bindings.length;<EOL>    let changed = false;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v0))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view,  def, <NUM_LIT>, v1))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v2))<EOL>         changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v3))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v4))<EOL>        changed = true;<EOL>    if ( bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v5))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v6))<EOL>        changed = true;<EOL>    if (bindLen > <NUM_LIT> && checkAndUpdateElementValue(view, def, <NUM_LIT>, v7))<EOL>","gt":"changed = true;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === <NUM_LIT>)"}
{"input":"<s> function normalize_edtf(date) {<EOL>    let year, month, day;<EOL>    switch (date.type) {<EOL>        case '<STR_LIT>':<EOL>            [year, month, day] = date.values;<EOL>            if (","gt":"typeof month === '<STR_LIT>')"}
{"input":"<s> function normalize_edtf(date) {<EOL>    let year, month, day;<EOL>    switch (date.type) {<EOL>        case '<STR_LIT>':<EOL>            [year, month, day] = date.values;<EOL>            if ( typeof month === '<STR_LIT>')<EOL>                month += <NUM_LIT>;<EOL>            return doubt({ type: '<STR_LIT>', year, month, day }, { approximate: date.approximate || date.unspecified, uncertain: date.uncertain });<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function normalize_edtf(date) {<EOL>    let year, month, day;<EOL>    switch (date.type) {<EOL>        case '<STR_LIT>':<EOL>            [year, month, day] = date.values;<EOL>            if ( typeof month === '<STR_LIT>')<EOL>                month += <NUM_LIT>;<EOL>            return doubt({ type: '<STR_LIT>', year, month, day }, { approximate: date.approximate || date.unspecified, uncertain: date.uncertain });<EOL>         case '<STR_LIT>':<EOL>            // tslint:disable-next-line:no-magic-numbers<EOL>            if (date.values.length !== <NUM_LIT>)<EOL>                throw new Error(JSON.stringify(date));<EOL>            const from = date.values[<NUM_LIT>] ? normalize_edtf(date.values[<NUM_LIT>]) : { type: '<STR_LIT>' };<EOL>            const to = date.values[<NUM_LIT>] ? normalize_edtf(","gt":"date.values[<NUM_LIT>]) : { type: '<STR_LIT>' };"}
{"input":"<s> function normalize_edtf(date) {<EOL>    let year, month, day;<EOL>    switch (date.type) {<EOL>        case '<STR_LIT>':<EOL>            [year, month, day] = date.values;<EOL>            if ( typeof month === '<STR_LIT>')<EOL>                month += <NUM_LIT>;<EOL>            return doubt({ type: '<STR_LIT>', year, month, day }, { approximate: date.approximate || date.unspecified, uncertain: date.uncertain });<EOL>         case '<STR_LIT>':<EOL>            // tslint:disable-next-line:no-magic-numbers<EOL>            if (date.values.length !== <NUM_LIT>)<EOL>                throw new Error(JSON.stringify(date));<EOL>            const from = date.values[<NUM_LIT>] ? normalize_edtf(date.values[<NUM_LIT>]) : { type: '<STR_LIT>' };<EOL>            const to = date.values[<NUM_LIT>] ? normalize_edtf( date.values[<NUM_LIT>]) : { type: '<STR_LIT>' };<EOL>            return { type: '<STR_LIT>', from, to };<EOL>        case '<STR_LIT>':<EOL>            [year, month] = date.values;<EOL>            if (month < SPRING || month > WINTER)<EOL>                throw new Error(`<STR_LIT>`);<EOL>            return seasonize({ type: '<STR_LIT>',","gt":"year, month });"}
{"input":"<s> function foo2() {<EOL>    let x = <NUM_LIT>;<EOL>    x; // number<EOL>    while (cond) {<EOL>","gt":"x;"}
{"input":"<s> export function registerTypes(serviceManager) {<EOL>    serviceManager.addSingleton(IApplicationShell, ApplicationShell);<EOL>","gt":"serviceManager.addSingleton(ICommandManager, CommandManager);"}
{"input":"<s> export function isIdentifierStartChar(ch) {<EOL>    switch (ch) {<EOL>        // Underscore is explicitly allowed to start an identifier<EOL>        case Char.Underscore:<EOL>            return true;<EOL>        // Characters with the Other_ID_Start property<EOL>        case","gt":"<NUM_LIT>:"}
{"input":"<s> export function isIdentifierStartChar(ch) {<EOL>    switch (ch) {<EOL>        // Underscore is explicitly allowed to start an identifier<EOL>        case Char.Underscore:<EOL>            return true;<EOL>        // Characters with the Other_ID_Start property<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case","gt":"<NUM_LIT>:"}
{"input":"<s> export function isIdentifierStartChar(ch) {<EOL>    switch (ch) {<EOL>        // Underscore is explicitly allowed to start an identifier<EOL>        case Char.Underscore:<EOL>            return true;<EOL>        // Characters with the Other_ID_Start property<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>            return","gt":"true;"}
{"input":"<s> export function isIdentifierStartChar(ch) {<EOL>    switch (ch) {<EOL>        // Underscore is explicitly allowed to start an identifier<EOL>        case Char.Underscore:<EOL>            return true;<EOL>        // Characters with the Other_ID_Start property<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>            return  true;<EOL>        default:<EOL>            break;<EOL>    }<EOL>","gt":"const cat = getUnicodeCategory(ch);"}
{"input":"<s> export function isIdentifierStartChar(ch) {<EOL>    switch (ch) {<EOL>        // Underscore is explicitly allowed to start an identifier<EOL>        case Char.Underscore:<EOL>            return true;<EOL>        // Characters with the Other_ID_Start property<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case  <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>        case <NUM_LIT>:<EOL>            return  true;<EOL>        default:<EOL>            break;<EOL>    }<EOL>     const cat = getUnicodeCategory(ch);<EOL>    switch (cat) {<EOL>        // Supported categories for starting an identifier<EOL>        case UnicodeCategory.UppercaseLetter:<EOL>        case UnicodeCategory.LowercaseLetter:<EOL>        case UnicodeCategory.TitlecaseLetter:<EOL>        case","gt":"UnicodeCategory.ModifierLetter:"}
{"input":"<s> export function injectableDef(scope, factory) {<EOL>","gt":"return {"}
{"input":"<s> <EOL>function insertSpanAtTail(spans, newSpan, i) {<EOL>    const span = spans[i];<EOL>","gt":"return spans"}
{"input":"<s> <EOL>export function StartVisualLineMode(num) {<EOL>","gt":"return new StartVisualLineModeAction();"}
{"input":"<s> function load() {<EOL>    init();<EOL>    const itemBox = document.getElementById('<STR_LIT>');<EOL>    const citekeyBox = document.","gt":"getElementById('<STR_LIT>');"}
{"input":"<s> <EOL>export function AddVisualGotoRepeartCharacterMotion(num, action) {<EOL>    let m;<EOL>    m =","gt":"new FindCharacterMotion(null);"}
{"input":"<s> export function extractInlineSourceMap(source) {<EOL>    const inlineSourceMapRegex = getInlineSourceMapRegex();<EOL>    let previousResult = null;<EOL>    let result = null;<EOL>    // We want to extract the last source map in the source file<EOL>    // since that's probably the most recent one added.  We keep<EOL>    // matching against the source until we don't get a result,<EOL>    // then we use the previous result.<EOL>    do {<EOL>        previousResult = result;<EOL>","gt":"result = inlineSourceMapRegex.exec(source);"}
{"input":"<s> <EOL>export function importGroupSortForPrecedence(importGroups) {<EOL>    const regexGroups = [];<EOL>    const","gt":"otherGroups = [];"}
{"input":"<s> <EOL>export function getSecondaryEntryPointsForPackage(pkg) {<EOL>    const packageName = pkg.name;<EOL>    const packageDir = pkg.sourceDir;<EOL>    // Get the list of all entry-points as the list of directories in the package that have a<EOL>    // tsconfig-build.json<EOL>    const entryPoints =","gt":"getSubdirectoryNames(packageDir)"}
{"input":"<s> <EOL>export function getSecondaryEntryPointsForPackage(pkg) {<EOL>    const packageName = pkg.name;<EOL>    const packageDir = pkg.sourceDir;<EOL>    // Get the list of all entry-points as the list of directories in the package that have a<EOL>    // tsconfig-build.json<EOL>    const entryPoints =  getSubdirectoryNames(packageDir)<EOL>        .filter(d => existsSync(join(packageDir, d, '<STR_LIT>')));<EOL>    // Create nodes that comprise the build graph.<EOL>    const buildNodes = entryPoints.map(p => ({ name: p, deps: [], depth: <NUM_LIT> }));<EOL>    // Create a lookup for name -> build graph node.<EOL>    const nodeLookup = buildNodes.reduce((lookup, node) => {<EOL>","gt":"return lookup.set(node.name, node);"}
{"input":"<s> <EOL>export function getSecondaryEntryPointsForPackage(pkg) {<EOL>    const packageName = pkg.name;<EOL>    const packageDir = pkg.sourceDir;<EOL>    // Get the list of all entry-points as the list of directories in the package that have a<EOL>    // tsconfig-build.json<EOL>    const entryPoints =  getSubdirectoryNames(packageDir)<EOL>        .filter(d => existsSync(join(packageDir, d, '<STR_LIT>')));<EOL>    // Create nodes that comprise the build graph.<EOL>    const buildNodes = entryPoints.map(p => ({ name: p, deps: [], depth: <NUM_LIT> }));<EOL>    // Create a lookup for name -> build graph node.<EOL>    const nodeLookup = buildNodes.reduce((lookup, node) => {<EOL>         return lookup.set(node.name, node);<EOL>    }, new Map());<EOL>    // Regex used to extract entry-point name from an import statement referencing that entry-point.<EOL>    // E.g., extract \"portal\" from \"from '@angular-mdc/web/dialog';\".<EOL>    const importRegex = new","gt":"RegExp(`<STR_LIT>`);"}
{"input":"<s> <EOL>export function getSecondaryEntryPointsForPackage(pkg) {<EOL>    const packageName = pkg.name;<EOL>    const packageDir = pkg.sourceDir;<EOL>    // Get the list of all entry-points as the list of directories in the package that have a<EOL>    // tsconfig-build.json<EOL>    const entryPoints =  getSubdirectoryNames(packageDir)<EOL>        .filter(d => existsSync(join(packageDir, d, '<STR_LIT>')));<EOL>    // Create nodes that comprise the build graph.<EOL>    const buildNodes = entryPoints.map(p => ({ name: p, deps: [], depth: <NUM_LIT> }));<EOL>    // Create a lookup for name -> build graph node.<EOL>    const nodeLookup = buildNodes.reduce((lookup, node) => {<EOL>         return lookup.set(node.name, node);<EOL>    }, new Map());<EOL>    // Regex used to extract entry-point name from an import statement referencing that entry-point.<EOL>    // E.g., extract \"portal\" from \"from '@angular-mdc/web/dialog';\".<EOL>    const importRegex = new  RegExp(`<STR_LIT>`);<EOL>    // Update the deps for each node to point to the appropriate BuildNodes.<EOL>    buildNodes.forEach(node => {<EOL>        const importStatementFindCommand = buildPackageImportStatementFindCommand(join(packageDir, node.name), packageName);<EOL>        // Look for any imports that reference this same umbrella package and get the corresponding<EOL>        // BuildNode for each by looking at the import statements with grep.<EOL>        node.deps = spawnSync(importStatementFindCommand.binary, importStatementFindCommand.args)<EOL>            .stdout<EOL>            .toString()<EOL>            .split('<STR_LIT>')<EOL>            .filter(n => n)<EOL>            .map(importStatement => importStatement.match(importRegex)[<NUM_LIT>])<EOL>            .filter(n =>","gt":"nodeLookup.has(n) && n !== node.name)"}
{"input":"<s> <EOL>function localeStringSort(strA, strB, order = '<STR_LIT>') {<EOL>    let result = strA.localeCompare(strB);<EOL>    if (","gt":"order === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function setInlineSourceMap(source, sourceMap) {<EOL>    const encodedSourceMap = Buffer.from(sourceMap, '<STR_LIT>').toString('<STR_LIT>');<EOL>    if (containsInlineSourceMap(source)) {<EOL>        return source.","gt":"replace(getInlineSourceMapRegex(), `<STR_LIT>`);"}
{"input":"<s> function extend(dest, src) {<EOL>    for (let key in src) {<EOL>        dest[","gt":"key] = src[key];"}
{"input":"<s> export default function create_templates() {<EOL>    const template = fs.readFileSync(`<STR_LIT>`, '<STR_LIT>');<EOL>    const index = template.indexOf('<STR_LIT>');<EOL>    if (index !== -<NUM_LIT>) {<EOL>        // TODO remove this in a future version<EOL>        const { line, column } = locate(template, index, { offsetLine: <NUM_LIT> });<EOL>        const frame = framer(template, line, column);<EOL>","gt":"error({"}
{"input":"<s> export default function create_templates() {<EOL>    const template = fs.readFileSync(`<STR_LIT>`, '<STR_LIT>');<EOL>    const index = template.indexOf('<STR_LIT>');<EOL>    if (index !== -<NUM_LIT>) {<EOL>        // TODO remove this in a future version<EOL>        const { line, column } = locate(template, index, { offsetLine: <NUM_LIT> });<EOL>        const frame = framer(template, line, column);<EOL>         error({<EOL>            title: `<STR_LIT>`,<EOL>            body: `<STR_LIT>`,<EOL>            url: '<STR_LIT>',<EOL>","gt":"frame"}
{"input":"<s> export default function create_templates() {<EOL>    const template = fs.readFileSync(`<STR_LIT>`, '<STR_LIT>');<EOL>    const index = template.indexOf('<STR_LIT>');<EOL>    if (index !== -<NUM_LIT>) {<EOL>        // TODO remove this in a future version<EOL>        const { line, column } = locate(template, index, { offsetLine: <NUM_LIT> });<EOL>        const frame = framer(template, line, column);<EOL>         error({<EOL>            title: `<STR_LIT>`,<EOL>            body: `<STR_LIT>`,<EOL>            url: '<STR_LIT>',<EOL>             frame<EOL>        });<EOL>    }<EOL>    return {<EOL>        render: (data) => {<EOL>","gt":"return template.replace(/%sapper\\.(\\w+)%/g, (match, key) => {"}
{"input":"<s> function _callFactory(ngModule, factory, deps) {<EOL>    const len = deps.length;<EOL>    switch (len) {<EOL>        case <NUM_LIT>:<EOL>            return factory();<EOL>        case <NUM_LIT>:<EOL>","gt":"return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]));"}
{"input":"<s> function _callFactory(ngModule, factory, deps) {<EOL>    const len = deps.length;<EOL>    switch (len) {<EOL>        case <NUM_LIT>:<EOL>            return factory();<EOL>        case <NUM_LIT>:<EOL>             return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]));<EOL>        case <NUM_LIT>:<EOL>            return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[<NUM_LIT>]));<EOL>        case <NUM_LIT>:<EOL>            return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[","gt":"<NUM_LIT>]));"}
{"input":"<s> function _callFactory(ngModule, factory, deps) {<EOL>    const len = deps.length;<EOL>    switch (len) {<EOL>        case <NUM_LIT>:<EOL>            return factory();<EOL>        case <NUM_LIT>:<EOL>             return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]));<EOL>        case <NUM_LIT>:<EOL>            return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[<NUM_LIT>]));<EOL>        case <NUM_LIT>:<EOL>            return factory(resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[<NUM_LIT>]), resolveNgModuleDep(ngModule, deps[ <NUM_LIT>]));<EOL>        default:<EOL>            const depValues = Array(len);<EOL>            for (let","gt":"i = <NUM_LIT>; i < len; i++) {"}
{"input":"<s> export function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {<EOL>    if (!sourceSpan) {<EOL>        return","gt":"stmt;"}
{"input":"<s> function createAndInitializeWorkspaceService(configuration, environmentService) {<EOL>    return validateSingleFolderPath(configuration).then(() => {<EOL>        const workspaceService = new","gt":"WorkspaceService(environmentService);"}
{"input":"<s> export default function () {<EOL>    return","gt":"Promise.resolve()"}
{"input":"<s> <EOL>export function loadAppSettings() {<EOL>    var settingsPath = path.join(__dirname, '<STR_LIT>', SETTINGS_FILE);<EOL>    var","gt":"basePathFile = path.join(__dirname, '<STR_LIT>', BASE_PATH_FILE);"}
{"input":"<s> <EOL>export function loadAppSettings() {<EOL>    var settingsPath = path.join(__dirname, '<STR_LIT>', SETTINGS_FILE);<EOL>    var  basePathFile = path.join(__dirname, '<STR_LIT>', BASE_PATH_FILE);<EOL>    var metadataPath = path.join(__dirname, '<STR_LIT>', METADATA_FILE);<EOL>    if (!fs.existsSync(settingsPath)) {<EOL>        _logError(","gt":"'<STR_LIT>', settingsPath);"}
{"input":"<s> <EOL>export function loadAppSettings() {<EOL>    var settingsPath = path.join(__dirname, '<STR_LIT>', SETTINGS_FILE);<EOL>    var  basePathFile = path.join(__dirname, '<STR_LIT>', BASE_PATH_FILE);<EOL>    var metadataPath = path.join(__dirname, '<STR_LIT>', METADATA_FILE);<EOL>    if (!fs.existsSync(settingsPath)) {<EOL>        _logError( '<STR_LIT>', settingsPath);<EOL>        return null;<EOL>    }<EOL>    try {<EOL>        var metadata = null;<EOL>","gt":"if (!fs.existsSync(metadataPath)) {"}
{"input":"<s> <EOL>export function loadAppSettings() {<EOL>    var settingsPath = path.join(__dirname, '<STR_LIT>', SETTINGS_FILE);<EOL>    var  basePathFile = path.join(__dirname, '<STR_LIT>', BASE_PATH_FILE);<EOL>    var metadataPath = path.join(__dirname, '<STR_LIT>', METADATA_FILE);<EOL>    if (!fs.existsSync(settingsPath)) {<EOL>        _logError( '<STR_LIT>', settingsPath);<EOL>        return null;<EOL>    }<EOL>    try {<EOL>        var metadata = null;<EOL>         if (!fs.existsSync(metadataPath)) {<EOL>            // Create an write out metadata on the first run if it doesn't exist.<EOL>            metadata = { instanceId: uuid.v4() };<EOL>            fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, <NUM_LIT>), { encoding: '<STR_LIT>' });<EOL>        }<EOL>        else {<EOL>            // Load metadata from the file system. This is written out on the first run.<EOL>            metadata = JSON.parse(fs.readFileSync(metadataPath, '<STR_LIT>'));<EOL>        }<EOL>        const settings = JSON.parse(fs.readFileSync(settingsPath, '<STR_LIT>') || '<STR_LIT>');<EOL>        settings.versionId = process.env['<STR_LIT>'] || '<STR_LIT>';<EOL>        if (process.env[","gt":"'<STR_LIT>']) {"}
{"input":"<s> <EOL>export function loadAppSettings() {<EOL>    var settingsPath = path.join(__dirname, '<STR_LIT>', SETTINGS_FILE);<EOL>    var  basePathFile = path.join(__dirname, '<STR_LIT>', BASE_PATH_FILE);<EOL>    var metadataPath = path.join(__dirname, '<STR_LIT>', METADATA_FILE);<EOL>    if (!fs.existsSync(settingsPath)) {<EOL>        _logError( '<STR_LIT>', settingsPath);<EOL>        return null;<EOL>    }<EOL>    try {<EOL>        var metadata = null;<EOL>         if (!fs.existsSync(metadataPath)) {<EOL>            // Create an write out metadata on the first run if it doesn't exist.<EOL>            metadata = { instanceId: uuid.v4() };<EOL>            fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, <NUM_LIT>), { encoding: '<STR_LIT>' });<EOL>        }<EOL>        else {<EOL>            // Load metadata from the file system. This is written out on the first run.<EOL>            metadata = JSON.parse(fs.readFileSync(metadataPath, '<STR_LIT>'));<EOL>        }<EOL>        const settings = JSON.parse(fs.readFileSync(settingsPath, '<STR_LIT>') || '<STR_LIT>');<EOL>        settings.versionId = process.env['<STR_LIT>'] || '<STR_LIT>';<EOL>        if (process.env[ '<STR_LIT>']) {<EOL>            settings.configUrl = process.env['<STR_LIT>'];<EOL>        }<EOL>        if (!fs.existsSync(basePathFile)) {<EOL>            _log('<STR_LIT>');<EOL>            settings.datalabBasePath = '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            settings.datalabBasePath = JSON.parse(fs.readFileSync(basePathFile, '<STR_LIT>'));<EOL>        }<EOL>        const settingsOverrides = process.env['<STR_LIT>'];<EOL>        if (settingsOverrides) {<EOL>            // Allow overriding individual settings via JSON provided as an environment variable.<EOL>            const overrides = JSON.parse(settingsOverrides);<EOL>            for (const key of Object.keys(overrides)) {<EOL>                settings[key] = overrides[key];<EOL>            }<EOL>        }<EOL>        // Normalize the base path to include \"/\" characters.<EOL>        if (settings.datalabBasePath.indexOf(\"<STR_LIT>\") != <NUM_LIT>) {<EOL>            settings.datalabBasePath = \"<STR_LIT>\" + settings.datalabBasePath;<EOL>        }<EOL>        if (settings.datalabBasePath.lastIndexOf(\"<STR_LIT>\") !=","gt":"settings.datalabBasePath.length - <NUM_LIT>) {"}
{"input":"<s> <EOL>function formHandler(userId, formData, request, response) {<EOL>    if (!(('<STR_LIT>' in formData) && ('<STR_LIT>' in formData))) {<EOL>        response.writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>        response.end('<STR_LIT>');<EOL>","gt":"return;"}
{"input":"<s> <EOL>function formHandler(userId, formData, request, response) {<EOL>    if (!(('<STR_LIT>' in formData) && ('<STR_LIT>' in formData))) {<EOL>        response.writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>        response.end('<STR_LIT>');<EOL>         return;<EOL>    }<EOL>    var key = formData['<STR_LIT>'];<EOL>    var value = formData['<STR_LIT>'];<EOL>    if (key ==","gt":"IDLE_TIMEOUT_KEY) {"}
{"input":"<s> <EOL>function formHandler(userId, formData, request, response) {<EOL>    if (!(('<STR_LIT>' in formData) && ('<STR_LIT>' in formData))) {<EOL>        response.writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>        response.end('<STR_LIT>');<EOL>         return;<EOL>    }<EOL>    var key = formData['<STR_LIT>'];<EOL>    var value = formData['<STR_LIT>'];<EOL>    if (key ==  IDLE_TIMEOUT_KEY) {<EOL>        if (value) {<EOL>            const { seconds, errorMessage } = idleTimeout.parseAndValidateInterval(value);<EOL>            if (errorMessage) {<EOL>                response.","gt":"writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });"}
{"input":"<s> <EOL>function formHandler(userId, formData, request, response) {<EOL>    if (!(('<STR_LIT>' in formData) && ('<STR_LIT>' in formData))) {<EOL>        response.writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>        response.end('<STR_LIT>');<EOL>         return;<EOL>    }<EOL>    var key = formData['<STR_LIT>'];<EOL>    var value = formData['<STR_LIT>'];<EOL>    if (key ==  IDLE_TIMEOUT_KEY) {<EOL>        if (value) {<EOL>            const { seconds, errorMessage } = idleTimeout.parseAndValidateInterval(value);<EOL>            if (errorMessage) {<EOL>                response. writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                response.end(errorMessage);<EOL>                return;<EOL>            }<EOL>        }<EOL>    }<EOL>    // If dryRun was set, we don't actually update anything.<EOL>    if ('<STR_LIT>' in formData) {<EOL>        response.writeHead(<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>","gt":"response.end('<STR_LIT>');"}
{"input":"<s> function getContentProjection(asts, ngContentSelectors) {<EOL>    const projectIndexMap = new Map();<EOL>    const visitor = new ContentProjectionVisitor(projectIndexMap,","gt":"ngContentSelectors);"}
{"input":"<s> export function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {<EOL>    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);<EOL>    if (!outputs) {<EOL>","gt":"outputs = [];"}
{"input":"<s> export function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {<EOL>    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);<EOL>    if (!outputs) {<EOL>         outputs = [];<EOL>    }<EOL>    if (!bindings) {<EOL>        bindings = [];<EOL>    }<EOL>    // Need to resolve forwardRefs as e.g. for `useValue` we<EOL>    // lowered the expression and then stopped evaluating it,<EOL>    // i.e. also didn't unwrap it.<EOL>","gt":"value = resolveForwardRef(value);"}
{"input":"<s> export function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {<EOL>    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);<EOL>    if (!outputs) {<EOL>         outputs = [];<EOL>    }<EOL>    if (!bindings) {<EOL>        bindings = [];<EOL>    }<EOL>    // Need to resolve forwardRefs as e.g. for `useValue` we<EOL>    // lowered the expression and then stopped evaluating it,<EOL>    // i.e. also didn't unwrap it.<EOL>     value = resolveForwardRef(value);<EOL>    const depDefs = splitDepsDsl(deps, stringify(token));<EOL>    return {<EOL>        // will bet set by the view definition<EOL>        nodeIndex: -<NUM_LIT>,<EOL>        parent: null,<EOL>        renderParent: null,<EOL>","gt":"bindingIndex: -<NUM_LIT>,"}
{"input":"<s> export function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {<EOL>    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);<EOL>    if (!outputs) {<EOL>         outputs = [];<EOL>    }<EOL>    if (!bindings) {<EOL>        bindings = [];<EOL>    }<EOL>    // Need to resolve forwardRefs as e.g. for `useValue` we<EOL>    // lowered the expression and then stopped evaluating it,<EOL>    // i.e. also didn't unwrap it.<EOL>     value = resolveForwardRef(value);<EOL>    const depDefs = splitDepsDsl(deps, stringify(token));<EOL>    return {<EOL>        // will bet set by the view definition<EOL>        nodeIndex: -<NUM_LIT>,<EOL>        parent: null,<EOL>        renderParent: null,<EOL>         bindingIndex: -<NUM_LIT>,<EOL>        outputIndex: -<NUM_LIT>,<EOL>        // regular values<EOL>        checkIndex,<EOL>        flags,<EOL>        childFlags: <NUM_LIT>,<EOL>        directChildFlags: <NUM_LIT>,<EOL>","gt":"childMatchedQueries: <NUM_LIT>, matchedQueries, matchedQueryIds, references,"}
{"input":"<s> export default function () {<EOL>    return ng('<STR_LIT>', '<STR_LIT>')<EOL>        .then(() => expectFileToExist('<STR_LIT>'))<EOL>        .then(() =>","gt":"ng('<STR_LIT>', '<STR_LIT>'))"}
{"input":"<s> <EOL>function tagToString(tag, escapeExtraTags = new Set()) {<EOL>    let out = '<STR_LIT>';<EOL>    if (tag.tagName) {<EOL>        if (!JSDOC_TAGS_WHITELIST.has(tag.tagName) || escapeExtraTags.has(tag.tagName)) {<EOL>            // Escape tags we don't understand.  This is a subtle<EOL>            // compromise between multiple issues.<EOL>            // 1) If we pass through these non-Closure tags, the user will<EOL>            //    get a warning from Closure, and the point of tsickle is<EOL>            //    to insulate the user from Closure.<EOL>            // 2) The output of tsickle is for Closure but also may be read<EOL>            //    by humans, for example non-TypeScript users of Angular.<EOL>            // 3) Finally, we don't want to warn because users should be<EOL>            //    free to add whichever JSDoc they feel like.  If the user<EOL>            //    wants help ensuring they didn't typo a tag, that is the<EOL>            //    responsibility of a linter.<EOL>            out += `<STR_LIT>`;<EOL>        }<EOL>        else {<EOL>            out += `<STR_LIT>`;<EOL>        }<EOL>    }<EOL>","gt":"if (tag.type) {"}
{"input":"<s> export function templateSourceUrl(ngModuleType, compMeta, templateMeta) {<EOL>    let url;<EOL>    if (templateMeta.isInline) {<EOL>        if (compMeta.type.reference instanceof StaticSymbol) {<EOL>            // Note: a .ts file might contain multiple components with inline templates,<EOL>            // so we need to give them unique urls, as these will be used for sourcemaps.<EOL>            url = `<STR_LIT>`;<EOL>        }<EOL>        else {<EOL>            url =","gt":"ngModuleType)}/${identifierName(compMeta.type)}.html`;"}
{"input":"<s> export function templateSourceUrl(ngModuleType, compMeta, templateMeta) {<EOL>    let url;<EOL>    if (templateMeta.isInline) {<EOL>        if (compMeta.type.reference instanceof StaticSymbol) {<EOL>            // Note: a .ts file might contain multiple components with inline templates,<EOL>            // so we need to give them unique urls, as these will be used for sourcemaps.<EOL>            url = `<STR_LIT>`;<EOL>        }<EOL>        else {<EOL>            url = `<STR_LIT>`;<EOL>        }<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function toString(tags, escapeExtraTags = new Set()) {<EOL>    return serialize(","gt":"tags, true, escapeExtraTags);"}
{"input":"<s> export function createOutputPreferences(preferences) {<EOL>","gt":"return createPreferenceProxy(preferences, OutputConfigSchema);"}
{"input":"<s> export function isNumber(str) {<EOL>    return str.","gt":"constructor === Number;"}
{"input":"<s> <EOL>export function add(el, selector = '<STR_LIT>', tagName = '<STR_LIT>', className = '<STR_LIT>', cssText = '<STR_LIT>') {<EOL>    let ret = el.querySelector(selector);<EOL>    if (!ret) {<EOL>        ret = document.createElement(tagName);<EOL>        ret.className =","gt":"className;"}
{"input":"<s> <EOL>export function add(el, selector = '<STR_LIT>', tagName = '<STR_LIT>', className = '<STR_LIT>', cssText = '<STR_LIT>') {<EOL>    let ret = el.querySelector(selector);<EOL>    if (!ret) {<EOL>        ret = document.createElement(tagName);<EOL>        ret.className =  className;<EOL>        if (cssText) {<EOL>            ret.style.cssText = cssText;<EOL>        }<EOL>","gt":"el.appendChild(ret);"}
{"input":"<s> export function fn(params, body, type, sourceSpan, name) {<EOL>    return new FunctionExpr(params, body, type,","gt":"sourceSpan, name);"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {","gt":"filterType, value };"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =","gt":"<NUM_LIT>;"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |","gt":"<NUM_LIT>;"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},","gt":"baseHeaders, {"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>","gt":"requestOptions: {"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',","gt":"options)"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',  options)<EOL>        .pipe(flatmap((stream, f) => {<EOL>        const rawResult = f.contents.toString('<STR_LIT>');<EOL>        const result = JSON.parse(rawResult);<EOL>        const extension = result.results[<NUM_LIT>].extensions[<NUM_LIT>];<EOL>        if (!extension) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const metadata = {<EOL>            id: extension.extensionId,<EOL>","gt":"publisherId: extension.publisher,"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',  options)<EOL>        .pipe(flatmap((stream, f) => {<EOL>        const rawResult = f.contents.toString('<STR_LIT>');<EOL>        const result = JSON.parse(rawResult);<EOL>        const extension = result.results[<NUM_LIT>].extensions[<NUM_LIT>];<EOL>        if (!extension) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const metadata = {<EOL>            id: extension.extensionId,<EOL>             publisherId: extension.publisher,<EOL>            publisherDisplayName: extension.publisher.displayName<EOL>        };<EOL>        const extensionVersion = extension.versions.filter(v => v.version === version)[<NUM_LIT>];<EOL>        if (!extensionVersion) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const asset = extensionVersion.files.filter(f => f.assetType === '<STR_LIT>')[<NUM_LIT>];<EOL>        if (!asset) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        util.log('<STR_LIT>', util.colors.yellow(`<STR_LIT>`), '<STR_LIT>');<EOL>        const options = {<EOL>            base: asset.source,<EOL>","gt":"requestOptions: {"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',  options)<EOL>        .pipe(flatmap((stream, f) => {<EOL>        const rawResult = f.contents.toString('<STR_LIT>');<EOL>        const result = JSON.parse(rawResult);<EOL>        const extension = result.results[<NUM_LIT>].extensions[<NUM_LIT>];<EOL>        if (!extension) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const metadata = {<EOL>            id: extension.extensionId,<EOL>             publisherId: extension.publisher,<EOL>            publisherDisplayName: extension.publisher.displayName<EOL>        };<EOL>        const extensionVersion = extension.versions.filter(v => v.version === version)[<NUM_LIT>];<EOL>        if (!extensionVersion) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const asset = extensionVersion.files.filter(f => f.assetType === '<STR_LIT>')[<NUM_LIT>];<EOL>        if (!asset) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        util.log('<STR_LIT>', util.colors.yellow(`<STR_LIT>`), '<STR_LIT>');<EOL>        const options = {<EOL>            base: asset.source,<EOL>             requestOptions: {<EOL>                gzip: true,<EOL>                headers: baseHeaders<EOL>            }<EOL>        };<EOL>        return remote('<STR_LIT>', options)<EOL>            .pipe(flatmap(","gt":""}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',  options)<EOL>        .pipe(flatmap((stream, f) => {<EOL>        const rawResult = f.contents.toString('<STR_LIT>');<EOL>        const result = JSON.parse(rawResult);<EOL>        const extension = result.results[<NUM_LIT>].extensions[<NUM_LIT>];<EOL>        if (!extension) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const metadata = {<EOL>            id: extension.extensionId,<EOL>             publisherId: extension.publisher,<EOL>            publisherDisplayName: extension.publisher.displayName<EOL>        };<EOL>        const extensionVersion = extension.versions.filter(v => v.version === version)[<NUM_LIT>];<EOL>        if (!extensionVersion) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const asset = extensionVersion.files.filter(f => f.assetType === '<STR_LIT>')[<NUM_LIT>];<EOL>        if (!asset) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        util.log('<STR_LIT>', util.colors.yellow(`<STR_LIT>`), '<STR_LIT>');<EOL>        const options = {<EOL>            base: asset.source,<EOL>             requestOptions: {<EOL>                gzip: true,<EOL>                headers: baseHeaders<EOL>            }<EOL>        };<EOL>        return remote('<STR_LIT>', options)<EOL>            .pipe(flatmap(","gt":"stream => {"}
{"input":"<s> export function fromMarketplace(extensionName, version) {<EOL>    const filterType = <NUM_LIT>;<EOL>    const value = extensionName;<EOL>    const criterium = {  filterType, value };<EOL>    const criteria = [criterium];<EOL>    const pageNumber = <NUM_LIT>;<EOL>    const pageSize =  <NUM_LIT>;<EOL>    const sortBy = <NUM_LIT>;<EOL>    const sortOrder = <NUM_LIT>;<EOL>    const flags = <NUM_LIT> | <NUM_LIT> |  <NUM_LIT>;<EOL>    const assetTypes = ['<STR_LIT>'];<EOL>    const filters = [{ criteria, pageNumber, pageSize, sortBy, sortOrder }];<EOL>    const body = JSON.stringify({ filters, assetTypes, flags });<EOL>    const headers = assign({},  baseHeaders, {<EOL>        '<STR_LIT>':  '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': body.length<EOL>    });<EOL>    const options = {<EOL>        base: '<STR_LIT>',<EOL>         requestOptions: {<EOL>            method: '<STR_LIT>',<EOL>            gzip: true,<EOL>            headers,<EOL>            body: body<EOL>        }<EOL>    };<EOL>    return remote('<STR_LIT>',  options)<EOL>        .pipe(flatmap((stream, f) => {<EOL>        const rawResult = f.contents.toString('<STR_LIT>');<EOL>        const result = JSON.parse(rawResult);<EOL>        const extension = result.results[<NUM_LIT>].extensions[<NUM_LIT>];<EOL>        if (!extension) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const metadata = {<EOL>            id: extension.extensionId,<EOL>             publisherId: extension.publisher,<EOL>            publisherDisplayName: extension.publisher.displayName<EOL>        };<EOL>        const extensionVersion = extension.versions.filter(v => v.version === version)[<NUM_LIT>];<EOL>        if (!extensionVersion) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        const asset = extensionVersion.files.filter(f => f.assetType === '<STR_LIT>')[<NUM_LIT>];<EOL>        if (!asset) {<EOL>            return error(`<STR_LIT>`);<EOL>        }<EOL>        util.log('<STR_LIT>', util.colors.yellow(`<STR_LIT>`), '<STR_LIT>');<EOL>        const options = {<EOL>            base: asset.source,<EOL>             requestOptions: {<EOL>                gzip: true,<EOL>                headers: baseHeaders<EOL>            }<EOL>        };<EOL>        return remote('<STR_LIT>', options)<EOL>            .pipe(flatmap(  stream => {<EOL>            const packageJsonFilter = filter('<STR_LIT>', { restore: true });<EOL>            return","gt":"stream"}
{"input":"<s> function parseNotebookListItem(item) {<EOL>    if (!item.trim().startsWith('<STR_LIT>')) {<EOL>        return;<EOL>    }<EOL>    let parts = item.split('<STR_LIT>').filter(part => part !== '<STR_LIT>').map(part => part.trim());<EOL>    let url = parts.shift();<EOL>    let startupFolder = item.","gt":"indexOf('<STR_LIT>') > <NUM_LIT> ? parts[<NUM_LIT>].trim() : null;"}
{"input":"<s> function parseNotebookListItem(item) {<EOL>    if (!item.trim().startsWith('<STR_LIT>')) {<EOL>        return;<EOL>    }<EOL>    let parts = item.split('<STR_LIT>').filter(part => part !== '<STR_LIT>').map(part => part.trim());<EOL>    let url = parts.shift();<EOL>    let startupFolder = item. indexOf('<STR_LIT>') > <NUM_LIT> ? parts[<NUM_LIT>].trim() : null;<EOL>    let token = '<STR_LIT>';<EOL>    let urlOnly = url;<EOL>    if (url.indexOf('<STR_LIT>') > <NUM_LIT>) {<EOL>        token = url.split('<STR_LIT>')[<NUM_LIT>].","gt":"trim();"}
{"input":"<s> function parseNotebookListItem(item) {<EOL>    if (!item.trim().startsWith('<STR_LIT>')) {<EOL>        return;<EOL>    }<EOL>    let parts = item.split('<STR_LIT>').filter(part => part !== '<STR_LIT>').map(part => part.trim());<EOL>    let url = parts.shift();<EOL>    let startupFolder = item. indexOf('<STR_LIT>') > <NUM_LIT> ? parts[<NUM_LIT>].trim() : null;<EOL>    let token = '<STR_LIT>';<EOL>    let urlOnly = url;<EOL>    if (url.indexOf('<STR_LIT>') > <NUM_LIT>) {<EOL>        token = url.split('<STR_LIT>')[<NUM_LIT>]. trim();<EOL>        urlOnly = url.split('<STR_LIT>')[<NUM_LIT>].trim();<EOL>    }<EOL>","gt":"return {"}
{"input":"<s> export function extractBetweenDelimiters(content, startDelimiter, endDelimiter) {<EOL>","gt":"content = content.substring(content.indexOf(startDelimiter) + startDelimiter.length);"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>","gt":"if (elDef && (depDef.flags & DepFlags.SkipSelf)) {"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>","gt":"allowPrivateServices = false;"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>","gt":"return createRendererV1(compView);"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>","gt":"case ViewContainerRefTokenKey:"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =","gt":"findCompView(searchView, elDef, allowPrivateServices);"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector(","gt":"searchView, elDef);"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector( searchView, elDef);<EOL>                default:<EOL>                    const providerDef = (allowPrivateServices ? elDef.element.allProviders :<EOL>                        elDef.","gt":"element.publicProviders)[tokenKey];"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector( searchView, elDef);<EOL>                default:<EOL>                    const providerDef = (allowPrivateServices ? elDef.element.allProviders :<EOL>                        elDef. element.publicProviders)[tokenKey];<EOL>                    if (providerDef) {<EOL>                        let providerData = asProviderData(searchView, providerDef.nodeIndex);<EOL>                        if (!providerData) {<EOL>                            providerData = { instance: _createProviderInstance(searchView, providerDef) };<EOL>                            searchView.nodes[providerDef.nodeIndex] = providerData;<EOL>                        }<EOL>                        return providerData.instance;<EOL>                    }<EOL>            }<EOL>        }<EOL>        allowPrivateServices = isComponentView(searchView);<EOL>        elDef = viewParentEl(searchView);<EOL>        searchView = searchView.parent;<EOL>        if (depDef.","gt":"flags & DepFlags.Self) {"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector( searchView, elDef);<EOL>                default:<EOL>                    const providerDef = (allowPrivateServices ? elDef.element.allProviders :<EOL>                        elDef. element.publicProviders)[tokenKey];<EOL>                    if (providerDef) {<EOL>                        let providerData = asProviderData(searchView, providerDef.nodeIndex);<EOL>                        if (!providerData) {<EOL>                            providerData = { instance: _createProviderInstance(searchView, providerDef) };<EOL>                            searchView.nodes[providerDef.nodeIndex] = providerData;<EOL>                        }<EOL>                        return providerData.instance;<EOL>                    }<EOL>            }<EOL>        }<EOL>        allowPrivateServices = isComponentView(searchView);<EOL>        elDef = viewParentEl(searchView);<EOL>        searchView = searchView.parent;<EOL>        if (depDef. flags & DepFlags.Self) {<EOL>","gt":"searchView = null;"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector( searchView, elDef);<EOL>                default:<EOL>                    const providerDef = (allowPrivateServices ? elDef.element.allProviders :<EOL>                        elDef. element.publicProviders)[tokenKey];<EOL>                    if (providerDef) {<EOL>                        let providerData = asProviderData(searchView, providerDef.nodeIndex);<EOL>                        if (!providerData) {<EOL>                            providerData = { instance: _createProviderInstance(searchView, providerDef) };<EOL>                            searchView.nodes[providerDef.nodeIndex] = providerData;<EOL>                        }<EOL>                        return providerData.instance;<EOL>                    }<EOL>            }<EOL>        }<EOL>        allowPrivateServices = isComponentView(searchView);<EOL>        elDef = viewParentEl(searchView);<EOL>        searchView = searchView.parent;<EOL>        if (depDef. flags & DepFlags.Self) {<EOL>             searchView = null;<EOL>        }<EOL>    }<EOL>    const value = startView.root.injector.","gt":"get(depDef.token,"}
{"input":"<s> export function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {<EOL>    if (depDef.flags & DepFlags.Value) {<EOL>        return depDef.token;<EOL>    }<EOL>    const startView = view;<EOL>    if (depDef.flags & DepFlags.Optional) {<EOL>        notFoundValue = null;<EOL>    }<EOL>    const tokenKey = depDef.tokenKey;<EOL>    if (tokenKey === ChangeDetectorRefTokenKey) {<EOL>        // directives on the same element as a component should be able to control the change detector<EOL>        // of that component as well.<EOL>        allowPrivateServices = !!(elDef && elDef.element.componentView);<EOL>    }<EOL>     if (elDef && (depDef.flags & DepFlags.SkipSelf)) {<EOL>         allowPrivateServices = false;<EOL>        elDef = elDef.parent;<EOL>    }<EOL>    let searchView = view;<EOL>    while (searchView) {<EOL>        if (elDef) {<EOL>            switch (tokenKey) {<EOL>                case RendererV1TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                     return createRendererV1(compView);<EOL>                }<EOL>                case Renderer2TokenKey: {<EOL>                    const compView = findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return compView.renderer;<EOL>                }<EOL>                case ElementRefTokenKey:<EOL>                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);<EOL>                 case ViewContainerRefTokenKey:<EOL>                    return asElementData(searchView, elDef.nodeIndex).viewContainer;<EOL>                case TemplateRefTokenKey: {<EOL>                    if (elDef.element.template) {<EOL>                        return asElementData(searchView, elDef.nodeIndex).template;<EOL>                    }<EOL>                    break;<EOL>                }<EOL>                case ChangeDetectorRefTokenKey: {<EOL>                    let cdView =  findCompView(searchView, elDef, allowPrivateServices);<EOL>                    return createChangeDetectorRef(cdView);<EOL>                }<EOL>                case InjectorRefTokenKey:<EOL>                    return createInjector( searchView, elDef);<EOL>                default:<EOL>                    const providerDef = (allowPrivateServices ? elDef.element.allProviders :<EOL>                        elDef. element.publicProviders)[tokenKey];<EOL>                    if (providerDef) {<EOL>                        let providerData = asProviderData(searchView, providerDef.nodeIndex);<EOL>                        if (!providerData) {<EOL>                            providerData = { instance: _createProviderInstance(searchView, providerDef) };<EOL>                            searchView.nodes[providerDef.nodeIndex] = providerData;<EOL>                        }<EOL>                        return providerData.instance;<EOL>                    }<EOL>            }<EOL>        }<EOL>        allowPrivateServices = isComponentView(searchView);<EOL>        elDef = viewParentEl(searchView);<EOL>        searchView = searchView.parent;<EOL>        if (depDef. flags & DepFlags.Self) {<EOL>             searchView = null;<EOL>        }<EOL>    }<EOL>    const value = startView.root.injector. get(depDef.token,","gt":"NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);"}
{"input":"<s> <EOL>export function inheritedParamsDataResolve(route, paramsInheritanceStrategy = '<STR_LIT>') {<EOL>    const pathFromRoot = route.pathFromRoot;<EOL>    let inheritingStartingFrom = <NUM_LIT>;<EOL>    if (paramsInheritanceStrategy !== '<STR_LIT>') {<EOL>        inheritingStartingFrom = pathFromRoot.length -","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>export function inheritedParamsDataResolve(route, paramsInheritanceStrategy = '<STR_LIT>') {<EOL>    const pathFromRoot = route.pathFromRoot;<EOL>    let inheritingStartingFrom = <NUM_LIT>;<EOL>    if (paramsInheritanceStrategy !== '<STR_LIT>') {<EOL>        inheritingStartingFrom = pathFromRoot.length -  <NUM_LIT>;<EOL>        while (inheritingStartingFrom >= <NUM_LIT>) {<EOL>            const current = pathFromRoot[inheritingStartingFrom];<EOL>            const parent =","gt":"pathFromRoot[inheritingStartingFrom - <NUM_LIT>];"}
{"input":"<s> <EOL>export function inheritedParamsDataResolve(route, paramsInheritanceStrategy = '<STR_LIT>') {<EOL>    const pathFromRoot = route.pathFromRoot;<EOL>    let inheritingStartingFrom = <NUM_LIT>;<EOL>    if (paramsInheritanceStrategy !== '<STR_LIT>') {<EOL>        inheritingStartingFrom = pathFromRoot.length -  <NUM_LIT>;<EOL>        while (inheritingStartingFrom >= <NUM_LIT>) {<EOL>            const current = pathFromRoot[inheritingStartingFrom];<EOL>            const parent =  pathFromRoot[inheritingStartingFrom - <NUM_LIT>];<EOL>            // current route is an empty path => inherits its parent's params and data<EOL>            if (current.routeConfig && current.routeConfig.path === '<STR_LIT>') {<EOL>                inheritingStartingFrom--;<EOL>                // parent is componentless => current route should inherit its params and data<EOL>            }<EOL>            else if (!parent.component) {<EOL>                inheritingStartingFrom--;<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const","gt":"node = data[index];"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>","gt":"assertNull(currentView.bindingStartIndex, '<STR_LIT>');"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>             assertNull(currentView.bindingStartIndex, '<STR_LIT>');<EOL>        const","gt":"isHostElement = typeof nameOrComponentType !== '<STR_LIT>';"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>             assertNull(currentView.bindingStartIndex, '<STR_LIT>');<EOL>        const  isHostElement = typeof nameOrComponentType !== '<STR_LIT>';<EOL>        // MEGAMORPHIC: `ngComponentDef` is a megamorphic property access here.<EOL>        // This is OK, since we will refactor this code and store the result in `TView.data`<EOL>        // which means that we will be reading this value only once. We are trading clean/simple<EOL>        // template<EOL>        // code for slight startup(first run) performance. (No impact on subsequent runs)<EOL>        // TODO(misko): refactor this to store the `ComponentDef` in `TView.data`.<EOL>        const hostComponentDef = isHostElement ? nameOrComponentType.ngComponentDef : null;<EOL>        const name = isHostElement ? hostComponentDef.tag : nameOrComponentType;<EOL>        if (name === null) {<EOL>            // TODO: future support for nameless components.<EOL>","gt":"throw '<STR_LIT>';"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>             assertNull(currentView.bindingStartIndex, '<STR_LIT>');<EOL>        const  isHostElement = typeof nameOrComponentType !== '<STR_LIT>';<EOL>        // MEGAMORPHIC: `ngComponentDef` is a megamorphic property access here.<EOL>        // This is OK, since we will refactor this code and store the result in `TView.data`<EOL>        // which means that we will be reading this value only once. We are trading clean/simple<EOL>        // template<EOL>        // code for slight startup(first run) performance. (No impact on subsequent runs)<EOL>        // TODO(misko): refactor this to store the `ComponentDef` in `TView.data`.<EOL>        const hostComponentDef = isHostElement ? nameOrComponentType.ngComponentDef : null;<EOL>        const name = isHostElement ? hostComponentDef.tag : nameOrComponentType;<EOL>        if (name === null) {<EOL>            // TODO: future support for nameless components.<EOL>             throw '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            native = renderer.createElement(name);<EOL>            let componentView = null;<EOL>            if (isHostElement) {<EOL>                const tView = getOrCreateTView(hostComponentDef.template);<EOL>                const hostView = createLView(-<NUM_LIT>, rendererFactory.createRenderer(native, hostComponentDef.rendererType), tView, null, null, hostComponentDef.","gt":"onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);"}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>             assertNull(currentView.bindingStartIndex, '<STR_LIT>');<EOL>        const  isHostElement = typeof nameOrComponentType !== '<STR_LIT>';<EOL>        // MEGAMORPHIC: `ngComponentDef` is a megamorphic property access here.<EOL>        // This is OK, since we will refactor this code and store the result in `TView.data`<EOL>        // which means that we will be reading this value only once. We are trading clean/simple<EOL>        // template<EOL>        // code for slight startup(first run) performance. (No impact on subsequent runs)<EOL>        // TODO(misko): refactor this to store the `ComponentDef` in `TView.data`.<EOL>        const hostComponentDef = isHostElement ? nameOrComponentType.ngComponentDef : null;<EOL>        const name = isHostElement ? hostComponentDef.tag : nameOrComponentType;<EOL>        if (name === null) {<EOL>            // TODO: future support for nameless components.<EOL>             throw '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            native = renderer.createElement(name);<EOL>            let componentView = null;<EOL>            if (isHostElement) {<EOL>                const tView = getOrCreateTView(hostComponentDef.template);<EOL>                const hostView = createLView(-<NUM_LIT>, rendererFactory.createRenderer(native, hostComponentDef.rendererType), tView, null, null, hostComponentDef. onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);<EOL>                componentView = addToViewTree(hostView);<EOL>            }<EOL>            // Only component views should be added to the view tree directly. Embedded views are<EOL>            // accessed through their containers because they may be removed / re-added later.<EOL>            node = createLNode(index, LNodeFlags.Element, native, componentView);<EOL>            // TODO(misko): implement code which caches the local reference resolution<EOL>            const queryName = hack_findQueryName(hostComponentDef, localRefs, '<STR_LIT>');<EOL>            if (node.tNode == null) {<EOL>                ngDevMode && assertDataInRange(index - <NUM_LIT>);<EOL>                node.tNode = tData[","gt":"index] ="}
{"input":"<s> //////////////////////////<EOL>//// Element<EOL>//////////////////////////<EOL><EOL>export function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {<EOL>    let node;<EOL>    let native;<EOL>    if (nameOrComponentType == null) {<EOL>        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)<EOL>        const  node = data[index];<EOL>        native = node && node.native;<EOL>    }<EOL>    else {<EOL>        ngDevMode &&<EOL>             assertNull(currentView.bindingStartIndex, '<STR_LIT>');<EOL>        const  isHostElement = typeof nameOrComponentType !== '<STR_LIT>';<EOL>        // MEGAMORPHIC: `ngComponentDef` is a megamorphic property access here.<EOL>        // This is OK, since we will refactor this code and store the result in `TView.data`<EOL>        // which means that we will be reading this value only once. We are trading clean/simple<EOL>        // template<EOL>        // code for slight startup(first run) performance. (No impact on subsequent runs)<EOL>        // TODO(misko): refactor this to store the `ComponentDef` in `TView.data`.<EOL>        const hostComponentDef = isHostElement ? nameOrComponentType.ngComponentDef : null;<EOL>        const name = isHostElement ? hostComponentDef.tag : nameOrComponentType;<EOL>        if (name === null) {<EOL>            // TODO: future support for nameless components.<EOL>             throw '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            native = renderer.createElement(name);<EOL>            let componentView = null;<EOL>            if (isHostElement) {<EOL>                const tView = getOrCreateTView(hostComponentDef.template);<EOL>                const hostView = createLView(-<NUM_LIT>, rendererFactory.createRenderer(native, hostComponentDef.rendererType), tView, null, null, hostComponentDef. onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);<EOL>                componentView = addToViewTree(hostView);<EOL>            }<EOL>            // Only component views should be added to the view tree directly. Embedded views are<EOL>            // accessed through their containers because they may be removed / re-added later.<EOL>            node = createLNode(index, LNodeFlags.Element, native, componentView);<EOL>            // TODO(misko): implement code which caches the local reference resolution<EOL>            const queryName = hack_findQueryName(hostComponentDef, localRefs, '<STR_LIT>');<EOL>            if (node.tNode == null) {<EOL>                ngDevMode && assertDataInRange(index - <NUM_LIT>);<EOL>                node.tNode = tData[ index] =<EOL>                    createTNode(name, attrs || null, null, hostComponentDef ? null : queryName);<EOL>            }<EOL>            if (attrs)<EOL>                setUpAttributes(native, attrs);<EOL>            appendChild(","gt":"node.parent, native, currentView);"}
{"input":"<s> export function createText(view, renderHost, def) {<EOL>    let renderNode;<EOL>    const renderer = view.renderer;<EOL>    renderNode = renderer.createText(def.text.","gt":"prefix);"}
{"input":"<s> <EOL>export function isReverseProxyRequest(request) {<EOL>    var urlpath = url.parse(","gt":"request.url, true).pathname;"}
{"input":"<s> <EOL>export function getUserId(request) {<EOL>    if (appSettings.supportUserOverride) {<EOL>        // Try cookie first.<EOL>        if (request.headers.cookie) {<EOL>            var cookies =","gt":"request.headers.cookie.split('<STR_LIT>');"}
{"input":"<s> function createProdServices() {<EOL>    return {<EOL>        setCurrentNode: () => { },<EOL>        createRootView: createProdRootView,<EOL>        createEmbeddedView: createEmbeddedView,<EOL>        createComponentView: createComponentView,<EOL>        createNgModuleRef:","gt":"createNgModuleRef,"}
{"input":"<s> function createProdServices() {<EOL>    return {<EOL>        setCurrentNode: () => { },<EOL>        createRootView: createProdRootView,<EOL>        createEmbeddedView: createEmbeddedView,<EOL>        createComponentView: createComponentView,<EOL>        createNgModuleRef:  createNgModuleRef,<EOL>        overrideProvider: NOOP,<EOL>        overrideComponentView: NOOP,<EOL>        clearOverrides: NOOP,<EOL>        checkAndUpdateView: checkAndUpdateView,<EOL>        checkNoChangesView:","gt":"checkNoChangesView,"}
{"input":"<s> function createProdServices() {<EOL>    return {<EOL>        setCurrentNode: () => { },<EOL>        createRootView: createProdRootView,<EOL>        createEmbeddedView: createEmbeddedView,<EOL>        createComponentView: createComponentView,<EOL>        createNgModuleRef:  createNgModuleRef,<EOL>        overrideProvider: NOOP,<EOL>        overrideComponentView: NOOP,<EOL>        clearOverrides: NOOP,<EOL>        checkAndUpdateView: checkAndUpdateView,<EOL>        checkNoChangesView:  checkNoChangesView,<EOL>        destroyView: destroyView,<EOL>        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),<EOL>        handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),<EOL>        updateDirectives: (view,","gt":"checkType) => view.def.updateDirectives(checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode :"}
{"input":"<s> function mergeTextTokens(srcTokens) {<EOL>    const dstTokens = [];<EOL>    let lastDstToken = undefined;<EOL>    for (let i = <NUM_LIT>; i < srcTokens.length; i++) {<EOL>        const token = srcTokens[i];<EOL>        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.","gt":"TEXT) {"}
{"input":"<s> function mergeTextTokens(srcTokens) {<EOL>    const dstTokens = [];<EOL>    let lastDstToken = undefined;<EOL>    for (let i = <NUM_LIT>; i < srcTokens.length; i++) {<EOL>        const token = srcTokens[i];<EOL>        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType. TEXT) {<EOL>            lastDstToken.parts[<NUM_LIT>] += token.parts[<NUM_LIT>];<EOL>            lastDstToken.sourceSpan.end = token.sourceSpan.end;<EOL>        }<EOL>        else {<EOL>            lastDstToken = token;<EOL>","gt":"dstTokens.push(lastDstToken);"}
{"input":"<s> function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {<EOL>    const rendererFactory = ngModule.injector.get(RendererFactory2);<EOL>    const","gt":"root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);"}
{"input":"<s> <EOL>function generatePropertyAliases(lNodeFlags, direction) {<EOL>    const size = (lNodeFlags & LNodeFlags.SIZE_MASK) >> LNodeFlags.SIZE_SHIFT;<EOL>    let propStore = null;<EOL>    if (size > <NUM_LIT>) {<EOL>        const start = lNodeFlags >> LNodeFlags.INDX_SHIFT;<EOL>","gt":"const isInput = direction === BindingDirection.Input;"}
{"input":"<s> <EOL>function generatePropertyAliases(lNodeFlags, direction) {<EOL>    const size = (lNodeFlags & LNodeFlags.SIZE_MASK) >> LNodeFlags.SIZE_SHIFT;<EOL>    let propStore = null;<EOL>    if (size > <NUM_LIT>) {<EOL>        const start = lNodeFlags >> LNodeFlags.INDX_SHIFT;<EOL>         const isInput = direction === BindingDirection.Input;<EOL>        for (let i = start, ii = start + size; i < ii; i++) {<EOL>            const directiveDef = tData[","gt":"i];"}
{"input":"<s> <EOL>function generatePropertyAliases(lNodeFlags, direction) {<EOL>    const size = (lNodeFlags & LNodeFlags.SIZE_MASK) >> LNodeFlags.SIZE_SHIFT;<EOL>    let propStore = null;<EOL>    if (size > <NUM_LIT>) {<EOL>        const start = lNodeFlags >> LNodeFlags.INDX_SHIFT;<EOL>         const isInput = direction === BindingDirection.Input;<EOL>        for (let i = start, ii = start + size; i < ii; i++) {<EOL>            const directiveDef = tData[ i];<EOL>            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;<EOL>            for (let publicName in propertyAliasMap) {<EOL>                if (propertyAliasMap.hasOwnProperty(","gt":"publicName)) {"}
{"input":"<s> <EOL>function generatePropertyAliases(lNodeFlags, direction) {<EOL>    const size = (lNodeFlags & LNodeFlags.SIZE_MASK) >> LNodeFlags.SIZE_SHIFT;<EOL>    let propStore = null;<EOL>    if (size > <NUM_LIT>) {<EOL>        const start = lNodeFlags >> LNodeFlags.INDX_SHIFT;<EOL>         const isInput = direction === BindingDirection.Input;<EOL>        for (let i = start, ii = start + size; i < ii; i++) {<EOL>            const directiveDef = tData[ i];<EOL>            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;<EOL>            for (let publicName in propertyAliasMap) {<EOL>                if (propertyAliasMap.hasOwnProperty( publicName)) {<EOL>                    propStore = propStore || {};<EOL>                    const internalName = propertyAliasMap[publicName];<EOL>                    const hasProperty = propStore.hasOwnProperty(publicName);<EOL>                    hasProperty ? propStore[publicName].push(i, internalName) :<EOL>                        (","gt":"propStore[publicName] = [i, internalName]);"}
{"input":"<s> <EOL>function buildPackageImportStatementFindCommand(searchDirectory, packageName) {<EOL>    if (platform() === '<STR_LIT>') {<EOL>        return {<EOL>            binary: '<STR_LIT>',<EOL>            args: ['<STR_LIT>',","gt":"packageName}/.*'`, `${searchDirectory}\\\\*.ts`]"}
{"input":"<s> <EOL>function buildPackageImportStatementFindCommand(searchDirectory, packageName) {<EOL>    if (platform() === '<STR_LIT>') {<EOL>        return {<EOL>            binary: '<STR_LIT>',<EOL>            args: ['<STR_LIT>', `<STR_LIT>`, `<STR_LIT>`]<EOL>        };<EOL>    }<EOL>    else {<EOL>        return {<EOL>            binary: '<STR_LIT>',<EOL>            args: ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', `<STR_LIT>`,","gt":"searchDirectory]"}
{"input":"<s> function notRecorded(...args) {<EOL>    const asRecord = args.reduce((acc, c) => acc + c.toString(), '<STR_LIT>');<EOL>    if (record[asRecord]) {<EOL>","gt":"return false;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (i ===","gt":"<NUM_LIT> && v === <NUM_LIT>)"}
{"input":"<s> /////////////<EOL><EOL>export function directiveRefresh(directiveIndex, elementIndex) {<EOL>    executeInitHooks(currentView, currentView.tView, creationMode);<EOL>    executeContentHooks(currentView, currentView.tView, creationMode);<EOL>    const template = tData[directiveIndex].template;<EOL>    if (template != null) {<EOL>","gt":"ngDevMode && assertDataInRange(elementIndex);"}
{"input":"<s> /////////////<EOL><EOL>export function directiveRefresh(directiveIndex, elementIndex) {<EOL>    executeInitHooks(currentView, currentView.tView, creationMode);<EOL>    executeContentHooks(currentView, currentView.tView, creationMode);<EOL>    const template = tData[directiveIndex].template;<EOL>    if (template != null) {<EOL>         ngDevMode && assertDataInRange(elementIndex);<EOL>        const element = data[elementIndex];<EOL>        ngDevMode && assertNodeType(element, LNodeFlags.Element);<EOL>","gt":"ngDevMode &&"}
{"input":"<s> /////////////<EOL><EOL>export function directiveRefresh(directiveIndex, elementIndex) {<EOL>    executeInitHooks(currentView, currentView.tView, creationMode);<EOL>    executeContentHooks(currentView, currentView.tView, creationMode);<EOL>    const template = tData[directiveIndex].template;<EOL>    if (template != null) {<EOL>         ngDevMode && assertDataInRange(elementIndex);<EOL>        const element = data[elementIndex];<EOL>        ngDevMode && assertNodeType(element, LNodeFlags.Element);<EOL>         ngDevMode &&<EOL>            assertNotNull(element.data, `<STR_LIT>`);<EOL>        const hostView = element.data;<EOL>        // Only CheckAlways components or dirty OnPush components should be checked<EOL>        if (hostView.flags & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {<EOL>","gt":"ngDevMode && assertDataInRange(directiveIndex);"}
{"input":"<s> /////////////<EOL><EOL>export function directiveRefresh(directiveIndex, elementIndex) {<EOL>    executeInitHooks(currentView, currentView.tView, creationMode);<EOL>    executeContentHooks(currentView, currentView.tView, creationMode);<EOL>    const template = tData[directiveIndex].template;<EOL>    if (template != null) {<EOL>         ngDevMode && assertDataInRange(elementIndex);<EOL>        const element = data[elementIndex];<EOL>        ngDevMode && assertNodeType(element, LNodeFlags.Element);<EOL>         ngDevMode &&<EOL>            assertNotNull(element.data, `<STR_LIT>`);<EOL>        const hostView = element.data;<EOL>        // Only CheckAlways components or dirty OnPush components should be checked<EOL>        if (hostView.flags & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {<EOL>             ngDevMode && assertDataInRange(directiveIndex);<EOL>            const directive = getDirectiveInstance(data[directiveIndex]);<EOL>            const oldView = enterView(hostView, element);<EOL>            try {<EOL>                template(directive, creationMode);<EOL>            }<EOL>","gt":"finally {"}
{"input":"<s> export function getCurrentDebugContext() {<EOL>","gt":"return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;"}
{"input":"<s> <EOL>export function tsBuildTask(tsConfigPath) {<EOL>    return execNodeTask('<STR_LIT>',","gt":"'<STR_LIT>', ['<STR_LIT>', tsConfigPath]);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === Math.floor(n) && n >= <NUM_LIT> && n <= <NUM_LIT> || n === Math.floor(n) && n >= <NUM_LIT> && n <= <NUM_LIT>)"}
{"input":"<s> export function createRootView(root, def, context) {<EOL>    const view = createView(root, root.renderer, null, null, def);<EOL>    initView(","gt":"view, context, context);"}
{"input":"<s> export function checkAndUpdateView(view) {<EOL>    if (view.state & ViewState.BeforeFirstCheck) {<EOL>        view.state &= ~ViewState.BeforeFirstCheck;<EOL>        view.state |= ViewState.FirstCheck;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function checkAndUpdateView(view) {<EOL>    if (view.state & ViewState.BeforeFirstCheck) {<EOL>        view.state &= ~ViewState.BeforeFirstCheck;<EOL>        view.state |= ViewState.FirstCheck;<EOL>    }<EOL>     else {<EOL>        view.state &= ~ViewState.FirstCheck;<EOL>    }<EOL>    shiftInitState(view, ViewState.InitState_BeforeInit, ViewState.","gt":"InitState_CallingOnInit);"}
{"input":"<s> export function checkAndUpdateView(view) {<EOL>    if (view.state & ViewState.BeforeFirstCheck) {<EOL>        view.state &= ~ViewState.BeforeFirstCheck;<EOL>        view.state |= ViewState.FirstCheck;<EOL>    }<EOL>     else {<EOL>        view.state &= ~ViewState.FirstCheck;<EOL>    }<EOL>    shiftInitState(view, ViewState.InitState_BeforeInit, ViewState. InitState_CallingOnInit);<EOL>    markProjectedViewsForCheck(view);<EOL>    Services.updateDirectives(view, CheckType.CheckAndUpdate);<EOL>    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);<EOL>    execQueriesAction(view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);<EOL>    let callInit = shiftInitState(view, ViewState.InitState_CallingOnInit,","gt":"ViewState.InitState_CallingAfterContentInit);"}
{"input":"<s> export function checkAndUpdateView(view) {<EOL>    if (view.state & ViewState.BeforeFirstCheck) {<EOL>        view.state &= ~ViewState.BeforeFirstCheck;<EOL>        view.state |= ViewState.FirstCheck;<EOL>    }<EOL>     else {<EOL>        view.state &= ~ViewState.FirstCheck;<EOL>    }<EOL>    shiftInitState(view, ViewState.InitState_BeforeInit, ViewState. InitState_CallingOnInit);<EOL>    markProjectedViewsForCheck(view);<EOL>    Services.updateDirectives(view, CheckType.CheckAndUpdate);<EOL>    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);<EOL>    execQueriesAction(view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);<EOL>    let callInit = shiftInitState(view, ViewState.InitState_CallingOnInit,  ViewState.InitState_CallingAfterContentInit);<EOL>    callLifecycleHooksChildrenFirst(view, NodeFlags.AfterContentChecked | (callInit ? NodeFlags.AfterContentInit : <NUM_LIT>));<EOL>    Services.updateRenderer(view, CheckType.CheckAndUpdate);<EOL>    execComponentViewsAction(view, ViewAction.CheckAndUpdate);<EOL>    execQueriesAction(view, NodeFlags.TypeViewQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);<EOL>    callInit = shiftInitState(view, ViewState.InitState_CallingAfterContentInit, ViewState.InitState_CallingAfterViewInit);<EOL>    callLifecycleHooksChildrenFirst(view, NodeFlags.AfterViewChecked | (callInit ? NodeFlags.AfterViewInit :","gt":"<NUM_LIT>));"}
{"input":"<s> function checkAndUpdateNodeDynamic(view, nodeDef, values) {<EOL>    switch (nodeDef.flags & NodeFlags.Types) {<EOL>        case NodeFlags.TypeElement:<EOL>            return checkAndUpdateElementDynamic(view, nodeDef, values);<EOL>        case NodeFlags.TypeText:<EOL>","gt":"return checkAndUpdateTextDynamic(view, nodeDef, values);"}
{"input":"<s> function checkAndUpdateNodeDynamic(view, nodeDef, values) {<EOL>    switch (nodeDef.flags & NodeFlags.Types) {<EOL>        case NodeFlags.TypeElement:<EOL>            return checkAndUpdateElementDynamic(view, nodeDef, values);<EOL>        case NodeFlags.TypeText:<EOL>             return checkAndUpdateTextDynamic(view, nodeDef, values);<EOL>        case NodeFlags.TypeDirective:<EOL>            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);<EOL>        case NodeFlags.TypePureArray:<EOL>        case NodeFlags.TypePureObject:<EOL>        case NodeFlags.TypePurePipe:<EOL>","gt":"return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);"}
{"input":"<s> function checkNoChangesNodeDynamic(view, nodeDef, values) {<EOL>    for (let i = <NUM_LIT>; i < values.length;","gt":"i++) {"}
{"input":"<s> <EOL>export function ngcBuildTask(tsConfigPath) {<EOL>    return execNodeTask(","gt":"'<STR_LIT>', '<STR_LIT>', ['<STR_LIT>', tsConfigPath]);"}
{"input":"<s> export function convertFileToPackage(filePath) {<EOL>    const lastIndex =","gt":"filePath.lastIndexOf('<STR_LIT>');"}
{"input":"<s> export function generateDoc(data, tpl, path) {<EOL>    const","gt":"content = mustache.render(tpl, data);"}
{"input":"<s> <EOL>export function asElementData(view, index) {<EOL>    return view.","gt":"nodes[index];"}
{"input":"<s> export function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {<EOL>    let msg = `<STR_LIT>`;<EOL>    if (isFirstCheck) {<EOL>","gt":"msg +="}
{"input":"<s> function fixAngular(html) {<EOL>    return html.replace(/<code>(.*?)<\\/code>/gim, (fullWord, content) => {<EOL>","gt":"if (~content.indexOf('<STR_LIT>')) {"}
{"input":"<s> function explicitStructural(x) {<EOL>","gt":"return x + this.y;"}
{"input":"<s> // -------------------------------------------------------------------------<EOL>// Helper functions<EOL>// -------------------------------------------------------------------------<EOL>export function checkValidValues(object, values, done, validatorOptions) {<EOL>    const validator = new Validator();<EOL>    const promises = values.map(value => {<EOL>","gt":"object.someProperty = value;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n));<EOL>    if (i === Math.floor(","gt":"i) && i >= <NUM_LIT> && i <= <NUM_LIT>)"}
{"input":"<s> export function checkInvalidValues(object, values, done, validatorOptions) {<EOL>    const validator = new Validator();<EOL>    const promises = values.map(value => {<EOL>        object.someProperty =","gt":"value;"}
{"input":"<s> function isName(literal, specialCharacterFlag) {<EOL>    return literal[<NUM_LIT>] === '<STR_LIT>' && !specialCharacterFlag &&","gt":"isNaN(Number(literal));"}
{"input":"<s> <EOL>function loadResourceFile(filePath) {<EOL>","gt":"return readFileSync(filePath, '<STR_LIT>')"}
{"input":"<s> export function getTemplates() {<EOL>    if (!_templates) {<EOL>        _templates = [dotnetBuild, msbuild, maven].sort((a, b) => {<EOL>","gt":"return (a.sort || a.label).localeCompare(b.sort || b.label);"}
{"input":"<s> function addMatch(query, matchingValue) {<EOL>    query.values.push(","gt":"matchingValue);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    return","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>export function genImageUrl(file) {<EOL>    if (!isSSR && isImage(file)) {<EOL>        return","gt":"window.URL.createObjectURL(file);"}
{"input":"<s> <EOL>function sendUserCustomTheme(userId, response) {<EOL>    var customThemePath = path.","gt":"join(settings.getUserConfigDir(userId), CUSTOM_THEME_FILE);"}
{"input":"<s> <EOL>export function swallowExceptions(scopeName) {<EOL>    // tslint:disable-next-line:no-any no-function-expression<EOL>    return function (_target, propertyName, descriptor) {<EOL>        const originalMethod = descriptor.value;<EOL>        const errorMessage = `<STR_LIT>`;<EOL>        // tslint:disable-next-line:no-any no-function-expression<EOL>        descriptor.value = function (...","gt":"args) {"}
{"input":"<s> <EOL>export function swallowExceptions(scopeName) {<EOL>    // tslint:disable-next-line:no-any no-function-expression<EOL>    return function (_target, propertyName, descriptor) {<EOL>        const originalMethod = descriptor.value;<EOL>        const errorMessage = `<STR_LIT>`;<EOL>        // tslint:disable-next-line:no-any no-function-expression<EOL>        descriptor.value = function (... args) {<EOL>            try {<EOL>                // tslint:disable-next-line:no-invalid-this no-use-before-declare no-unsafe-any<EOL>                const result = originalMethod.apply(this, args);<EOL>                // If method being wrapped returns a promise then wait and swallow errors.<EOL>                if (result && typeof result.then ===","gt":"'<STR_LIT>' && typeof result.catch === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function swallowExceptions(scopeName) {<EOL>    // tslint:disable-next-line:no-any no-function-expression<EOL>    return function (_target, propertyName, descriptor) {<EOL>        const originalMethod = descriptor.value;<EOL>        const errorMessage = `<STR_LIT>`;<EOL>        // tslint:disable-next-line:no-any no-function-expression<EOL>        descriptor.value = function (... args) {<EOL>            try {<EOL>                // tslint:disable-next-line:no-invalid-this no-use-before-declare no-unsafe-any<EOL>                const result = originalMethod.apply(this, args);<EOL>                // If method being wrapped returns a promise then wait and swallow errors.<EOL>                if (result && typeof result.then ===  '<STR_LIT>' && typeof result.catch === '<STR_LIT>') {<EOL>                    return result.catch(error => console.error(errorMessage, error));<EOL>                }<EOL>            }<EOL>","gt":"catch (error) {"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length, f = parseInt(n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>'), <NUM_LIT>) || <NUM_LIT>;<EOL>    if (v === <NUM_LIT> && i % <NUM_LIT> === <NUM_LIT> || f % <NUM_LIT> === <NUM_LIT>)<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function disable() {<EOL>","gt":"enabled = false;"}
{"input":"<s> async function submitIdentityToServer(idty, toServer, notify, logger) {<EOL>    try {<EOL>        const obj = parsers.parseIdentity.syncWrite(idty);<EOL>        await toServer.","gt":"writeIdentity(obj, notify);"}
{"input":"<s> async function main(options) {<EOL>    const key = await getSecret(Secret.GITHUB_SECRET);<EOL>    const body = JSON.stringify({ ref: `<STR_LIT>` });<EOL>    console.log(await new Fetcher().fetch({<EOL>        hostname:","gt":"options.hostname,"}
{"input":"<s> async function main(options) {<EOL>    const key = await getSecret(Secret.GITHUB_SECRET);<EOL>    const body = JSON.stringify({ ref: `<STR_LIT>` });<EOL>    console.log(await new Fetcher().fetch({<EOL>        hostname:  options.hostname,<EOL>        port: options.port,<EOL>        path: \"<STR_LIT>\",<EOL>        method: \"<STR_LIT>\",<EOL>","gt":"body,"}
{"input":"<s> function checkBunchOfTransactions(transactions, done = undefined) {<EOL>    const block = { transactions };<EOL>    return (async () => {<EOL>        try {<EOL>            let local_rule = LOCAL_RULES_FUNCTIONS;<EOL>            await local_rule.checkTxLen(block);<EOL>            await local_rule.","gt":"checkTxIssuers(block);"}
{"input":"<s> function checkBunchOfTransactions(transactions, done = undefined) {<EOL>    const block = { transactions };<EOL>    return (async () => {<EOL>        try {<EOL>            let local_rule = LOCAL_RULES_FUNCTIONS;<EOL>            await local_rule.checkTxLen(block);<EOL>            await local_rule. checkTxIssuers(block);<EOL>            await local_rule.checkTxSources(block);<EOL>            await local_rule.checkTxRecipients(block);<EOL>            await local_rule.checkTxAmounts(block);<EOL>","gt":"await local_rule.checkTxSignature(block);"}
{"input":"<s> function checkBunchOfTransactions(transactions, done = undefined) {<EOL>    const block = { transactions };<EOL>    return (async () => {<EOL>        try {<EOL>            let local_rule = LOCAL_RULES_FUNCTIONS;<EOL>            await local_rule.checkTxLen(block);<EOL>            await local_rule. checkTxIssuers(block);<EOL>            await local_rule.checkTxSources(block);<EOL>            await local_rule.checkTxRecipients(block);<EOL>            await local_rule.checkTxAmounts(block);<EOL>             await local_rule.checkTxSignature(block);<EOL>            done && done();<EOL>        }<EOL>        catch (err) {<EOL>            if (","gt":"done)"}
{"input":"<s> <EOL>export function createHandler(settings) {<EOL>    appSettings =","gt":"settings;"}
{"input":"<s> export function getTotalListenerCount() {<EOL>    return","gt":"_listenerCountEstimate;"}
{"input":"<s> function getModifiedEndLineNumber(change) {<EOL>    if (change.modifiedEndLineNumber === <NUM_LIT>) {<EOL>        return change.modifiedStartLineNumber === <NUM_LIT> ? <NUM_LIT> : change.","gt":"modifiedStartLineNumber;"}
{"input":"<s> function checkLocal(contract) {<EOL>    return async (b, conf, index, done = undefined) => {<EOL>        try {<EOL>            const block = BlockDTO.fromJSONObject(b);<EOL>            await contract(block, conf,","gt":"index);"}
{"input":"<s> function checkLocal(contract) {<EOL>    return async (b, conf, index, done = undefined) => {<EOL>        try {<EOL>            const block = BlockDTO.fromJSONObject(b);<EOL>            await contract(block, conf,  index);<EOL>            done && done();<EOL>        }<EOL>        catch (err) {<EOL>            if (done)<EOL>                return done(err);<EOL>","gt":"throw err;"}
{"input":"<s> // code from java Arrays<EOL><EOL>export function binarySearch(a, key) {<EOL>    let fromIndex = <NUM_LIT>;<EOL>    let toIndex = a.length;<EOL>    let low = fromIndex;<EOL>    let high = toIndex - <NUM_LIT>;<EOL>    while (low <= high) {<EOL>        let mid = (low + high) >>>","gt":"<NUM_LIT>;"}
{"input":"<s> // code from java Arrays<EOL><EOL>export function binarySearch(a, key) {<EOL>    let fromIndex = <NUM_LIT>;<EOL>    let toIndex = a.length;<EOL>    let low = fromIndex;<EOL>    let high = toIndex - <NUM_LIT>;<EOL>    while (low <= high) {<EOL>        let mid = (low + high) >>>  <NUM_LIT>;<EOL>        let midVal = a[mid];<EOL>        if (midVal < key) {<EOL>            low = mid + <NUM_LIT>; // Neither val is NaN, thisVal is smaller<EOL>        }<EOL>        else if (midVal > key) {<EOL>            high = mid - <NUM_LIT>; // Neither val is NaN, thisVal is larger<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function urlMatch(request, expectedUrl, expectedMethod) {<EOL>    return request.url &&<EOL>","gt":"request.method === expectedMethod &&"}
{"input":"<s> function deploymentHistory(commandName, yargs) {<EOL>    isValidCommand = true;<EOL>    yargs.usage(USAGE_PREFIX + \"<STR_LIT>\" + commandName + \"<STR_LIT>\")<EOL>        .demand( <NUM_LIT>,","gt":"<NUM_LIT>)"}
{"input":"<s> function tryLoadPreviewStyles(contributes, contentProvider, extension) {<EOL>    const styles = contributes['<STR_LIT>'];<EOL>    if (styles && Array.isArray(styles)) {<EOL>        for (const style of styles) {<EOL>","gt":"try {"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (","gt":"i === <NUM_LIT> && v === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (n === <NUM_LIT>)<EOL>        return <NUM_LIT>;<EOL>    if (n === <NUM_LIT>)<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (n === <NUM_LIT>)<EOL>        return <NUM_LIT>;<EOL>    if (n === <NUM_LIT>)<EOL>        return  <NUM_LIT>;<EOL>    if (n === <NUM_LIT>)<EOL>        return <NUM_LIT>;<EOL>    if (n % <NUM_LIT> === Math.floor(n % <NUM_LIT>) && n % <NUM_LIT> >= <NUM_LIT> && n % <NUM_LIT> <= <NUM_LIT>)<EOL>        return <NUM_LIT>;<EOL>    if (n % <NUM_LIT> === Math.","gt":"floor(n % <NUM_LIT>) && n % <NUM_LIT> >= <NUM_LIT> && n % <NUM_LIT> <= <NUM_LIT>)"}
{"input":"<s> export function filterSame(locations, definition) {<EOL>    return","gt":"locations.filter(candidate => candidate.uri !== definition.uri"}
{"input":"<s> <EOL>export function createServer(driver, options) {<EOL>","gt":"createExecutor(driver, options);"}
{"input":"<s> export function toDecimal(value, decimal) {<EOL>    return Math.round(value * Math.pow(","gt":"<NUM_LIT>, decimal)) / Math.pow(<NUM_LIT>, decimal);"}
{"input":"<s> function Http2RawMembership(req) {<EOL>    if (!(req.body && req.body.membership)) {<EOL>        throw BMAConstants.ERRORS.HTTP_PARAM_MEMBERSHIP_REQUIRED;<EOL>    }<EOL>    let ms = req.","gt":"body.membership;"}
{"input":"<s> <EOL>export function IsNumber(options = {}, validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type: ValidationTypes.IS_NUMBER,<EOL>","gt":"target: object.constructor,"}
{"input":"<s> export function toggleConfiguration() {<EOL>","gt":"return { type: ActionType.ToggleConfiguration };"}
{"input":"<s> function f3(a, b) {<EOL>    var x = a + b;<EOL>    var x = a - b;<EOL>    var x = a * b;<EOL>    var x = a / b;<EOL>    var x = a % b;<EOL>    var","gt":"x = a | b;"}
{"input":"<s> function f3(a, b) {<EOL>    var x = a + b;<EOL>    var x = a - b;<EOL>    var x = a * b;<EOL>    var x = a / b;<EOL>    var x = a % b;<EOL>    var  x = a | b;<EOL>    var x = a & b;<EOL>    var x = a ^ b;<EOL>    var x = -b;<EOL>    var x = ~b;<EOL>    var y =","gt":"a == b;"}
{"input":"<s> function f3(a, b) {<EOL>    var x = a + b;<EOL>    var x = a - b;<EOL>    var x = a * b;<EOL>    var x = a / b;<EOL>    var x = a % b;<EOL>    var  x = a | b;<EOL>    var x = a & b;<EOL>    var x = a ^ b;<EOL>    var x = -b;<EOL>    var x = ~b;<EOL>    var y =  a == b;<EOL>    var y = a != b;<EOL>    var y = a === b;<EOL>    var y = a !== b;<EOL>","gt":"var y = a > b;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (","gt":"i === <NUM_LIT> && v === <NUM_LIT>)"}
{"input":"<s> function requestCompileLlvmIr() {<EOL>    return {","gt":"type: ActionType.CompileLlvmIrRequest };"}
{"input":"<s> export function editCode(code) {<EOL>    return {","gt":"type: EDIT_CODE, code };"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n));<EOL>    if (i === <NUM_LIT> ||","gt":"i === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n));<EOL>    if (i ===","gt":"<NUM_LIT> || n === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (n ===","gt":"<NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>","gt":"if (n === <NUM_LIT>)"}
{"input":"<s> export function altGlyphDef(className) {<EOL>    return new VNode(","gt":"VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> function updateTsFile(tsFilePath, tsFileContents, majorMinor, patch, nightlyPatch) {<EOL>    const majorMinorRgx = /export const versionMajorMinor = \"(\\d+\\.\\d+)\"/;<EOL>    const majorMinorMatch = majorMinorRgx.exec(tsFileContents);<EOL>    ts.Debug.assert(majorMinorMatch !== null, \"<STR_LIT>\", () => `<STR_LIT>`);<EOL>","gt":"const parsedMajorMinor = majorMinorMatch[<NUM_LIT>];"}
{"input":"<s> function updateTsFile(tsFilePath, tsFileContents, majorMinor, patch, nightlyPatch) {<EOL>    const majorMinorRgx = /export const versionMajorMinor = \"(\\d+\\.\\d+)\"/;<EOL>    const majorMinorMatch = majorMinorRgx.exec(tsFileContents);<EOL>    ts.Debug.assert(majorMinorMatch !== null, \"<STR_LIT>\", () => `<STR_LIT>`);<EOL>     const parsedMajorMinor = majorMinorMatch[<NUM_LIT>];<EOL>    ts.Debug.assert(parsedMajorMinor === majorMinor, \"<STR_LIT>\", () => `<STR_LIT>`);<EOL>    const versionRgx = /export const version = `\\$\\{versionMajorMinor\\}\\.(\\d)(-dev)?`;/;<EOL>    const patchMatch = versionRgx.exec(tsFileContents);<EOL>    ts.Debug.assert(patchMatch !== null, \"<STR_LIT>\", () => versionRgx.toString());<EOL>    const parsedPatch = patchMatch[<NUM_LIT>];<EOL>    if (parsedPatch !==","gt":"patch) {"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>","gt":"if (n === <NUM_LIT>)"}
{"input":"<s> <EOL>export function executableType(input) {<EOL>    if (isExecutableType(input)) {<EOL>","gt":"return input;"}
{"input":"<s> function flatKeys(result, prefix, value) {<EOL>    if (value && typeof value === '<STR_LIT>' && !Array.isArray(value)) {<EOL>        Object.keys(value)<EOL>            .forEach(key => flatKeys(result, prefix ?","gt":"prefix}.${key}`<STR_LIT>;"}
{"input":"<s> export function address(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ?","gt":"null : className, null, \"<STR_LIT>\");"}
{"input":"<s> export function addVisibilityObserver(observer) {<EOL>    if ((_flags & SchedulerFlags.VisibilityObserversCOW) !== <NUM_LIT>) {<EOL>        _visibilityObservers = _visibilityObservers.","gt":"slice();"}
{"input":"<s> export function matrixRowViewGet(v, i) {<EOL>    return v.items[i +","gt":"v.offset];"}
{"input":"<s> <EOL>export function IsFQDN(options, validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type: ValidationTypes.IS_FQDN,<EOL>            target: object.","gt":"constructor,"}
{"input":"<s> export function animateMotion(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement,","gt":"\"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n));<EOL>    if (i === <NUM_LIT> ||","gt":"i === <NUM_LIT>)"}
{"input":"<s> function simpleInteger(question, property, conf, done) {<EOL>    simpleValue(question, property, conf[property], conf, function (","gt":"input) {"}
{"input":"<s> <EOL>export function IsISO8601(validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type:","gt":"ValidationTypes.IS_ISO8601,"}
{"input":"<s> <EOL>export function IsMobilePhone(locale, validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type: ValidationTypes.IS_MOBILE_PHONE,<EOL>","gt":"target: object.constructor,"}
{"input":"<s> <EOL>export function IsUppercase(validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type:","gt":"ValidationTypes.IS_UPPERCASE,"}
{"input":"<s> <EOL>export function ArrayNotContains(values, validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>            type: ValidationTypes.ARRAY_NOT_CONTAINS,<EOL>            target:","gt":"object.constructor,"}
{"input":"<s> <EOL>export function ArrayNotEmpty(validationOptions) {<EOL>    return function (object, propertyName) {<EOL>        const args = {<EOL>","gt":"type: ValidationTypes.ARRAY_NOT_EMPTY,"}
{"input":"<s> function findUniversalExcludes(folderQueries) {<EOL>    if (folderQueries.length < <NUM_LIT>) {<EOL>        // Nothing to simplify<EOL>        return null;<EOL>    }<EOL>","gt":"const firstFolder = folderQueries[<NUM_LIT>];"}
{"input":"<s> function findUniversalExcludes(folderQueries) {<EOL>    if (folderQueries.length < <NUM_LIT>) {<EOL>        // Nothing to simplify<EOL>        return null;<EOL>    }<EOL>     const firstFolder = folderQueries[<NUM_LIT>];<EOL>    if (!firstFolder.excludePattern) {<EOL>        return null;<EOL>    }<EOL>    const universalExcludes =","gt":"new Set();"}
{"input":"<s> function findUniversalExcludes(folderQueries) {<EOL>    if (folderQueries.length < <NUM_LIT>) {<EOL>        // Nothing to simplify<EOL>        return null;<EOL>    }<EOL>     const firstFolder = folderQueries[<NUM_LIT>];<EOL>    if (!firstFolder.excludePattern) {<EOL>        return null;<EOL>    }<EOL>    const universalExcludes =  new Set();<EOL>    Object.keys(firstFolder.excludePattern).forEach(key => {<EOL>        if (strings.startsWith(key, '<STR_LIT>') && folderQueries.every(q => q.excludePattern && q.excludePattern[key] === true)) {<EOL>            universalExcludes.","gt":"add(key);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n));<EOL>    if (i ===","gt":"<NUM_LIT> || i === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (i === <NUM_LIT> &&","gt":"v === <NUM_LIT>)"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>","gt":"if (i === <NUM_LIT> && v === <NUM_LIT>)"}
{"input":"<s> function getBestLocalIPv4() {<EOL>","gt":"return getBestLocal('<STR_LIT>');"}
{"input":"<s> export function setDirty(widget, dirty) {<EOL>    const dirtyClass = `<STR_LIT>`;<EOL>","gt":"widget.title.className = widget.title.className.replace(dirtyClass, '<STR_LIT>');"}
{"input":"<s> export function debounceEvent(event, delay) {<EOL>    return (listener, thisArgs = null, disposables) => {<EOL>        let timer;<EOL>        return","gt":"event(e => {"}
{"input":"<s> function buildTree(maxDepth, values, curDepth) {<EOL>    if (curDepth === <NUM_LIT>) {<EOL>        nodes = <NUM_LIT>;<EOL>    }<EOL>    else {<EOL>","gt":"nodes++;"}
{"input":"<s> function buildTree(maxDepth, values, curDepth) {<EOL>    if (curDepth === <NUM_LIT>) {<EOL>        nodes = <NUM_LIT>;<EOL>    }<EOL>    else {<EOL>         nodes++;<EOL>    }<EOL>    if (maxDepth === curDepth) {<EOL>        return new TreeNode(\"<STR_LIT>\", null, null);<EOL>    }<EOL>    let result = new TreeNode(values[curDepth], buildTree(maxDepth, values, curDepth + <NUM_LIT>), buildTree(maxDepth, values, curDepth + <NUM_LIT>));<EOL>","gt":"if (curDepth === <NUM_LIT>) {"}
{"input":"<s> export function getMapSize(gridSize, gridOffset) {<EOL>    return {<EOL>        x: gridSize.x +","gt":"gridOffset.x * <NUM_LIT>,"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function doubleTapAction(args) {<EOL>","gt":"console.log(\"<STR_LIT>\");"}
{"input":"<s> export function vec2Distance(v) {<EOL>    return Math.sqrt(v.x * v.x + v.","gt":"y * v.y);"}
{"input":"<s> export function toResource(editor, options) {<EOL>    if (!editor) {<EOL>        return null;<EOL>    }<EOL>    // Check for side by side if we are asked to<EOL>    if (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {<EOL>        editor = editor.","gt":"master;"}
{"input":"<s> export function toResource(editor, options) {<EOL>    if (!editor) {<EOL>        return null;<EOL>    }<EOL>    // Check for side by side if we are asked to<EOL>    if (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {<EOL>        editor = editor. master;<EOL>    }<EOL>    const resource = editor.getResource();<EOL>    if (!options || !options.filter) {<EOL>        return","gt":"resource;"}
{"input":"<s> export function toResource(editor, options) {<EOL>    if (!editor) {<EOL>        return null;<EOL>    }<EOL>    // Check for side by side if we are asked to<EOL>    if (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {<EOL>        editor = editor. master;<EOL>    }<EOL>    const resource = editor.getResource();<EOL>    if (!options || !options.filter) {<EOL>        return  resource; // return early if no filter is specified<EOL>    }<EOL>    if (!resource) {<EOL>        return","gt":"null;"}
{"input":"<s> export function toResource(editor, options) {<EOL>    if (!editor) {<EOL>        return null;<EOL>    }<EOL>    // Check for side by side if we are asked to<EOL>    if (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {<EOL>        editor = editor. master;<EOL>    }<EOL>    const resource = editor.getResource();<EOL>    if (!options || !options.filter) {<EOL>        return  resource; // return early if no filter is specified<EOL>    }<EOL>    if (!resource) {<EOL>        return  null;<EOL>    }<EOL>    let includeFiles;<EOL>    let includeUntitled;<EOL>","gt":"if (Array.isArray(options.filter)) {"}
{"input":"<s> export function big(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null :","gt":"className, null, \"<STR_LIT>\");"}
{"input":"<s> export function elementSetAttributeNS(el, namespace, name, value) {<EOL>    if (DEV) {<EOL>        el.","gt":"setAttributeNS(namespace, name, value);"}
{"input":"<s> <EOL>export function docstring(parts) {<EOL>    return","gt":"ts.displayPartsToString(parts);"}
{"input":"<s> export function isJSTSFile(filename) {<EOL>    return jstsPattern.test(","gt":"filename);"}
{"input":"<s> export function isConfigFile(filename) {<EOL>","gt":"return jstsConfigPattern.test(filename);"}
{"input":"<s> // isGlobalTSFile returns whether or not the filename contains global<EOL>// variables based on a best practices heuristic<EOL>// (https://basarat.gitbooks.io/typescript/content/docs/project/modules.html). In<EOL>// reality, a file has global scope if it does not begin with an<EOL>// import statement, but to check this, we'd have to read each<EOL>// TypeScript file.<EOL>export function isGlobalTSFile(filename) {<EOL>    for (const globalTSPattern of globalTSPatterns) {<EOL>        if (","gt":"globalTSPattern.test(filename)) {"}
{"input":"<s> export async function sleep(timeout) {<EOL>    return","gt":"new Promise(resolve => setTimeout(resolve, timeout));"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (i === <NUM_LIT> &&","gt":"v === <NUM_LIT>)"}
{"input":"<s> <EOL>export function* walkNavigationTree(tree, parent) {<EOL>    yield { tree, parent };<EOL>    for (const","gt":"childItem of tree.childItems || []) {"}
{"input":"<s> export function checkCancelled(token) {<EOL>","gt":"if (!!token && token.isCancellationRequested) {"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    let f = parseInt(n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>'), <NUM_LIT>) || <NUM_LIT>;<EOL>    if (n % <NUM_LIT> === <NUM_LIT> && !(n % <NUM_LIT> >= <NUM_LIT> && n % <NUM_LIT> <= <NUM_LIT>))<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function test_isRunning_withReentrancy() {<EOL>    resetProfiles();<EOL>    const name = \"<STR_LIT>\";<EOL>    assertFalse(isRunning(name), \"<STR_LIT>\");<EOL>","gt":"start(name);"}
{"input":"<s> export function test_isRunning_withReentrancy() {<EOL>    resetProfiles();<EOL>    const name = \"<STR_LIT>\";<EOL>    assertFalse(isRunning(name), \"<STR_LIT>\");<EOL>     start(name);<EOL>    assertTrue(isRunning(name), \"<STR_LIT>\");<EOL>    start(name);<EOL>    assertTrue(isRunning(name), \"<STR_LIT>\");<EOL>    stop(name);<EOL>    assertTrue(isRunning(name),","gt":"\"<STR_LIT>\");"}
{"input":"<s> <EOL><EOL>export function getBoolViaRedux(key) {<EOL>","gt":"const conf = getWebAppConfig(store.getState().resources.index);"}
{"input":"<s> export function test_Transitions() {<EOL>    const topmost = topmostFrame();<EOL>    const mainTestPage = topmost.currentPage;<EOL>    const mainPageFactory = function () {<EOL>        return mainTestPage;<EOL>    };<EOL>    helper.navigate(() => {<EOL>        const page = new Page();<EOL>        page.id = \"<STR_LIT>\";<EOL>        page.style.backgroundColor = new Color(<NUM_LIT>, Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() *","gt":"<NUM_LIT>));"}
{"input":"<s> export function test_Transitions() {<EOL>    const topmost = topmostFrame();<EOL>    const mainTestPage = topmost.currentPage;<EOL>    const mainPageFactory = function () {<EOL>        return mainTestPage;<EOL>    };<EOL>    helper.navigate(() => {<EOL>        const page = new Page();<EOL>        page.id = \"<STR_LIT>\";<EOL>        page.style.backgroundColor = new Color(<NUM_LIT>, Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() *  <NUM_LIT>));<EOL>        return page;<EOL>    });<EOL>    var","gt":"transitions;"}
{"input":"<s> export function discard(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> <EOL>export function linkBlueprint(componentFactory, blueprint) {<EOL>    componentFactory.linkBlueprint(","gt":"blueprint);"}
{"input":"<s> function addFrameTaskUpdate(frame) {<EOL>    frame.","gt":"flags |= FrameTasksGroupFlags.Update;"}
{"input":"<s> <EOL>export function saveZoomLevelIndex(index) {<EOL>","gt":"const payload = index - zoomLevel1Index + <NUM_LIT>;"}
{"input":"<s> function addFrameTaskRead(frame, task) {<EOL>","gt":"frame.flags |= FrameTasksGroupFlags.Read;"}
{"input":"<s> export function PreDestroy(target, methodName, descriptor) {<EOL>    let props = getOrCreateProps(target.constructor);<EOL>","gt":"if (!props.preDestroyMethods) {"}
{"input":"<s> export function pushWeek() {<EOL>    return {<EOL>        type: Actions.","gt":"PUSH_WEEK,"}
{"input":"<s> export function CreatePythonThread(id, isWorker, process, name = '<STR_LIT>', int32Id = <NUM_LIT>) {<EOL>    return {<EOL>        IsWorkerThread: isWorker,<EOL>        Process:","gt":"process,"}
{"input":"<s> export function CreateLaunchDebugClient(launchRequestOptions, debugSession, canLaunchTerminal) {<EOL>    if (launchRequestOptions.noDebug === true) {<EOL>        return new NonDebugClient(launchRequestOptions,","gt":"debugSession, canLaunchTerminal, new NoDebugLauncherScriptProvider());"}
{"input":"<s> export function onTap(args) {<EOL>    const view = args.object;<EOL>    const","gt":"page = view.page;"}
{"input":"<s> <EOL>export function firstLeaf(node) {<EOL>    while (node !== null) {<EOL>        const next = node.firstChild;<EOL>        if (next === null) {<EOL>","gt":"break;"}
{"input":"<s> export async function throws(testContext, func, error) {<EOL>    try {<EOL>        await func();<EOL>        testContext.","gt":"fail('<STR_LIT>');"}
{"input":"<s> function shouldSupport(t, userAgent) {<EOL>","gt":"setUserAgent(userAgent);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>","gt":"if (n === <NUM_LIT>)"}
{"input":"<s> function replaceWildCardCharacterFiles(match) {<EOL>    return replaceWildcardCharacter(","gt":"match, singleAsteriskRegexFragmentFiles);"}
{"input":"<s> function deployAr(ar, isScript) {<EOL>    var final = (err, resp) => {<EOL>        if (err)<EOL>            ar.ok({ status:","gt":"\"<STR_LIT>\", message: err + \"<STR_LIT>\" });"}
{"input":"<s> function deployAr(ar, isScript) {<EOL>    var final = (err, resp) => {<EOL>        if (err)<EOL>            ar.ok({ status:  \"<STR_LIT>\", message: err + \"<STR_LIT>\" });<EOL>        else<EOL>            ar.ok(resp);<EOL>    };<EOL>    if (isScript && blobChannel) {<EOL>        var n = Math.round((Date.now() / <NUM_LIT>));<EOL>        var did = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>        var id = (<NUM_LIT> - n) + \"<STR_LIT>\" +","gt":"crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");"}
{"input":"<s> function deployAr(ar, isScript) {<EOL>    var final = (err, resp) => {<EOL>        if (err)<EOL>            ar.ok({ status:  \"<STR_LIT>\", message: err + \"<STR_LIT>\" });<EOL>        else<EOL>            ar.ok(resp);<EOL>    };<EOL>    if (isScript && blobChannel) {<EOL>        var n = Math.round((Date.now() / <NUM_LIT>));<EOL>        var did = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>        var id = (<NUM_LIT> - n) + \"<STR_LIT>\" +  crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>        setBlobJson(id, ar.data, err => {<EOL>            if (err)<EOL>                ar.exception(err);<EOL>            else<EOL>                setBlobJson(\"<STR_LIT>\" + blobChannel, {<EOL>                    blob: id,<EOL>                    time: n,<EOL>","gt":"did: did,"}
{"input":"<s> <EOL>function convertDiagnosticCategory(category) {<EOL>    switch (category) {<EOL>        case ts.DiagnosticCategory.Error:<EOL>            return DiagnosticSeverity.","gt":"Error;"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function setSequence(uuid) {<EOL>    assertUuid(\"<STR_LIT>\",","gt":"uuid);"}
{"input":"<s> function velocityEstimate(pixelsPerSecond, confidence, duration, offset) {<EOL>    return {","gt":"pixelsPerSecond, confidence, duration, offset };"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>","gt":"var byteLength = bytes.byteLength;"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>     var byteLength = bytes.byteLength;<EOL>    var byteRemainder =","gt":"byteLength % <NUM_LIT>;"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>     var byteLength = bytes.byteLength;<EOL>    var byteRemainder =  byteLength % <NUM_LIT>;<EOL>    var mainLength = byteLength - byteRemainder;<EOL>    var a,","gt":"b, c, d;"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>     var byteLength = bytes.byteLength;<EOL>    var byteRemainder =  byteLength % <NUM_LIT>;<EOL>    var mainLength = byteLength - byteRemainder;<EOL>    var a,  b, c, d;<EOL>    var chunk;<EOL>    // Main loop deals with bytes in chunks of 3<EOL>    for (var i = <NUM_LIT>; i < mainLength; i = i + <NUM_LIT>) {<EOL>        // Combine the three bytes into a single integer<EOL>        chunk = (","gt":"bytes[i] << <NUM_LIT>) | (bytes[i + <NUM_LIT>] << <NUM_LIT>) | bytes[i + <NUM_LIT>];"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>     var byteLength = bytes.byteLength;<EOL>    var byteRemainder =  byteLength % <NUM_LIT>;<EOL>    var mainLength = byteLength - byteRemainder;<EOL>    var a,  b, c, d;<EOL>    var chunk;<EOL>    // Main loop deals with bytes in chunks of 3<EOL>    for (var i = <NUM_LIT>; i < mainLength; i = i + <NUM_LIT>) {<EOL>        // Combine the three bytes into a single integer<EOL>        chunk = ( bytes[i] << <NUM_LIT>) | (bytes[i + <NUM_LIT>] << <NUM_LIT>) | bytes[i + <NUM_LIT>];<EOL>        // Use bitmasks to extract 6-bit segments from the triplet<EOL>        a = (chunk & <NUM_LIT>) >> <NUM_LIT>; // 16515072 = (2^6 - 1) << 18<EOL>        b = (chunk & <NUM_LIT>) >> <NUM_LIT>; // 258048   = (2^6 - 1) << 12<EOL>        c = (","gt":"chunk & <NUM_LIT>) >> <NUM_LIT>;"}
{"input":"<s> <EOL>export function arrayBufferToBase64(arrayBuffer) {<EOL>    var base64 = '<STR_LIT>';<EOL>    var encodings = '<STR_LIT>';<EOL>    var bytes = new Uint8Array(arrayBuffer);<EOL>     var byteLength = bytes.byteLength;<EOL>    var byteRemainder =  byteLength % <NUM_LIT>;<EOL>    var mainLength = byteLength - byteRemainder;<EOL>    var a,  b, c, d;<EOL>    var chunk;<EOL>    // Main loop deals with bytes in chunks of 3<EOL>    for (var i = <NUM_LIT>; i < mainLength; i = i + <NUM_LIT>) {<EOL>        // Combine the three bytes into a single integer<EOL>        chunk = ( bytes[i] << <NUM_LIT>) | (bytes[i + <NUM_LIT>] << <NUM_LIT>) | bytes[i + <NUM_LIT>];<EOL>        // Use bitmasks to extract 6-bit segments from the triplet<EOL>        a = (chunk & <NUM_LIT>) >> <NUM_LIT>; // 16515072 = (2^6 - 1) << 18<EOL>        b = (chunk & <NUM_LIT>) >> <NUM_LIT>; // 258048   = (2^6 - 1) << 12<EOL>        c = ( chunk & <NUM_LIT>) >> <NUM_LIT>; // 4032     = (2^6 - 1) << 6<EOL>        d = chunk & <NUM_LIT>; // 63       = 2^6 - 1<EOL>        // Convert the raw binary segments to the appropriate ASCII encoding<EOL>        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[","gt":"d];"}
{"input":"<s> export function print(name) {<EOL>    const info = timers[name];<EOL>","gt":"if (!info) {"}
{"input":"<s> <EOL>export function isTextVNode(node) {<EOL>    return (","gt":"node._flags & VNodeFlags.Text) !== <NUM_LIT>;"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>","gt":"function activate() {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener(","gt":"onUp);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>","gt":"EventSourceMouseUp.removeBeforeListener(onUp);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>","gt":"activePointer = ev;"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener(","gt":"onMove);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>","gt":"function isEventSimulatedFromTouch(ev) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;","gt":"i < primaryPointers.length; ++i) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const","gt":"dx = Math.abs(x - pointer.x);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>","gt":"function onDown(s) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch(","gt":"pointer, ev.target);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>","gt":"if (isEventSimulatedFromTouch(ev) === false) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===","gt":"<NUM_LIT>) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===  <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, activePointer.buttons);<EOL>                }<EOL>                else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, activePointer.buttons);<EOL>                }<EOL>                dispatch(pointer);<EOL>            }<EOL>        }<EOL>    }<EOL>    function onUp(s) {<EOL>        const","gt":"ev = s.native;"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===  <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, activePointer.buttons);<EOL>                }<EOL>                else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, activePointer.buttons);<EOL>                }<EOL>                dispatch(pointer);<EOL>            }<EOL>        }<EOL>    }<EOL>    function onUp(s) {<EOL>        const  ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let buttons = getMouseButtons(ev);<EOL>                if ((FEATURES & FeatureFlags.MouseEventButtons) === <NUM_LIT>) {<EOL>                    buttons = activePointer.buttons & ~buttons;<EOL>                }<EOL>                let pointer;<EOL>                if (","gt":"buttons === <NUM_LIT>) {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===  <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, activePointer.buttons);<EOL>                }<EOL>                else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, activePointer.buttons);<EOL>                }<EOL>                dispatch(pointer);<EOL>            }<EOL>        }<EOL>    }<EOL>    function onUp(s) {<EOL>        const  ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let buttons = getMouseButtons(ev);<EOL>                if ((FEATURES & FeatureFlags.MouseEventButtons) === <NUM_LIT>) {<EOL>                    buttons = activePointer.buttons & ~buttons;<EOL>                }<EOL>                let pointer;<EOL>                if ( buttons === <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, buttons);<EOL>                }<EOL>","gt":"else {"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===  <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, activePointer.buttons);<EOL>                }<EOL>                else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, activePointer.buttons);<EOL>                }<EOL>                dispatch(pointer);<EOL>            }<EOL>        }<EOL>    }<EOL>    function onUp(s) {<EOL>        const  ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let buttons = getMouseButtons(ev);<EOL>                if ((FEATURES & FeatureFlags.MouseEventButtons) === <NUM_LIT>) {<EOL>                    buttons = activePointer.buttons & ~buttons;<EOL>                }<EOL>                let pointer;<EOL>                if ( buttons === <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, buttons);<EOL>                }<EOL>                 else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev,","gt":"GesturePointerAction.Move, buttons);"}
{"input":"<s> export function createMouseEventListener(dispatch, primaryPointers = null) {<EOL>    let activePointer = null;<EOL>     function activate() {<EOL>        EventSourceMouseDown.addBeforeListener(onDown);<EOL>        EventSourceMouseUp.addBeforeListener( onUp);<EOL>    }<EOL>    function deactivate() {<EOL>        EventSourceMouseDown.removeBeforeListener(onDown);<EOL>         EventSourceMouseUp.removeBeforeListener(onUp);<EOL>    }<EOL>    function startMoveTracking(ev, target) {<EOL>         activePointer = ev;<EOL>        EventSourceMouseMove.addBeforeListener(onMove);<EOL>    }<EOL>    function stopMoveTracking(ev) {<EOL>        activePointer = null;<EOL>        EventSourceMouseMove.removeBeforeListener( onMove);<EOL>    }<EOL>     function isEventSimulatedFromTouch(ev) {<EOL>        if ((FEATURES & FeatureFlags.TouchEvents) !== <NUM_LIT>) {<EOL>            if ((FEATURES & FeatureFlags.InputDeviceCapabilities) !== <NUM_LIT>) {<EOL>                return ev.sourceCapabilities.firesTouchEvents;<EOL>            }<EOL>            if (primaryPointers !== null) {<EOL>                const x = ev.clientX;<EOL>                const y = ev.clientY;<EOL>                for (let i = <NUM_LIT>;  i < primaryPointers.length; ++i) {<EOL>                    const pointer = primaryPointers[i];<EOL>                    const  dx = Math.abs(x - pointer.x);<EOL>                    const dy = Math.abs(y - pointer.y);<EOL>                    if (dx <= <NUM_LIT> && dy <= <NUM_LIT>) {<EOL>                        return true;<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        return false;<EOL>    }<EOL>     function onDown(s) {<EOL>        const ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            const buttons = getMouseButtons(ev);<EOL>            let pointer;<EOL>            if (activePointer === null) {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Down, buttons);<EOL>            }<EOL>            else {<EOL>                pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, buttons | activePointer.buttons);<EOL>            }<EOL>            dispatch( pointer, ev.target);<EOL>        }<EOL>    }<EOL>    function onMove(s) {<EOL>        const ev = s.native;<EOL>         if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let pointer;<EOL>                if (ev.which ===  <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, activePointer.buttons);<EOL>                }<EOL>                else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Move, activePointer.buttons);<EOL>                }<EOL>                dispatch(pointer);<EOL>            }<EOL>        }<EOL>    }<EOL>    function onUp(s) {<EOL>        const  ev = s.native;<EOL>        if (isEventSimulatedFromTouch(ev) === false) {<EOL>            if (activePointer !== null) {<EOL>                let buttons = getMouseButtons(ev);<EOL>                if ((FEATURES & FeatureFlags.MouseEventButtons) === <NUM_LIT>) {<EOL>                    buttons = activePointer.buttons & ~buttons;<EOL>                }<EOL>                let pointer;<EOL>                if ( buttons === <NUM_LIT>) {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev, GesturePointerAction.Up, buttons);<EOL>                }<EOL>                 else {<EOL>                    pointer = createGesturePointerEventFromMouseEvent(ev,  GesturePointerAction.Move, buttons);<EOL>                }<EOL>","gt":"dispatch(pointer);"}
{"input":"<s> export function dl(className) {<EOL>    return new VNode(VNodeFlags.Element,","gt":"\"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function big(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> <EOL><EOL>export function getFunctionName(fn) {<EOL>","gt":"return fn.displayName || fn.name || \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function isComponentVNode(node) {<EOL>    return (node.","gt":"_flags & VNodeFlags.Component) !== <NUM_LIT>;"}
{"input":"<s> export function feOffset(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.","gt":"SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> <EOL>export function getElementPropsFromVNode(node) {<EOL>    return","gt":"node._props;"}
{"input":"<s> function plural_en_CA(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>","gt":"if (i === <NUM_LIT> && v === <NUM_LIT>)"}
{"input":"<s> function plural_sk(n) {<EOL>    let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '<STR_LIT>').length;<EOL>    if (i === <NUM_LIT> && v === <NUM_LIT>)<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function setColorWithParents(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    const style = parent.style;<EOL>    counts.forEach((count) => {<EOL>        if (count > <NUM_LIT>) {<EOL>            result +=","gt":"setResultTime(noValue);"}
{"input":"<s> export function setColorWithParents(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    const style = parent.style;<EOL>    counts.forEach((count) => {<EOL>        if (count > <NUM_LIT>) {<EOL>            result +=  setResultTime(noValue);<EOL>            return;<EOL>        }<EOL>        setupParents(parent);<EOL>        const time =","gt":"executeTest(() => {"}
{"input":"<s> export function test_start_stop() {<EOL>    resetProfiles();<EOL>    const","gt":"name = \"<STR_LIT>\";"}
{"input":"<s> export function lazy(getValue) {<EOL>    return new","gt":"LazyValue(getValue);"}
{"input":"<s> <EOL>// THIS CODE IS GENERATED - DO NOT MODIFY<EOL>// See angular/tools/gulp-tasks/cldr/extract.js<EOL>function plural(n) {<EOL>    if (","gt":"n === <NUM_LIT>)"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>","gt":"super();"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>","gt":"return false;"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>","gt":"traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =","gt":"this.owner;"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =  this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                    traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadFinished(url, undefined);<EOL>            }<EOL>        }<EOL>","gt":"onReceivedError() {"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =  this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                    traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadFinished(url, undefined);<EOL>            }<EOL>        }<EOL>         onReceivedError() {<EOL>            let view = arguments[<NUM_LIT>];<EOL>            if (arguments.length === <NUM_LIT>) {<EOL>                let errorCode = arguments[<NUM_LIT>];<EOL>","gt":"let description = arguments[<NUM_LIT>];"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =  this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                    traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadFinished(url, undefined);<EOL>            }<EOL>        }<EOL>         onReceivedError() {<EOL>            let view = arguments[<NUM_LIT>];<EOL>            if (arguments.length === <NUM_LIT>) {<EOL>                let errorCode = arguments[<NUM_LIT>];<EOL>                 let description = arguments[<NUM_LIT>];<EOL>                let failingUrl = arguments[<NUM_LIT>];<EOL>","gt":"super.onReceivedError(view, errorCode, description, failingUrl);"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =  this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                    traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadFinished(url, undefined);<EOL>            }<EOL>        }<EOL>         onReceivedError() {<EOL>            let view = arguments[<NUM_LIT>];<EOL>            if (arguments.length === <NUM_LIT>) {<EOL>                let errorCode = arguments[<NUM_LIT>];<EOL>                 let description = arguments[<NUM_LIT>];<EOL>                let failingUrl = arguments[<NUM_LIT>];<EOL>                 super.onReceivedError(view, errorCode, description, failingUrl);<EOL>                const owner = this.owner;<EOL>                if (owner) {<EOL>                    if (traceEnabled()) {<EOL>                        traceWrite(\"<STR_LIT>\" + errorCode + \"<STR_LIT>\" + description + \"<STR_LIT>\" + failingUrl + \"<STR_LIT>\", traceCategories.Debug);<EOL>                    }<EOL>                    owner._onLoadFinished(failingUrl, description + \"<STR_LIT>\" + errorCode + \"<STR_LIT>\");<EOL>                }<EOL>            }<EOL>            else {<EOL>                let request = arguments[<NUM_LIT>];<EOL>                let error = arguments[<NUM_LIT>];<EOL>                super.onReceivedError(view, request, error);<EOL>                const owner =","gt":"this.owner;"}
{"input":"<s> function initializeWebViewClient() {<EOL>    if (WebViewClient) {<EOL>        return;<EOL>    }<EOL>    class WebViewClientImpl extends android.webkit.WebViewClient {<EOL>        owner;<EOL>        constructor(owner) {<EOL>             super();<EOL>            this.owner = owner;<EOL>            return global.__native(this);<EOL>        }<EOL>        shouldOverrideUrlLoading(view, url) {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>            }<EOL>             return false;<EOL>        }<EOL>        onPageStarted(view, url, favicon) {<EOL>            super.onPageStarted(view, url, favicon);<EOL>            const owner = this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                     traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\" + favicon + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadStarted(url, undefined);<EOL>            }<EOL>        }<EOL>        onPageFinished(view, url) {<EOL>            super.onPageFinished(view, url);<EOL>            const owner =  this.owner;<EOL>            if (owner) {<EOL>                if (traceEnabled()) {<EOL>                    traceWrite(\"<STR_LIT>\" + url + \"<STR_LIT>\", traceCategories.Debug);<EOL>                }<EOL>                owner._onLoadFinished(url, undefined);<EOL>            }<EOL>        }<EOL>         onReceivedError() {<EOL>            let view = arguments[<NUM_LIT>];<EOL>            if (arguments.length === <NUM_LIT>) {<EOL>                let errorCode = arguments[<NUM_LIT>];<EOL>                 let description = arguments[<NUM_LIT>];<EOL>                let failingUrl = arguments[<NUM_LIT>];<EOL>                 super.onReceivedError(view, errorCode, description, failingUrl);<EOL>                const owner = this.owner;<EOL>                if (owner) {<EOL>                    if (traceEnabled()) {<EOL>                        traceWrite(\"<STR_LIT>\" + errorCode + \"<STR_LIT>\" + description + \"<STR_LIT>\" + failingUrl + \"<STR_LIT>\", traceCategories.Debug);<EOL>                    }<EOL>                    owner._onLoadFinished(failingUrl, description + \"<STR_LIT>\" + errorCode + \"<STR_LIT>\");<EOL>                }<EOL>            }<EOL>            else {<EOL>                let request = arguments[<NUM_LIT>];<EOL>                let error = arguments[<NUM_LIT>];<EOL>                super.onReceivedError(view, request, error);<EOL>                const owner =  this.owner;<EOL>                if (owner) {<EOL>                    if (traceEnabled()) {<EOL>                        traceWrite(","gt":"\"<STR_LIT>\" + error.getErrorCode() + \"<STR_LIT>\" + error.getDescription() + \"<STR_LIT>\" + (error.getUrl && error.getUrl()) + \"<STR_LIT>\", traceCategories.Debug);"}
{"input":"<s> export function fakeSequence() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        args: {<EOL>            version: <NUM_LIT>,<EOL>            label:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function fakeSequence() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        args: {<EOL>            version: <NUM_LIT>,<EOL>            label:  \"<STR_LIT>\",<EOL>            locals: { kind: \"<STR_LIT>\", args: {} },<EOL>        },<EOL>        id: <NUM_LIT>,<EOL>        color: \"<STR_LIT>\",<EOL>        name: \"<STR_LIT>\",<EOL>        kind:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function feSpotLight(className) {<EOL>    return new","gt":"VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> function HTTPIconFetch(slug) {<EOL>    const url = BASE + slug;<EOL>    if (promiseCache[url]) {<EOL>        return promiseCache[url];<EOL>    }<EOL>    else {<EOL>        promiseCache[url] = axios<EOL>            .get(url)<EOL>            .then(","gt":"cacheTheIcon(slug), cacheTheIcon(slug));"}
{"input":"<s> export function feTile(className) {<EOL>    return new VNode(","gt":"VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function figure(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ?","gt":"null : className, null);"}
{"input":"<s> export function font(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> export function generateI18nConfig(lang) {<EOL>    const translation = require(\"<STR_LIT>\" + lang + \"<STR_LIT>\");<EOL>    return {<EOL>        nsSeparator:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function refreshNO(payload) {<EOL>    return {","gt":"type: Actions.REFRESH_RESOURCE_NO, payload };"}
{"input":"<s> export function moveRelative(props) {<EOL>","gt":"return getDevice()"}
{"input":"<s> <EOL>export function awaitOneSignalInitAndSupported() {<EOL>    return new Promise(resolve => {<EOL>        if (!OneSignal.initialized) {<EOL>            OneSignal.once(OneSignal.EVENTS.SDK_INITIALIZED,","gt":"resolve);"}
{"input":"<s> export function h1(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className,","gt":"null);"}
{"input":"<s> export function datalist(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className,","gt":"null);"}
{"input":"<s> export function onEncrypted(handler, capture = false) {<EOL>    return createEventHandler(","gt":"EventSourceEncrypted.eventSource, handler, capture);"}
{"input":"<s> <EOL>export function serializeState(data) {<EOL>    return escapeJavascript(JSON.stringify(","gt":"data));"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>","gt":"await Database.setEmailProfile(emailProfile);"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>         await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    <EOL>    if (testData.existingPushDeviceId) {<EOL>        const subscription = await Database.getSubscription();<EOL>","gt":"subscription.deviceId = testData.existingPushDeviceId;"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>         await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    <EOL>    if (testData.existingPushDeviceId) {<EOL>        const subscription = await Database.getSubscription();<EOL>         subscription.deviceId = testData.existingPushDeviceId;<EOL>","gt":"await Database.setSubscription(subscription);"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>         await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    <EOL>    if (testData.existingPushDeviceId) {<EOL>        const subscription = await Database.getSubscription();<EOL>         subscription.deviceId = testData.existingPushDeviceId;<EOL>         await Database.setSubscription(subscription);<EOL>    }<EOL>    if (testData.requireEmailAuth) {<EOL>        const appConfig = await Database.getAppConfig();<EOL>        appConfig.emailAuthRequired = true;<EOL>        await Database.setAppConfig(appConfig);<EOL>    }<EOL>    <EOL>    if (testData.emailAuthHash) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAuthHash = testData.emailAuthHash;<EOL>        await Database.","gt":"setEmailProfile(emailProfile);"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>         await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    <EOL>    if (testData.existingPushDeviceId) {<EOL>        const subscription = await Database.getSubscription();<EOL>         subscription.deviceId = testData.existingPushDeviceId;<EOL>         await Database.setSubscription(subscription);<EOL>    }<EOL>    if (testData.requireEmailAuth) {<EOL>        const appConfig = await Database.getAppConfig();<EOL>        appConfig.emailAuthRequired = true;<EOL>        await Database.setAppConfig(appConfig);<EOL>    }<EOL>    <EOL>    if (testData.emailAuthHash) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAuthHash = testData.emailAuthHash;<EOL>        await Database. setEmailProfile(emailProfile);<EOL>    }<EOL>    if (testData.existingEmailId) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailId = testData.existingEmailId;<EOL>        await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    // Mock the one or two requests we expect to occur<EOL>    const isUpdateRequest = testData.emailAuthHash && testData.existingEmailId;<EOL>    if (isUpdateRequest) {<EOL>        // Means we're making a PUT call to /players/<id><EOL>        expectEmailRecordUpdateRequest(t, testData.existingEmailId, testData.newEmailAddress, testData.existingPushDeviceId, testData.emailAuthHash, testData.newEmailId);<EOL>    }<EOL>    else {<EOL>        // Means we're making a POST call to /players<EOL>        expectEmailRecordCreationRequest(t, testData.newEmailAddress, testData.existingPushDeviceId, testData.emailAuthHash, testData.newEmailId);<EOL>    }<EOL>    if (testData.","gt":"existingPushDeviceId &&"}
{"input":"<s> async function setEmailTest(t, testData) {<EOL>    await TestEnvironment.initialize();<EOL>    if (testData.existingEmailAddress) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAddress = testData.existingEmailAddress;<EOL>         await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    <EOL>    if (testData.existingPushDeviceId) {<EOL>        const subscription = await Database.getSubscription();<EOL>         subscription.deviceId = testData.existingPushDeviceId;<EOL>         await Database.setSubscription(subscription);<EOL>    }<EOL>    if (testData.requireEmailAuth) {<EOL>        const appConfig = await Database.getAppConfig();<EOL>        appConfig.emailAuthRequired = true;<EOL>        await Database.setAppConfig(appConfig);<EOL>    }<EOL>    <EOL>    if (testData.emailAuthHash) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailAuthHash = testData.emailAuthHash;<EOL>        await Database. setEmailProfile(emailProfile);<EOL>    }<EOL>    if (testData.existingEmailId) {<EOL>        const emailProfile = await Database.getEmailProfile();<EOL>        emailProfile.emailId = testData.existingEmailId;<EOL>        await Database.setEmailProfile(emailProfile);<EOL>    }<EOL>    // Mock the one or two requests we expect to occur<EOL>    const isUpdateRequest = testData.emailAuthHash && testData.existingEmailId;<EOL>    if (isUpdateRequest) {<EOL>        // Means we're making a PUT call to /players/<id><EOL>        expectEmailRecordUpdateRequest(t, testData.existingEmailId, testData.newEmailAddress, testData.existingPushDeviceId, testData.emailAuthHash, testData.newEmailId);<EOL>    }<EOL>    else {<EOL>        // Means we're making a POST call to /players<EOL>        expectEmailRecordCreationRequest(t, testData.newEmailAddress, testData.existingPushDeviceId, testData.emailAuthHash, testData.newEmailId);<EOL>    }<EOL>    if (testData. existingPushDeviceId &&<EOL>        !(testData.existingEmailId === testData.newEmailId &&<EOL>            testData.existingEmailAddress === testData.newEmailAddress)) {<EOL>        <EOL>        expectPushRecordUpdateRequest(t, testData.existingPushDeviceId, testData.newEmailId, testData.newEmailAddress, Uuid.generate());<EOL>    }<EOL>    await OneSignal.setEmail(testData.newEmailAddress, testData.emailAuthHash ?<EOL>        { emailAuthHash: testData.emailAuthHash } :<EOL>","gt":"undefined);"}
{"input":"<s> function testForExclusionPattern(path, pattern) {<EOL>    return minimatch(path, pattern, {","gt":"dot: true });"}
{"input":"<s> export function fromObjectRecursive(source) {<EOL>","gt":"let observable = new ObservableFromObject();"}
{"input":"<s> function fakeBot() {<EOL>    const fb = {<EOL>        setState: jest.fn(),<EOL>","gt":"publish: jest.fn(),"}
{"input":"<s> export function linearGradient(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className ===","gt":"undefined ? null : className, null);"}
{"input":"<s> export function Listener(eventName) {<EOL>","gt":"return listenerFunc.bind(this, eventName);"}
{"input":"<s> export function onButtonTap(args) {<EOL>","gt":"applyNextStyle(args);"}
{"input":"<s> export function onGoBack(args) {<EOL>    const view = args.","gt":"object;"}
{"input":"<s> export function simpleHttpRequest(params) {<EOL>    return new Promise(resolve => {<EOL>        let httpRequest = new XMLHttpRequest();<EOL>        httpRequest.open('<STR_LIT>', params.url);<EOL>        httpRequest.","gt":"send();"}
{"input":"<s> <EOL>export function envGet(key, env) {<EOL>    return betterParseNum(JSON.stringify(","gt":"isNumber(env[key]) ? env[key] : \"<STR_LIT>\"), DEFAULTS[key]);"}
{"input":"<s> function addFrameTaskAfter(frame, task) {<EOL>    frame.flags |=","gt":"FrameTasksGroupFlags.After;"}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:  \"<STR_LIT>\",<EOL>        confirm_step_deletion: false,<EOL>        disable_animations: false,<EOL>","gt":"disable_i18n: false,"}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:  \"<STR_LIT>\",<EOL>        confirm_step_deletion: false,<EOL>        disable_animations: false,<EOL>         disable_i18n: false,<EOL>        display_trail: false,<EOL>        dynamic_map: false,<EOL>        encoder_figure:","gt":"false,"}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:  \"<STR_LIT>\",<EOL>        confirm_step_deletion: false,<EOL>        disable_animations: false,<EOL>         disable_i18n: false,<EOL>        display_trail: false,<EOL>        dynamic_map: false,<EOL>        encoder_figure:  false,<EOL>        hide_webcam_widget: false,<EOL>        legend_menu_open: false,<EOL>        map_xl: false,<EOL>        raw_encoders: true,<EOL>        scaled_encoders: true,<EOL>","gt":"show_spread: false,"}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:  \"<STR_LIT>\",<EOL>        confirm_step_deletion: false,<EOL>        disable_animations: false,<EOL>         disable_i18n: false,<EOL>        display_trail: false,<EOL>        dynamic_map: false,<EOL>        encoder_figure:  false,<EOL>        hide_webcam_widget: false,<EOL>        legend_menu_open: false,<EOL>        map_xl: false,<EOL>        raw_encoders: true,<EOL>        scaled_encoders: true,<EOL>         show_spread: false,<EOL>        show_farmbot: true,<EOL>        show_images: false,<EOL>        show_plants:","gt":"true,"}
{"input":"<s> export function fakeWebAppConfig() {<EOL>    return fakeResource(\"<STR_LIT>\", {<EOL>        id: <NUM_LIT>,<EOL>        device_id: <NUM_LIT>,<EOL>        created_at:  \"<STR_LIT>\",<EOL>        updated_at:  \"<STR_LIT>\",<EOL>        confirm_step_deletion: false,<EOL>        disable_animations: false,<EOL>         disable_i18n: false,<EOL>        display_trail: false,<EOL>        dynamic_map: false,<EOL>        encoder_figure:  false,<EOL>        hide_webcam_widget: false,<EOL>        legend_menu_open: false,<EOL>        map_xl: false,<EOL>        raw_encoders: true,<EOL>        scaled_encoders: true,<EOL>         show_spread: false,<EOL>        show_farmbot: true,<EOL>        show_images: false,<EOL>        show_plants:  true,<EOL>        show_points: true,<EOL>        x_axis_inverted: false,<EOL>        y_axis_inverted: false,<EOL>        z_axis_inverted: true,<EOL>        bot_origin_quadrant: <NUM_LIT>,<EOL>        zoom_level: -<NUM_LIT>,<EOL>        success_log: <NUM_LIT>,<EOL>        busy_log: <NUM_LIT>,<EOL>        warn_log:","gt":"<NUM_LIT>,"}
{"input":"<s> export function meta(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.VoidElement,","gt":"\"<STR_LIT>\", null, className === undefined ? null : className, null, null);"}
{"input":"<s> function g(t) {<EOL>    let","gt":"b = { ...t };"}
{"input":"<s> <EOL>export function randomColor() {<EOL>    return _.","gt":"sample(colors) || \"<STR_LIT>\";"}
{"input":"<s> export function onPointerDown(handler, capture = false) {<EOL>    return createEventHandler(EventSourcePointerDown.","gt":"eventSource, handler, capture);"}
{"input":"<s> export function tref(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null :","gt":"className, null);"}
{"input":"<s> export function link(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.VoidElement, \"<STR_LIT>\",","gt":"null, className === undefined ? null : className, null);"}
{"input":"<s> export function pre(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\",","gt":"null, className === undefined ? null : className, null);"}
{"input":"<s> <EOL>export function fancyDebug(d) {<EOL>    console.log(Object<EOL>        .keys(d)<EOL>        .map(key => [key, d[key]])<EOL>        .map((","gt":"x) => {"}
{"input":"<s> <EOL>function _update() {<EOL>    if (_pendingUpdate) {<EOL>        _pendingUpdate = false;<EOL>        for (let i =","gt":"<NUM_LIT>; i < ROOTS.length; ++i) {"}
{"input":"<s> <EOL>function _update() {<EOL>    if (_pendingUpdate) {<EOL>        _pendingUpdate = false;<EOL>        for (let i =  <NUM_LIT>; i < ROOTS.length; ++i) {<EOL>            const root = ROOTS[i];<EOL>            const container = root.container;<EOL>            const currentVNode = root.currentVNode;<EOL>            if (","gt":"root.invalidated) {"}
{"input":"<s> <EOL>function _update() {<EOL>    if (_pendingUpdate) {<EOL>        _pendingUpdate = false;<EOL>        for (let i =  <NUM_LIT>; i < ROOTS.length; ++i) {<EOL>            const root = ROOTS[i];<EOL>            const container = root.container;<EOL>            const currentVNode = root.currentVNode;<EOL>            if ( root.invalidated) {<EOL>                let newVNode = root.newVNode;<EOL>                if (newVNode) {<EOL>                    if (newVNode.constructor !== VNode) {<EOL>                        newVNode = new","gt":"VNode(VNodeFlags.Text, null, null, null, \"<STR_LIT>\");"}
{"input":"<s> <EOL>function _update() {<EOL>    if (_pendingUpdate) {<EOL>        _pendingUpdate = false;<EOL>        for (let i =  <NUM_LIT>; i < ROOTS.length; ++i) {<EOL>            const root = ROOTS[i];<EOL>            const container = root.container;<EOL>            const currentVNode = root.currentVNode;<EOL>            if ( root.invalidated) {<EOL>                let newVNode = root.newVNode;<EOL>                if (newVNode) {<EOL>                    if (newVNode.constructor !== VNode) {<EOL>                        newVNode = new  VNode(VNodeFlags.Text, null, null, null, \"<STR_LIT>\");<EOL>                    }<EOL>                    if (currentVNode) {<EOL>                        syncVNode(container, currentVNode, newVNode, EMPTY_CONTEXT, SyncFlags.Attached);<EOL>                    }<EOL>                    else {<EOL>                        renderVNode(container, null, newVNode, EMPTY_CONTEXT);<EOL>                        iOSFixEventBubbling(container);<EOL>                    }<EOL>","gt":"root.currentVNode = newVNode;"}
{"input":"<s> export function initializeTemporaryCommandRegistrar() {<EOL>    tempCommandRegistrar = new","gt":"TemporaryCommandRegistrar();"}
{"input":"<s> export function onSeeking(handler, capture = false) {<EOL>","gt":"return createEventHandler(EventSourceSeeking.eventSource, handler, capture);"}
{"input":"<s> function verify(key) {<EOL>","gt":"common.checkKey(key);"}
{"input":"<s> <EOL>export function renderNextFrame(node, container) {<EOL>    if (DEV) {<EOL>        if (container === document.body) {<EOL>            throw new Error(\"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>","gt":"if (!document.body.contains(container)) {"}
{"input":"<s> <EOL>export function renderNextFrame(node, container) {<EOL>    if (DEV) {<EOL>        if (container === document.body) {<EOL>            throw new Error(\"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>         if (!document.body.contains(container)) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>    }<EOL>    const root = findRoot(container);<EOL>    if (root) {<EOL>        root.","gt":"newVNode = node;"}
{"input":"<s> <EOL>export function renderNextFrame(node, container) {<EOL>    if (DEV) {<EOL>        if (container === document.body) {<EOL>            throw new Error(\"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>         if (!document.body.contains(container)) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>    }<EOL>    const root = findRoot(container);<EOL>    if (root) {<EOL>        root. newVNode = node;<EOL>        root.invalidated = true;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function renderNextFrame(node, container) {<EOL>    if (DEV) {<EOL>        if (container === document.body) {<EOL>            throw new Error(\"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>         if (!document.body.contains(container)) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>    }<EOL>    const root = findRoot(container);<EOL>    if (root) {<EOL>        root. newVNode = node;<EOL>        root.invalidated = true;<EOL>    }<EOL>     else {<EOL>        ROOTS.push({<EOL>            container: container,<EOL>            currentVNode: null,<EOL>            newVNode: node,<EOL>            invalidated: true,<EOL>        });<EOL>        if (","gt":"DEV) {"}
{"input":"<s> function parsePathArg(arg, process) {<EOL>    if (!arg) {<EOL>        return undefined;<EOL>    }<EOL>    // Determine if the arg is relative or absolute, if relative use the original CWD<EOL>    // (VSCODE_CWD), not the potentially overridden one (process.cwd()).<EOL>    const resolved = path.resolve(arg);<EOL>    if (path.normalize(arg) === resolved) {<EOL>        return resolved;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function span(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> export function onVolumeChange(handler, capture = false) {<EOL>    return createEventHandler(","gt":"EventSourceVolumeChange.eventSource, handler, capture);"}
{"input":"<s> export function sup(className) {<EOL>    return new VNode(VNodeFlags.Element, \"<STR_LIT>\", null,","gt":"className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> export function time(className) {<EOL>    return","gt":"new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function u(className) {<EOL>    return","gt":"new VNode(VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function style(className) {<EOL>    return new VNode(","gt":"VNodeFlags.Element, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function fecomponenttransfer(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null :","gt":"className, null);"}
{"input":"<s> export function inputDatetimeLocal(className) {<EOL>    return new VNode(VNodeFlags.","gt":"Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, `<STR_LIT>`, null, className === undefined ? null : className, null, null);"}
{"input":"<s> export function fecomposite(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.","gt":"SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function feoffset(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function feblend(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className,","gt":"null);"}
{"input":"<s> // Media Elements:<EOL>export function audio(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.MediaElement, \"<STR_LIT>\", null, className === undefined ? null : className, null,","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function video(className) {<EOL>    return","gt":"new VNode(VNodeFlags.Element | VNodeFlags.MediaElement, \"<STR_LIT>\", null, className === undefined ? null : className, null, \"<STR_LIT>\");"}
{"input":"<s> export function fedisplacementmap(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ?","gt":"null : className, null);"}
{"input":"<s> export function polyline(className) {<EOL>    return new VNode(VNodeFlags.","gt":"Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function fepointlight(className) {<EOL>    return new VNode(","gt":"VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function drawerClosed(args) {<EOL>","gt":"var drawer = args.object;"}
{"input":"<s> export function fetile(className) {<EOL>    return","gt":"new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function feturbulence(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.","gt":"SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function foreignobject(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.SvgElement, \"<STR_LIT>\",","gt":"null, className === undefined ? null : className, null);"}
{"input":"<s> export function shortRevision() {<EOL>    return (globalConfig.SHORT_REVISION ||","gt":"\"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> export function path(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.","gt":"SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function polygon(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.","gt":"SvgElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function inputMonth(className) {<EOL>    return new","gt":"VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function inputSearch(className) {<EOL>    return new VNode(","gt":"VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> // Textarea / Input Elements:<EOL>export function textarea(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.TextAreaElement, \"<STR_LIT>\", null, className === undefined ?","gt":"null : className, null);"}
{"input":"<s> export function inputTel(className) {<EOL>","gt":"return new VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function inputDatetimeLocal(className) {<EOL>    return new VNode(VNodeFlags.","gt":"Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className === undefined ? null : className, null);"}
{"input":"<s> export function inputHidden(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className ===","gt":"undefined ? null : className, null);"}
{"input":"<s> export function inputNumber(className) {<EOL>    return new VNode(VNodeFlags.Element | VNodeFlags.InputElement | VNodeFlags.VoidElement, \"<STR_LIT>\", null, className ===","gt":"undefined ? null : className, null);"}
{"input":"<s> <EOL>export function maybeGetTimeOffset(index) {<EOL>    const","gt":"dev = maybeGetDevice(index);"}
{"input":"<s> export function getStatus(cs) {<EOL>","gt":"return (cs && cs.state) || \"<STR_LIT>\";"}
{"input":"<s> export function validateConstraints(args, constraints) {<EOL>    const len = Math.min(args.length, constraints.length);<EOL>    for (let","gt":"i = <NUM_LIT>; i < len; i++) {"}
{"input":"<s> <EOL>export function setCollapseStateForMatchingLines(foldingModel, regExp, doCollapse) {<EOL>    let editorModel = foldingModel.textModel;<EOL>    let regions = foldingModel.regions;<EOL>    let toToggle = [];<EOL>    for (let i = regions.length - <NUM_LIT>; i >=","gt":"<NUM_LIT>; i--) {"}
{"input":"<s> function foo(isAll, startTime, endTime) {<EOL>    const timeRange = isAll ?","gt":"'<STR_LIT>' : `<STR_LIT>`;"}
{"input":"<s> function copyFolderRecursivelySync(src, dest) {<EOL>    if (!directoryExistsSync(src)) {<EOL>        return;<EOL>    }<EOL>    if (!directoryExistsSync(dest)) {<EOL>        mkdirRecursivelySync(dest);<EOL>    }<EOL>    const items = fs.readdirSync(src);<EOL>    for (const item of items) {<EOL>        const fullPath = path.join(src, item);<EOL>        const targetPath =","gt":"path.join(dest, item);"}
{"input":"<s> <EOL>export function createQueryName(name) {<EOL>","gt":"return lowercaseFirstLetter(removeSuffix(name, '<STR_LIT>'));"}
{"input":"<s> <EOL>function isPrimaryInstance() {<EOL>    let jobNumber = process.env['<STR_LIT>'];<EOL>","gt":"if (!jobNumber) {"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch.","gt":"indexOf('<STR_LIT>');"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>","gt":"return;"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line.","gt":"trim())"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line. trim())<EOL>            .filter(line => line.length > <NUM_LIT> &&<EOL>            line.toLowerCase().endsWith('<STR_LIT>') &&<EOL>            line.indexOf('<STR_LIT>') > <NUM_LIT>);<EOL>","gt":"if (patch.startsWith('<STR_LIT>')) {"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line. trim())<EOL>            .filter(line => line.length > <NUM_LIT> &&<EOL>            line.toLowerCase().endsWith('<STR_LIT>') &&<EOL>            line.indexOf('<STR_LIT>') > <NUM_LIT>);<EOL>         if (patch.startsWith('<STR_LIT>')) {<EOL>            // Strip the first two lines<EOL>            patch = patch.substring(indexOfAtAt);<EOL>        }<EOL>        if (patch.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        // We can't find the find name<EOL>        if (fileNameLines.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        let fileName = fileNameLines[<NUM_LIT>].substring(fileNameLines[<NUM_LIT>].indexOf('<STR_LIT>') + <NUM_LIT>).trim();<EOL>        fileName = workspaceRoot && !path.isAbsolute(fileName) ? path.resolve(workspaceRoot, fileName) : fileName;<EOL>        if (!fs.existsSync(","gt":"fileName)) {"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line. trim())<EOL>            .filter(line => line.length > <NUM_LIT> &&<EOL>            line.toLowerCase().endsWith('<STR_LIT>') &&<EOL>            line.indexOf('<STR_LIT>') > <NUM_LIT>);<EOL>         if (patch.startsWith('<STR_LIT>')) {<EOL>            // Strip the first two lines<EOL>            patch = patch.substring(indexOfAtAt);<EOL>        }<EOL>        if (patch.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        // We can't find the find name<EOL>        if (fileNameLines.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        let fileName = fileNameLines[<NUM_LIT>].substring(fileNameLines[<NUM_LIT>].indexOf('<STR_LIT>') + <NUM_LIT>).trim();<EOL>        fileName = workspaceRoot && !path.isAbsolute(fileName) ? path.resolve(workspaceRoot, fileName) : fileName;<EOL>        if (!fs.existsSync( fileName)) {<EOL>            return;<EOL>        }<EOL>        // Remove the text added by unified_diff<EOL>        // # Work around missing newline (http://bugs.python.org/issue2142).<EOL>        patch = patch.replace(/\\\\ No newline at end of file[\\r\\n]/, '<STR_LIT>');<EOL>        const d = new dmp.diff_match_patch();<EOL>        const patches = patch_fromText.call(d, patch);<EOL>        if (!Array.","gt":"isArray(patches) || patches.length === <NUM_LIT>) {"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line. trim())<EOL>            .filter(line => line.length > <NUM_LIT> &&<EOL>            line.toLowerCase().endsWith('<STR_LIT>') &&<EOL>            line.indexOf('<STR_LIT>') > <NUM_LIT>);<EOL>         if (patch.startsWith('<STR_LIT>')) {<EOL>            // Strip the first two lines<EOL>            patch = patch.substring(indexOfAtAt);<EOL>        }<EOL>        if (patch.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        // We can't find the find name<EOL>        if (fileNameLines.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        let fileName = fileNameLines[<NUM_LIT>].substring(fileNameLines[<NUM_LIT>].indexOf('<STR_LIT>') + <NUM_LIT>).trim();<EOL>        fileName = workspaceRoot && !path.isAbsolute(fileName) ? path.resolve(workspaceRoot, fileName) : fileName;<EOL>        if (!fs.existsSync( fileName)) {<EOL>            return;<EOL>        }<EOL>        // Remove the text added by unified_diff<EOL>        // # Work around missing newline (http://bugs.python.org/issue2142).<EOL>        patch = patch.replace(/\\\\ No newline at end of file[\\r\\n]/, '<STR_LIT>');<EOL>        const d = new dmp.diff_match_patch();<EOL>        const patches = patch_fromText.call(d, patch);<EOL>        if (!Array. isArray(patches) || patches.length === <NUM_LIT>) {<EOL>            throw new Error('<STR_LIT>');<EOL>        }<EOL>        const fileSource =","gt":"fs.readFileSync(fileName).toString('<STR_LIT>');"}
{"input":"<s> export function getWorkspaceEditsFromPatch(filePatches, workspaceRoot) {<EOL>    const workspaceEdit = new WorkspaceEdit();<EOL>    filePatches.forEach(patch => {<EOL>        const indexOfAtAt = patch. indexOf('<STR_LIT>');<EOL>        if (indexOfAtAt === -<NUM_LIT>) {<EOL>             return;<EOL>        }<EOL>        const fileNameLines = patch.substring(<NUM_LIT>, indexOfAtAt).split(/\\r?\\n/g)<EOL>            .map(line => line. trim())<EOL>            .filter(line => line.length > <NUM_LIT> &&<EOL>            line.toLowerCase().endsWith('<STR_LIT>') &&<EOL>            line.indexOf('<STR_LIT>') > <NUM_LIT>);<EOL>         if (patch.startsWith('<STR_LIT>')) {<EOL>            // Strip the first two lines<EOL>            patch = patch.substring(indexOfAtAt);<EOL>        }<EOL>        if (patch.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        // We can't find the find name<EOL>        if (fileNameLines.length === <NUM_LIT>) {<EOL>            return;<EOL>        }<EOL>        let fileName = fileNameLines[<NUM_LIT>].substring(fileNameLines[<NUM_LIT>].indexOf('<STR_LIT>') + <NUM_LIT>).trim();<EOL>        fileName = workspaceRoot && !path.isAbsolute(fileName) ? path.resolve(workspaceRoot, fileName) : fileName;<EOL>        if (!fs.existsSync( fileName)) {<EOL>            return;<EOL>        }<EOL>        // Remove the text added by unified_diff<EOL>        // # Work around missing newline (http://bugs.python.org/issue2142).<EOL>        patch = patch.replace(/\\\\ No newline at end of file[\\r\\n]/, '<STR_LIT>');<EOL>        const d = new dmp.diff_match_patch();<EOL>        const patches = patch_fromText.call(d, patch);<EOL>        if (!Array. isArray(patches) || patches.length === <NUM_LIT>) {<EOL>            throw new Error('<STR_LIT>');<EOL>        }<EOL>        const fileSource =  fs.readFileSync(fileName).toString('<STR_LIT>');<EOL>        const fileUri = vscode.Uri.file(fileName);<EOL>        // Add line feeds and build the text edits<EOL>        patches.forEach(p => {<EOL>            p.diffs.forEach(diff => {<EOL>                diff[<NUM_LIT>] += EOL;<EOL>            });<EOL>            getTextEditsInternal(fileSource, p.diffs, p.start1).forEach(edit => {<EOL>                switch (edit.action) {<EOL>                    case EditAction.Delete:<EOL>","gt":"workspaceEdit.delete(fileUri, new Range(edit.start, edit.end));"}
{"input":"<s> export function navigatedTo(args) {<EOL>","gt":"console.log(`<STR_LIT>`);"}
{"input":"<s> function getExports(instance) {<EOL>    const isView = !!instance._domId;<EOL>    if (!isView) {<EOL>        return instance.exports || instance;<EOL>    }<EOL>    let exportObject = instance.exports;<EOL>    let parent = instance.parent;<EOL>    while (exportObject === undefined && parent) {<EOL>        exportObject = parent.exports;<EOL>","gt":"parent = parent.parent;"}
{"input":"<s> function subscribeForScrollNotifications(view) {<EOL>    if (view.nativeViewProtected instanceof UIScrollView) {<EOL>","gt":"view.on(\"<STR_LIT>\", onScroll);"}
{"input":"<s> export function anyEvent(...events) {<EOL>    return (listener, thisArgs =","gt":"null, disposables) => combinedDisposable(events.map(event => event(e => listener.call(thisArgs, e), null, disposables)));"}
{"input":"<s> export default function canPatchAssigneeToJavaScript(node, isTopLevel = true) {<EOL>    if (node instanceof Identifier || node instanceof MemberAccessOp ||<EOL>        node instanceof SoakedMemberAccessOp || node instanceof ProtoMemberAccessOp ||<EOL>        node instanceof DynamicMemberAccessOp || node instanceof SoakedDynamicMemberAccessOp ||<EOL>","gt":"node instanceof SoakedProtoMemberAccessOp) {"}
{"input":"<s> export default function canPatchAssigneeToJavaScript(node, isTopLevel = true) {<EOL>    if (node instanceof Identifier || node instanceof MemberAccessOp ||<EOL>        node instanceof SoakedMemberAccessOp || node instanceof ProtoMemberAccessOp ||<EOL>        node instanceof DynamicMemberAccessOp || node instanceof SoakedDynamicMemberAccessOp ||<EOL>         node instanceof SoakedProtoMemberAccessOp) {<EOL>        return true;<EOL>    }<EOL>    if (node instanceof ArrayInitialiser) {<EOL>        // Nested array destructures can't convert cleanly because we need to wrap<EOL>        // them in Array.from.<EOL>        if (!isTopLevel) {<EOL>            return false;<EOL>        }<EOL>        // Empty destructure operations need to result in zero assignments, and thus<EOL>        // not call Array.from at all.<EOL>        if (node.members.length === <NUM_LIT>) {<EOL>            return false;<EOL>        }<EOL>        return node.members.every((member,","gt":"i) => {"}
{"input":"<s> export default function canPatchAssigneeToJavaScript(node, isTopLevel = true) {<EOL>    if (node instanceof Identifier || node instanceof MemberAccessOp ||<EOL>        node instanceof SoakedMemberAccessOp || node instanceof ProtoMemberAccessOp ||<EOL>        node instanceof DynamicMemberAccessOp || node instanceof SoakedDynamicMemberAccessOp ||<EOL>         node instanceof SoakedProtoMemberAccessOp) {<EOL>        return true;<EOL>    }<EOL>    if (node instanceof ArrayInitialiser) {<EOL>        // Nested array destructures can't convert cleanly because we need to wrap<EOL>        // them in Array.from.<EOL>        if (!isTopLevel) {<EOL>            return false;<EOL>        }<EOL>        // Empty destructure operations need to result in zero assignments, and thus<EOL>        // not call Array.from at all.<EOL>        if (node.members.length === <NUM_LIT>) {<EOL>            return false;<EOL>        }<EOL>        return node.members.every((member,  i) => {<EOL>            let isInFinalPosition = i === node.members.length - <NUM_LIT>;<EOL>            if (isInFinalPosition && member instanceof Expansion) {<EOL>                return true;<EOL>            }<EOL>            if (","gt":"isInFinalPosition &&"}
{"input":"<s> export default function canPatchAssigneeToJavaScript(node, isTopLevel = true) {<EOL>    if (node instanceof Identifier || node instanceof MemberAccessOp ||<EOL>        node instanceof SoakedMemberAccessOp || node instanceof ProtoMemberAccessOp ||<EOL>        node instanceof DynamicMemberAccessOp || node instanceof SoakedDynamicMemberAccessOp ||<EOL>         node instanceof SoakedProtoMemberAccessOp) {<EOL>        return true;<EOL>    }<EOL>    if (node instanceof ArrayInitialiser) {<EOL>        // Nested array destructures can't convert cleanly because we need to wrap<EOL>        // them in Array.from.<EOL>        if (!isTopLevel) {<EOL>            return false;<EOL>        }<EOL>        // Empty destructure operations need to result in zero assignments, and thus<EOL>        // not call Array.from at all.<EOL>        if (node.members.length === <NUM_LIT>) {<EOL>            return false;<EOL>        }<EOL>        return node.members.every((member,  i) => {<EOL>            let isInFinalPosition = i === node.members.length - <NUM_LIT>;<EOL>            if (isInFinalPosition && member instanceof Expansion) {<EOL>                return true;<EOL>            }<EOL>            if ( isInFinalPosition &&<EOL>                (member instanceof Spread || member instanceof Rest) &&<EOL>                canPatchAssigneeToJavaScript(member.expression)) {<EOL>                return true;<EOL>            }<EOL>            return canPatchAssigneeToJavaScript(member, false);<EOL>        });<EOL>    }<EOL>    if (node instanceof ObjectInitialiser) {<EOL>        // JS empty destructure crashes if the RHS is undefined or null, so more<EOL>        // precisely copy the behavior for empty destructures.<EOL>        if (node.members.length === <NUM_LIT>) {<EOL>            return","gt":"false;"}
{"input":"<s> export default function formatCoffeeScriptLexerTokens(tokens, context) {<EOL>    let resultLines = tokens.map(([tag, value, locationData]) =>","gt":"tag}: ${JSON.stringify(value)}`<STR_LIT>;"}
{"input":"<s> export default function getCompareOperator(operator, negated) {<EOL>    switch (operator) {<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> export default function getCompareOperator(operator, negated) {<EOL>    switch (operator) {<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> export default function getCompareOperator(operator, negated) {<EOL>    switch (operator) {<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>         case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>':<EOL>            return negated ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export function setFontWeightWithParents(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    const style = parent.style;<EOL>    counts.forEach((count) => {<EOL>        if (count > <NUM_LIT>) {<EOL>            result += setResultTime(","gt":"noValue);"}
{"input":"<s> export function setFontWeightWithParents(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    const style = parent.style;<EOL>    counts.forEach((count) => {<EOL>        if (count > <NUM_LIT>) {<EOL>            result += setResultTime( noValue);<EOL>            return;<EOL>        }<EOL>        setupParents(parent);<EOL>        const","gt":"time = executeTest(() => {"}
{"input":"<s> <EOL>export function isFunction(node, allowBound = true) {<EOL>    return node.type === '<STR_LIT>' || node.type ===","gt":"'<STR_LIT>' ||"}
{"input":"<s> <EOL>export default function getIndent(source, offset) {<EOL>    let startOfLine = getStartOfLine(source, offset);<EOL>    let indentOffset = startOfLine;<EOL>    let indentCharacter;<EOL>    switch (source[indentOffset]) {<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> <EOL>export default function getIndent(source, offset) {<EOL>    let startOfLine = getStartOfLine(source, offset);<EOL>    let indentOffset = startOfLine;<EOL>    let indentCharacter;<EOL>    switch (source[indentOffset]) {<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>            indentCharacter = source[indentOffset];<EOL>            break;<EOL>","gt":"default:"}
{"input":"<s> <EOL>export default function getIndent(source, offset) {<EOL>    let startOfLine = getStartOfLine(source, offset);<EOL>    let indentOffset = startOfLine;<EOL>    let indentCharacter;<EOL>    switch (source[indentOffset]) {<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>            indentCharacter = source[indentOffset];<EOL>            break;<EOL>         default:<EOL>            return '<STR_LIT>';<EOL>    }<EOL>    while (","gt":"source[indentOffset] === indentCharacter) {"}
{"input":"<s> export function buttonTap(args) {<EOL>    count++;<EOL>    obj.set(\"<STR_LIT>\", obj.get(\"<STR_LIT>\") + <NUM_LIT>);<EOL>    subObj.set(\"<STR_LIT>\", subObj.get(\"<STR_LIT>\") + <NUM_LIT>);<EOL>    var parent = args.object.parent;<EOL>    if (","gt":"parent) {"}
{"input":"<s> export function pageLoaded(args) {<EOL>","gt":"let page = args.object;"}
{"input":"<s> function getMemoryUsage(args) {<EOL>    var mi = new android.app.ActivityManager.MemoryInfo();<EOL>    var activityManager = application.android.context.getSystemService(android.content.Context.ACTIVITY_SERVICE);<EOL>    activityManager.getMemoryInfo(","gt":"mi);"}
{"input":"<s> async function bar3() {<EOL>    void await","gt":"<NUM_LIT>;"}
{"input":"<s> // @filename: awaitWithValueIsOk.ts<EOL>async function* f17() {<EOL>    await","gt":"<NUM_LIT>;"}
{"input":"<s> function foo(t, u) {<EOL>    var a;<EOL>    var b;<EOL>","gt":"t = a;"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===","gt":"<NUM_LIT>) {"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>","gt":"options.message = arguments[<NUM_LIT>];"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[","gt":"<NUM_LIT>];"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =","gt":"arguments[<NUM_LIT>];"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =  arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        try {<EOL>            let i;<EOL>            let action;<EOL>            if (utils.ios.MajorVersion < <NUM_LIT>) {<EOL>                let actionSheet = UIActionSheet.new();<EOL>                if (isString(options.","gt":"message)) {"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =  arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        try {<EOL>            let i;<EOL>            let action;<EOL>            if (utils.ios.MajorVersion < <NUM_LIT>) {<EOL>                let actionSheet = UIActionSheet.new();<EOL>                if (isString(options. message)) {<EOL>                    actionSheet.title = options.message;<EOL>                }<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                        action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            actionSheet.addButtonWithTitle(action);<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    actionSheet.addButtonWithTitle(options.cancelButtonText);<EOL>                    actionSheet.cancelButtonIndex = actionSheet.numberOfButtons - <NUM_LIT>;<EOL>                }<EOL>                let delegate = UIActionSheetDelegateImpl.initWithCallback(function (sender, index) {<EOL>                    resolve(sender.","gt":"buttonTitleAtIndex(index));"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =  arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        try {<EOL>            let i;<EOL>            let action;<EOL>            if (utils.ios.MajorVersion < <NUM_LIT>) {<EOL>                let actionSheet = UIActionSheet.new();<EOL>                if (isString(options. message)) {<EOL>                    actionSheet.title = options.message;<EOL>                }<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                        action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            actionSheet.addButtonWithTitle(action);<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    actionSheet.addButtonWithTitle(options.cancelButtonText);<EOL>                    actionSheet.cancelButtonIndex = actionSheet.numberOfButtons - <NUM_LIT>;<EOL>                }<EOL>                let delegate = UIActionSheetDelegateImpl.initWithCallback(function (sender, index) {<EOL>                    resolve(sender. buttonTitleAtIndex(index));<EOL>                    delegate = undefined;<EOL>                });<EOL>                actionSheet.delegate = delegate;<EOL>                actionSheet.showInView(getter(UIApplication, UIApplication.sharedApplication).keyWindow);<EOL>            }<EOL>            else {<EOL>                let alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, UIAlertControllerStyle.ActionSheet);<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>","gt":"action = options.actions[i];"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =  arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        try {<EOL>            let i;<EOL>            let action;<EOL>            if (utils.ios.MajorVersion < <NUM_LIT>) {<EOL>                let actionSheet = UIActionSheet.new();<EOL>                if (isString(options. message)) {<EOL>                    actionSheet.title = options.message;<EOL>                }<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                        action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            actionSheet.addButtonWithTitle(action);<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    actionSheet.addButtonWithTitle(options.cancelButtonText);<EOL>                    actionSheet.cancelButtonIndex = actionSheet.numberOfButtons - <NUM_LIT>;<EOL>                }<EOL>                let delegate = UIActionSheetDelegateImpl.initWithCallback(function (sender, index) {<EOL>                    resolve(sender. buttonTitleAtIndex(index));<EOL>                    delegate = undefined;<EOL>                });<EOL>                actionSheet.delegate = delegate;<EOL>                actionSheet.showInView(getter(UIApplication, UIApplication.sharedApplication).keyWindow);<EOL>            }<EOL>            else {<EOL>                let alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, UIAlertControllerStyle.ActionSheet);<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                         action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(action, UIAlertActionStyle.Default, (arg) => {<EOL>                                resolve(arg.title);<EOL>                            }));<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.cancelButtonText, UIAlertActionStyle.Cancel, (","gt":"arg) => {"}
{"input":"<s> export function action(arg) {<EOL>    let options;<EOL>    let defaultOptions = { title: null, cancelButtonText: CANCEL };<EOL>    if (arguments.length ===  <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>        }<EOL>        else {<EOL>            options = arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>             options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[ <NUM_LIT>];<EOL>        }<EOL>    }<EOL>    else if (arguments.length === <NUM_LIT>) {<EOL>        if (isString(arguments[<NUM_LIT>]) && isString(arguments[<NUM_LIT>]) && isDefined(arguments[<NUM_LIT>])) {<EOL>            options = defaultOptions;<EOL>            options.message = arguments[<NUM_LIT>];<EOL>            options.cancelButtonText = arguments[<NUM_LIT>];<EOL>            options.actions =  arguments[<NUM_LIT>];<EOL>        }<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        try {<EOL>            let i;<EOL>            let action;<EOL>            if (utils.ios.MajorVersion < <NUM_LIT>) {<EOL>                let actionSheet = UIActionSheet.new();<EOL>                if (isString(options. message)) {<EOL>                    actionSheet.title = options.message;<EOL>                }<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                        action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            actionSheet.addButtonWithTitle(action);<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    actionSheet.addButtonWithTitle(options.cancelButtonText);<EOL>                    actionSheet.cancelButtonIndex = actionSheet.numberOfButtons - <NUM_LIT>;<EOL>                }<EOL>                let delegate = UIActionSheetDelegateImpl.initWithCallback(function (sender, index) {<EOL>                    resolve(sender. buttonTitleAtIndex(index));<EOL>                    delegate = undefined;<EOL>                });<EOL>                actionSheet.delegate = delegate;<EOL>                actionSheet.showInView(getter(UIApplication, UIApplication.sharedApplication).keyWindow);<EOL>            }<EOL>            else {<EOL>                let alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, UIAlertControllerStyle.ActionSheet);<EOL>                if (options.actions) {<EOL>                    for (i = <NUM_LIT>; i < options.actions.length; i++) {<EOL>                         action = options.actions[i];<EOL>                        if (isString(action)) {<EOL>                            alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(action, UIAlertActionStyle.Default, (arg) => {<EOL>                                resolve(arg.title);<EOL>                            }));<EOL>                        }<EOL>                    }<EOL>                }<EOL>                if (isString(options.cancelButtonText)) {<EOL>                    alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.cancelButtonText, UIAlertActionStyle.Cancel, ( arg) => {<EOL>","gt":"resolve(arg.title);"}
{"input":"<s> export function pageLoaded(args) {<EOL>    const","gt":"page = args.object;"}
{"input":"<s> export function feedbackTap(args) {<EOL>    console.log(","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function testNativeFields() {<EOL>    const img = imageSource.fromFile(imagePath);<EOL>    if (app.android) {<EOL>        TKUnit.assert(","gt":"img.android != null, \"<STR_LIT>\");"}
{"input":"<s> function g(x) {<EOL>    return","gt":"<NUM_LIT>;"}
{"input":"<s> export function testBase64Encode_PNG() {<EOL>    // >> imagesource-to-base-string<EOL>    const img =","gt":"imageSource.fromFile(smallImagePath);"}
{"input":"<s> export function setBindingContext(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    counts.forEach((count) => {<EOL>        const lbl = setup(parent);<EOL>        const time =","gt":"executeTest(() => {"}
{"input":"<s> export function setBindingContext(counts, parent) {<EOL>    let result = `<STR_LIT>`;<EOL>    counts.forEach((count) => {<EOL>        const lbl = setup(parent);<EOL>        const time =  executeTest(() => {<EOL>            for (let i = <NUM_LIT>; i < count; i++) {<EOL>                lbl.bindingContext = colors[i % <NUM_LIT>];<EOL>            }<EOL>        });<EOL>","gt":"result += setResultTime(time);"}
{"input":"<s> function f6() {<EOL>    let x = new Mixed5();<EOL>    x.","gt":"p;"}
{"input":"<s> // @allowJs: true<EOL>// @checkJs: true<EOL>// @noEmit: true<EOL>// @Filename: forgot.js<EOL><EOL>function f(a) {<EOL>    return () =>","gt":"a;"}
{"input":"<s> export function getSystemInfo(info) {<EOL>    const MB = <NUM_LIT> * <NUM_LIT>;<EOL>    const GB = <NUM_LIT> * MB;<EOL>    const systemInfo = {<EOL>        '<STR_LIT>': `<STR_LIT>`,<EOL>        VM:","gt":"virtualMachineHint.value() * <NUM_LIT>))}%`<STR_LIT>,"}
{"input":"<s> export function getSystemInfo(info) {<EOL>    const MB = <NUM_LIT> * <NUM_LIT>;<EOL>    const GB = <NUM_LIT> * MB;<EOL>    const systemInfo = {<EOL>        '<STR_LIT>': `<STR_LIT>`,<EOL>        VM: `<STR_LIT>`,<EOL>        '<STR_LIT>': `<STR_LIT>`,<EOL>        '<STR_LIT>': `<STR_LIT>`<EOL>    };<EOL>","gt":"const cpus = os.cpus();"}
{"input":"<s> export function getSystemInfo(info) {<EOL>    const MB = <NUM_LIT> * <NUM_LIT>;<EOL>    const GB = <NUM_LIT> * MB;<EOL>    const systemInfo = {<EOL>        '<STR_LIT>': `<STR_LIT>`,<EOL>        VM: `<STR_LIT>`,<EOL>        '<STR_LIT>': `<STR_LIT>`,<EOL>        '<STR_LIT>': `<STR_LIT>`<EOL>    };<EOL>     const cpus = os.cpus();<EOL>    if (cpus && cpus.length > <NUM_LIT>) {<EOL>        systemInfo.CPUs = `<STR_LIT>`;<EOL>    }<EOL>","gt":"if (!isWindows) {"}
{"input":"<s> export function selectFile(args) {<EOL>    var vm = args.object.bindingContext;<EOL>    var options = vm.files.map((file) => file.name);<EOL>    dialogs.action({<EOL>        cancelButtonText:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function selectFile(args) {<EOL>    var vm = args.object.bindingContext;<EOL>    var options = vm.files.map((file) => file.name);<EOL>    dialogs.action({<EOL>        cancelButtonText:  \"<STR_LIT>\",<EOL>        actions: vm.files.map((file) => file.name),<EOL>    }).then((selectedFile) => {<EOL>        vm.selectFile(selectedFile);<EOL>    }, (","gt":"error) => {"}
{"input":"<s> export function onItemWidthItemHeight(args) {<EOL>    var layout = args.object.","gt":"parent;"}
{"input":"<s> export function tileTouch(args) {<EOL>","gt":"grayTouch(args);"}
{"input":"<s> export function createMessageConnection(input, output, logger, strategy) {<EOL>    if (!logger) {<EOL>","gt":"logger = NullLogger;"}
{"input":"<s> export function getSingleViewRecursive(nodes, nestLevel) {<EOL>    const actualNodes = nodes.filter(node => !(node instanceof InvisibleNode));<EOL>    if (actualNodes.length === <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>` +<EOL>            `<STR_LIT>`);<EOL>    }<EOL>    else","gt":"if (actualNodes.length > <NUM_LIT>) {"}
{"input":"<s> export function getSingleViewRecursive(nodes, nestLevel) {<EOL>    const actualNodes = nodes.filter(node => !(node instanceof InvisibleNode));<EOL>    if (actualNodes.length === <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>` +<EOL>            `<STR_LIT>`);<EOL>    }<EOL>    else  if (actualNodes.length > <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>` +<EOL>            `<STR_LIT>`);<EOL>    }<EOL>    const rootLayout =","gt":"actualNodes[<NUM_LIT>];"}
{"input":"<s> export function getSingleViewRecursive(nodes, nestLevel) {<EOL>    const actualNodes = nodes.filter(node => !(node instanceof InvisibleNode));<EOL>    if (actualNodes.length === <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>` +<EOL>            `<STR_LIT>`);<EOL>    }<EOL>    else  if (actualNodes.length > <NUM_LIT>) {<EOL>        throw new Error(`<STR_LIT>` +<EOL>            `<STR_LIT>`);<EOL>    }<EOL>    const rootLayout =  actualNodes[<NUM_LIT>];<EOL>    if (!rootLayout) {<EOL>        return getSingleViewRecursive(rootLayout.children, nestLevel + <NUM_LIT>);<EOL>    }<EOL>    const parentLayout =","gt":"rootLayout.parent;"}
{"input":"<s> function setResultTime(time) {<EOL>","gt":"return `<STR_LIT>`;"}
{"input":"<s> function toggleDrawerState() {<EOL>    var instance = sideDrawer();<EOL>","gt":"if (instance) {"}
{"input":"<s> function setLaunched() {<EOL>    launched =","gt":"true;"}
{"input":"<s> export function onUpdateButtonTapped(args) {<EOL>","gt":"notify(\"<STR_LIT>\");"}
{"input":"<s> // @allowUnreachableCode: true<EOL>// return type of a function with multiple returns is the BCT of each return statement<EOL>// no errors expected here<EOL>function f1() {<EOL>    if (true) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function attachDOMInspectorCommandCallbacks(DOMDomainBackend) {<EOL>","gt":"DOMDomainBackend.getDocument = getDocument;"}
{"input":"<s> export function memoize(func, resolver) {<EOL>","gt":"return _.memoize(func, resolver);"}
{"input":"<s> export function findCommonParent(list) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    function cutTail(list, n) {<EOL>        while (n-- > <NUM_LIT>) {<EOL>            list.","gt":"pop();"}
{"input":"<s> export function findCommonParent(list) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    function cutTail(list, n) {<EOL>        while (n-- > <NUM_LIT>) {<EOL>            list. pop();<EOL>        }<EOL>    }<EOL>    if (!list) {<EOL>","gt":"return null;"}
{"input":"<s> export function findCommonParent(list) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    function cutTail(list, n) {<EOL>        while (n-- > <NUM_LIT>) {<EOL>            list. pop();<EOL>        }<EOL>    }<EOL>    if (!list) {<EOL>         return null;<EOL>    }<EOL>    let commonSegments = [];<EOL>    let parentPath = null;<EOL>    list.","gt":"forEach((nextPath, idx) => {"}
{"input":"<s> export function findCommonParent(list) {<EOL>    tl.debug(\"<STR_LIT>\");<EOL>    function cutTail(list, n) {<EOL>        while (n-- > <NUM_LIT>) {<EOL>            list. pop();<EOL>        }<EOL>    }<EOL>    if (!list) {<EOL>         return null;<EOL>    }<EOL>    let commonSegments = [];<EOL>    let parentPath = null;<EOL>    list. forEach((nextPath, idx) => {<EOL>        tl.debug(`<STR_LIT>`);<EOL>        if (idx === <NUM_LIT>) {<EOL>            // Take the first path as the common parent candidate<EOL>            commonSegments = nextPath.split(\"<STR_LIT>\");<EOL>        }<EOL>        else if (commonSegments.length === <NUM_LIT>) {<EOL>            // We've already detected that the paths do not have a common parent.<EOL>            // No sense to check the rest of paths.<EOL>","gt":"return null;"}
{"input":"<s> function isDefined(object) {<EOL>","gt":"return object !== undefined && object !== null;"}
{"input":"<s> function compareChanges(a, b) {<EOL>    let result = a.modifiedStartLineNumber - b.modifiedStartLineNumber;<EOL>    if (result !== <NUM_LIT>) {<EOL>        return result;<EOL>    }<EOL>    result = a.modifiedEndLineNumber - b.modifiedEndLineNumber;<EOL>    if (result !== <NUM_LIT>) {<EOL>        return result;<EOL>    }<EOL>    result = a.originalStartLineNumber - b.originalStartLineNumber;<EOL>    if (","gt":"result !== <NUM_LIT>) {"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text = \"<STR_LIT>\";<EOL>    btn.","gt":"on(button.Button.tapEvent, function () {"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text = \"<STR_LIT>\";<EOL>    btn. on(button.Button.tapEvent, function () {<EOL>        var nextPage = \"<STR_LIT>\";<EOL>        frame.topmost().navigate(nextPage);<EOL>    });<EOL>    stack.addChild(btn);<EOL>    var txt = new text.TextField();<EOL>","gt":"txt.text = \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function getById(imdbid, opts, cb) {<EOL>    return","gt":"getReq({ id: imdbid, opts, name: undefined }, cb);"}
{"input":"<s> function modelHasDecorations(model, decorations) {<EOL>    let modelDecorations = [];<EOL>    let actualDecorations = model.getAllDecorations();<EOL>    for (let i = <NUM_LIT>, len = actualDecorations.length; i < len; i++) {<EOL>        modelDecorations.","gt":"push({"}
{"input":"<s> export function testPage(layout) {<EOL>    return","gt":"test(layout, () => new Page(), count);"}
{"input":"<s> // << require-observable-textview<EOL>// >> text-view-xml<EOL>// <Page loaded=\"pageLoaded\"><EOL>//  <StackLayout orientation=\"vertical\"><EOL>//    {%raw%}<TextView text=\"{{ someProperty }}\" /><EOL>//    <TextView text=\"{{ someProperty }}\" />{%endraw%}<EOL>//  </StackLayout><EOL>// </Page><EOL>// << text-view-xml<EOL>// >> observable-declare<EOL>export function pageLoaded(args) {<EOL>    let page = args.object;<EOL>    let obj =","gt":"new observable.Observable();"}
{"input":"<s> export function createPage() {<EOL>    var stackLayout = new stackLayoutModule.StackLayout();<EOL>    var label = new labelModule.Label();<EOL>    label.text = \"<STR_LIT>\";<EOL>    var","gt":"textView = new textViewModule.TextView();"}
{"input":"<s> export function createPage() {<EOL>    var stackLayout = new stackLayoutModule.StackLayout();<EOL>    var label = new labelModule.Label();<EOL>    label.text = \"<STR_LIT>\";<EOL>    var  textView = new textViewModule.TextView();<EOL>    textView.text = \"<STR_LIT>\";<EOL>    stackLayout.addChild(label);<EOL>    stackLayout.addChild(textView);<EOL>    var page = new pageModule.Page();<EOL>    page.on(pageModule.Page.loadedEvent, function () {<EOL>","gt":"pageLoaded();"}
{"input":"<s> export function goBack(args) {<EOL>    navigator.","gt":"navigateBackFromExample();"}
{"input":"<s> export function setupEditorTable(editor) {<EOL>    hideSeparator(editor);<EOL>    hideBackground(editor);<EOL>    var pickerDelegate = UIPickerViewDelegateImplementation.new().","gt":"initWithOwner(editor);"}
{"input":"<s> export default function redo(history) {<EOL>    const { graph } = history;<EOL>    const reader = new DagGraph(graph);<EOL>    const children = reader<EOL>        .","gt":"childrenOf(reader.currentStateId)"}
{"input":"<s> function isConnected() {<EOL>    return this.","gt":"connection.isConnected();"}
{"input":"<s> function ensureAppRootPath() {<EOL>    if (!applicationRootPath) {<EOL>        applicationRootPath = knownFolders.","gt":"currentApp().path;"}
{"input":"<s> function getGridObjectSizeModifiers(size, isOffset) {<EOL>    return Object.keys(size).reduce((acc, key) => {<EOL>        if (key ===","gt":"'<STR_LIT>')"}
{"input":"<s> function getServerInfo() {<EOL>    return common.","gt":"serverInfo.getServerInfo(this.connection);"}
{"input":"<s> export function test_watch_listerer_is_removed_at_onDetach() {<EOL>    if (platform.isAndroid) {<EOL>        helper.buildUIAndRunTest(_createTextViewFunc(), (views) => {<EOL>            let tv = views[<NUM_LIT>];<EOL>            let","gt":"page = tv.page;"}
{"input":"<s> export function test_watch_listerer_is_removed_at_onDetach() {<EOL>    if (platform.isAndroid) {<EOL>        helper.buildUIAndRunTest(_createTextViewFunc(), (views) => {<EOL>            let tv = views[<NUM_LIT>];<EOL>            let  page = tv.page;<EOL>            let editText = tv.android;<EOL>            editText.setText(\"<STR_LIT>\");<EOL>            page.content = null;<EOL>            editText.setText(","gt":"\"<STR_LIT>\");"}
{"input":"<s> function setupDefaultAnimations(entry, transition) {<EOL>    const listener = getAnimationListener();<EOL>    const enterAnimator = transition.createAndroidAnimator(AndroidTransitionType.enter);<EOL>    enterAnimator.transitionType = AndroidTransitionType.enter;<EOL>","gt":"enterAnimator.entry = entry;"}
{"input":"<s> function setupDefaultAnimations(entry, transition) {<EOL>    const listener = getAnimationListener();<EOL>    const enterAnimator = transition.createAndroidAnimator(AndroidTransitionType.enter);<EOL>    enterAnimator.transitionType = AndroidTransitionType.enter;<EOL>     enterAnimator.entry = entry;<EOL>    enterAnimator.addListener(listener);<EOL>    entry.defaultEnterAnimator = enterAnimator;<EOL>    const exitAnimator = transition.createAndroidAnimator(AndroidTransitionType.exit);<EOL>    exitAnimator.transitionType = AndroidTransitionType.exit;<EOL>    exitAnimator.","gt":"entry = entry;"}
{"input":"<s> <EOL>export function isReactHeritageClause(clause) {<EOL>    return (clause.token === ts.SyntaxKind.ExtendsKeyword &&<EOL>        clause.types.length ===","gt":"<NUM_LIT> &&"}
{"input":"<s> export function navigatingTo(args) {<EOL>","gt":"args.object.bindingContext = firebase.viewModel;"}
{"input":"<s> function pathExistsAsync(path) {<EOL>    return","gt":"statAsync(path)"}
{"input":"<s> // http://stackoverflow.com/a/12646864<EOL>function shuffleArray(array) {<EOL>    for (var i = array.length - <NUM_LIT>; i > <NUM_LIT>; i--) {<EOL>        var j = Math.floor(Math.random() * (i + <NUM_LIT>));<EOL>        var temp = array[","gt":"i];"}
{"input":"<s> export function test_parse_ShouldResolveExportsFromCodeFile() {<EOL>","gt":"var page = builder.parse(\"<STR_LIT>\");"}
{"input":"<s> export function onChangeText(args) {<EOL>    const page = args.object.page;<EOL>    const lblElelemtn = page.getViewById(\"<STR_LIT>\");<EOL>    const btnElement = page.getViewById(\"<STR_LIT>\");<EOL>    const textFieldElement = page.getViewById(","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function onChangeText(args) {<EOL>    const page = args.object.page;<EOL>    const lblElelemtn = page.getViewById(\"<STR_LIT>\");<EOL>    const btnElement = page.getViewById(\"<STR_LIT>\");<EOL>    const textFieldElement = page.getViewById( \"<STR_LIT>\");<EOL>    const textViewElement = page.getViewById(\"<STR_LIT>\");<EOL>    if (lblElelemtn.text === \"<STR_LIT>\") {<EOL>        lblElelemtn.text = btnElement.text = textFieldElement.text = textViewElement.text = \"<STR_LIT>\";<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function getNativeBackgroundColor(button) {<EOL>    var bkg = button.android.getBackground();<EOL>    if (bkg instanceof org.nativescript.widgets.BorderDrawable) {<EOL>        return new colorModule.","gt":"Color(bkg.getBackgroundColor());"}
{"input":"<s> export function ignore_test_DummyTestForSnippetOnly3() {<EOL>    // >> frame-naventrycontext<EOL>    const navigationEntry = {<EOL>        moduleName:","gt":"\"<STR_LIT>\","}
{"input":"<s> function formatBalances(options, balances) {<EOL>    const result = balances.trustlines.map(getTrustlineBalanceAmount);<EOL>    if (!(options.counterparty ||<EOL>        (options.currency && options.currency !== '<STR_LIT>'))) {<EOL>        const xrpBalance = {<EOL>","gt":"currency: '<STR_LIT>',"}
{"input":"<s> function formatBalances(options, balances) {<EOL>    const result = balances.trustlines.map(getTrustlineBalanceAmount);<EOL>    if (!(options.counterparty ||<EOL>        (options.currency && options.currency !== '<STR_LIT>'))) {<EOL>        const xrpBalance = {<EOL>             currency: '<STR_LIT>',<EOL>            value: balances.xrp<EOL>        };<EOL>        result.unshift(xrpBalance);<EOL>    }<EOL>    if (options.limit && result.length > options.limit) {<EOL>        const toRemove =","gt":"result.length - options.limit;"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text =  \"<STR_LIT>\";<EOL>    btn.on(button.Button.tapEvent, function () {<EOL>        var nextPage = \"<STR_LIT>\";<EOL>        frame.topmost().navigate(","gt":"nextPage);"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text =  \"<STR_LIT>\";<EOL>    btn.on(button.Button.tapEvent, function () {<EOL>        var nextPage = \"<STR_LIT>\";<EOL>        frame.topmost().navigate( nextPage);<EOL>    });<EOL>    stack.addChild(btn);<EOL>    var backBtn = new button.Button();<EOL>","gt":"backBtn.text = \"<STR_LIT>\";"}
{"input":"<s> export function createPage() {<EOL>    var page = new pages.Page();<EOL>    var stack = new stackModule.StackLayout();<EOL>    var btn = new button.Button();<EOL>    btn.text =  \"<STR_LIT>\";<EOL>    btn.on(button.Button.tapEvent, function () {<EOL>        var nextPage = \"<STR_LIT>\";<EOL>        frame.topmost().navigate( nextPage);<EOL>    });<EOL>    stack.addChild(btn);<EOL>    var backBtn = new button.Button();<EOL>     backBtn.text = \"<STR_LIT>\";<EOL>    backBtn.on(button.Button.tapEvent, function () {<EOL>        frame.topmost().goBack();<EOL>    });<EOL>    stack.addChild(backBtn);<EOL>    var txt =","gt":"new text.TextField();"}
{"input":"<s> function f(x) {<EOL>","gt":"return;"}
{"input":"<s> export function error(message, ...args) {<EOL>    LogView.add(Severity.","gt":"error, message, ...args);"}
{"input":"<s> export function applySeparatorOffset(editor, value) {<EOL>    editor.style.separatorLeadingSpace =","gt":"value;"}
{"input":"<s> function schemaValidate(schemaName, object) {<EOL>    // Lookup under the root URI '/'<EOL>    const schema = schemaValidator.getSchema('<STR_LIT>' + schemaName);<EOL>    if (","gt":"schema === undefined) {"}
{"input":"<s> function toShortString(nativeTransition) {<EOL>    return","gt":"nativeTransition.hashCode().toString(<NUM_LIT>)}`<STR_LIT>;"}
{"input":"<s> function _test_NavigationEvents_WithBackstackVisibile_False_Forward_Back(transition) {<EOL>    const topmost = topmostFrame();<EOL>    const mainTestPage = topmost.currentPage;<EOL>    let actualSecondPageEvents = new Array();<EOL>    let secondPageFactory = function () {<EOL>        const","gt":"secondPage = new Page();"}
{"input":"<s> function _test_NavigationEvents_WithBackstackVisibile_False_Forward_Back(transition) {<EOL>    const topmost = topmostFrame();<EOL>    const mainTestPage = topmost.currentPage;<EOL>    let actualSecondPageEvents = new Array();<EOL>    let secondPageFactory = function () {<EOL>        const  secondPage = new Page();<EOL>        secondPage.actionBarHidden = true;<EOL>        secondPage.id = \"<STR_LIT>\";<EOL>        attachEventListeners(secondPage,","gt":"actualSecondPageEvents);"}
{"input":"<s> function _test_NavigationEvents_WithBackstackVisibile_False_Forward_Back(transition) {<EOL>    const topmost = topmostFrame();<EOL>    const mainTestPage = topmost.currentPage;<EOL>    let actualSecondPageEvents = new Array();<EOL>    let secondPageFactory = function () {<EOL>        const  secondPage = new Page();<EOL>        secondPage.actionBarHidden = true;<EOL>        secondPage.id = \"<STR_LIT>\";<EOL>        attachEventListeners(secondPage,  actualSecondPageEvents);<EOL>        secondPage.style.backgroundColor = new Color(<NUM_LIT>, Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() * <NUM_LIT>), Math.round(Math.random() * <NUM_LIT>));<EOL>        return secondPage;<EOL>    };<EOL>    // Go to other page<EOL>    helper.navigateWithEntry({ create: secondPageFactory, transition: transition,","gt":"animated: !!transition, backstackVisible: false });"}
{"input":"<s> function expand(pattern) {<EOL>    if (pattern.match(/\\*\\*|[\\[\\]]/))<EOL>        throw new Error(`<STR_LIT>`);<EOL>    assert(pattern === '<STR_LIT>' || pattern.match(/{[^{}]*}|.[^{]*/g).join('<STR_LIT>') === pattern);<EOL>    return pattern === '<STR_LIT>'<EOL>        ? [","gt":"pattern]"}
{"input":"<s> function expand(pattern) {<EOL>    if (pattern.match(/\\*\\*|[\\[\\]]/))<EOL>        throw new Error(`<STR_LIT>`);<EOL>    assert(pattern === '<STR_LIT>' || pattern.match(/{[^{}]*}|.[^{]*/g).join('<STR_LIT>') === pattern);<EOL>    return pattern === '<STR_LIT>'<EOL>        ? [ pattern]<EOL>        : Sequence.from(pattern.match(/{[^{}]*}|.[^{]*/g))<EOL>            .map(p => p.match(/^{[^{}]*}$/)<EOL>            ? p.slice(<NUM_LIT>, -<NUM_LIT>).split('<STR_LIT>')<EOL>            : [","gt":"p])"}
{"input":"<s> function expand(pattern) {<EOL>    if (pattern.match(/\\*\\*|[\\[\\]]/))<EOL>        throw new Error(`<STR_LIT>`);<EOL>    assert(pattern === '<STR_LIT>' || pattern.match(/{[^{}]*}|.[^{]*/g).join('<STR_LIT>') === pattern);<EOL>    return pattern === '<STR_LIT>'<EOL>        ? [ pattern]<EOL>        : Sequence.from(pattern.match(/{[^{}]*}|.[^{]*/g))<EOL>            .map(p => p.match(/^{[^{}]*}$/)<EOL>            ? p.slice(<NUM_LIT>, -<NUM_LIT>).split('<STR_LIT>')<EOL>            : [ p])<EOL>            .mapM(Sequence.from)<EOL>            .map(ps => ps.join('<STR_LIT>'))<EOL>            .bind(p => p === pattern<EOL>            ?","gt":"Sequence.from([p])"}
{"input":"<s> function collectSyntaxRanges(providers, model) {<EOL>    const rangeData = [];<EOL>    let promises = providers.map((provider, rank) => asWinJsPromise(token => provider.provideFoldingRanges(model, token)).then(list => {<EOL>        if (list && Array.isArray(list.ranges)) {<EOL>            let nLines = model.getLineCount();<EOL>","gt":"for (let r of list.ranges) {"}
{"input":"<s> function collectSyntaxRanges(providers, model) {<EOL>    const rangeData = [];<EOL>    let promises = providers.map((provider, rank) => asWinJsPromise(token => provider.provideFoldingRanges(model, token)).then(list => {<EOL>        if (list && Array.isArray(list.ranges)) {<EOL>            let nLines = model.getLineCount();<EOL>             for (let r of list.ranges) {<EOL>                if (r.startLineNumber > <NUM_LIT> && r.endLineNumber > r.startLineNumber && r.endLineNumber <= nLines) {<EOL>                    rangeData.push({ startLineNumber: r.startLineNumber, endLineNumber: r.endLineNumber, rank, type: r.type });<EOL>                }<EOL>            }<EOL>        }<EOL>    },","gt":"onUnexpectedExternalError));"}
{"input":"<s> function parseAccountTxTransaction(tx) {<EOL>","gt":"const _tx = tx.tx_blob ? parseBinaryTransaction(tx) : tx;"}
{"input":"<s> function orderFilter(options, tx) {<EOL>    return !options.startTx || (options.","gt":"earliestFirst ?"}
{"input":"<s> function systemjsConfigJsCode() {<EOL>","gt":"return `<STR_LIT>`"}
{"input":"<s> export function getEmmetConfiguration(syntax) {<EOL>    const emmetConfig = vscode.workspace.getConfiguration('<STR_LIT>');<EOL>    const syntaxProfiles = Object.assign({}, emmetConfig['<STR_LIT>'] || {});<EOL>    // jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user<EOL>    if (syntax === '<STR_LIT>' || syntax === '<STR_LIT>' ||","gt":"syntax === '<STR_LIT>') {"}
{"input":"<s> export function getEmmetConfiguration(syntax) {<EOL>    const emmetConfig = vscode.workspace.getConfiguration('<STR_LIT>');<EOL>    const syntaxProfiles = Object.assign({}, emmetConfig['<STR_LIT>'] || {});<EOL>    // jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user<EOL>    if (syntax === '<STR_LIT>' || syntax === '<STR_LIT>' ||  syntax === '<STR_LIT>') {<EOL>        syntaxProfiles[syntax] = syntaxProfiles[syntax] || {};<EOL>        if (typeof syntaxProfiles[syntax] === '<STR_LIT>'<EOL>            && !syntaxProfiles[","gt":"syntax].hasOwnProperty('<STR_LIT>')"}
{"input":"<s> export function getEmmetConfiguration(syntax) {<EOL>    const emmetConfig = vscode.workspace.getConfiguration('<STR_LIT>');<EOL>    const syntaxProfiles = Object.assign({}, emmetConfig['<STR_LIT>'] || {});<EOL>    // jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user<EOL>    if (syntax === '<STR_LIT>' || syntax === '<STR_LIT>' ||  syntax === '<STR_LIT>') {<EOL>        syntaxProfiles[syntax] = syntaxProfiles[syntax] || {};<EOL>        if (typeof syntaxProfiles[syntax] === '<STR_LIT>'<EOL>            && !syntaxProfiles[ syntax].hasOwnProperty('<STR_LIT>') // Old Emmet format<EOL>            && !syntaxProfiles[syntax].hasOwnProperty('<STR_LIT>') // Emmet 2.0 format<EOL>        ) {<EOL>            syntaxProfiles[syntax]['<STR_LIT>'] = '<STR_LIT>';<EOL>        }<EOL>    }<EOL>    return {<EOL>        preferences: emmetConfig['<STR_LIT>'],<EOL>        showExpandedAbbreviation: emmetConfig['<STR_LIT>'],<EOL>        showAbbreviationSuggestions: emmetConfig[","gt":"'<STR_LIT>'],"}
{"input":"<s> function registerNode(domNode) {<EOL>","gt":"registeredDomNodes[domNode.nodeId] = domNode;"}
{"input":"<s> export function navigateToGroupInfo(context) {<EOL>    frame.topmost().navigate({<EOL>","gt":"animated: true,"}
{"input":"<s> export function navigateToHome() {<EOL>    var topmost = frame.topmost();<EOL>    if (","gt":"topmost.currentEntry.moduleName !== \"<STR_LIT>\") {"}
{"input":"<s> export function getNativeFontSize(textView) {<EOL>    var density =","gt":"utilsModule.layout.getDisplayDensity();"}
{"input":"<s> export function test_NavigationEvents_WithBackstackVisibile_False_Forward_Forward() {<EOL>","gt":"_test_NavigationEvents_WithBackstackVisibile_False_Forward_Forward();"}
{"input":"<s> function generateData(firstTime = false) {<EOL>    if (!firstTime) {<EOL>        // Change the seed.<EOL>        state.seed = Math.random().toFixed(<NUM_LIT>);<EOL>","gt":"state.serialize();"}
{"input":"<s> function generateData(firstTime = false) {<EOL>    if (!firstTime) {<EOL>        // Change the seed.<EOL>        state.seed = Math.random().toFixed(<NUM_LIT>);<EOL>         state.serialize();<EOL>        userHasInteracted();<EOL>    }<EOL>    Math.","gt":"seedrandom(state.seed);"}
{"input":"<s> function generateData(firstTime = false) {<EOL>    if (!firstTime) {<EOL>        // Change the seed.<EOL>        state.seed = Math.random().toFixed(<NUM_LIT>);<EOL>         state.serialize();<EOL>        userHasInteracted();<EOL>    }<EOL>    Math. seedrandom(state.seed);<EOL>    let numSamples = (state.problem === Problem.REGRESSION) ?<EOL>        NUM_SAMPLES_REGRESS : NUM_SAMPLES_CLASSIFY;<EOL>    let generator = state.problem === Problem.CLASSIFICATION ?<EOL>        state.","gt":"dataset : state.regDataset;"}
{"input":"<s> function generateData(firstTime = false) {<EOL>    if (!firstTime) {<EOL>        // Change the seed.<EOL>        state.seed = Math.random().toFixed(<NUM_LIT>);<EOL>         state.serialize();<EOL>        userHasInteracted();<EOL>    }<EOL>    Math. seedrandom(state.seed);<EOL>    let numSamples = (state.problem === Problem.REGRESSION) ?<EOL>        NUM_SAMPLES_REGRESS : NUM_SAMPLES_CLASSIFY;<EOL>    let generator = state.problem === Problem.CLASSIFICATION ?<EOL>        state. dataset : state.regDataset;<EOL>    let data = generator(numSamples, state.noise / <NUM_LIT>);<EOL>    // Shuffle the data in-place.<EOL>    shuffle(data);<EOL>    // Split into train and test data.<EOL>    let splitIndex = Math.floor(data.length * state.percTrainData /","gt":"<NUM_LIT>);"}
{"input":"<s> function _applyIconTheme(data, onApply) {<EOL>    _applyRules(data.styleSheetContent,","gt":"iconThemeRulesClassName);"}
{"input":"<s> export function classifyTwoGaussData(numSamples, noise) {<EOL>    let points = [];<EOL>    let varianceScale = d3.scale.linear().domain([<NUM_LIT>, <NUM_LIT>]).range([<NUM_LIT>, <NUM_LIT>]);<EOL>    let variance = varianceScale(noise);<EOL>","gt":"function genGauss(cx, cy, label) {"}
{"input":"<s> <EOL>function dist(a, b) {<EOL>    let dx =","gt":"a.x - b.x;"}
{"input":"<s> export function test_CorrectEventArgsWhenWrappedValueIsUsed() {<EOL>    let testArray = [<NUM_LIT>];<EOL>    let testObservable = fromObject({ \"<STR_LIT>\": testArray });<EOL>    let actualArgsValue;<EOL>    let propertyChangeHandler = function (","gt":"args) {"}
{"input":"<s> export function test_CorrectEventArgsWhenWrappedValueIsUsed() {<EOL>    let testArray = [<NUM_LIT>];<EOL>    let testObservable = fromObject({ \"<STR_LIT>\": testArray });<EOL>    let actualArgsValue;<EOL>    let propertyChangeHandler = function ( args) {<EOL>        actualArgsValue = args.value;<EOL>    };<EOL>    testObservable.on(Observable.propertyChangeEvent, propertyChangeHandler);<EOL>    testArray.push(<NUM_LIT>);<EOL>    let wrappedArray =","gt":"WrappedValue.wrap(testArray);"}
{"input":"<s> <EOL>function splitDataSet(dataSet, axis, value) {<EOL>    let retDataSet = dataSet.reduce((pre, cur) => {<EOL>        let curList = List(cur);<EOL>        if (cur[axis] ===","gt":"value) {"}
{"input":"<s> export function navigateBackWithContext(context) {<EOL>    var topmostFrame = frame.topmost();<EOL>    var backstackEntry = topmostFrame.backStack[","gt":"topmostFrame.backStack.length - <NUM_LIT>];"}
{"input":"<s> export function cordovaStartCommand(args, cordovaRootPath) {<EOL>    const command = CordovaProjectHelper.getCliCommand(cordovaRootPath);<EOL>    const isIonic = CordovaProjectHelper.isIonicProject(cordovaRootPath);<EOL>    const isIonicServe = args.indexOf('<STR_LIT>') >= <NUM_LIT>;<EOL>    if (isIonic && !isIonicServe) {<EOL>","gt":"const isIonicCliVersionGte3 = CordovaProjectHelper.isIonicCliVersionGte3(cordovaRootPath);"}
{"input":"<s> export function cordovaStartCommand(args, cordovaRootPath) {<EOL>    const command = CordovaProjectHelper.getCliCommand(cordovaRootPath);<EOL>    const isIonic = CordovaProjectHelper.isIonicProject(cordovaRootPath);<EOL>    const isIonicServe = args.indexOf('<STR_LIT>') >= <NUM_LIT>;<EOL>    if (isIonic && !isIonicServe) {<EOL>         const isIonicCliVersionGte3 = CordovaProjectHelper.isIonicCliVersionGte3(cordovaRootPath);<EOL>        if (isIonicCliVersionGte3) {<EOL>            args.unshift('<STR_LIT>');<EOL>        }<EOL>    }<EOL>    if (isIonic) {<EOL>        args.push('<STR_LIT>');<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function parseOutcome(tx) {<EOL>    const metadata = tx.meta || tx.metaData;<EOL>    if (!metadata) {<EOL>        return undefined;<EOL>    }<EOL>    const balanceChanges = transactionParser.parseBalanceChanges(metadata);<EOL>    const orderbookChanges = transactionParser.parseOrderbookChanges(","gt":"metadata);"}
{"input":"<s> function parseOutcome(tx) {<EOL>    const metadata = tx.meta || tx.metaData;<EOL>    if (!metadata) {<EOL>        return undefined;<EOL>    }<EOL>    const balanceChanges = transactionParser.parseBalanceChanges(metadata);<EOL>    const orderbookChanges = transactionParser.parseOrderbookChanges( metadata);<EOL>    removeEmptyCounterpartyInBalanceChanges(balanceChanges);<EOL>    removeEmptyCounterpartyInOrderbookChanges(orderbookChanges);<EOL>    return common.removeUndefined({<EOL>        result: tx.meta.","gt":"TransactionResult,"}
{"input":"<s> function parseOutcome(tx) {<EOL>    const metadata = tx.meta || tx.metaData;<EOL>    if (!metadata) {<EOL>        return undefined;<EOL>    }<EOL>    const balanceChanges = transactionParser.parseBalanceChanges(metadata);<EOL>    const orderbookChanges = transactionParser.parseOrderbookChanges( metadata);<EOL>    removeEmptyCounterpartyInBalanceChanges(balanceChanges);<EOL>    removeEmptyCounterpartyInOrderbookChanges(orderbookChanges);<EOL>    return common.removeUndefined({<EOL>        result: tx.meta. TransactionResult,<EOL>        timestamp: parseTimestamp(tx.date),<EOL>        fee: common.dropsToXrp(tx.Fee),<EOL>        balanceChanges: balanceChanges,<EOL>","gt":"orderbookChanges: orderbookChanges,"}
{"input":"<s> function removeGenericCounterparty(amount, address) {<EOL>    return","gt":"amount.counterparty === address ?"}
{"input":"<s> function fix(doc) {<EOL>    void","gt":"fixNoscript(doc)"}
{"input":"<s> export function test_DependencyObservable_get_set_AreOverriden() {<EOL>    var dO = new TestDO();<EOL>    dO.test =","gt":"true;"}
{"input":"<s> export function test_findFileMatch_os_fallback() {<EOL>    var candidates = [<EOL>","gt":"\"<STR_LIT>\","}
{"input":"<s> export function test_percent_margin_set_to_page_support() {<EOL>    let topFrame = frameModule.topmost();<EOL>    let currentPage = topFrame.currentPage;<EOL>    currentPage.margin = \"<STR_LIT>\";<EOL>    TKUnit.waitUntilReady(() => {<EOL>","gt":"return currentPage.isLayoutValid;"}
{"input":"<s> export function test_percent_margin_set_to_page_support() {<EOL>    let topFrame = frameModule.topmost();<EOL>    let currentPage = topFrame.currentPage;<EOL>    currentPage.margin = \"<STR_LIT>\";<EOL>    TKUnit.waitUntilReady(() => {<EOL>         return currentPage.isLayoutValid;<EOL>    }, <NUM_LIT>);<EOL>    let topFrameWidth = topFrame.getMeasuredWidth();<EOL>    let topFrameHeight =","gt":"topFrame.getMeasuredHeight();"}
{"input":"<s> export function test_percent_margin_set_to_page_support() {<EOL>    let topFrame = frameModule.topmost();<EOL>    let currentPage = topFrame.currentPage;<EOL>    currentPage.margin = \"<STR_LIT>\";<EOL>    TKUnit.waitUntilReady(() => {<EOL>         return currentPage.isLayoutValid;<EOL>    }, <NUM_LIT>);<EOL>    let topFrameWidth = topFrame.getMeasuredWidth();<EOL>    let topFrameHeight =  topFrame.getMeasuredHeight();<EOL>    let currentPageWidth = currentPage.getMeasuredWidth();<EOL>    let currentPageHeight = currentPage.getMeasuredHeight();<EOL>    let marginLeft = topFrameWidth * <NUM_LIT>;<EOL>    let marginTop = topFrameHeight * <NUM_LIT>;<EOL>    let bounds = currentPage.","gt":"_getCurrentLayoutBounds();"}
{"input":"<s> export function openLink(view) {<EOL>    var url = view.tag;<EOL>    if (url) {<EOL>        if (isIOS) {<EOL>            var nsUrl = NSURL.URLWithString(url);<EOL>            var sharedApp = utils.ios.getter(UIApplication,","gt":"UIApplication.sharedApplication);"}
{"input":"<s> export function openLink(view) {<EOL>    var url = view.tag;<EOL>    if (url) {<EOL>        if (isIOS) {<EOL>            var nsUrl = NSURL.URLWithString(url);<EOL>            var sharedApp = utils.ios.getter(UIApplication,  UIApplication.sharedApplication);<EOL>            if (sharedApp.canOpenURL(nsUrl)) {<EOL>                sharedApp.openURL(nsUrl);<EOL>            }<EOL>        }<EOL>        else if (isAndroid) {<EOL>            var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(url));<EOL>            var activity =","gt":"frame.topmost().android.activity;"}
{"input":"<s> function parseEscrowCancellation(tx) {<EOL>    assert(tx.TransactionType === '<STR_LIT>');<EOL>","gt":"return removeUndefined({"}
{"input":"<s> function parseFeeUpdate(tx) {<EOL>    const baseFeeDrops = (new BigNumber(tx.BaseFee, <NUM_LIT>)).toString();<EOL>    return {<EOL>        baseFeeXRP:","gt":"dropsToXrp(baseFeeDrops),"}
{"input":"<s> function interesting(i) {<EOL>","gt":"return true;"}
{"input":"<s> export function test_get_set_on_observables_fromObject_without_property_in_json() {<EOL>    const array = new ObservableArray();<EOL>    const vm = fromObject({});<EOL>    vm.","gt":"set(\"<STR_LIT>\", array);"}
{"input":"<s> export function test_parse_ShouldParseBooleanPropertiesIgnoreCase() {<EOL>","gt":"var p = builder.parse(\"<STR_LIT>\");"}
{"input":"<s> export function editorHasToApplyValue(args) {<EOL>    buttonEditorHelper.updateEditorValue(args.","gt":"view, args.value);"}
{"input":"<s> export function onPageLoaded(args) {<EOL>    var page = args.object;<EOL>    vm.set(","gt":"\"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> export function test_findFileMatch_minW_best_value() {<EOL>    var candidates = [<EOL>        \"<STR_LIT>\",<EOL>","gt":"\"<STR_LIT>\","}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>","gt":"return {"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>","gt":"entry: `<STR_LIT>`,"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>","gt":"rules: ["}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>             rules: [<EOL>                {<EOL>                    test: /\\.tsx?$/,<EOL>                    use: [<EOL>","gt":"'<STR_LIT>', '<STR_LIT>',"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>             rules: [<EOL>                {<EOL>                    test: /\\.tsx?$/,<EOL>                    use: [<EOL>                         '<STR_LIT>', '<STR_LIT>',<EOL>                    ],<EOL>                    include: srcdir<EOL>                },<EOL>                {<EOL>                    test: /\\.(sass|css)$/,<EOL>                    use: ['<STR_LIT>', '<STR_LIT>',","gt":"'<STR_LIT>']"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>             rules: [<EOL>                {<EOL>                    test: /\\.tsx?$/,<EOL>                    use: [<EOL>                         '<STR_LIT>', '<STR_LIT>',<EOL>                    ],<EOL>                    include: srcdir<EOL>                },<EOL>                {<EOL>                    test: /\\.(sass|css)$/,<EOL>                    use: ['<STR_LIT>', '<STR_LIT>',  '<STR_LIT>']<EOL>                },<EOL>                {<EOL>                    test: /\\.(svg|woff|woff2|ttf|eot)(\\?.*$|$)/,<EOL>                    use: ['<STR_LIT>']<EOL>                },<EOL>            ]<EOL>        },<EOL>        output: {<EOL>            filename: '<STR_LIT>',<EOL>            path: outdir,<EOL>            publicPath: publicPath<EOL>        },<EOL>        plugins: [<EOL>            new webpack.","gt":"DefinePlugin({"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>             rules: [<EOL>                {<EOL>                    test: /\\.tsx?$/,<EOL>                    use: [<EOL>                         '<STR_LIT>', '<STR_LIT>',<EOL>                    ],<EOL>                    include: srcdir<EOL>                },<EOL>                {<EOL>                    test: /\\.(sass|css)$/,<EOL>                    use: ['<STR_LIT>', '<STR_LIT>',  '<STR_LIT>']<EOL>                },<EOL>                {<EOL>                    test: /\\.(svg|woff|woff2|ttf|eot)(\\?.*$|$)/,<EOL>                    use: ['<STR_LIT>']<EOL>                },<EOL>            ]<EOL>        },<EOL>        output: {<EOL>            filename: '<STR_LIT>',<EOL>            path: outdir,<EOL>            publicPath: publicPath<EOL>        },<EOL>        plugins: [<EOL>            new webpack. DefinePlugin({<EOL>                '<STR_LIT>': {<EOL>                    '<STR_LIT>': JSON.stringify('<STR_LIT>')<EOL>                },<EOL>                '<STR_LIT>': JSON.stringify(config.server_config || {}),<EOL>            }),<EOL>            new webpack.optimize.UglifyJsPlugin({<EOL>                compress: {<EOL>                    warnings: false<EOL>                }<EOL>            }),<EOL>            new webpack.LoaderOptionsPlugin({<EOL>","gt":"options: {"}
{"input":"<s> export function getProdConfig(config = {}) {<EOL>    const srcdir = config.srcdir || defaultSrcDir;<EOL>    const outdir = config.outdir || defaultBuildDir;<EOL>     return {<EOL>        devtool: '<STR_LIT>',<EOL>         entry: `<STR_LIT>`,<EOL>        module: {<EOL>             rules: [<EOL>                {<EOL>                    test: /\\.tsx?$/,<EOL>                    use: [<EOL>                         '<STR_LIT>', '<STR_LIT>',<EOL>                    ],<EOL>                    include: srcdir<EOL>                },<EOL>                {<EOL>                    test: /\\.(sass|css)$/,<EOL>                    use: ['<STR_LIT>', '<STR_LIT>',  '<STR_LIT>']<EOL>                },<EOL>                {<EOL>                    test: /\\.(svg|woff|woff2|ttf|eot)(\\?.*$|$)/,<EOL>                    use: ['<STR_LIT>']<EOL>                },<EOL>            ]<EOL>        },<EOL>        output: {<EOL>            filename: '<STR_LIT>',<EOL>            path: outdir,<EOL>            publicPath: publicPath<EOL>        },<EOL>        plugins: [<EOL>            new webpack. DefinePlugin({<EOL>                '<STR_LIT>': {<EOL>                    '<STR_LIT>': JSON.stringify('<STR_LIT>')<EOL>                },<EOL>                '<STR_LIT>': JSON.stringify(config.server_config || {}),<EOL>            }),<EOL>            new webpack.optimize.UglifyJsPlugin({<EOL>                compress: {<EOL>                    warnings: false<EOL>                }<EOL>            }),<EOL>            new webpack.LoaderOptionsPlugin({<EOL>                 options: {<EOL>                    tslint: {<EOL>                        emitErrors: true,<EOL>                        failOnHint: true<EOL>                    },<EOL>","gt":"css: {"}
{"input":"<s> export function test_IntegrationTest_Transform_Decoration_Spacing_WithoutFormattedText_DoesNotCrash() {<EOL>    let view = new buttonModule.Button();<EOL>    helper.buildUIAndRunTest(view, function (views) {<EOL>","gt":"view.text = \"<STR_LIT>\";"}
{"input":"<s> export function registerContextItem(name, callback) {<EOL>    contextItems.set(name,","gt":"callback);"}
{"input":"<s> export function updateTriggeredFlag(scroll, scrollState, triggered, isScrollingDown) {<EOL>    if (isScrollingDown) {<EOL>        scrollState.","gt":"triggered.down = scroll;"}
{"input":"<s> export function user(state = initialUserState, action) {<EOL>    switch (action.type) {<EOL>        case UserProfileActions.ADD_PLAYLISTS:<EOL>            return { ...state, playlists: [...state.playlists, ...action.payload] };<EOL>        case UserProfileActions.UPDATE_TOKEN:<EOL>            return { ...state, access_token: action.payload, playlists: [] };<EOL>        case UserProfileActions.","gt":"USER_SIGNOUT_SUCCESS:"}
{"input":"<s> export function user(state = initialUserState, action) {<EOL>    switch (action.type) {<EOL>        case UserProfileActions.ADD_PLAYLISTS:<EOL>            return { ...state, playlists: [...state.playlists, ...action.payload] };<EOL>        case UserProfileActions.UPDATE_TOKEN:<EOL>            return { ...state, access_token: action.payload, playlists: [] };<EOL>        case UserProfileActions. USER_SIGNOUT_SUCCESS:<EOL>            return { ...initialUserState };<EOL>        case UserProfileActions.UPDATE:<EOL>            return { ...state, data: action.payload };<EOL>        case","gt":"UserProfileActions.UPDATE_NEXT_PAGE_TOKEN:"}
{"input":"<s> export function user(state = initialUserState, action) {<EOL>    switch (action.type) {<EOL>        case UserProfileActions.ADD_PLAYLISTS:<EOL>            return { ...state, playlists: [...state.playlists, ...action.payload] };<EOL>        case UserProfileActions.UPDATE_TOKEN:<EOL>            return { ...state, access_token: action.payload, playlists: [] };<EOL>        case UserProfileActions. USER_SIGNOUT_SUCCESS:<EOL>            return { ...initialUserState };<EOL>        case UserProfileActions.UPDATE:<EOL>            return { ...state, data: action.payload };<EOL>        case  UserProfileActions.UPDATE_NEXT_PAGE_TOKEN:<EOL>            return { ...state, nextPageToken: action.payload };<EOL>        case UserProfileActions.UPDATE_USER_PROFILE:<EOL>            return { ...state, profile: action.payload };<EOL>        case","gt":"UserProfileActions.VIEWED_PLAYLIST:"}
{"input":"<s> function fileCoverageWithLowerCaseWindowsDriveLetter(fileCoverage) {<EOL>    const newFilePath = withLowerCaseWindowsDriveLetter(fileCoverage.path);<EOL>    if (newFilePath) {<EOL>","gt":"return {"}
{"input":"<s> export function shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {<EOL>    return (","gt":"alwaysCallback || shouldFireScrollEvent) && !isTriggeredCurrentTotal;"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>","gt":"method: '<STR_LIT>',"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>         method: '<STR_LIT>',<EOL>        id: '<STR_LIT>',<EOL>        type: '<STR_LIT>',<EOL>","gt":"data: null"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>         method: '<STR_LIT>',<EOL>        id: '<STR_LIT>',<EOL>        type: '<STR_LIT>',<EOL>         data: null<EOL>    };<EOL>    let state = BEGIN_STATE;<EOL>    let i = -<NUM_LIT>;<EOL>","gt":"while (++i < length) {"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>         method: '<STR_LIT>',<EOL>        id: '<STR_LIT>',<EOL>        type: '<STR_LIT>',<EOL>         data: null<EOL>    };<EOL>    let state = BEGIN_STATE;<EOL>    let i = -<NUM_LIT>;<EOL>     while (++i < length) {<EOL>        const substr = str[i];<EOL>        const pos = tokens.indexOf(substr);<EOL>","gt":"switch (pos) {"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>         method: '<STR_LIT>',<EOL>        id: '<STR_LIT>',<EOL>        type: '<STR_LIT>',<EOL>         data: null<EOL>    };<EOL>    let state = BEGIN_STATE;<EOL>    let i = -<NUM_LIT>;<EOL>     while (++i < length) {<EOL>        const substr = str[i];<EOL>        const pos = tokens.indexOf(substr);<EOL>         switch (pos) {<EOL>            case -<NUM_LIT>:<EOL>                readToken(result, substr, state);<EOL>                break;<EOL>","gt":"case <NUM_LIT>:"}
{"input":"<s> function parser(str) {<EOL>    const length = str.length;<EOL>    const result = {<EOL>         method: '<STR_LIT>',<EOL>        id: '<STR_LIT>',<EOL>        type: '<STR_LIT>',<EOL>         data: null<EOL>    };<EOL>    let state = BEGIN_STATE;<EOL>    let i = -<NUM_LIT>;<EOL>     while (++i < length) {<EOL>        const substr = str[i];<EOL>        const pos = tokens.indexOf(substr);<EOL>         switch (pos) {<EOL>            case -<NUM_LIT>:<EOL>                readToken(result, substr, state);<EOL>                break;<EOL>             case <NUM_LIT>:<EOL>                if (state === BEGIN_STATE) {<EOL>                    state = METHOD_STATE;<EOL>                }<EOL>                else if (state === METHOD_STATE) {<EOL>                    state =","gt":"TYPE_STATE;"}
{"input":"<s> function f1(x, y, z) {<EOL>    x = x;<EOL>    x = y; // Error<EOL>    x =","gt":"z;"}
{"input":"<s> function GetWindowsWSLLaunchJSONWithArrayArgsAndDebuggerCommand() {<EOL>    return {<EOL>","gt":"pipeCwd: \"<STR_LIT>\","}
{"input":"<s> <EOL>function isStringQuote(ch) {<EOL>    switch (ch) {<EOL>        case \"<STR_LIT>\":<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export function pagination(count, page) {<EOL>    return {<EOL>        limit:","gt":"count,"}
{"input":"<s> export function chain(event) {<EOL>    return","gt":"new ChainableEvent(event);"}
{"input":"<s> export function createPackageJSONFileService() {<EOL>    return {<EOL>        readPackageFile: async (filePath) => {<EOL>            const contents = await readFileContents(filePath);<EOL>            return JSON.parse(contents);<EOL>        },<EOL>        writePackageFile: async (filePath, fileContent) => {<EOL>            const contents = await readFileContents(filePath);<EOL>            const { indent } = detectIndent(contents);<EOL>","gt":"const trailingNewline = contents.length"}
{"input":"<s> export function createPackageJSONFileService() {<EOL>    return {<EOL>        readPackageFile: async (filePath) => {<EOL>            const contents = await readFileContents(filePath);<EOL>            return JSON.parse(contents);<EOL>        },<EOL>        writePackageFile: async (filePath, fileContent) => {<EOL>            const contents = await readFileContents(filePath);<EOL>            const { indent } = detectIndent(contents);<EOL>             const trailingNewline = contents.length<EOL>                ? contents[contents.length - <NUM_LIT>] === '<STR_LIT>'<EOL>                : false;<EOL>            const data = JSON.stringify(","gt":"fileContent, null, indent  || '<STR_LIT>');"}
{"input":"<s> export function failedSuiteCount(diagnostics) {<EOL>","gt":"let sum = <NUM_LIT>;"}
{"input":"<s> export default function initialize() {<EOL>","gt":"return shell(`<STR_LIT>`"}
{"input":"<s> export default function initialize() {<EOL>","gt":"return shell(`<STR_LIT>`"}
{"input":"<s> function testFunc(notDisposer) {<EOL>    return {<EOL>","gt":"destroy() {"}
{"input":"<s> function zoomIn() {<EOL>","gt":"getZoomLevel(level => setZoomLevel(level + ZOOM_LEVEL_STEP));"}
{"input":"<s> function explicitStructural(x) {<EOL>    return x +","gt":"this.y;"}
{"input":"<s> function f20(component) {<EOL>    let name = component.getProperty(\"<STR_LIT>\"); // string<EOL>","gt":"let widthOrHeight = component.getProperty(cond ? \"<STR_LIT>\" : \"<STR_LIT>\");"}
{"input":"<s> export function getAllProjectPosts(_projectId, query) {<EOL>    const queryPair = normPagingQuery(query);<EOL>    const urlQuery = queryPair.forUrl;<EOL>    const { skip, limit } = queryPair.forSql;<EOL>    const selectStmt =","gt":"{"}
{"input":"<s> export function getAllProjectPosts(_projectId, query) {<EOL>    const queryPair = normPagingQuery(query);<EOL>    const urlQuery = queryPair.forUrl;<EOL>    const { skip, limit } = queryPair.forSql;<EOL>    const selectStmt =  {<EOL>        where: {<EOL>            _projectId,<EOL>","gt":"isArchived: false,"}
{"input":"<s> export function getAllProjectPosts(_projectId, query) {<EOL>    const queryPair = normPagingQuery(query);<EOL>    const urlQuery = queryPair.forUrl;<EOL>    const { skip, limit } = queryPair.forSql;<EOL>    const selectStmt =  {<EOL>        where: {<EOL>            _projectId,<EOL>             isArchived: false,<EOL>        },<EOL>        skip,<EOL>        limit,<EOL>        ...(query && query.orderBy ? { orderBy: query.orderBy } : {})<EOL>    };<EOL>    return this.lift({<EOL>        request: this.fetch.getPosts(_projectId, urlQuery),<EOL>        query: selectStmt,<EOL>        tableName:","gt":"'<STR_LIT>',"}
{"input":"<s> export function navigatingTo(args) {<EOL>    console.log(","gt":"\"<STR_LIT>\");"}
{"input":"<s> function convertDOMStringListToArray(list) {<EOL>    var length = list.length;<EOL>","gt":"var array = [];"}
{"input":"<s> export function spawnRipgrepCmd(config, folderQuery, includePattern, excludePattern) {<EOL>    const rgArgs = getRgArgs(config, folderQuery, includePattern, excludePattern);<EOL>    const cwd = folderQuery.folder;<EOL>","gt":"return {"}
{"input":"<s> export function counterReducer(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case CounterActions.INCREMENT_COUNTER:<EOL>            return state + <NUM_LIT>;<EOL>","gt":"case CounterActions.DECREMENT_COUNTER:"}
{"input":"<s> export function counterReducer(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case CounterActions.INCREMENT_COUNTER:<EOL>            return state + <NUM_LIT>;<EOL>         case CounterActions.DECREMENT_COUNTER:<EOL>            return state - <NUM_LIT>;<EOL>        case CounterActions.RESET_COUNTER:<EOL>            return <NUM_LIT>;<EOL>","gt":"default:"}
{"input":"<s> export function test_children_registered_in_parent_grid_layout_on_attach() {<EOL>    const outer = new GridLayout();<EOL>    const proxy = new ProxyViewContainer();<EOL>","gt":"function testAction(views) {"}
{"input":"<s> export function pageNavigatingFrom(args) {<EOL>","gt":"var page = args.object;"}
{"input":"<s> export function viewUtilLog(msg) {<EOL>","gt":"write(msg, viewUtilCategory);"}
{"input":"<s> function truncateStringReverse(str, maxLength = <NUM_LIT>) {<EOL>    const reversedString = toArray(str).reverse().","gt":"join('<STR_LIT>');"}
{"input":"<s> // Object and array destructuring makes it easier to return multiple pieces of data back to the user too!<EOL>function lookup(name) {<EOL>    const","gt":"username = '<STR_LIT>';"}
{"input":"<s> export function getNativeFontSize(textField) {<EOL>    return","gt":"textField.ios.font.pointSize;"}
{"input":"<s> function markAllAsRead() {<EOL>    let readArticles = loadReadArticles();<EOL>    viewModel.news.","gt":"filter(n => n && n.id).forEach(n => readArticles[n.id] = true);"}
{"input":"<s> export default function registerCommands(server, reporter, channel) {<EOL>    let d1 = vscode.commands.registerCommand('<STR_LIT>', () => restartOmniSharp(server));<EOL>    let d2 = vscode.commands.registerCommand('<STR_LIT>', () => pickProjectAndStart(server));<EOL>    let d3 = vscode.commands.registerCommand('<STR_LIT>', () => server.getChannel().show(vscode.ViewColumn.Three));<EOL>    let d4 = vscode.commands.registerCommand('<STR_LIT>', () => dotnetRestoreAllProjects(server));<EOL>    // register empty handler for csharp.installDebugger<EOL>    // running the command activates the extension, which is all we need for installation to kickoff<EOL>    let d5 = vscode.commands.registerCommand('<STR_LIT>', () => { });<EOL>    // register process picker for attach<EOL>    let attachItemsProvider = DotNetAttachItemsProviderFactory.Get();<EOL>    let attacher = new AttachPicker(attachItemsProvider);<EOL>    let d6 =","gt":"vscode.commands.registerCommand('<STR_LIT>', () => attacher.ShowAttachEntries());"}
{"input":"<s> export default function registerCommands(server, reporter, channel) {<EOL>    let d1 = vscode.commands.registerCommand('<STR_LIT>', () => restartOmniSharp(server));<EOL>    let d2 = vscode.commands.registerCommand('<STR_LIT>', () => pickProjectAndStart(server));<EOL>    let d3 = vscode.commands.registerCommand('<STR_LIT>', () => server.getChannel().show(vscode.ViewColumn.Three));<EOL>    let d4 = vscode.commands.registerCommand('<STR_LIT>', () => dotnetRestoreAllProjects(server));<EOL>    // register empty handler for csharp.installDebugger<EOL>    // running the command activates the extension, which is all we need for installation to kickoff<EOL>    let d5 = vscode.commands.registerCommand('<STR_LIT>', () => { });<EOL>    // register process picker for attach<EOL>    let attachItemsProvider = DotNetAttachItemsProviderFactory.Get();<EOL>    let attacher = new AttachPicker(attachItemsProvider);<EOL>    let d6 =  vscode.commands.registerCommand('<STR_LIT>', () => attacher.ShowAttachEntries());<EOL>    // Register command for generating tasks.json and launch.json assets.<EOL>    let d7 = vscode.commands.registerCommand('<STR_LIT>', () => generateAssets(server));<EOL>    // Register command for remote process picker for attach<EOL>    let d8 = vscode.commands.registerCommand('<STR_LIT>', (","gt":"args) => RemoteAttachPicker.ShowAttachEntries(args));"}
{"input":"<s> function getInstallFilePath(type) {<EOL>","gt":"let installFile = '<STR_LIT>' + InstallFileType[type];"}
{"input":"<s> export function createPage() {<EOL>    return new","gt":"TestPageModule();"}
{"input":"<s> export function repeaterItemTap(args) {<EOL>    var","gt":"item = args.view.bindingContext;"}
{"input":"<s> export function collect(wait, fn) {<EOL>    var timeout;<EOL>    var later = function () {<EOL>        timeout = null;<EOL>","gt":"fn();"}
{"input":"<s> export function collect(wait, fn) {<EOL>    var timeout;<EOL>    var later = function () {<EOL>        timeout = null;<EOL>         fn();<EOL>    };<EOL>    return function () {<EOL>        if (!timeout) {<EOL>            timeout =","gt":"setTimeout(later, wait);"}
{"input":"<s> function days(count) {<EOL>    return count *","gt":"day.canonicalLength;"}
{"input":"<s> // calendar utils<EOL>export function monthToWeeks(firstDayOfMonth, timezone, locale) {<EOL>    const weeks = [];<EOL>    const firstDayNextMonth = month.shift(firstDayOfMonth, timezone, <NUM_LIT>);<EOL>    let week = [];<EOL>    let currentPointer = day.floor(firstDayOfMonth, timezone);<EOL>    while (currentPointer < firstDayNextMonth) {<EOL>        var","gt":"wallTime = WallTime.UTCToWallTime(currentPointer, timezone.toString());"}
{"input":"<s> function checkFixture(id) {<EOL>    const","gt":"filePath = path.resolve(__dirname, `<STR_LIT>`);"}
{"input":"<s> // << actionbar-common-require<EOL>export function test_actionItem_inherit_bindingContext() {<EOL>    let page;<EOL>    let label;<EOL>    const context = { text: \"<STR_LIT>\" };<EOL>    const pageFactory = function () {<EOL>        page = new Page();<EOL>        page.bindingContext =","gt":"context;"}
{"input":"<s> // << actionbar-common-require<EOL>export function test_actionItem_inherit_bindingContext() {<EOL>    let page;<EOL>    let label;<EOL>    const context = { text: \"<STR_LIT>\" };<EOL>    const pageFactory = function () {<EOL>        page = new Page();<EOL>        page.bindingContext =  context;<EOL>        const actionItem = new actionBarModule.ActionItem();<EOL>        actionItem.bind({<EOL>            sourceProperty: \"<STR_LIT>\",<EOL>            targetProperty: \"<STR_LIT>\"<EOL>        });<EOL>        page.actionBar.actionItems.addItem(actionItem);<EOL>        label = new Label();<EOL>        label.text = \"<STR_LIT>\";<EOL>        page.","gt":"content = label;"}
{"input":"<s> function process(sourceText, sourcePath) {<EOL>    return","gt":"JSON.stringify(sourcePath)};"}
{"input":"<s> export function pageLoaded(args) {<EOL>    var strArr = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>","gt":"var numArr = [-<NUM_LIT>, <NUM_LIT>, <NUM_LIT>];"}
{"input":"<s> export async function activate(context) {<EOL>    const extensionId = '<STR_LIT>';<EOL>    const extension = vscode.extensions.getExtension(extensionId);<EOL>    const extensionVersion = extension.packageJSON.version;<EOL>    const aiKey = extension.packageJSON.contributes.debuggers[<NUM_LIT>].aiKey;<EOL>    const reporter = new TelemetryReporter(extensionId, extensionVersion,","gt":"aiKey);"}
{"input":"<s> export async function activate(context) {<EOL>    const extensionId = '<STR_LIT>';<EOL>    const extension = vscode.extensions.getExtension(extensionId);<EOL>    const extensionVersion = extension.packageJSON.version;<EOL>    const aiKey = extension.packageJSON.contributes.debuggers[<NUM_LIT>].aiKey;<EOL>    const reporter = new TelemetryReporter(extensionId, extensionVersion,  aiKey);<EOL>    util.setExtensionPath(extension.extensionPath);<EOL>    _channel = vscode.window.createOutputChannel('<STR_LIT>');<EOL>","gt":"let logger = new Logger(text => _channel.append(text));"}
{"input":"<s> export async function activate(context) {<EOL>    const extensionId = '<STR_LIT>';<EOL>    const extension = vscode.extensions.getExtension(extensionId);<EOL>    const extensionVersion = extension.packageJSON.version;<EOL>    const aiKey = extension.packageJSON.contributes.debuggers[<NUM_LIT>].aiKey;<EOL>    const reporter = new TelemetryReporter(extensionId, extensionVersion,  aiKey);<EOL>    util.setExtensionPath(extension.extensionPath);<EOL>    _channel = vscode.window.createOutputChannel('<STR_LIT>');<EOL>     let logger = new Logger(text => _channel.append(text));<EOL>    let runtimeDependenciesExist = await ensureRuntimeDependencies(extension, logger, reporter);<EOL>    // activate language services<EOL>    let omniSharpPromise = OmniSharp.activate(","gt":"context, reporter, _channel, logger, extension.packageJSON);"}
{"input":"<s> export async function activate(context) {<EOL>    const extensionId = '<STR_LIT>';<EOL>    const extension = vscode.extensions.getExtension(extensionId);<EOL>    const extensionVersion = extension.packageJSON.version;<EOL>    const aiKey = extension.packageJSON.contributes.debuggers[<NUM_LIT>].aiKey;<EOL>    const reporter = new TelemetryReporter(extensionId, extensionVersion,  aiKey);<EOL>    util.setExtensionPath(extension.extensionPath);<EOL>    _channel = vscode.window.createOutputChannel('<STR_LIT>');<EOL>     let logger = new Logger(text => _channel.append(text));<EOL>    let runtimeDependenciesExist = await ensureRuntimeDependencies(extension, logger, reporter);<EOL>    // activate language services<EOL>    let omniSharpPromise = OmniSharp.activate( context, reporter, _channel, logger, extension.packageJSON);<EOL>    // register JSON completion & hover providers for project.json<EOL>    context.subscriptions.push(addJSONProviders());<EOL>","gt":"let coreClrDebugPromise = Promise.resolve();"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =","gt":"server.onServerError(err => {"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =  server.onServerError(err => {<EOL>        appendLine('<STR_LIT>' + err);<EOL>    });<EOL>    let d1 = server.onError(message => {<EOL>        if (message.FileName) {<EOL>            appendLine(","gt":"message.Column})`<STR_LIT>;"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =  server.onServerError(err => {<EOL>        appendLine('<STR_LIT>' + err);<EOL>    });<EOL>    let d1 = server.onError(message => {<EOL>        if (message.FileName) {<EOL>            appendLine(`<STR_LIT>`);<EOL>        }<EOL>        appendLine(message.Text);<EOL>        appendLine();<EOL>        showMessageSoon();<EOL>    });<EOL>    let d2 = server.onMsBuildProjectDiagnostics(message => {<EOL>        function asErrorMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        function asWarningMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        if (message.Errors.length > <NUM_LIT> || message.Warnings.length > <NUM_LIT>) {<EOL>","gt":"appendLine(message.FileName);"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =  server.onServerError(err => {<EOL>        appendLine('<STR_LIT>' + err);<EOL>    });<EOL>    let d1 = server.onError(message => {<EOL>        if (message.FileName) {<EOL>            appendLine(`<STR_LIT>`);<EOL>        }<EOL>        appendLine(message.Text);<EOL>        appendLine();<EOL>        showMessageSoon();<EOL>    });<EOL>    let d2 = server.onMsBuildProjectDiagnostics(message => {<EOL>        function asErrorMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        function asWarningMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        if (message.Errors.length > <NUM_LIT> || message.Warnings.length > <NUM_LIT>) {<EOL>             appendLine(message.FileName);<EOL>            message.Errors.forEach(error => asErrorMessage);<EOL>            message.Warnings.forEach(warning => asWarningMessage);<EOL>            appendLine();<EOL>            if (message.Errors.length > <NUM_LIT>) {<EOL>                showMessageSoon();<EOL>            }<EOL>        }<EOL>    });<EOL>    let","gt":"d3 = server.onUnresolvedDependencies(message => {"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =  server.onServerError(err => {<EOL>        appendLine('<STR_LIT>' + err);<EOL>    });<EOL>    let d1 = server.onError(message => {<EOL>        if (message.FileName) {<EOL>            appendLine(`<STR_LIT>`);<EOL>        }<EOL>        appendLine(message.Text);<EOL>        appendLine();<EOL>        showMessageSoon();<EOL>    });<EOL>    let d2 = server.onMsBuildProjectDiagnostics(message => {<EOL>        function asErrorMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        function asWarningMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        if (message.Errors.length > <NUM_LIT> || message.Warnings.length > <NUM_LIT>) {<EOL>             appendLine(message.FileName);<EOL>            message.Errors.forEach(error => asErrorMessage);<EOL>            message.Warnings.forEach(warning => asWarningMessage);<EOL>            appendLine();<EOL>            if (message.Errors.length > <NUM_LIT>) {<EOL>                showMessageSoon();<EOL>            }<EOL>        }<EOL>    });<EOL>    let  d3 = server.onUnresolvedDependencies(message => {<EOL>        let csharpConfig = vscode.workspace.getConfiguration('<STR_LIT>');<EOL>        if (!csharpConfig.get('<STR_LIT>')) {<EOL>            let info = `<STR_LIT>`;<EOL>            return vscode.","gt":"window.showInformationMessage(info, '<STR_LIT>').then(value => {"}
{"input":"<s> // ---- server status<EOL>export function reportServerStatus(server) {<EOL>    function appendLine(value = '<STR_LIT>') {<EOL>        server.getChannel().appendLine(value);<EOL>    }<EOL>    let d0 =  server.onServerError(err => {<EOL>        appendLine('<STR_LIT>' + err);<EOL>    });<EOL>    let d1 = server.onError(message => {<EOL>        if (message.FileName) {<EOL>            appendLine(`<STR_LIT>`);<EOL>        }<EOL>        appendLine(message.Text);<EOL>        appendLine();<EOL>        showMessageSoon();<EOL>    });<EOL>    let d2 = server.onMsBuildProjectDiagnostics(message => {<EOL>        function asErrorMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        function asWarningMessage(message) {<EOL>            let value = `<STR_LIT>`;<EOL>            appendLine(value);<EOL>        }<EOL>        if (message.Errors.length > <NUM_LIT> || message.Warnings.length > <NUM_LIT>) {<EOL>             appendLine(message.FileName);<EOL>            message.Errors.forEach(error => asErrorMessage);<EOL>            message.Warnings.forEach(warning => asWarningMessage);<EOL>            appendLine();<EOL>            if (message.Errors.length > <NUM_LIT>) {<EOL>                showMessageSoon();<EOL>            }<EOL>        }<EOL>    });<EOL>    let  d3 = server.onUnresolvedDependencies(message => {<EOL>        let csharpConfig = vscode.workspace.getConfiguration('<STR_LIT>');<EOL>        if (!csharpConfig.get('<STR_LIT>')) {<EOL>            let info = `<STR_LIT>`;<EOL>            return vscode. window.showInformationMessage(info, '<STR_LIT>').then(value => {<EOL>                if (value) {<EOL>                    dotnetRestoreForProject(server,","gt":"message.FileName);"}
{"input":"<s> export function test_actionBar_inherit_bindingContext_inXML() {<EOL>","gt":"const p = builder.parse(\"<STR_LIT>\");"}
{"input":"<s> function flatten(array, result = []) {<EOL>    for (let i = <NUM_LIT>; i < array.length; i++) {<EOL>        if (Array.isArray(array[i])) {<EOL>","gt":"flatten(array[i], result);"}
{"input":"<s> function defaultWorkspacePath(contextService, historyService, environmentService) {<EOL>    // Check for current workspace config file first...<EOL>    if (contextService.getWorkbenchState() === WorkbenchState.","gt":"WORKSPACE && !isUntitledWorkspace(contextService.getWorkspace().configuration.fsPath, environmentService)) {"}
{"input":"<s> function getFontFamilyRespectingGenericFonts(fontFamily) {<EOL>    if (!fontFamily) {<EOL>        return fontFamily;<EOL>    }<EOL>    switch (fontFamily.","gt":"toLowerCase()) {"}
{"input":"<s> function getFontFamilyRespectingGenericFonts(fontFamily) {<EOL>    if (!fontFamily) {<EOL>        return fontFamily;<EOL>    }<EOL>    switch (fontFamily. toLowerCase()) {<EOL>        case genericFontFamilies.serif:<EOL>            return DEFAULT_SERIF;<EOL>        case genericFontFamilies.monospace:<EOL>            return DEFAULT_MONOSPACE;<EOL>","gt":"default:"}
{"input":"<s> export function navigate(args) {<EOL>","gt":"frame.topmost().navigate(\"<STR_LIT>\");"}
{"input":"<s> export function test_removeWeakEventListener_StopsListeningForEvent() {<EOL>    const source = new Observable();<EOL>    const target = new","gt":"Target();"}
{"input":"<s> export function isDotNetCoreProject(project) {<EOL>    return","gt":"findNetCoreAppTargetFramework(project) !== undefined ||"}
{"input":"<s> function pluck(array, key) {<EOL>    return array.","gt":"map(x => x[key]);"}
{"input":"<s> export function test_setting_backgroundRepeat_property_from_CSS_is_applied_to_Style() {<EOL>","gt":"test_property_from_CSS_is_applied_to_style(\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> function getTextView(bar) {<EOL>    if (bar) {<EOL>        const pkgName = bar.getContext().getPackageName();<EOL>        var","gt":"id = bar.getContext().getResources().getIdentifier(\"<STR_LIT>\", \"<STR_LIT>\", pkgName);"}
{"input":"<s> export function listen(element, event, selector, callback) {<EOL>    const bound = (evt) => {<EOL>        const sel = evt.target.closest(selector);<EOL>        if (sel && element.contains(sel)) {<EOL>            callback(","gt":"evt);"}
{"input":"<s> export function listen(element, event, selector, callback) {<EOL>    const bound = (evt) => {<EOL>        const sel = evt.target.closest(selector);<EOL>        if (sel && element.contains(sel)) {<EOL>            callback( evt);<EOL>        }<EOL>    };<EOL>    element.addEventListener(event, bound);<EOL>    return new","gt":"Disposable(() => {"}
{"input":"<s> function makeGuard(guard) {<EOL>    return (req, res, next) => {<EOL>        const user = req.user;<EOL>        if (!user) {<EOL>            next(new Error('<STR_LIT>'));<EOL>            return;<EOL>        }<EOL>        const { allow } = user;<EOL>        if (!allow) {<EOL>            next(new Error('<STR_LIT>'));<EOL>","gt":"return;"}
{"input":"<s> function makeGuard(guard) {<EOL>    return (req, res, next) => {<EOL>        const user = req.user;<EOL>        if (!user) {<EOL>            next(new Error('<STR_LIT>'));<EOL>            return;<EOL>        }<EOL>        const { allow } = user;<EOL>        if (!allow) {<EOL>            next(new Error('<STR_LIT>'));<EOL>             return;<EOL>        }<EOL>        if (!allow[guard]) {<EOL>            next(new","gt":"Error('<STR_LIT>'));"}
{"input":"<s> function log10(n) {<EOL>    return","gt":"Math.log(n) * Math.LOG10E;"}
{"input":"<s> <EOL>export function findNodeAt(startLine, endLine, node) {<EOL>    if (!node.childItems) {<EOL>        return null;<EOL>    }<EOL>    for (const elem of node.childItems) {<EOL>        const start = getNodeStartLine(elem);<EOL>        const","gt":"end = getNodeEndLine(elem);"}
{"input":"<s> <EOL>export function findNodeAt(startLine, endLine, node) {<EOL>    if (!node.childItems) {<EOL>        return null;<EOL>    }<EOL>    for (const elem of node.childItems) {<EOL>        const start = getNodeStartLine(elem);<EOL>        const  end = getNodeEndLine(elem);<EOL>        if (isFinite(start) && isFinite(end)) {<EOL>            if (startLine >= start && endLine <= end) {<EOL>                const selected = findNodeAt(startLine, endLine, elem);<EOL>                if (","gt":"selected) {"}
{"input":"<s> <EOL>export function findNodeAt(startLine, endLine, node) {<EOL>    if (!node.childItems) {<EOL>        return null;<EOL>    }<EOL>    for (const elem of node.childItems) {<EOL>        const start = getNodeStartLine(elem);<EOL>        const  end = getNodeEndLine(elem);<EOL>        if (isFinite(start) && isFinite(end)) {<EOL>            if (startLine >= start && endLine <= end) {<EOL>                const selected = findNodeAt(startLine, endLine, elem);<EOL>                if ( selected) {<EOL>                    return selected;<EOL>                }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function findNodeAt(startLine, endLine, node) {<EOL>    if (!node.childItems) {<EOL>        return null;<EOL>    }<EOL>    for (const elem of node.childItems) {<EOL>        const start = getNodeStartLine(elem);<EOL>        const  end = getNodeEndLine(elem);<EOL>        if (isFinite(start) && isFinite(end)) {<EOL>            if (startLine >= start && endLine <= end) {<EOL>                const selected = findNodeAt(startLine, endLine, elem);<EOL>                if ( selected) {<EOL>                    return selected;<EOL>                }<EOL>                 else {<EOL>                    return elem;<EOL>                }<EOL>            }<EOL>            else","gt":"if (isFinite(end) && endLine < end) {"}
{"input":"<s> <EOL>export function findNodeAt(startLine, endLine, node) {<EOL>    if (!node.childItems) {<EOL>        return null;<EOL>    }<EOL>    for (const elem of node.childItems) {<EOL>        const start = getNodeStartLine(elem);<EOL>        const  end = getNodeEndLine(elem);<EOL>        if (isFinite(start) && isFinite(end)) {<EOL>            if (startLine >= start && endLine <= end) {<EOL>                const selected = findNodeAt(startLine, endLine, elem);<EOL>                if ( selected) {<EOL>                    return selected;<EOL>                }<EOL>                 else {<EOL>                    return elem;<EOL>                }<EOL>            }<EOL>            else  if (isFinite(end) && endLine < end) {<EOL>                break;<EOL>            }<EOL>        }<EOL>        const selectedChild = findNodeAt(startLine, endLine, elem);<EOL>        if (selectedChild) {<EOL>            return","gt":"selectedChild;"}
{"input":"<s> function setNativeValue(mySwitch, value) {<EOL>    if (platform.isAndroid) {<EOL>        const nativeView = mySwitch.nativeViewProtected;<EOL>        nativeView.setChecked(","gt":"value);"}
{"input":"<s> function wallTimeHelper(wallTime) {<EOL>    return","gt":"wallTime['<STR_LIT>'];"}
{"input":"<s> function cleanISOString(input) {<EOL>    return input.replace(/(\\.\\d\\d\\d)?Z?$/,","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function isNotificationMessage(message) {<EOL>    let","gt":"candidate = message;"}
{"input":"<s> function calculateNodeStyling(node, useCache = false) {<EOL>    const nodeRef = (node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>'));<EOL>    if (useCache && computedStyleCache[nodeRef]) {<EOL>        return","gt":"computedStyleCache[nodeRef];"}
{"input":"<s> function calculateNodeStyling(node, useCache = false) {<EOL>    const nodeRef = (node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>'));<EOL>    if (useCache && computedStyleCache[nodeRef]) {<EOL>        return  computedStyleCache[nodeRef];<EOL>    }<EOL>    const style = window.getComputedStyle(node);<EOL>    const boxSizing = (style.getPropertyValue('<STR_LIT>') ||<EOL>","gt":"style.getPropertyValue('<STR_LIT>') ||"}
{"input":"<s> function calculateNodeStyling(node, useCache = false) {<EOL>    const nodeRef = (node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>'));<EOL>    if (useCache && computedStyleCache[nodeRef]) {<EOL>        return  computedStyleCache[nodeRef];<EOL>    }<EOL>    const style = window.getComputedStyle(node);<EOL>    const boxSizing = (style.getPropertyValue('<STR_LIT>') ||<EOL>         style.getPropertyValue('<STR_LIT>') ||<EOL>        style.getPropertyValue('<STR_LIT>'));<EOL>    const paddingSize = (parseFloat(style.getPropertyValue('<STR_LIT>')) +<EOL>        parseFloat(","gt":"style.getPropertyValue('<STR_LIT>')));"}
{"input":"<s> function calculateNodeStyling(node, useCache = false) {<EOL>    const nodeRef = (node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>'));<EOL>    if (useCache && computedStyleCache[nodeRef]) {<EOL>        return  computedStyleCache[nodeRef];<EOL>    }<EOL>    const style = window.getComputedStyle(node);<EOL>    const boxSizing = (style.getPropertyValue('<STR_LIT>') ||<EOL>         style.getPropertyValue('<STR_LIT>') ||<EOL>        style.getPropertyValue('<STR_LIT>'));<EOL>    const paddingSize = (parseFloat(style.getPropertyValue('<STR_LIT>')) +<EOL>        parseFloat( style.getPropertyValue('<STR_LIT>')));<EOL>    const borderSize = (parseFloat(style.getPropertyValue('<STR_LIT>')) +<EOL>        parseFloat(style.getPropertyValue('<STR_LIT>')));<EOL>","gt":"const sizingStyle = SIZING_STYLE"}
{"input":"<s> function calculateNodeStyling(node, useCache = false) {<EOL>    const nodeRef = (node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>') ||<EOL>        node.getAttribute('<STR_LIT>'));<EOL>    if (useCache && computedStyleCache[nodeRef]) {<EOL>        return  computedStyleCache[nodeRef];<EOL>    }<EOL>    const style = window.getComputedStyle(node);<EOL>    const boxSizing = (style.getPropertyValue('<STR_LIT>') ||<EOL>         style.getPropertyValue('<STR_LIT>') ||<EOL>        style.getPropertyValue('<STR_LIT>'));<EOL>    const paddingSize = (parseFloat(style.getPropertyValue('<STR_LIT>')) +<EOL>        parseFloat( style.getPropertyValue('<STR_LIT>')));<EOL>    const borderSize = (parseFloat(style.getPropertyValue('<STR_LIT>')) +<EOL>        parseFloat(style.getPropertyValue('<STR_LIT>')));<EOL>     const sizingStyle = SIZING_STYLE<EOL>        .map(name => `<STR_LIT>`)<EOL>        .join('<STR_LIT>');<EOL>    const nodeInfo = {<EOL>        sizingStyle,<EOL>","gt":"paddingSize,"}
{"input":"<s> export function NZ_LOCALE_SERVICE_PROVIDER_FACTORY(exist, locale, logger) {<EOL>    return exist || new NzLocaleService(","gt":"locale, logger);"}
{"input":"<s> // Return line/offset position in the editor using 1-indexed coordinates<EOL>function getEditorPosition(editor) {<EOL>    const pos = editor.getCursorBufferPosition();<EOL>","gt":"return {"}
{"input":"<s> <EOL>function getCompilerDigest(obj) {<EOL>    return crypto.createHash('<STR_LIT>').update(JSON.stringify(obj), '<STR_LIT>').digest(","gt":"'<STR_LIT>');"}
{"input":"<s> export function hasMono(range) {<EOL>    const versionRegexp = /(\\d+\\.\\d+\\.\\d+)/;<EOL>    return new Promise((resolve, reject) => {<EOL>        let","gt":"childprocess;"}
{"input":"<s> export function hasMono(range) {<EOL>    const versionRegexp = /(\\d+\\.\\d+\\.\\d+)/;<EOL>    return new Promise((resolve, reject) => {<EOL>        let  childprocess;<EOL>        try {<EOL>            childprocess = spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>        }<EOL>        catch (e) {<EOL>            return resolve(false);<EOL>        }<EOL>        childprocess.on('<STR_LIT>', function (","gt":"err) {"}
{"input":"<s> export function hasMono(range) {<EOL>    const versionRegexp = /(\\d+\\.\\d+\\.\\d+)/;<EOL>    return new Promise((resolve, reject) => {<EOL>        let  childprocess;<EOL>        try {<EOL>            childprocess = spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>        }<EOL>        catch (e) {<EOL>            return resolve(false);<EOL>        }<EOL>        childprocess.on('<STR_LIT>', function ( err) {<EOL>            resolve(false);<EOL>        });<EOL>        let stdout =","gt":"'<STR_LIT>';"}
{"input":"<s> export function hasMono(range) {<EOL>    const versionRegexp = /(\\d+\\.\\d+\\.\\d+)/;<EOL>    return new Promise((resolve, reject) => {<EOL>        let  childprocess;<EOL>        try {<EOL>            childprocess = spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>        }<EOL>        catch (e) {<EOL>            return resolve(false);<EOL>        }<EOL>        childprocess.on('<STR_LIT>', function ( err) {<EOL>            resolve(false);<EOL>        });<EOL>        let stdout =  '<STR_LIT>';<EOL>        childprocess.stdout.on('<STR_LIT>', (data) => {<EOL>            stdout += data.toString();<EOL>        });<EOL>        childprocess.stdout.","gt":"on('<STR_LIT>', () => {"}
{"input":"<s> export function hasMono(range) {<EOL>    const versionRegexp = /(\\d+\\.\\d+\\.\\d+)/;<EOL>    return new Promise((resolve, reject) => {<EOL>        let  childprocess;<EOL>        try {<EOL>            childprocess = spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>        }<EOL>        catch (e) {<EOL>            return resolve(false);<EOL>        }<EOL>        childprocess.on('<STR_LIT>', function ( err) {<EOL>            resolve(false);<EOL>        });<EOL>        let stdout =  '<STR_LIT>';<EOL>        childprocess.stdout.on('<STR_LIT>', (data) => {<EOL>            stdout += data.toString();<EOL>        });<EOL>        childprocess.stdout. on('<STR_LIT>', () => {<EOL>            let match = versionRegexp.exec(stdout), ret;<EOL>            if (!match) {<EOL>                ret = false;<EOL>            }<EOL>            else if (!range) {<EOL>","gt":"ret = true;"}
{"input":"<s> export function pointToLocation(point) {<EOL>    return { line: point.row + <NUM_LIT>, offset: point.","gt":"column + <NUM_LIT> };"}
{"input":"<s> export function spanToRange(span) {<EOL>    return locationsToRange(span.start, span.","gt":"end);"}
{"input":"<s> export function updateBucketSize(existing, newInput) {<EOL>    if (newInput instanceof TimeBucketAction) {<EOL>        return new TimeBucketAction({<EOL>            duration: newInput.duration,<EOL>            timezone:","gt":"existing.timezone"}
{"input":"<s> export function updateBucketSize(existing, newInput) {<EOL>    if (newInput instanceof TimeBucketAction) {<EOL>        return new TimeBucketAction({<EOL>            duration: newInput.duration,<EOL>            timezone:  existing.timezone<EOL>        });<EOL>    }<EOL>    else if (newInput instanceof NumberBucketAction) {<EOL>        var value = { size: newInput.size };<EOL>        if (existing.offset)<EOL>","gt":"value.offset = existing.offset;"}
{"input":"<s> export function findSymbols(server, request, token) {<EOL>    return server.makeRequest(protocol.Requests.","gt":"FindSymbols, request, token);"}
{"input":"<s> export function test_set_max_min_value() {<EOL>    const slider = new Slider();<EOL>    slider.maxValue = MAX_TEST_VALUE;<EOL>","gt":"slider.minValue = MIN_TEST_VALUE;"}
{"input":"<s> export function getCurrentPage() {<EOL>    return frame.","gt":"topmost().currentPage;"}
{"input":"<s> export function instantiateRendererFactory(renderer, engine, zone) {<EOL>    return new","gt":"AnimationRendererFactory(renderer, engine, zone);"}
{"input":"<s> export function test_setting_borderWidth_property_from_CSS_is_applied_to_Style() {<EOL>    test_property_from_CSS_is_applied_to_style(\"<STR_LIT>\", \"<STR_LIT>\", <NUM_LIT>,","gt":"\"<STR_LIT>\", true);"}
{"input":"<s> function registerCustomFonts() {<EOL>    const appDir = fs.knownFolders.currentApp().path;<EOL>","gt":"const fontsDir = fs.path.join(appDir, \"<STR_LIT>\");"}
{"input":"<s> export function initChart(highchartsService, userOpts, baseOpts, type) {<EOL>    const Highcharts = highchartsService.getHighchartsStatic();<EOL>    if (!Highcharts) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>","gt":"if (!Highcharts[type]) {"}
{"input":"<s> export function initChart(highchartsService, userOpts, baseOpts, type) {<EOL>    const Highcharts = highchartsService.getHighchartsStatic();<EOL>    if (!Highcharts) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>     if (!Highcharts[type]) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    // Adjust axis type to user one (#56)<EOL>","gt":"if (Array.isArray(userOpts.xAxis)) {"}
{"input":"<s> export function initChart(highchartsService, userOpts, baseOpts, type) {<EOL>    const Highcharts = highchartsService.getHighchartsStatic();<EOL>    if (!Highcharts) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>     if (!Highcharts[type]) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    // Adjust axis type to user one (#56)<EOL>     if (Array.isArray(userOpts.xAxis)) {<EOL>        baseOpts.xAxis = [baseOpts.xAxis];<EOL>    }<EOL>    if (Array.isArray(userOpts.yAxis)) {<EOL>        baseOpts.yAxis = [baseOpts.","gt":"yAxis];"}
{"input":"<s> function addListenerWithSource(source) {<EOL>    const target = new","gt":"Target();"}
{"input":"<s> export function test_setting_borderColorRGBA_property_from_CSS_is_applied_to_Style() {<EOL>","gt":"test_property_from_CSS_is_applied_to_style(\"<STR_LIT>\", \"<STR_LIT>\", new Color(\"<STR_LIT>\"), \"<STR_LIT>\");"}
{"input":"<s> export function goBack() {<EOL>    waitUntilNavigatedFrom(() => frame.topmost().","gt":"goBack());"}
{"input":"<s> function assignKey(to, from, key) {<EOL>    var val = from[key];<EOL>    if (val === undefined || val === null) {<EOL>        return;<EOL>    }<EOL>    if (","gt":"hasOwnProperty.call(to, key)) {"}
{"input":"<s> export function test_ItemTemplateFactoryFunction() {<EOL>    var repeater = new repeaterModule.Repeater();<EOL>    function testAction(views) {<EOL>        repeater.itemTemplate = () => {<EOL>            var label = new Label();<EOL>","gt":"label.id = \"<STR_LIT>\";"}
{"input":"<s> export function test_ItemTemplateFactoryFunction() {<EOL>    var repeater = new repeaterModule.Repeater();<EOL>    function testAction(views) {<EOL>        repeater.itemTemplate = () => {<EOL>            var label = new Label();<EOL>             label.id = \"<STR_LIT>\";<EOL>            label.bind({ sourceProperty: \"<STR_LIT>\", targetProperty: \"<STR_LIT>\", twoWay: false });<EOL>            return label;<EOL>        };<EOL>        repeater.","gt":"items = [<NUM_LIT>, <NUM_LIT>, <NUM_LIT>];"}
{"input":"<s> export function test_ItemTemplateFactoryFunction() {<EOL>    var repeater = new repeaterModule.Repeater();<EOL>    function testAction(views) {<EOL>        repeater.itemTemplate = () => {<EOL>            var label = new Label();<EOL>             label.id = \"<STR_LIT>\";<EOL>            label.bind({ sourceProperty: \"<STR_LIT>\", targetProperty: \"<STR_LIT>\", twoWay: false });<EOL>            return label;<EOL>        };<EOL>        repeater. items = [<NUM_LIT>, <NUM_LIT>, <NUM_LIT>];<EOL>        TKUnit.waitUntilReady(() => repeater.isLayoutValid);<EOL>        TKUnit.assertEqual(getChildAtText(repeater, <NUM_LIT>), \"<STR_LIT>\", \"<STR_LIT>\");<EOL>        TKUnit.assertEqual(getChildAtText(repeater, <NUM_LIT>),","gt":"\"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> function isNumeric(n) {<EOL>    return !isNaN(parseFloat(n)) &&","gt":"isFinite(n);"}
{"input":"<s> export function test_correct_layout_top_bottom_edges_does_not_span_scrollable_flat() {<EOL>    test_correct_layout_top_bottom_edges_does_not_span_options(","gt":"true, true);"}
{"input":"<s> export function extHostCustomer(ctor) {<EOL>    ExtHostCustomersRegistryImpl.","gt":"INSTANCE.registerCustomer(ctor);"}
{"input":"<s> export function test_setting_textAlignment_property_from_CSS_is_applied_to_Style() {<EOL>","gt":"test_property_from_CSS_is_applied_to_style(\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> export function test_MoreThanOneBindables_BindToASameSourceAndProperty() {<EOL>    const model = new Observable();<EOL>    const bindingOptions = {<EOL>        sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty:","gt":"\"<STR_LIT>\""}
{"input":"<s> export function test_MoreThanOneBindables_BindToASameSourceAndProperty() {<EOL>    const model = new Observable();<EOL>    const bindingOptions = {<EOL>        sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty:  \"<STR_LIT>\"<EOL>    };<EOL>    const obj1 = new Label();<EOL>    obj1.bind(bindingOptions, model);<EOL>    const obj2 = new Label();<EOL>    obj2.bind(bindingOptions, model);<EOL>","gt":"model.set(\"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> export function test_property_changed_event_when_setting_maxValue_no_adjust() {<EOL>    const slider = new Slider();<EOL>    slider.maxValue = <NUM_LIT>;<EOL>    slider.value = <NUM_LIT>;<EOL>    slider.minValue =","gt":"<NUM_LIT>;"}
{"input":"<s> export function test_property_changed_event_when_setting_maxValue_no_adjust() {<EOL>    const slider = new Slider();<EOL>    slider.maxValue = <NUM_LIT>;<EOL>    slider.value = <NUM_LIT>;<EOL>    slider.minValue =  <NUM_LIT>;<EOL>    function testAction(views) {<EOL>        const changedProperties = {};<EOL>","gt":"let allChanges = <NUM_LIT>;"}
{"input":"<s> export function test_property_changed_event_when_setting_maxValue_no_adjust() {<EOL>    const slider = new Slider();<EOL>    slider.maxValue = <NUM_LIT>;<EOL>    slider.value = <NUM_LIT>;<EOL>    slider.minValue =  <NUM_LIT>;<EOL>    function testAction(views) {<EOL>        const changedProperties = {};<EOL>         let allChanges = <NUM_LIT>;<EOL>        attachValueChangedEvents(slider, (data) => {<EOL>            allChanges++;<EOL>            changedProperties[data.propertyName] = true;<EOL>        });<EOL>        // Act<EOL>        slider.maxValue = <NUM_LIT>;<EOL>        detachValueChangedEvents(slider);<EOL>        // Assert<EOL>        TKUnit.assert(","gt":"changedProperties[\"<STR_LIT>\"], \"<STR_LIT>\");"}
{"input":"<s> function printTNSInfo() {<EOL>    console.log(\"<STR_LIT>\" + platform.device.model);<EOL>    console.log(\"<STR_LIT>\" + platform.device.os);<EOL>    console.log(\"<STR_LIT>\" + platform.device.osVersion);<EOL>    console.log(\"<STR_LIT>\" + platform.","gt":"device.sdkVersion);"}
{"input":"<s> function printTNSInfo() {<EOL>    console.log(\"<STR_LIT>\" + platform.device.model);<EOL>    console.log(\"<STR_LIT>\" + platform.device.os);<EOL>    console.log(\"<STR_LIT>\" + platform.device.osVersion);<EOL>    console.log(\"<STR_LIT>\" + platform. device.sdkVersion);<EOL>    console.log(\"<STR_LIT>\" + platform.device.deviceType);<EOL>    console.log(\"<STR_LIT>\" + platform.screen.mainScreen.widthDIPs);<EOL>    console.log(\"<STR_LIT>\" + platform.screen.mainScreen.heightDIPs);<EOL>    console.log(\"<STR_LIT>\" + platform.screen.mainScreen.","gt":"scale);"}
{"input":"<s> function createNewCacheSnapshot(cacheContext) {<EOL>    const snapshot = createGraphSnapshot({<EOL>        one: {<EOL>            two: [<EOL>                {<EOL>","gt":"three: {"}
{"input":"<s> function createNewCacheSnapshot(cacheContext) {<EOL>    const snapshot = createGraphSnapshot({<EOL>        one: {<EOL>            two: [<EOL>                {<EOL>                     three: {<EOL>                        id: <NUM_LIT>,<EOL>                        four: { five: <NUM_LIT> },<EOL>","gt":"color: '<STR_LIT>',"}
{"input":"<s> function createNewCacheSnapshot(cacheContext) {<EOL>    const snapshot = createGraphSnapshot({<EOL>        one: {<EOL>            two: [<EOL>                {<EOL>                     three: {<EOL>                        id: <NUM_LIT>,<EOL>                        four: { five: <NUM_LIT> },<EOL>                         color: '<STR_LIT>',<EOL>                        __typename: '<STR_LIT>',<EOL>                    },<EOL>                },<EOL>                {<EOL>","gt":"three: {"}
{"input":"<s> export function test_Bindable_BindingContext_Number_DoesNotThrow() {<EOL>    const obj = new","gt":"Label();"}
{"input":"<s> export function getNativeBackgroundColor(textField) {<EOL>    var bkg = textField.android.getBackground();<EOL>    if (bkg instanceof org.nativescript.widgets.BorderDrawable) {<EOL>        return new colorModule.Color(","gt":"bkg.getBackgroundColor());"}
{"input":"<s> function ts(files) {<EOL>    var t = fs.readFileSync(files[<NUM_LIT>], \"<STR_LIT>\");<EOL>    var opts =","gt":"td2tsOpts();"}
{"input":"<s> export function test_parseSpansDirectlyToFormattedString() {<EOL>    var p = builder.parse('<STR_LIT>');<EOL>    function testAction(views) {<EOL>        var","gt":"page = views[<NUM_LIT>];"}
{"input":"<s> export function base64Encode(inputStr) {<EOL>    var b64 = '<STR_LIT>';<EOL>    var outputStr = '<STR_LIT>';<EOL>    var i = <NUM_LIT>;<EOL>    while (i < inputStr.length) {<EOL>        //all three \"& 0xff\" added below are there to fix a known bug<EOL>        //with bytes returned by xhr.responseText<EOL>        var byte1 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte2 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte3 = inputStr.charCodeAt(i++) &","gt":"<NUM_LIT>;"}
{"input":"<s> export function base64Encode(inputStr) {<EOL>    var b64 = '<STR_LIT>';<EOL>    var outputStr = '<STR_LIT>';<EOL>    var i = <NUM_LIT>;<EOL>    while (i < inputStr.length) {<EOL>        //all three \"& 0xff\" added below are there to fix a known bug<EOL>        //with bytes returned by xhr.responseText<EOL>        var byte1 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte2 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte3 = inputStr.charCodeAt(i++) &  <NUM_LIT>;<EOL>        var enc1 = byte1 >> <NUM_LIT>;<EOL>        var enc2 = ((byte1 & <NUM_LIT>) << <NUM_LIT>) | (byte2 >> <NUM_LIT>);<EOL>        var","gt":"enc3, enc4;"}
{"input":"<s> export function base64Encode(inputStr) {<EOL>    var b64 = '<STR_LIT>';<EOL>    var outputStr = '<STR_LIT>';<EOL>    var i = <NUM_LIT>;<EOL>    while (i < inputStr.length) {<EOL>        //all three \"& 0xff\" added below are there to fix a known bug<EOL>        //with bytes returned by xhr.responseText<EOL>        var byte1 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte2 = inputStr.charCodeAt(i++) & <NUM_LIT>;<EOL>        var byte3 = inputStr.charCodeAt(i++) &  <NUM_LIT>;<EOL>        var enc1 = byte1 >> <NUM_LIT>;<EOL>        var enc2 = ((byte1 & <NUM_LIT>) << <NUM_LIT>) | (byte2 >> <NUM_LIT>);<EOL>        var  enc3, enc4;<EOL>        if (isNaN(byte2)) {<EOL>            enc3 = enc4 = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            enc3 = ((byte2 & <NUM_LIT>) << <NUM_LIT>) | (byte3 >> <NUM_LIT>);<EOL>            if (isNaN(byte3)) {<EOL>                enc4 = <NUM_LIT>;<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function test_getBindableOptionsFromStringShortFormatExpression() {<EOL>    const bindingExpression = \"<STR_LIT>\";<EOL>    const bindOptions = bindingBuilder.getBindingOptions(","gt":"\"<STR_LIT>\", bindingExpression);"}
{"input":"<s> export function resolveFileNameFromUrl(url, appDirectory, fileExists) {<EOL>    let fileName = typeof url === \"<STR_LIT>\" ? url.trim() : \"<STR_LIT>\";<EOL>    if (fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>) {<EOL>        fileName = fileName.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    const isAbsolutePath = fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>;<EOL>    const absolutePath =","gt":"isAbsolutePath ? fileName : path.join(appDirectory, fileName);"}
{"input":"<s> export function resolveFileNameFromUrl(url, appDirectory, fileExists) {<EOL>    let fileName = typeof url === \"<STR_LIT>\" ? url.trim() : \"<STR_LIT>\";<EOL>    if (fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>) {<EOL>        fileName = fileName.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    const isAbsolutePath = fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>;<EOL>    const absolutePath =  isAbsolutePath ? fileName : path.join(appDirectory, fileName);<EOL>    if (fileExists(absolutePath)) {<EOL>        return absolutePath;<EOL>    }<EOL>    if (!isAbsolutePath) {<EOL>        if (fileName[","gt":"<NUM_LIT>] === \"<STR_LIT>\" && fileName[<NUM_LIT>] !== \"<STR_LIT>\" && fileName[<NUM_LIT>] !== \"<STR_LIT>\") {"}
{"input":"<s> export function resolveFileNameFromUrl(url, appDirectory, fileExists) {<EOL>    let fileName = typeof url === \"<STR_LIT>\" ? url.trim() : \"<STR_LIT>\";<EOL>    if (fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>) {<EOL>        fileName = fileName.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    const isAbsolutePath = fileName.indexOf(\"<STR_LIT>\") === <NUM_LIT>;<EOL>    const absolutePath =  isAbsolutePath ? fileName : path.join(appDirectory, fileName);<EOL>    if (fileExists(absolutePath)) {<EOL>        return absolutePath;<EOL>    }<EOL>    if (!isAbsolutePath) {<EOL>        if (fileName[ <NUM_LIT>] === \"<STR_LIT>\" && fileName[<NUM_LIT>] !== \"<STR_LIT>\" && fileName[<NUM_LIT>] !== \"<STR_LIT>\") {<EOL>            fileName = fileName.substr(<NUM_LIT>);<EOL>        }<EOL>        const external = path.join(appDirectory, \"<STR_LIT>\", fileName);<EOL>","gt":"if (fileExists(external)) {"}
{"input":"<s> // The newline characters should be replaced with EOL because on Windows the EOL is \\r\\n<EOL>// but the character which is placed in `` for newline is only \\n<EOL>// if we do not replace the newline characters the tests will pass only on linux and mac.<EOL>function changeNewLineCharacter(input) {<EOL>","gt":"return input ? input.replace(/\\r?\\n/g, EOL) : input;"}
{"input":"<s> function createNewCacheSnapshot(cacheContext) {<EOL>    const snapshot = createGraphSnapshot({<EOL>        foo: <NUM_LIT>,<EOL>        bar: '<STR_LIT>',<EOL>","gt":"viewer: {"}
{"input":"<s> export function test_NonExistingElementError() {<EOL>    var basePath = \"<STR_LIT>\";<EOL>    var expectedErrorStart = \"<STR_LIT>\" + basePath + \"<STR_LIT>\" +<EOL>        \"<STR_LIT>\";<EOL>","gt":"var message;"}
{"input":"<s> export function test_NonExistingElementError() {<EOL>    var basePath = \"<STR_LIT>\";<EOL>    var expectedErrorStart = \"<STR_LIT>\" + basePath + \"<STR_LIT>\" +<EOL>        \"<STR_LIT>\";<EOL>     var message;<EOL>    try {<EOL>        builder.load(__dirname + \"<STR_LIT>\");<EOL>    }<EOL>    catch (e) {<EOL>        message = e.","gt":"message;"}
{"input":"<s> export function test_EventInTemplate() {<EOL>    var pageCode = require(\"<STR_LIT>\");<EOL>    var notified = false;<EOL>    pageCode.test = (args) => {<EOL>        notified = true;<EOL>    };<EOL>    var page =","gt":"builder.load(__dirname + \"<STR_LIT>\", pageCode);"}
{"input":"<s> export function test_EventInTemplate() {<EOL>    var pageCode = require(\"<STR_LIT>\");<EOL>    var notified = false;<EOL>    pageCode.test = (args) => {<EOL>        notified = true;<EOL>    };<EOL>    var page =  builder.load(__dirname + \"<STR_LIT>\", pageCode);<EOL>    TKUnit.assert(view, \"<STR_LIT>\");<EOL>    var templateView = page.getViewById(\"<STR_LIT>\");<EOL>    TKUnit.assert(templateView, \"<STR_LIT>\");<EOL>    templateView.","gt":"parseTemplate();"}
{"input":"<s> export function test_EventInTemplate() {<EOL>    var pageCode = require(\"<STR_LIT>\");<EOL>    var notified = false;<EOL>    pageCode.test = (args) => {<EOL>        notified = true;<EOL>    };<EOL>    var page =  builder.load(__dirname + \"<STR_LIT>\", pageCode);<EOL>    TKUnit.assert(view, \"<STR_LIT>\");<EOL>    var templateView = page.getViewById(\"<STR_LIT>\");<EOL>    TKUnit.assert(templateView, \"<STR_LIT>\");<EOL>    templateView. parseTemplate();<EOL>    TKUnit.assertEqual(templateView.getChildrenCount(), <NUM_LIT>, \"<STR_LIT>\");<EOL>    var childTemplateView = templateView.getChildAt(<NUM_LIT>);<EOL>    TKUnit.assert(childTemplateView, \"<STR_LIT>\");<EOL>","gt":"childTemplateView.notify({"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>","gt":"return null;"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let","gt":"result = typefaceCache.get(fontFamily);"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let  result = typefaceCache.get(fontFamily);<EOL>    // Check for undefined explicitly as null mean we tried to load the font, but failed.<EOL>    if (","gt":"result === undefined) {"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let  result = typefaceCache.get(fontFamily);<EOL>    // Check for undefined explicitly as null mean we tried to load the font, but failed.<EOL>    if ( result === undefined) {<EOL>        result = null;<EOL>        let fontAssetPath;<EOL>        const basePath = fs.path.join(fs.knownFolders.currentApp().path, \"<STR_LIT>\", fontFamily);<EOL>        if (fs.File.exists(","gt":"basePath + \"<STR_LIT>\")) {"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let  result = typefaceCache.get(fontFamily);<EOL>    // Check for undefined explicitly as null mean we tried to load the font, but failed.<EOL>    if ( result === undefined) {<EOL>        result = null;<EOL>        let fontAssetPath;<EOL>        const basePath = fs.path.join(fs.knownFolders.currentApp().path, \"<STR_LIT>\", fontFamily);<EOL>        if (fs.File.exists( basePath + \"<STR_LIT>\")) {<EOL>            fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";<EOL>        }<EOL>        else if (fs.File.exists(basePath + \"<STR_LIT>\")) {<EOL>","gt":"fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let  result = typefaceCache.get(fontFamily);<EOL>    // Check for undefined explicitly as null mean we tried to load the font, but failed.<EOL>    if ( result === undefined) {<EOL>        result = null;<EOL>        let fontAssetPath;<EOL>        const basePath = fs.path.join(fs.knownFolders.currentApp().path, \"<STR_LIT>\", fontFamily);<EOL>        if (fs.File.exists( basePath + \"<STR_LIT>\")) {<EOL>            fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";<EOL>        }<EOL>        else if (fs.File.exists(basePath + \"<STR_LIT>\")) {<EOL>             fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";<EOL>        }<EOL>        else {<EOL>            if (traceEnabled()) {<EOL>                traceWrite(","gt":"\"<STR_LIT>\" + fontFamily, traceCategories.Error, traceMessageType.error);"}
{"input":"<s> function loadFontFromFile(fontFamily) {<EOL>    appAssets = appAssets || application.android.context.getAssets();<EOL>    if (!appAssets) {<EOL>         return null;<EOL>    }<EOL>    let  result = typefaceCache.get(fontFamily);<EOL>    // Check for undefined explicitly as null mean we tried to load the font, but failed.<EOL>    if ( result === undefined) {<EOL>        result = null;<EOL>        let fontAssetPath;<EOL>        const basePath = fs.path.join(fs.knownFolders.currentApp().path, \"<STR_LIT>\", fontFamily);<EOL>        if (fs.File.exists( basePath + \"<STR_LIT>\")) {<EOL>            fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";<EOL>        }<EOL>        else if (fs.File.exists(basePath + \"<STR_LIT>\")) {<EOL>             fontAssetPath = FONTS_BASE_PATH + fontFamily + \"<STR_LIT>\";<EOL>        }<EOL>        else {<EOL>            if (traceEnabled()) {<EOL>                traceWrite( \"<STR_LIT>\" + fontFamily, traceCategories.Error, traceMessageType.error);<EOL>            }<EOL>        }<EOL>        if (fontAssetPath) {<EOL>            try {<EOL>                fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);<EOL>                result = android.graphics.Typeface.createFromFile(fontAssetPath);<EOL>            }<EOL>","gt":"catch (e) {"}
{"input":"<s> export function assertMeasure(view, width, height, name) {<EOL>    name = name ?","gt":"\"<STR_LIT>\" + name + \"<STR_LIT>\" : \"<STR_LIT>\";"}
{"input":"<s> export function getCommand(args) {<EOL>","gt":"return new ExtensionBase(args);"}
{"input":"<s> export function a1ProjectionContentsDirective() {<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>","gt":"scope: {},"}
{"input":"<s> export function test_width_property_is_synced_in_style_and_view() {<EOL>    test_property_is_synced_in_style_and_view(\"<STR_LIT>\",","gt":"<NUM_LIT>);"}
{"input":"<s> export function test_ReadTranslateSingle() {<EOL>    const animation = createAnimationFromCSS(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    const { translate, rotate } = getTransforms(","gt":"animation.keyframes[<NUM_LIT>].declarations);"}
{"input":"<s> export function test_WhenPageIsLoadedFrameCurrentPageIsNotYetTheSameAsThePage() {<EOL>    let page;<EOL>    const loadedEventHandler = function (args) {<EOL>        TKUnit.assertNotEqual(topmost().currentPage, args.object, \"<STR_LIT>\");<EOL>    };<EOL>    const pageFactory =","gt":"function () {"}
{"input":"<s> export function test_WhenPageIsLoadedFrameCurrentPageIsNotYetTheSameAsThePage() {<EOL>    let page;<EOL>    const loadedEventHandler = function (args) {<EOL>        TKUnit.assertNotEqual(topmost().currentPage, args.object, \"<STR_LIT>\");<EOL>    };<EOL>    const pageFactory =  function () {<EOL>        page = new Page();<EOL>        page.id = \"<STR_LIT>\";<EOL>        page.on(Label.loadedEvent, loadedEventHandler);<EOL>        const label = new","gt":"Label();"}
{"input":"<s> export function test_WhenPageIsLoadedFrameCurrentPageIsNotYetTheSameAsThePage() {<EOL>    let page;<EOL>    const loadedEventHandler = function (args) {<EOL>        TKUnit.assertNotEqual(topmost().currentPage, args.object, \"<STR_LIT>\");<EOL>    };<EOL>    const pageFactory =  function () {<EOL>        page = new Page();<EOL>        page.id = \"<STR_LIT>\";<EOL>        page.on(Label.loadedEvent, loadedEventHandler);<EOL>        const label = new  Label();<EOL>        label.text = \"<STR_LIT>\";<EOL>        page.content = label;<EOL>","gt":"return page;"}
{"input":"<s> export function test_NestedPropertiesBindingTwoTargets() {<EOL>    const expectedText = \"<STR_LIT>\";<EOL>    const expectedFirstName = \"<STR_LIT>\";<EOL>    const expectedLastName = \"<STR_LIT>\";<EOL>    const viewModel = new Observable();<EOL>    viewModel.set(\"<STR_LIT>\",","gt":"new Activity(expectedText, expectedFirstName, expectedLastName));"}
{"input":"<s> export function test_NestedPropertiesBindingTwoTargets() {<EOL>    const expectedText = \"<STR_LIT>\";<EOL>    const expectedFirstName = \"<STR_LIT>\";<EOL>    const expectedLastName = \"<STR_LIT>\";<EOL>    const viewModel = new Observable();<EOL>    viewModel.set(\"<STR_LIT>\",  new Activity(expectedText, expectedFirstName, expectedLastName));<EOL>    const target1 = new Label();<EOL>    target1.bind({<EOL>","gt":"sourceProperty: \"<STR_LIT>\","}
{"input":"<s> export function test_NestedPropertiesBindingTwoTargets() {<EOL>    const expectedText = \"<STR_LIT>\";<EOL>    const expectedFirstName = \"<STR_LIT>\";<EOL>    const expectedLastName = \"<STR_LIT>\";<EOL>    const viewModel = new Observable();<EOL>    viewModel.set(\"<STR_LIT>\",  new Activity(expectedText, expectedFirstName, expectedLastName));<EOL>    const target1 = new Label();<EOL>    target1.bind({<EOL>         sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty: \"<STR_LIT>\",<EOL>        twoWay: true<EOL>    },","gt":"viewModel);"}
{"input":"<s> export function test_NestedPropertiesBindingTwoTargets() {<EOL>    const expectedText = \"<STR_LIT>\";<EOL>    const expectedFirstName = \"<STR_LIT>\";<EOL>    const expectedLastName = \"<STR_LIT>\";<EOL>    const viewModel = new Observable();<EOL>    viewModel.set(\"<STR_LIT>\",  new Activity(expectedText, expectedFirstName, expectedLastName));<EOL>    const target1 = new Label();<EOL>    target1.bind({<EOL>         sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty: \"<STR_LIT>\",<EOL>        twoWay: true<EOL>    },  viewModel);<EOL>    const target2 = new Label();<EOL>    target2.bind({<EOL>","gt":"sourceProperty: \"<STR_LIT>\","}
{"input":"<s> export function test_NestedPropertiesBindingTwoTargets() {<EOL>    const expectedText = \"<STR_LIT>\";<EOL>    const expectedFirstName = \"<STR_LIT>\";<EOL>    const expectedLastName = \"<STR_LIT>\";<EOL>    const viewModel = new Observable();<EOL>    viewModel.set(\"<STR_LIT>\",  new Activity(expectedText, expectedFirstName, expectedLastName));<EOL>    const target1 = new Label();<EOL>    target1.bind({<EOL>         sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty: \"<STR_LIT>\",<EOL>        twoWay: true<EOL>    },  viewModel);<EOL>    const target2 = new Label();<EOL>    target2.bind({<EOL>         sourceProperty: \"<STR_LIT>\",<EOL>        targetProperty: \"<STR_LIT>\",<EOL>        twoWay: true<EOL>    }, viewModel);<EOL>    TKUnit.assertEqual(target1.get(\"<STR_LIT>\"), expectedText);<EOL>    TKUnit.assertEqual(target2.get(\"<STR_LIT>\"), expectedFirstName);<EOL>","gt":"const newExpectedText = \"<STR_LIT>\";"}
{"input":"<s> export function test_$ValueSupportWithinExpression() {<EOL>    const model = fromObject({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": function () {<EOL>            return this.get(\"<STR_LIT>\") === \"<STR_LIT>\";<EOL>        }<EOL>    });<EOL>    const bindableObj = new Label();<EOL>    bindableObj.bind({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\":","gt":"\"<STR_LIT>\","}
{"input":"<s> export function test_$ValueSupportWithinExpression() {<EOL>    const model = fromObject({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": function () {<EOL>            return this.get(\"<STR_LIT>\") === \"<STR_LIT>\";<EOL>        }<EOL>    });<EOL>    const bindableObj = new Label();<EOL>    bindableObj.bind({<EOL>        \"<STR_LIT>\": \"<STR_LIT>\",<EOL>        \"<STR_LIT>\":  \"<STR_LIT>\",<EOL>        \"<STR_LIT>\": \"<STR_LIT>\"<EOL>    }, model);<EOL>    model.set(\"<STR_LIT>\",","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function test_binding_marginBottom() {<EOL>    property_binding_test(\"<STR_LIT>\",","gt":"<NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> export function test_paddingBottom_property_is_synced_in_style_and_view() {<EOL>    test_property_is_synced_in_style_and_layout_view(\"<STR_LIT>\",","gt":"<NUM_LIT>);"}
{"input":"<s> export function test_binding_style_horizontalAlignment() {<EOL>    property_binding_style_test(\"<STR_LIT>\", \"<STR_LIT>\",","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function test_binding_style_opacity() {<EOL>","gt":"property_binding_style_test(\"<STR_LIT>\", <NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> // Repro from #4212<EOL>function isVoid(value) {<EOL>    return","gt":"undefined;"}
{"input":"<s> export function test_setting_label_whiteSpace_normal_sets_native() {<EOL>    const testView = new Label();<EOL>    testView.style.whiteSpace = \"<STR_LIT>\";<EOL>    helper.buildUIAndRunTest(testView, function (views) {<EOL>        if (","gt":"isAndroid) {"}
{"input":"<s> export function test_setting_label_whiteSpace_normal_sets_native() {<EOL>    const testView = new Label();<EOL>    testView.style.whiteSpace = \"<STR_LIT>\";<EOL>    helper.buildUIAndRunTest(testView, function (views) {<EOL>        if ( isAndroid) {<EOL>            TKUnit.assertNull(testView.android.getEllipsize(), null);<EOL>        }<EOL>        else if (isIOS) {<EOL>            TKUnit.assertEqual(testView.ios.lineBreakMode, NSLineBreakMode.ByWordWrapping);<EOL>            TKUnit.assertEqual(testView.","gt":"ios.numberOfLines, <NUM_LIT>);"}
{"input":"<s> export function test_css_dataURI_is_applied_to_backgroundImageSource() {<EOL>    const stack = new stackModule.StackLayout();<EOL>    helper.buildUIAndRunTest(stack, function (views) {<EOL>","gt":"const page = views[<NUM_LIT>];"}
{"input":"<s> export function test_id_selector() {<EOL>    let page = helper.getClearCurrentPage();<EOL>    page.style.color = unsetValue;<EOL>    let btnWithId;<EOL>    let btnWithNoId;<EOL>    // >> article-using-id-selector<EOL>    page.css =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function test_id_selector() {<EOL>    let page = helper.getClearCurrentPage();<EOL>    page.style.color = unsetValue;<EOL>    let btnWithId;<EOL>    let btnWithNoId;<EOL>    // >> article-using-id-selector<EOL>    page.css =  \"<STR_LIT>\";<EOL>    //// Will be styled<EOL>    btnWithId = new buttonModule.Button();<EOL>    btnWithId.id = \"<STR_LIT>\";<EOL>    //// Won't be styled<EOL>    btnWithNoId = new buttonModule.Button();<EOL>    // << article-using-id-selector<EOL>    const stack = new stackModule.StackLayout();<EOL>","gt":"page.content = stack;"}
{"input":"<s> export function test_styles_are_updated_when_cssClass_is_changed() {<EOL>    const testStack = new stackModule.StackLayout();<EOL>    const btn = new buttonModule.Button();<EOL>    btn.className = \"<STR_LIT>\";<EOL>    const btn2 = new buttonModule.Button();<EOL>    testStack.addChild(","gt":"btn);"}
{"input":"<s> export function test_styles_are_updated_when_cssClass_is_changed() {<EOL>    const testStack = new stackModule.StackLayout();<EOL>    const btn = new buttonModule.Button();<EOL>    btn.className = \"<STR_LIT>\";<EOL>    const btn2 = new buttonModule.Button();<EOL>    testStack.addChild( btn);<EOL>    testStack.addChild(btn2);<EOL>    const testFunc = () => {<EOL>        helper.assertViewBackgroundColor(btn, \"<STR_LIT>\");<EOL>        helper.assertViewBackgroundColor(btn2, \"<STR_LIT>\");<EOL>        btn.className = \"<STR_LIT>\";<EOL>        helper.assertViewBackgroundColor(","gt":"btn, \"<STR_LIT>\");"}
{"input":"<s> export function test_selector_priorities_6() {<EOL>    testSelectorsPrioritiesTemplate(","gt":"idSelector + classSelector + typeSelector);"}
{"input":"<s> export function test_basic_hierarchical_direct_child_selectors() {<EOL>    let stack = new stackModule.StackLayout();<EOL>    let testButton1 = new buttonModule.Button();<EOL>    testButton1.text = \"<STR_LIT>\";<EOL>    testButton1.id = \"<STR_LIT>\";<EOL>    let wrap = new wrapModule.WrapLayout();<EOL>    let","gt":"testButton2 = new buttonModule.Button();"}
{"input":"<s> export function test_basic_hierarchical_direct_child_selectors() {<EOL>    let stack = new stackModule.StackLayout();<EOL>    let testButton1 = new buttonModule.Button();<EOL>    testButton1.text = \"<STR_LIT>\";<EOL>    testButton1.id = \"<STR_LIT>\";<EOL>    let wrap = new wrapModule.WrapLayout();<EOL>    let  testButton2 = new buttonModule.Button();<EOL>    testButton2.text = \"<STR_LIT>\";<EOL>    testButton2.id = \"<STR_LIT>\";<EOL>    wrap.addChild(testButton2);<EOL>","gt":"stack.addChild(testButton1);"}
{"input":"<s> export function test_basic_hierarchical_direct_child_selectors() {<EOL>    let stack = new stackModule.StackLayout();<EOL>    let testButton1 = new buttonModule.Button();<EOL>    testButton1.text = \"<STR_LIT>\";<EOL>    testButton1.id = \"<STR_LIT>\";<EOL>    let wrap = new wrapModule.WrapLayout();<EOL>    let  testButton2 = new buttonModule.Button();<EOL>    testButton2.text = \"<STR_LIT>\";<EOL>    testButton2.id = \"<STR_LIT>\";<EOL>    wrap.addChild(testButton2);<EOL>     stack.addChild(testButton1);<EOL>    stack.addChild(wrap);<EOL>    let testCss = \"<STR_LIT>\";<EOL>    let testFunc = function (views) {<EOL>        helper.assertViewBackgroundColor(stack.getViewById(","gt":"\"<STR_LIT>\"), \"<STR_LIT>\");"}
{"input":"<s> export function test_pipe_attr_selector_correct_syntax() {<EOL>    let testButton = new buttonModule.Button();<EOL>    testButton[\"<STR_LIT>\"] = \"<STR_LIT>\";<EOL>    let testCss =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function test_pipe_attr_selector_incorrect_syntax1() {<EOL>    let testButton = new buttonModule.Button();<EOL>    testButton[\"<STR_LIT>\"] = \"<STR_LIT>\";<EOL>    let","gt":"testCss = \"<STR_LIT>\";"}
{"input":"<s> export function test_power_attr_selector_correct_synta2() {<EOL>    let testButton = new buttonModule.Button();<EOL>    testButton[\"<STR_LIT>\"] = \"<STR_LIT>\";<EOL>    let testCss =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function test_dollar_attr_selector_correct_syntax2() {<EOL>    let testButton = new buttonModule.Button();<EOL>    testButton[\"<STR_LIT>\"] = \"<STR_LIT>\";<EOL>    let testCss =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function test_UsingSameSelectors_ShouldApplyLatest() {<EOL>    let testButton = new buttonModule.Button();<EOL>    testButton.className = '<STR_LIT>';<EOL>    let","gt":"testCss = \"<STR_LIT>\";"}
{"input":"<s> export function test_resolveFileNameFromUrl_external_file_no_tilda() {<EOL>    const externalFileExistsMock = (fileName) => (fileName.indexOf(\"<STR_LIT>\") !== -<NUM_LIT>);<EOL>    let","gt":"url = \"<STR_LIT>\";"}
{"input":"<s> <EOL>export function createGraphSnapshot(payload, gqlString, cacheContext, gqlVariables, rootId) {<EOL>    return createSnapshot(payload, gqlString, gqlVariables, rootId, cacheContext).","gt":"snapshot;"}
{"input":"<s> <EOL>export function isNil(obj) {<EOL>","gt":"return obj === undefined || obj === null;"}
{"input":"<s> <EOL>export function unwrap(key, value, exists, priority = null) {<EOL>    let primitive = (/string|number|boolean/).test(typeof value);<EOL>    let unwrapped = isNil(value) || primitive ? {} : value;<EOL>    // Change Nil values to null<EOL>","gt":"if (isNil(value)) {"}
{"input":"<s> <EOL>export function unwrap(key, value, exists, priority = null) {<EOL>    let primitive = (/string|number|boolean/).test(typeof value);<EOL>    let unwrapped = isNil(value) || primitive ? {} : value;<EOL>    // Change Nil values to null<EOL>     if (isNil(value)) {<EOL>        Object.defineProperty(unwrapped, '<STR_LIT>', {<EOL>            enumerable: false,<EOL>","gt":"value: null"}
{"input":"<s> <EOL>export function unwrap(key, value, exists, priority = null) {<EOL>    let primitive = (/string|number|boolean/).test(typeof value);<EOL>    let unwrapped = isNil(value) || primitive ? {} : value;<EOL>    // Change Nil values to null<EOL>     if (isNil(value)) {<EOL>        Object.defineProperty(unwrapped, '<STR_LIT>', {<EOL>            enumerable: false,<EOL>             value: null<EOL>        });<EOL>    }<EOL>    let initialValues = { key, value, exists, priority };<EOL>    return [","gt":"'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'].reduce((p, c) => {"}
{"input":"<s> <EOL>export function unwrap(key, value, exists, priority = null) {<EOL>    let primitive = (/string|number|boolean/).test(typeof value);<EOL>    let unwrapped = isNil(value) || primitive ? {} : value;<EOL>    // Change Nil values to null<EOL>     if (isNil(value)) {<EOL>        Object.defineProperty(unwrapped, '<STR_LIT>', {<EOL>            enumerable: false,<EOL>             value: null<EOL>        });<EOL>    }<EOL>    let initialValues = { key, value, exists, priority };<EOL>    return [ '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'].reduce((p, c) => {<EOL>        if ((c === '<STR_LIT>' && !primitive) || isNil(initialValues[c])) {<EOL>            return p;<EOL>        }<EOL>        Object.defineProperty(p, `<STR_LIT>`, {<EOL>","gt":"enumerable: false,"}
{"input":"<s> function drawBoxElement(boxElement) {<EOL>    const element = document.","gt":"getElementById('<STR_LIT>');"}
{"input":"<s> export function formatError(message, err) {<EOL>    if (err instanceof Error) {<EOL>        let error = err;<EOL>        return `<STR_LIT>`;<EOL>    }<EOL>    else if (typeof err === '<STR_LIT>') {<EOL>        return `<STR_LIT>`;<EOL>    }<EOL>    else if (err) {<EOL>        return","gt":"}: ${err.toString()}`<STR_LIT>;"}
{"input":"<s> function testUnshiftCommand(lines, languageIdentifier, useTabStops, selection, expectedLines, expectedSelection) {<EOL>    testCommand(lines, languageIdentifier, selection, (sel) => new ShiftCommand(sel, {<EOL>        isUnshift:","gt":"true,"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,","gt":"source));"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object.","gt":"getOwnPropertySymbols) {"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign(","gt":"key, target, source));"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign( key, target, source));<EOL>        }<EOL>    });<EOL>    return target;<EOL>    function assign(key, _target, _source) {<EOL>        const sourceValue = _source[","gt":"key];"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign( key, target, source));<EOL>        }<EOL>    });<EOL>    return target;<EOL>    function assign(key, _target, _source) {<EOL>        const sourceValue = _source[ key];<EOL>        if (sourceValue !==","gt":"void <NUM_LIT>) {"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign( key, target, source));<EOL>        }<EOL>    });<EOL>    return target;<EOL>    function assign(key, _target, _source) {<EOL>        const sourceValue = _source[ key];<EOL>        if (sourceValue !==  void <NUM_LIT>) {<EOL>            let targetValue = _target[key];<EOL>            if (Array.isArray(sourceValue)) {<EOL>                if (!Array.isArray(targetValue)) {<EOL>","gt":"targetValue = [];"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign( key, target, source));<EOL>        }<EOL>    });<EOL>    return target;<EOL>    function assign(key, _target, _source) {<EOL>        const sourceValue = _source[ key];<EOL>        if (sourceValue !==  void <NUM_LIT>) {<EOL>            let targetValue = _target[key];<EOL>            if (Array.isArray(sourceValue)) {<EOL>                if (!Array.isArray(targetValue)) {<EOL>                     targetValue = [];<EOL>                }<EOL>                const length = targetValue.length;<EOL>                sourceValue.forEach((_, index) => assign(length + index, targetValue, sourceValue));<EOL>            }<EOL>            else if (typeof sourceValue === '<STR_LIT>') {<EOL>                if (sourceValue","gt":"instanceof RegExp) {"}
{"input":"<s> export function deepAssign(target, ...sources) {<EOL>    sources.forEach(source => {<EOL>        Object<EOL>            .getOwnPropertyNames(source)<EOL>            .forEach(key => assign(key, target,  source));<EOL>        <EOL>        if (Object. getOwnPropertySymbols) {<EOL>            Object<EOL>                .getOwnPropertySymbols(source)<EOL>                .forEach(key => assign( key, target, source));<EOL>        }<EOL>    });<EOL>    return target;<EOL>    function assign(key, _target, _source) {<EOL>        const sourceValue = _source[ key];<EOL>        if (sourceValue !==  void <NUM_LIT>) {<EOL>            let targetValue = _target[key];<EOL>            if (Array.isArray(sourceValue)) {<EOL>                if (!Array.isArray(targetValue)) {<EOL>                     targetValue = [];<EOL>                }<EOL>                const length = targetValue.length;<EOL>                sourceValue.forEach((_, index) => assign(length + index, targetValue, sourceValue));<EOL>            }<EOL>            else if (typeof sourceValue === '<STR_LIT>') {<EOL>                if (sourceValue  instanceof RegExp) {<EOL>                    targetValue = cloneRegExp(sourceValue);<EOL>                }<EOL>                else if (sourceValue instanceof Date) {<EOL>                    targetValue = new Date(sourceValue);<EOL>                }<EOL>                else if (sourceValue === null) {<EOL>                    targetValue = null;<EOL>                }<EOL>                else {<EOL>","gt":"if (!targetValue) {"}
{"input":"<s> <EOL>function _mergeNodes(path, target, source) {<EOL>    if (!source)<EOL>        return target;<EOL>    if (!isEqual(target.args, source.args)) {<EOL>        throw new ConflictingFieldsError(`<STR_LIT>`, path, [target, source]);<EOL>    }<EOL>    if (target.schemaName !== source.schemaName) {<EOL>        throw new ConflictingFieldsError(`<STR_LIT>`, path, [target,","gt":"source]);"}
{"input":"<s> <EOL>function _mergeNodes(path, target, source) {<EOL>    if (!source)<EOL>        return target;<EOL>    if (!isEqual(target.args, source.args)) {<EOL>        throw new ConflictingFieldsError(`<STR_LIT>`, path, [target, source]);<EOL>    }<EOL>    if (target.schemaName !== source.schemaName) {<EOL>        throw new ConflictingFieldsError(`<STR_LIT>`, path, [target,  source]);<EOL>    }<EOL>    if (!source.children)<EOL>        return target;<EOL>    if (!target.children) {<EOL>","gt":"target.children = source.children;"}
{"input":"<s> export function compare(tree1, tree2) {<EOL>","gt":"const patches = [];"}
{"input":"<s> async function testGetBearerToken1() {<EOL>    try {<EOL>        let authorizationclient = new AuthorizationClient(endpoint, httpClient);<EOL>        mockRequest(\"<STR_LIT>\", `<STR_LIT>`);<EOL>        let token1 =","gt":"await authorizationclient.getBearerToken();"}
{"input":"<s> async function testGetBearerToken1() {<EOL>    try {<EOL>        let authorizationclient = new AuthorizationClient(endpoint, httpClient);<EOL>        mockRequest(\"<STR_LIT>\", `<STR_LIT>`);<EOL>        let token1 =  await authorizationclient.getBearerToken();<EOL>        let token2 = await authorizationclient.getBearerToken();<EOL>        assert(token1 === \"<STR_LIT>\", \"<STR_LIT>\");<EOL>        assert(token2 === \"<STR_LIT>\", \"<STR_LIT>\");<EOL>    }<EOL>    catch (","gt":"error) {"}
{"input":"<s> function generatePipeName() {<EOL>    var randomName = '<STR_LIT>' + makeRandomHexString(<NUM_LIT>);<EOL>    if (process.platform ===","gt":"'<STR_LIT>') {"}
{"input":"<s> function annotate(target, options = {}) {<EOL>    if (options.freezeTableName === undefined)<EOL>        options.","gt":"freezeTableName = true;"}
{"input":"<s> export function onElementFound(node, highlights, buffer) {<EOL>    if (node) {<EOL>        buffer.enqueue(MessageFactory.foundDOMElement(node));<EOL>        send(","gt":"MessageFactory.push());"}
{"input":"<s> function ff(g) {<EOL>","gt":"ff(g);"}
{"input":"<s> <EOL>export function walkOperation(rootOperation, result, visitor) {<EOL>    // Perform the walk as a depth-first traversal; and unlike the payload walk,<EOL>    // we don't bother tracking the path.<EOL>","gt":"const stack = [new OperationWalkNode(rootOperation, result)];"}
{"input":"<s> <EOL>export function walkOperation(rootOperation, result, visitor) {<EOL>    // Perform the walk as a depth-first traversal; and unlike the payload walk,<EOL>    // we don't bother tracking the path.<EOL>     const stack = [new OperationWalkNode(rootOperation, result)];<EOL>    while (stack.length) {<EOL>        const { parsedOperation, parent } = stack.pop();<EOL>        // We consider null nodes to be skippable (and satisfy the walk).<EOL>        if (parent === null)<EOL>            continue;<EOL>        // Fan-out for arrays.<EOL>        if (Array.","gt":"isArray(parent)) {"}
{"input":"<s> <EOL>export function walkOperation(rootOperation, result, visitor) {<EOL>    // Perform the walk as a depth-first traversal; and unlike the payload walk,<EOL>    // we don't bother tracking the path.<EOL>     const stack = [new OperationWalkNode(rootOperation, result)];<EOL>    while (stack.length) {<EOL>        const { parsedOperation, parent } = stack.pop();<EOL>        // We consider null nodes to be skippable (and satisfy the walk).<EOL>        if (parent === null)<EOL>            continue;<EOL>        // Fan-out for arrays.<EOL>        if (Array. isArray(parent)) {<EOL>            // Push in reverse purely for ergonomics: they'll be pulled off in order.<EOL>            for (let i = parent.length - <NUM_LIT>; i >= <NUM_LIT>; i--) {<EOL>                stack.push(new OperationWalkNode(parsedOperation,","gt":"parent[i]));"}
{"input":"<s> <EOL>export function walkOperation(rootOperation, result, visitor) {<EOL>    // Perform the walk as a depth-first traversal; and unlike the payload walk,<EOL>    // we don't bother tracking the path.<EOL>     const stack = [new OperationWalkNode(rootOperation, result)];<EOL>    while (stack.length) {<EOL>        const { parsedOperation, parent } = stack.pop();<EOL>        // We consider null nodes to be skippable (and satisfy the walk).<EOL>        if (parent === null)<EOL>            continue;<EOL>        // Fan-out for arrays.<EOL>        if (Array. isArray(parent)) {<EOL>            // Push in reverse purely for ergonomics: they'll be pulled off in order.<EOL>            for (let i = parent.length - <NUM_LIT>; i >= <NUM_LIT>; i--) {<EOL>                stack.push(new OperationWalkNode(parsedOperation,  parent[i]));<EOL>            }<EOL>            continue;<EOL>        }<EOL>        const fields =","gt":"[];"}
{"input":"<s> <EOL>export function assertInstance(instance, expectedValues) {<EOL>    if (Array.isArray(expectedValues)) {<EOL>        expect(instance).to.have.property('<STR_LIT>', expectedValues.length);<EOL>        return instance.forEach((_instance, i) => assertInstance(_instance, expectedValues[i]));<EOL>    }<EOL>    expect(instance)<EOL>        .to.have.property('<STR_LIT>')<EOL>        .","gt":"that.is.not.null;"}
{"input":"<s> <EOL>export function assertInstance(instance, expectedValues) {<EOL>    if (Array.isArray(expectedValues)) {<EOL>        expect(instance).to.have.property('<STR_LIT>', expectedValues.length);<EOL>        return instance.forEach((_instance, i) => assertInstance(_instance, expectedValues[i]));<EOL>    }<EOL>    expect(instance)<EOL>        .to.have.property('<STR_LIT>')<EOL>        . that.is.not.null;<EOL>    Object<EOL>        .keys(expectedValues)<EOL>        .forEach(key => {<EOL>        const value = instance[key];<EOL>        const","gt":"expectedValue = expectedValues[key];"}
{"input":"<s> <EOL>export function assertInstance(instance, expectedValues) {<EOL>    if (Array.isArray(expectedValues)) {<EOL>        expect(instance).to.have.property('<STR_LIT>', expectedValues.length);<EOL>        return instance.forEach((_instance, i) => assertInstance(_instance, expectedValues[i]));<EOL>    }<EOL>    expect(instance)<EOL>        .to.have.property('<STR_LIT>')<EOL>        . that.is.not.null;<EOL>    Object<EOL>        .keys(expectedValues)<EOL>        .forEach(key => {<EOL>        const value = instance[key];<EOL>        const  expectedValue = expectedValues[key];<EOL>        expect(instance).to.have.property(key)<EOL>            .that.is.not.null.and.not.undefined;<EOL>        if (typeof expectedValue === '<STR_LIT>') {<EOL>","gt":"assertInstance(value, expectedValue);"}
{"input":"<s> function lineHasDecoration(model, lineNumber, start, end, className) {<EOL>    lineHasDecorations(model, lineNumber, [{<EOL>","gt":"start: start,"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===","gt":"null) {"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>","gt":"switch (objectType) {"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>","gt":"return null;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =","gt":"operation.visits.get(value);"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new","gt":"Reference(index);"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return","gt":"ref);"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =","gt":"map(operation, v);"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =","gt":"index;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.","gt":"objref[index] = `<STR_LIT>`;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>","gt":"break;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>","gt":"const constructor = value && value.constructor ?"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped.","gt":"source = index;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped. source = index;<EOL>                                        mapped.key = key;<EOL>","gt":"operation.hashes.push(mapped);"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped. source = index;<EOL>                                        mapped.key = key;<EOL>                                         operation.hashes.push(mapped);<EOL>                                        return mapped;<EOL>                                    }<EOL>                                    return","gt":"mapped}`<STR_LIT>;"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped. source = index;<EOL>                                        mapped.key = key;<EOL>                                         operation.hashes.push(mapped);<EOL>                                        return mapped;<EOL>                                    }<EOL>                                    return `<STR_LIT>`;<EOL>                                };<EOL>","gt":"const keys = Object.keys(value)"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped. source = index;<EOL>                                        mapped.key = key;<EOL>                                         operation.hashes.push(mapped);<EOL>                                        return mapped;<EOL>                                    }<EOL>                                    return `<STR_LIT>`;<EOL>                                };<EOL>                                 const keys = Object.keys(value)<EOL>                                    .","gt":"map(key =>"}
{"input":"<s> function map(operation, value) {<EOL>    switch (typeof value) {<EOL>         case '<STR_LIT>':<EOL>            return JSON.stringify(value);<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>            return value;<EOL>        case '<STR_LIT>':<EOL>            return '<STR_LIT>';<EOL>        default:<EOL>            if (value ===  null) {<EOL>                return '<STR_LIT>';<EOL>            }<EOL>            const objectType = Object.prototype.toString.call(value);<EOL>             switch (objectType) {<EOL>                case '<STR_LIT>':<EOL>                    return value.toString();<EOL>                case '<STR_LIT>':<EOL>                    return `<STR_LIT>`;<EOL>                default:<EOL>                    if (/Element/.test(objectType)) {<EOL>                         return null; // cannot serialize DOM elements<EOL>                    }<EOL>                    /// If this is a function, there is really no way to serialize<EOL>                    /// it in a way that will include its original context and<EOL>                    /// closures. But we do serialize the function, because this<EOL>                    /// will allow people to pass functions from their tasks as<EOL>                    /// long as they do not reference closures that are not accessible<EOL>                    /// in the context they are running in.<EOL>                    if (typeof value === '<STR_LIT>') {<EOL>                        return `<STR_LIT>`;<EOL>                    }<EOL>                    let index =  operation.visits.get(value);<EOL>                    if (index != null) {<EOL>                        return new  Reference(index);<EOL>                    }<EOL>                    else {<EOL>                        index = operation.visits.size;<EOL>                        operation.visits.set(value, index);<EOL>                    }<EOL>                    const mapArray = (collection, array) => {<EOL>                        return `<STR_LIT>`;<EOL>                    };<EOL>                    switch (objectType) {<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = mapArray(operation.arrays, value);<EOL>                            });<EOL>                            break;<EOL>                        case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation.objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    const ref =  map(operation, v);<EOL>                                    if (ref instanceof Reference) {<EOL>                                        ref.source =  index;<EOL>                                        operation.sets.push(ref);<EOL>                                    }<EOL>                                });<EOL>                            });<EOL>                            break;<EOL>                         case '<STR_LIT>':<EOL>                            operation.tails.push(() => {<EOL>                                operation. objref[index] = `<STR_LIT>`;<EOL>                                value.forEach((v, key) => {<EOL>                                    let ref = map(operation, v);<EOL>                                    const keyRef = map(operation, key);<EOL>                                    if (ref instanceof Reference === false) {<EOL>                                        ref = new Reference(null, ref);<EOL>                                    }<EOL>                                    ref.source = index;<EOL>                                    ref.key = ref instanceof Reference ? keyRef : key;<EOL>                                    operation.maps.push(ref);<EOL>                                });<EOL>                            });<EOL>                             break;<EOL>                        default:<EOL>                            operation.tails.push(() => {<EOL>                                 const constructor = value && value.constructor ?<EOL>                                    value.constructor : ({}).constructor;<EOL>                                const ctor = functionName(constructor) || '<STR_LIT>';<EOL>                                const mapProps = (key) => {<EOL>                                    const mapped = map(operation, value[key]);<EOL>                                    if (mapped instanceof Reference) {<EOL>                                        mapped. source = index;<EOL>                                        mapped.key = key;<EOL>                                         operation.hashes.push(mapped);<EOL>                                        return mapped;<EOL>                                    }<EOL>                                    return `<STR_LIT>`;<EOL>                                };<EOL>                                 const keys = Object.keys(value)<EOL>                                    . map(key =>","gt":"mapProps(key))"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[","gt":"k]);"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =","gt":"m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs.","gt":"join(\"<STR_LIT>\"));"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:","gt":"\"<STR_LIT>\","}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:  \"<STR_LIT>\",<EOL>            slots: [],<EOL>        };<EOL>        var existing = {};<EOL>        var m = /([^\\/]+)$/.exec(uu);<EOL>        userEntry.uid = m[<NUM_LIT>];<EOL>        var jsonName = \"<STR_LIT>\" + userEntry.uid + \"<STR_LIT>\";<EOL>        if (fs.existsSync(jsonName)) {<EOL>            userEntry = JSON.parse(fs.readFileSync(","gt":"jsonName, \"<STR_LIT>\"));"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:  \"<STR_LIT>\",<EOL>            slots: [],<EOL>        };<EOL>        var existing = {};<EOL>        var m = /([^\\/]+)$/.exec(uu);<EOL>        userEntry.uid = m[<NUM_LIT>];<EOL>        var jsonName = \"<STR_LIT>\" + userEntry.uid + \"<STR_LIT>\";<EOL>        if (fs.existsSync(jsonName)) {<EOL>            userEntry = JSON.parse(fs.readFileSync( jsonName, \"<STR_LIT>\"));<EOL>            existing = {};<EOL>            userEntry.slots.forEach(s => existing[s.guid] = <NUM_LIT>);<EOL>        }<EOL>        fs.readdirSync(uu).forEach(fn => {<EOL>            var m = /([^\\/]+)\\.json$/.exec(fn);<EOL>","gt":"if (!m)"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:  \"<STR_LIT>\",<EOL>            slots: [],<EOL>        };<EOL>        var existing = {};<EOL>        var m = /([^\\/]+)$/.exec(uu);<EOL>        userEntry.uid = m[<NUM_LIT>];<EOL>        var jsonName = \"<STR_LIT>\" + userEntry.uid + \"<STR_LIT>\";<EOL>        if (fs.existsSync(jsonName)) {<EOL>            userEntry = JSON.parse(fs.readFileSync( jsonName, \"<STR_LIT>\"));<EOL>            existing = {};<EOL>            userEntry.slots.forEach(s => existing[s.guid] = <NUM_LIT>);<EOL>        }<EOL>        fs.readdirSync(uu).forEach(fn => {<EOL>            var m = /([^\\/]+)\\.json$/.exec(fn);<EOL>             if (!m)<EOL>                return;<EOL>            if (existing.hasOwnProperty(m[<NUM_LIT>]))<EOL>                return;<EOL>            //console.log(\"process \"+ m[1])<EOL>            var data = JSON.parse(fs.readFileSync(uu + \"<STR_LIT>\" + fn, \"<STR_LIT>\"));<EOL>            var slotEntry = {<EOL>                guid:","gt":"data.guid,"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:  \"<STR_LIT>\",<EOL>            slots: [],<EOL>        };<EOL>        var existing = {};<EOL>        var m = /([^\\/]+)$/.exec(uu);<EOL>        userEntry.uid = m[<NUM_LIT>];<EOL>        var jsonName = \"<STR_LIT>\" + userEntry.uid + \"<STR_LIT>\";<EOL>        if (fs.existsSync(jsonName)) {<EOL>            userEntry = JSON.parse(fs.readFileSync( jsonName, \"<STR_LIT>\"));<EOL>            existing = {};<EOL>            userEntry.slots.forEach(s => existing[s.guid] = <NUM_LIT>);<EOL>        }<EOL>        fs.readdirSync(uu).forEach(fn => {<EOL>            var m = /([^\\/]+)\\.json$/.exec(fn);<EOL>             if (!m)<EOL>                return;<EOL>            if (existing.hasOwnProperty(m[<NUM_LIT>]))<EOL>                return;<EOL>            //console.log(\"process \"+ m[1])<EOL>            var data = JSON.parse(fs.readFileSync(uu + \"<STR_LIT>\" + fn, \"<STR_LIT>\"));<EOL>            var slotEntry = {<EOL>                guid:  data.guid,<EOL>                name: \"<STR_LIT>\",<EOL>                baseid: \"<STR_LIT>\",<EOL>                entries: []<EOL>            };<EOL>            userEntry.slots.push(slotEntry);<EOL>            //userEntry.uid = data.userid<EOL>            data.items.reverse();<EOL>            var features = {};<EOL>            if (data.items[<NUM_LIT>] && data.items[<NUM_LIT>].scriptstatus == \"<STR_LIT>\")<EOL>                slotEntry.baseid = data.items[<NUM_LIT>].scriptid;<EOL>            slotEntry.entries = data.items.map(i => {<EOL>                TDev.AST.reset();<EOL>                TDev.AST.loadScriptAsync((s) => TDev.Promise.as(s == \"<STR_LIT>\" ? i.script : null));<EOL>                var","gt":"nf = getAstInfo({});"}
{"input":"<s> function featureize(dirs) {<EOL>    libroots = JSON.parse(fs.readFileSync(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    Object.keys(libroots).forEach(k => {<EOL>        var m = /^([^:]*):([^:]*)/.exec(libroots[ k]);<EOL>        if (m) {<EOL>            libroots[k] =  m[<NUM_LIT>] + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>    });<EOL>    console.log(\"<STR_LIT>\" + dirs. join(\"<STR_LIT>\"));<EOL>    dirs.forEach(uu => {<EOL>        var userEntry = {<EOL>            uid:  \"<STR_LIT>\",<EOL>            slots: [],<EOL>        };<EOL>        var existing = {};<EOL>        var m = /([^\\/]+)$/.exec(uu);<EOL>        userEntry.uid = m[<NUM_LIT>];<EOL>        var jsonName = \"<STR_LIT>\" + userEntry.uid + \"<STR_LIT>\";<EOL>        if (fs.existsSync(jsonName)) {<EOL>            userEntry = JSON.parse(fs.readFileSync( jsonName, \"<STR_LIT>\"));<EOL>            existing = {};<EOL>            userEntry.slots.forEach(s => existing[s.guid] = <NUM_LIT>);<EOL>        }<EOL>        fs.readdirSync(uu).forEach(fn => {<EOL>            var m = /([^\\/]+)\\.json$/.exec(fn);<EOL>             if (!m)<EOL>                return;<EOL>            if (existing.hasOwnProperty(m[<NUM_LIT>]))<EOL>                return;<EOL>            //console.log(\"process \"+ m[1])<EOL>            var data = JSON.parse(fs.readFileSync(uu + \"<STR_LIT>\" + fn, \"<STR_LIT>\"));<EOL>            var slotEntry = {<EOL>                guid:  data.guid,<EOL>                name: \"<STR_LIT>\",<EOL>                baseid: \"<STR_LIT>\",<EOL>                entries: []<EOL>            };<EOL>            userEntry.slots.push(slotEntry);<EOL>            //userEntry.uid = data.userid<EOL>            data.items.reverse();<EOL>            var features = {};<EOL>            if (data.items[<NUM_LIT>] && data.items[<NUM_LIT>].scriptstatus == \"<STR_LIT>\")<EOL>                slotEntry.baseid = data.items[<NUM_LIT>].scriptid;<EOL>            slotEntry.entries = data.items.map(i => {<EOL>                TDev.AST.reset();<EOL>                TDev.AST.loadScriptAsync((s) => TDev.Promise.as(s == \"<STR_LIT>\" ? i.script : null));<EOL>                var  nf = getAstInfo({});<EOL>                var diff = TDev.Util.msSubtract(nf.features, features);<EOL>                features = nf.features;<EOL>                nf.features = diff;<EOL>                //nf.historyid = i.historyid<EOL>                nf.time = i.time;<EOL>                if (i.scriptstatus == \"<STR_LIT>\")<EOL>                    nf.","gt":"pubid = i.scriptid;"}
{"input":"<s> export function exec(command, options) {<EOL>    return new Promise((","gt":"resolve, reject) => {"}
{"input":"<s> export function exec(command, options) {<EOL>    return new Promise(( resolve, reject) => {<EOL>        cp.exec(command, options, (error, stdout, stderr) => {<EOL>            if (error) {<EOL>                reject({ error, stdout, stderr });<EOL>            }<EOL>            resolve({ stdout,","gt":"stderr });"}
{"input":"<s> export function AfterUpdate(...args) {<EOL>    return implementHookDecorator('<STR_LIT>',","gt":"args);"}
{"input":"<s> export async function updateLatestTag(pkg, versions, client, log, dry) {<EOL>    // Prerelease packages should never be tagged latest<EOL>","gt":"const latestNonPrerelease = versions.latestNonPrerelease(pkg);"}
{"input":"<s> export function nextItemHTML(selectionStart, selectionEnd, editor, rootNode) {<EOL>    let currentNode = getNode(rootNode, selectionEnd);<EOL>    let nextNode = undefined;<EOL>    if (!currentNode) {<EOL>","gt":"return;"}
{"input":"<s> export function nextItemHTML(selectionStart, selectionEnd, editor, rootNode) {<EOL>    let currentNode = getNode(rootNode, selectionEnd);<EOL>    let nextNode = undefined;<EOL>    if (!currentNode) {<EOL>         return;<EOL>    }<EOL>    if (currentNode.type !== '<STR_LIT>') {<EOL>        // If cursor is in the tag name, select tag<EOL>        if (selectionEnd.isBefore(currentNode.open.start.translate(<NUM_LIT>, currentNode.name.length))) {<EOL>            return getSelectionFromNode(currentNode, editor.document);<EOL>        }<EOL>        // If cursor is in the open tag, look for attributes<EOL>        if (selectionEnd.isBefore(currentNode.open.","gt":"end)) {"}
{"input":"<s> export function nextItemHTML(selectionStart, selectionEnd, editor, rootNode) {<EOL>    let currentNode = getNode(rootNode, selectionEnd);<EOL>    let nextNode = undefined;<EOL>    if (!currentNode) {<EOL>         return;<EOL>    }<EOL>    if (currentNode.type !== '<STR_LIT>') {<EOL>        // If cursor is in the tag name, select tag<EOL>        if (selectionEnd.isBefore(currentNode.open.start.translate(<NUM_LIT>, currentNode.name.length))) {<EOL>            return getSelectionFromNode(currentNode, editor.document);<EOL>        }<EOL>        // If cursor is in the open tag, look for attributes<EOL>        if (selectionEnd.isBefore(currentNode.open. end)) {<EOL>            let attrSelection = getNextAttribute(selectionStart, selectionEnd, editor.document, currentNode);<EOL>            if (attrSelection) {<EOL>                return attrSelection;<EOL>            }<EOL>        }<EOL>        // Get the first child of current node which is right after the cursor and is not a comment<EOL>        nextNode = currentNode.firstChild;<EOL>        while (nextNode && (selectionEnd.isAfterOrEqual(nextNode.start) || nextNode.type === '<STR_LIT>')) {<EOL>            nextNode = nextNode.","gt":"nextSibling;"}
{"input":"<s> // AoT requires an exported function for factories<EOL>export function HttpLoaderFactory(http) {<EOL>","gt":"return new TranslateHttpLoader(http, '<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function BeforeSave(...args) {<EOL>","gt":"return implementHookDecorator('<STR_LIT>', args);"}
{"input":"<s> export function BeforeCount(...args) {<EOL>","gt":"return implementHookDecorator('<STR_LIT>', args);"}
{"input":"<s> export function AfterDestroy(...args) {<EOL>    return","gt":"implementHookDecorator('<STR_LIT>', args);"}
{"input":"<s> function Test() {<EOL>    // lbtext print code of each function body<EOL>    const codeSection = get.section(mod, sect_id.code);<EOL>    for (let funcBody of get.function_bodies(codeSection)) {<EOL>        printCode(funcBody.code, s => { console.log(s.replace(/[\\r\\n]+$/, '<STR_LIT>')); });<EOL>    }<EOL>    // codegen<EOL>    const emitbuf = new BufferedEmitter(new ArrayBuffer(mod.z));<EOL>    mod.emit(","gt":"emitbuf);"}
{"input":"<s> function Test() {<EOL>    // lbtext print code of each function body<EOL>    const codeSection = get.section(mod, sect_id.code);<EOL>    for (let funcBody of get.function_bodies(codeSection)) {<EOL>        printCode(funcBody.code, s => { console.log(s.replace(/[\\r\\n]+$/, '<STR_LIT>')); });<EOL>    }<EOL>    // codegen<EOL>    const emitbuf = new BufferedEmitter(new ArrayBuffer(mod.z));<EOL>    mod.emit( emitbuf);<EOL>    if (!isUnitTest) {<EOL>        console.log(strRepr(mod));<EOL>    }<EOL>    // eval with spec interpreter<EOL>    return specEval(emitbuf.buffer, {<EOL>        eval:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export function IsCreditCard(target, propertyName) {<EOL>    addAttributeOptions(target, propertyName, {<EOL>","gt":"validate: {"}
{"input":"<s> <EOL>export function NotContains(value) {<EOL>    return (target, propertyName) => addAttributeOptions(target, propertyName, {<EOL>","gt":"validate: {"}
{"input":"<s> function varint7(value) {<EOL>    assert(","gt":"value >= -<NUM_LIT> && value <= <NUM_LIT>);"}
{"input":"<s> function varint32(value) {<EOL>    assert(value >= -<NUM_LIT> && value <=","gt":"<NUM_LIT>);"}
{"input":"<s> function if_(r, cond, then_, else_) {<EOL>    assert(r === then_[then_.length - <NUM_LIT>].r);<EOL>    assert(!else_ || else_.length == <NUM_LIT> || r === else_[else_.length - <NUM_LIT>].r);<EOL>    return new instr_pre_imm_post(","gt":"<NUM_LIT>, r, [cond],"}
{"input":"<s> function wrapInAction(callback, callbackType) {<EOL>    let currentAction = getCurrentAction();<EOL>    if (!currentAction || !callback) {<EOL>        return callback;<EOL>    }<EOL>    let actionName = currentAction + '<STR_LIT>' + callbackType;<EOL>    return function () {<EOL>        let returnValue;<EOL>        let args = arguments;<EOL>        action(actionName)(() => {<EOL>","gt":"returnValue = callback.apply(null, args);"}
{"input":"<s> function scrubFiles(files) {<EOL>    files.forEach(file => {<EOL>        if (/^[a-z]*$/.test(file)) {<EOL>            var pref = \"<STR_LIT>\" + file;<EOL>            scrubFiles(fs.readdirSync(pref).map(f => pref + \"<STR_LIT>\" + f));<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function scrubFiles(files) {<EOL>    files.forEach(file => {<EOL>        if (/^[a-z]*$/.test(file)) {<EOL>            var pref = \"<STR_LIT>\" + file;<EOL>            scrubFiles(fs.readdirSync(pref).map(f => pref + \"<STR_LIT>\" + f));<EOL>        }<EOL>         else {<EOL>            try {<EOL>                var entry = JSON.parse(fs.readFileSync(file, \"<STR_LIT>\"));<EOL>                TDev.AST.Diff.scrub(entry.items);<EOL>                var dst =","gt":"file.replace(/compressed/, \"<STR_LIT>\");"}
{"input":"<s> function scrubFiles(files) {<EOL>    files.forEach(file => {<EOL>        if (/^[a-z]*$/.test(file)) {<EOL>            var pref = \"<STR_LIT>\" + file;<EOL>            scrubFiles(fs.readdirSync(pref).map(f => pref + \"<STR_LIT>\" + f));<EOL>        }<EOL>         else {<EOL>            try {<EOL>                var entry = JSON.parse(fs.readFileSync(file, \"<STR_LIT>\"));<EOL>                TDev.AST.Diff.scrub(entry.items);<EOL>                var dst =  file.replace(/compressed/, \"<STR_LIT>\");<EOL>                fs.writeFileSync(dst, JSON.stringify(entry, null, <NUM_LIT>), \"<STR_LIT>\");<EOL>            }<EOL>","gt":"catch (e) {"}
{"input":"<s> export function renderViewTree(container) {<EOL>    const treeContainer = document.createElement('<STR_LIT>');<EOL>    dom.addClass(","gt":"treeContainer, '<STR_LIT>');"}
{"input":"<s> function getPublishingProfileWithSecrets(tr) {<EOL>    assert(","gt":"tr.stdOutContained('<STR_LIT>'), '<STR_LIT>');"}
{"input":"<s> export function isNotEmpty(str) {<EOL>    return (str &&","gt":"'<STR_LIT>' !== str);"}
{"input":"<s> function compileDuration(e, b) {<EOL>    var matches = b.type.match(/^device_duration_1\\/(\\d+)/);<EOL>    if (matches)<EOL>        return H.mkSimpleCall(","gt":"\"<STR_LIT>\", ["}
{"input":"<s> function f1() {<EOL>    var a = <NUM_LIT>;<EOL>    var","gt":"a = <NUM_LIT>;"}
{"input":"<s> function declareEnums(ast, options, processed = new Set()) {<EOL>    if (processed.has(ast)) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    processed.add(ast);<EOL>","gt":"let type = '<STR_LIT>';"}
{"input":"<s> function declareEnums(ast, options, processed = new Set()) {<EOL>    if (processed.has(ast)) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    processed.add(ast);<EOL>     let type = '<STR_LIT>';<EOL>    switch (ast.type) {<EOL>        case '<STR_LIT>':<EOL>            type = generateStandaloneEnum(ast, options) + '<STR_LIT>';<EOL>","gt":"break;"}
{"input":"<s> function declareEnums(ast, options, processed = new Set()) {<EOL>    if (processed.has(ast)) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    processed.add(ast);<EOL>     let type = '<STR_LIT>';<EOL>    switch (ast.type) {<EOL>        case '<STR_LIT>':<EOL>            type = generateStandaloneEnum(ast, options) + '<STR_LIT>';<EOL>             break;<EOL>        case '<STR_LIT>':<EOL>            type = getSuperTypesAndParams(ast).reduce((prev, ast) => prev + declareEnums(ast, options, processed), '<STR_LIT>');<EOL>            break;<EOL>","gt":"default:"}
{"input":"<s> function comparePositions(p1, p2) {<EOL>    let diff = p2.line - p1.line;<EOL>    if (","gt":"diff === <NUM_LIT>) {"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log(","gt":"'<STR_LIT>');"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>","gt":"if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =","gt":"mm[<NUM_LIT>] + \"<STR_LIT>\";"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud.","gt":"config.primaryCdnUrl = \"<STR_LIT>\";"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console.","gt":"log(\"<STR_LIT>\");"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>","gt":"var nruns = <NUM_LIT>;"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",","gt":"accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then((","gt":"j) => {"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a.","gt":"getName();"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a. getName();<EOL>            theApp = a;<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            if (tests[pubId].skipBitVm) {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Promise.","gt":"as();"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a. getName();<EOL>            theApp = a;<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            if (tests[pubId].skipBitVm) {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Promise. as();<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a. getName();<EOL>            theApp = a;<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            if (tests[pubId].skipBitVm) {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Promise. as();<EOL>            }<EOL>             else {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Hex.cliCompileAsync(theApp);<EOL>            }<EOL>        }).then((cpp) => {<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            var fakeGuid = \"<STR_LIT>\";<EOL>            var r = [];<EOL>            for (var i = <NUM_LIT>; i < nruns; ++i)<EOL>                r.push(TDev.Cloud.postUserInstalledCompileAsync(fakeGuid, cpp + \"<STR_LIT>\" + Math.random(), { name: name }));<EOL>","gt":"return TDev.Promise.join(r);"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a. getName();<EOL>            theApp = a;<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            if (tests[pubId].skipBitVm) {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Promise. as();<EOL>            }<EOL>             else {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Hex.cliCompileAsync(theApp);<EOL>            }<EOL>        }).then((cpp) => {<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            var fakeGuid = \"<STR_LIT>\";<EOL>            var r = [];<EOL>            for (var i = <NUM_LIT>; i < nruns; ++i)<EOL>                r.push(TDev.Cloud.postUserInstalledCompileAsync(fakeGuid, cpp + \"<STR_LIT>\" + Math.random(), { name: name }));<EOL>             return TDev.Promise.join(r);<EOL>        }).then(jsons => {<EOL>            jsons.forEach(json => {<EOL>                if (!json)<EOL>                    console.log(logMsg(\"<STR_LIT>\"));<EOL>","gt":"if (!json.success) {"}
{"input":"<s> // This function exercises the ARM compile service. It randomizes the input so<EOL>// as not to hit Michał's cache that sits in-between us and the ARM compile<EOL>// service. The variable [nruns] controls the number of requests we send for<EOL>// each script.<EOL>// It also exercises the bitvm compiler (once) for each script.<EOL>function compilerTest() {<EOL>    var tdUplKey = process.env['<STR_LIT>'] || process.env['<STR_LIT>'];<EOL>    if (!tdUplKey) {<EOL>        console.log( '<STR_LIT>');<EOL>        return;<EOL>    }<EOL>     if (/touchdevelop/.test(apiEndpoint) && tdUplKey) {<EOL>        var mm = /^(http.*\\/)(\\?access_token=.*)/.exec(tdUplKey);<EOL>        if (mm) {<EOL>            apiEndpoint =  mm[<NUM_LIT>] + \"<STR_LIT>\";<EOL>            accessToken = mm[<NUM_LIT>];<EOL>            liteStorage = \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    TDev.Cloud. config.primaryCdnUrl = \"<STR_LIT>\";<EOL>    console. log(\"<STR_LIT>\");<EOL>    var tests = {<EOL>        bqutuo: {},<EOL>        htdcbb: {},<EOL>        rwadai: { skipBitVm: true },<EOL>        xhfhgq: {}, // bitvm test1<EOL>    };<EOL>     var nruns = <NUM_LIT>;<EOL>    window.localStorage.setItem(\"<STR_LIT>\",  accessToken.replace(\"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    TDev.Cloud.config.rootUrl = apiEndpoint.replace(\"<STR_LIT>\", \"<STR_LIT>\");<EOL>    var theApp;<EOL>    Object.keys(tests).forEach((pubId) => {<EOL>        var name;<EOL>        var displayId = pubId;<EOL>        var logMsg = (s) => name + \"<STR_LIT>\" + displayId + \"<STR_LIT>\" + s;<EOL>        TDev.Cloud.getPublicApiAsync(pubId).then(( j) => {<EOL>            if (pubId != j.updateid)<EOL>                console.log(logMsg(\"<STR_LIT>\" + j.updateid));<EOL>            displayId = j.updateid;<EOL>            return TDev.Util.httpGetTextAsync(TDev.Cloud.getPublicApiUrl(j.updateid + \"<STR_LIT>\"));<EOL>        }).then((text) => {<EOL>            return TDev.Embedded.parseScript(text);<EOL>        }).then((a) => {<EOL>            name = a. getName();<EOL>            theApp = a;<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            if (tests[pubId].skipBitVm) {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Promise. as();<EOL>            }<EOL>             else {<EOL>                console.log(logMsg(\"<STR_LIT>\"));<EOL>                return TDev.Hex.cliCompileAsync(theApp);<EOL>            }<EOL>        }).then((cpp) => {<EOL>            console.log(logMsg(\"<STR_LIT>\"));<EOL>            var fakeGuid = \"<STR_LIT>\";<EOL>            var r = [];<EOL>            for (var i = <NUM_LIT>; i < nruns; ++i)<EOL>                r.push(TDev.Cloud.postUserInstalledCompileAsync(fakeGuid, cpp + \"<STR_LIT>\" + Math.random(), { name: name }));<EOL>             return TDev.Promise.join(r);<EOL>        }).then(jsons => {<EOL>            jsons.forEach(json => {<EOL>                if (!json)<EOL>                    console.log(logMsg(\"<STR_LIT>\"));<EOL>                 if (!json.success) {<EOL>                    console.log(TDev.Embedded.makeOutMbedErrorMsg(json));<EOL>                    console.log(logMsg(\"<STR_LIT>\"));<EOL>","gt":"process.exit(<NUM_LIT>);"}
{"input":"<s> function escapeKeyName(keyName) {<EOL>    if (keyName.length<EOL>        && /[A-Za-z_$]/.test(keyName.charAt(<NUM_LIT>))<EOL>        && /^[\\w$]+$/.test(","gt":"keyName)) {"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>","gt":"isUnreachableDefinition: false,"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if (","gt":"'<STR_LIT>' in schema) {"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>","gt":"let comment = `<STR_LIT>`"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ?","gt":"comment}\\n\\n${comment}`<STR_LIT>;"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>","gt":"keyName:"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>                 keyName:","gt":"key"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>                 keyName:  key<EOL>            });<EOL>        }));<EOL>    }<EOL>    if (options.unreachableDefinitions) {<EOL>        asts = asts.concat(map(schema.definitions, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed,","gt":"usedNames);"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>                 keyName:  key<EOL>            });<EOL>        }));<EOL>    }<EOL>    if (options.unreachableDefinitions) {<EOL>        asts = asts.concat(map(schema.definitions, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed,  usedNames);<EOL>            let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return {<EOL>                ast,<EOL>                isPatternProperty: false,<EOL>                isRequired: includes(schema.required || [], key),<EOL>","gt":"isUnreachableDefinition: true,"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>                 keyName:  key<EOL>            });<EOL>        }));<EOL>    }<EOL>    if (options.unreachableDefinitions) {<EOL>        asts = asts.concat(map(schema.definitions, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed,  usedNames);<EOL>            let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return {<EOL>                ast,<EOL>                isPatternProperty: false,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                 isUnreachableDefinition: true,<EOL>                keyName: key<EOL>            };<EOL>        }));<EOL>    }<EOL>    // handle additionalProperties<EOL>    switch (schema.additionalProperties) {<EOL>        case undefined:<EOL>        case true:<EOL>            return asts.concat({<EOL>                ast: T_ANY_ADDITIONAL_PROPERTIES,<EOL>                isPatternProperty: false,<EOL>                isRequired: true,<EOL>","gt":"isUnreachableDefinition: false,"}
{"input":"<s> <EOL>function parseSchema(schema, options, rootSchema, processed, usedNames, parentSchemaName) {<EOL>    let asts = map(schema.properties, (value, key) => ({<EOL>        ast: parse(value, options, rootSchema, key, true, processed, usedNames),<EOL>        isPatternProperty: false,<EOL>        isRequired: includes(schema.required || [], key),<EOL>         isUnreachableDefinition: false,<EOL>        keyName: key<EOL>    }));<EOL>    if ( '<STR_LIT>' in schema) {<EOL>        asts = asts.concat(map(schema.patternProperties, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed, usedNames);<EOL>             let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return ({<EOL>                ast,<EOL>                isPatternProperty: true,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                isUnreachableDefinition: false,<EOL>                 keyName:  key<EOL>            });<EOL>        }));<EOL>    }<EOL>    if (options.unreachableDefinitions) {<EOL>        asts = asts.concat(map(schema.definitions, (value, key) => {<EOL>            let ast = parse(value, options, rootSchema, key, true, processed,  usedNames);<EOL>            let comment = `<STR_LIT>`;<EOL>            ast.comment = ast.comment ? `<STR_LIT>` : comment;<EOL>            return {<EOL>                ast,<EOL>                isPatternProperty: false,<EOL>                isRequired: includes(schema.required || [], key),<EOL>                 isUnreachableDefinition: true,<EOL>                keyName: key<EOL>            };<EOL>        }));<EOL>    }<EOL>    // handle additionalProperties<EOL>    switch (schema.additionalProperties) {<EOL>        case undefined:<EOL>        case true:<EOL>            return asts.concat({<EOL>                ast: T_ANY_ADDITIONAL_PROPERTIES,<EOL>                isPatternProperty: false,<EOL>                isRequired: true,<EOL>                 isUnreachableDefinition: false,<EOL>                keyName: '<STR_LIT>'<EOL>            });<EOL>        case false:<EOL>            return asts;<EOL>        // pass \"true\" as the last param because in TS, properties<EOL>        // defined via index signatures are already optional<EOL>        default:<EOL>","gt":"return asts.concat({"}
{"input":"<s> <EOL>function hasDefinitions(schema) {<EOL>    return '<STR_LIT>' in","gt":"schema;"}
{"input":"<s> <EOL>export function getPositivePatterns(patterns) {<EOL>","gt":"return patternUtils.getPositivePatterns(patterns);"}
{"input":"<s> export function renderVariable(tree, variable, data, showChanged) {<EOL>    if (variable.available) {<EOL>        data.name.textContent = replaceWhitespace(variable.name);<EOL>        data.name.title = variable.type ? variable.type : variable.name;<EOL>        dom.toggleClass(data.name, '<STR_LIT>', !!variable.presentationHint && variable.presentationHint.kind === '<STR_LIT>');<EOL>    }<EOL>","gt":"if (variable.value) {"}
{"input":"<s> export function renderVariable(tree, variable, data, showChanged) {<EOL>    if (variable.available) {<EOL>        data.name.textContent = replaceWhitespace(variable.name);<EOL>        data.name.title = variable.type ? variable.type : variable.name;<EOL>        dom.toggleClass(data.name, '<STR_LIT>', !!variable.presentationHint && variable.presentationHint.kind === '<STR_LIT>');<EOL>    }<EOL>     if (variable.value) {<EOL>        data.name.textContent += variable.name ? '<STR_LIT>' : '<STR_LIT>';<EOL>        renderExpressionValue(variable, data.value, {<EOL>            showChanged,<EOL>            maxValueLength: MAX_VALUE_RENDER_LENGTH_IN_VIEWLET,<EOL>","gt":"preserveWhitespace: false,"}
{"input":"<s> <EOL>export function convertPatternGroupToTask(base, positive, negative, dynamic) {<EOL>    return {<EOL>        base,<EOL>","gt":"dynamic,"}
{"input":"<s> function f2() {<EOL>    var b =","gt":"-<NUM_LIT>;"}
{"input":"<s> export default function createEnvironment() {<EOL>    const network = Network.create(fetchQuery);<EOL>    const source = new RecordSource();<EOL>    const store =","gt":"new Store(source);"}
{"input":"<s> export function convertHrtimeToMilliseconds(hrtime) {<EOL>","gt":"const nanoseconds = (hrtime[<NUM_LIT>] * <NUM_LIT>) + hrtime[<NUM_LIT>];"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case ActionTypes.UPDATE_LOGIN_NOTIFICATION: {<EOL>            console.log('<STR_LIT>');<EOL>            let message = action.payload;<EOL>            state.loginFormErrorMessage =","gt":"message;"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case ActionTypes.UPDATE_LOGIN_NOTIFICATION: {<EOL>            console.log('<STR_LIT>');<EOL>            let message = action.payload;<EOL>            state.loginFormErrorMessage =  message;<EOL>            return Object.assign({}, state);<EOL>        }<EOL>        case ActionTypes.UPDATE_SIGNUP_NOTIFICATION: {<EOL>            let message = action.","gt":"payload;"}
{"input":"<s> export function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>        case ActionTypes.UPDATE_LOGIN_NOTIFICATION: {<EOL>            console.log('<STR_LIT>');<EOL>            let message = action.payload;<EOL>            state.loginFormErrorMessage =  message;<EOL>            return Object.assign({}, state);<EOL>        }<EOL>        case ActionTypes.UPDATE_SIGNUP_NOTIFICATION: {<EOL>            let message = action. payload;<EOL>            state.signUpFormErrorMessage = message;<EOL>            return Object.assign({}, state);<EOL>        }<EOL>","gt":"default: {"}
{"input":"<s> export function serenityBDDReporter(requirementsDirectory = serenity.config.requirementsDirectory, outputDirectory = serenity.config.outputDirectory) {<EOL>    return new SerenityBDDReporter(requirementsDirectory,","gt":"new FileSystem(outputDirectory));"}
{"input":"<s> export function getMemory() {<EOL>    return process.","gt":"memoryUsage().heapUsed / <NUM_LIT> / <NUM_LIT>;"}
{"input":"<s> async function main(argv) {<EOL>    if (argv.help) {<EOL>        printHelp();<EOL>        process.exit(<NUM_LIT>);<EOL>    }<EOL>    const","gt":"argIn = argv._[<NUM_LIT>] || argv.input;"}
{"input":"<s> async function main(argv) {<EOL>    if (argv.help) {<EOL>        printHelp();<EOL>        process.exit(<NUM_LIT>);<EOL>    }<EOL>    const  argIn = argv._[<NUM_LIT>] || argv.input;<EOL>    const argOut = argv._[<NUM_LIT>] || argv.output;<EOL>    try {<EOL>        const schema = JSON.parse(await readInput(argIn));<EOL>","gt":"const ts = await compile(schema, argIn, argv);"}
{"input":"<s> async function main(argv) {<EOL>    if (argv.help) {<EOL>        printHelp();<EOL>        process.exit(<NUM_LIT>);<EOL>    }<EOL>    const  argIn = argv._[<NUM_LIT>] || argv.input;<EOL>    const argOut = argv._[<NUM_LIT>] || argv.output;<EOL>    try {<EOL>        const schema = JSON.parse(await readInput(argIn));<EOL>         const ts = await compile(schema, argIn, argv);<EOL>        await writeOutput(ts, argOut);<EOL>    }<EOL>    catch (","gt":"e) {"}
{"input":"<s> function getConfigAndOptions(options) {<EOL>    if (options.config) {<EOL>        return getConfig(options.config, []).then(({ config }) => {<EOL>            const","gt":"opts = { ...options };"}
{"input":"<s> export function outcome(subject, stepStatus, error) {<EOL>    return new Outcome(subject, serenityResultFrom(stepStatus, error),","gt":"error);"}
{"input":"<s> function f(foo) {<EOL>    if (isS(foo)) {<EOL>","gt":"return foo;"}
{"input":"<s> function createFailingStep(stepInterface) {<EOL>    switch (stepInterface) {<EOL>        case StepInterface.CALLBACK:<EOL>            return cb => {<EOL>                process.nextTick(cb.bind(null, new Error('<STR_LIT>')));<EOL>            };<EOL>        case StepInterface.PROMISE:<EOL>            return () => {<EOL>                return new","gt":"Promise((resolve, reject) => {"}
{"input":"<s> function createFailingStep(stepInterface) {<EOL>    switch (stepInterface) {<EOL>        case StepInterface.CALLBACK:<EOL>            return cb => {<EOL>                process.nextTick(cb.bind(null, new Error('<STR_LIT>')));<EOL>            };<EOL>        case StepInterface.PROMISE:<EOL>            return () => {<EOL>                return new  Promise((resolve, reject) => {<EOL>                    process.nextTick(() => {<EOL>                        reject(new Error('<STR_LIT>'));<EOL>                    });<EOL>                });<EOL>            };<EOL>        case StepInterface.GENERATOR:<EOL>            return function* () {<EOL>                yield new Promise(process.nextTick);<EOL>                throw new Error('<STR_LIT>');<EOL>            };<EOL>","gt":"case StepInterface.SYNCHRONOUS:"}
{"input":"<s> function isSpecRunning() {<EOL>","gt":"return !!currentSpec;"}
{"input":"<s> export function ucFirst(word) {<EOL>    return","gt":"<NUM_LIT>).toUpperCase()}${word.substring(<NUM_LIT>)}`<STR_LIT>;"}
{"input":"<s> export function keyNameOf(key) {<EOL>    const keys = definitionsFrom(protractor, webdriver);<EOL>    for (const candidate in keys) {<EOL>        if (","gt":"keys.hasOwnProperty(candidate) && keys[candidate] === key) {"}
{"input":"<s> function deserialised(event) {<EOL>    const tagsFrom = (tags) => tags.map(_ => new Tag(_.type, _.values)), scene = ({ name, category, location, tags, id }) => new RecordedScene(name, category, location, tagsFrom(tags), id), activity = ({ name, location, id }) => new RecordedActivity(name, location, id), outcome = (type, { subject, result, error }) => new Outcome(type(subject), result, error);<EOL>    switch (event.type) {<EOL>        case '<STR_LIT>':<EOL>            return new SceneStarts(","gt":"scene(event.value), event.timestamp);"}
{"input":"<s> function deserialised(event) {<EOL>    const tagsFrom = (tags) => tags.map(_ => new Tag(_.type, _.values)), scene = ({ name, category, location, tags, id }) => new RecordedScene(name, category, location, tagsFrom(tags), id), activity = ({ name, location, id }) => new RecordedActivity(name, location, id), outcome = (type, { subject, result, error }) => new Outcome(type(subject), result, error);<EOL>    switch (event.type) {<EOL>        case '<STR_LIT>':<EOL>            return new SceneStarts( scene(event.value), event.timestamp);<EOL>        case '<STR_LIT>':<EOL>            return new ActivityStarts(activity(event.value), event.timestamp);<EOL>        case '<STR_LIT>':<EOL>            return new ActivityFinished(outcome(activity, event.value), event.timestamp);<EOL>        case '<STR_LIT>':<EOL>            return new SceneFinished(","gt":"outcome(scene, event.value), event.timestamp);"}
{"input":"<s> <EOL>export function fromHar(harData, options = {}) {<EOL>    const harTransformerOptions = {<EOL>        ...defaultHarTransformerOptions,<EOL>        ...","gt":"options,"}
{"input":"<s> export default function (selector) {<EOL>    let selectorArray;<EOL>    let type;<EOL>    if (selector.match(/\\[(.*?)\\]/) !== null) {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length - <NUM_LIT>).split('<STR_LIT>');<EOL>        type = '<STR_LIT>';<EOL>    }<EOL>    else if (selector[<NUM_LIT>] === '<STR_LIT>') {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length).split('<STR_LIT>');<EOL>        type =","gt":"'<STR_LIT>';"}
{"input":"<s> export default function (selector) {<EOL>    let selectorArray;<EOL>    let type;<EOL>    if (selector.match(/\\[(.*?)\\]/) !== null) {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length - <NUM_LIT>).split('<STR_LIT>');<EOL>        type = '<STR_LIT>';<EOL>    }<EOL>    else if (selector[<NUM_LIT>] === '<STR_LIT>') {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length).split('<STR_LIT>');<EOL>        type =  '<STR_LIT>';<EOL>    }<EOL>    else {<EOL>        selectorArray = selector.split(","gt":"'<STR_LIT>');"}
{"input":"<s> export default function (selector) {<EOL>    let selectorArray;<EOL>    let type;<EOL>    if (selector.match(/\\[(.*?)\\]/) !== null) {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length - <NUM_LIT>).split('<STR_LIT>');<EOL>        type = '<STR_LIT>';<EOL>    }<EOL>    else if (selector[<NUM_LIT>] === '<STR_LIT>') {<EOL>        selectorArray = selector.slice(<NUM_LIT>, selector.length).split('<STR_LIT>');<EOL>        type =  '<STR_LIT>';<EOL>    }<EOL>    else {<EOL>        selectorArray = selector.split( '<STR_LIT>');<EOL>        type = '<STR_LIT>';<EOL>    }<EOL>","gt":"let first = selectorArray.shift();"}
{"input":"<s> function stringify(token, value) {<EOL>    switch ({}.toString.call(value)) {<EOL>        case '<STR_LIT>': return stringify(token, value());<EOL>        case '<STR_LIT>': return value.map(item =>","gt":"stringify(token, item)).join('<STR_LIT>');"}
{"input":"<s> function isObject(item) {<EOL>    return item && typeof item === '<STR_LIT>' && !Array.","gt":"isArray(item);"}
{"input":"<s> // Checks every injection if it is known to the $injector<EOL>// It will then check the unknown injects if there is any parent component that matches<EOL>// the name. If a matching component was found it will inject that component as a<EOL>// local.<EOL>function injectParentComponents(caller, injects, controller, ddo, $injector, locals) {<EOL>    injects.forEach((inject) => {<EOL>        if (!$injector.has(inject)) {<EOL>            let parent = locals.$element;<EOL>            do {<EOL>                if (!parent.","gt":"controller)"}
{"input":"<s> export function Once(milliseconds = <NUM_LIT>) {<EOL>    return function (target, key, descriptor) {<EOL>        var originalMethod = descriptor.value;<EOL>        descriptor.value = function (...args) {<EOL>            var sub = originalMethod.apply(","gt":"this, args);"}
{"input":"<s> export function Once(milliseconds = <NUM_LIT>) {<EOL>    return function (target, key, descriptor) {<EOL>        var originalMethod = descriptor.value;<EOL>        descriptor.value = function (...args) {<EOL>            var sub = originalMethod.apply( this, args);<EOL>            setTimeout(() => {<EOL>                if (sub instanceof Subscriber) {<EOL>","gt":"sub.unsubscribe();"}
{"input":"<s> export default function (type, strategyType = '<STR_LIT>') {<EOL>    let names = new Set();<EOL>    function createUniqueName(name) {<EOL>        if (names.has(name)) {<EOL>            return createUniqueName(","gt":"name}${randomInt()}`<STR_LIT>;"}
{"input":"<s> export default function (type, strategyType = '<STR_LIT>') {<EOL>    let names = new Set();<EOL>    function createUniqueName(name) {<EOL>        if (names.has(name)) {<EOL>            return createUniqueName(`<STR_LIT>`);<EOL>        }<EOL>        else {<EOL>            return name;<EOL>        }<EOL>    }<EOL>    ;<EOL>    const NAME_TAKEN_ERROR = (name) => {<EOL>        return new Error(`<STR_LIT>`);<EOL>    };<EOL>    // Return the factory<EOL>    return (() => {<EOL>        let d = function (maybeT) {<EOL>            const","gt":"writeWithUniqueName = (t) => {"}
{"input":"<s> export default function (type, strategyType = '<STR_LIT>') {<EOL>    let names = new Set();<EOL>    function createUniqueName(name) {<EOL>        if (names.has(name)) {<EOL>            return createUniqueName(`<STR_LIT>`);<EOL>        }<EOL>        else {<EOL>            return name;<EOL>        }<EOL>    }<EOL>    ;<EOL>    const NAME_TAKEN_ERROR = (name) => {<EOL>        return new Error(`<STR_LIT>`);<EOL>    };<EOL>    // Return the factory<EOL>    return (() => {<EOL>        let d = function (maybeT) {<EOL>            const  writeWithUniqueName = (t) => {<EOL>                let name = createUniqueName(t.name);<EOL>                providerStore.set('<STR_LIT>', type, t);<EOL>                providerStore.set('<STR_LIT>', name, t);<EOL>                names.add(name);<EOL>            };<EOL>            if (typeof maybeT === '<STR_LIT>') {<EOL>                if (names.has(maybeT)) {<EOL>                    throw NAME_TAKEN_ERROR(maybeT);<EOL>                }<EOL>                return (t) => {<EOL>                    providerStore.set('<STR_LIT>', type, t);<EOL>                    providerStore.set('<STR_LIT>', maybeT, t);<EOL>                    names.add(maybeT);<EOL>                };<EOL>            }<EOL>            else if (maybeT === undefined) {<EOL>","gt":"return (t) => writeWithUniqueName(t);"}
{"input":"<s> function hasCompressionIssue(entry, requestType) {<EOL>","gt":"const headers = entry.response.headers;"}
{"input":"<s> <EOL>function isSecure(entry) {<EOL>    return entry.request.url.indexOf(\"<STR_LIT>\") ===","gt":"<NUM_LIT>;"}
{"input":"<s> function createStubbedSuite(stubbedMethodName, testMethodName, placeholders, firstArguments) {<EOL>    let originalMethod;<EOL>    let calledWith;<EOL>    let extraArguments =","gt":"[];"}
{"input":"<s> function createStubbedSuite(stubbedMethodName, testMethodName, placeholders, firstArguments) {<EOL>    let originalMethod;<EOL>    let calledWith;<EOL>    let extraArguments =  [];<EOL>    let element = new Element('<STR_LIT>', {});<EOL>    const suite = {<EOL>","gt":"setup: function () {"}
{"input":"<s> function createStubbedSuite(stubbedMethodName, testMethodName, placeholders, firstArguments) {<EOL>    let originalMethod;<EOL>    let calledWith;<EOL>    let extraArguments =  [];<EOL>    let element = new Element('<STR_LIT>', {});<EOL>    const suite = {<EOL>         setup: function () {<EOL>            originalMethod = element[stubbedMethodName];<EOL>            element[stubbedMethodName] = function () {<EOL>                calledWith = arguments;<EOL>            };<EOL>            for (let i = <NUM_LIT>, j = originalMethod.length - <NUM_LIT>; i < j; ++i) {<EOL>                extraArguments.push('<STR_LIT>' + (i + <NUM_LIT>));<EOL>            }<EOL>        },<EOL>        beforeEach: function () {<EOL>            calledWith = null;<EOL>        },<EOL>        teardown:","gt":"function () {"}
{"input":"<s> function createStubbedSuite(stubbedMethodName, testMethodName, placeholders, firstArguments) {<EOL>    let originalMethod;<EOL>    let calledWith;<EOL>    let extraArguments =  [];<EOL>    let element = new Element('<STR_LIT>', {});<EOL>    const suite = {<EOL>         setup: function () {<EOL>            originalMethod = element[stubbedMethodName];<EOL>            element[stubbedMethodName] = function () {<EOL>                calledWith = arguments;<EOL>            };<EOL>            for (let i = <NUM_LIT>, j = originalMethod.length - <NUM_LIT>; i < j; ++i) {<EOL>                extraArguments.push('<STR_LIT>' + (i + <NUM_LIT>));<EOL>            }<EOL>        },<EOL>        beforeEach: function () {<EOL>            calledWith = null;<EOL>        },<EOL>        teardown:  function () {<EOL>            element[stubbedMethodName] = originalMethod;<EOL>        }<EOL>    };<EOL>    placeholders.forEach(function (placeholder, index) {<EOL>        const method = testMethodName.replace('<STR_LIT>', placeholder);<EOL>        suite['<STR_LIT>' + method] = function () {<EOL>            assert.","gt":"isFunction(element[method]);"}
{"input":"<s> export function createRowBg(y, rowHeight) {<EOL>    const rowFixed = svg.newG(\"<STR_LIT>\");<EOL>    rowFixed.appendChild(svg.newRect({<EOL>        height: rowHeight,<EOL>        width:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function createRowBg(y, rowHeight) {<EOL>    const rowFixed = svg.newG(\"<STR_LIT>\");<EOL>    rowFixed.appendChild(svg.newRect({<EOL>        height: rowHeight,<EOL>        width:  \"<STR_LIT>\",<EOL>        x: \"<STR_LIT>\",<EOL>        y,<EOL>    }, \"<STR_LIT>\", {<EOL>","gt":"opacity: <NUM_LIT>,"}
{"input":"<s> <EOL>export async function asyncABC() {<EOL>    function somethingSlow(index) {<EOL>        let storage = '<STR_LIT>'.charAt(index);<EOL>        return new Promise(resolve => {<EOL>            // here we pretend to wait on the network<EOL>            setTimeout(() => resolve(storage), <NUM_LIT>);<EOL>        });<EOL>    }<EOL>    let a = await somethingSlow(<NUM_LIT>);<EOL>    let b = await","gt":"somethingSlow(<NUM_LIT>);"}
{"input":"<s> function _getStaggedDiffForAllFiles() {<EOL>    return Git.status().then((statusFiles) => {<EOL>        const untrackedFiles = [];<EOL>        const fileArray = [];<EOL>        statusFiles.forEach((fileObject) => {<EOL>            const isUntracked = fileObject.status.","gt":"indexOf(Git.FILE_STATUS.UNTRACKED) !== -<NUM_LIT>;"}
{"input":"<s> function _getStaggedDiffForAllFiles() {<EOL>    return Git.status().then((statusFiles) => {<EOL>        const untrackedFiles = [];<EOL>        const fileArray = [];<EOL>        statusFiles.forEach((fileObject) => {<EOL>            const isUntracked = fileObject.status. indexOf(Git.FILE_STATUS.UNTRACKED) !== -<NUM_LIT>;<EOL>            if (isUntracked) {<EOL>                untrackedFiles.push(fileObject.file);<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> function _getStaggedDiffForAllFiles() {<EOL>    return Git.status().then((statusFiles) => {<EOL>        const untrackedFiles = [];<EOL>        const fileArray = [];<EOL>        statusFiles.forEach((fileObject) => {<EOL>            const isUntracked = fileObject.status. indexOf(Git.FILE_STATUS.UNTRACKED) !== -<NUM_LIT>;<EOL>            if (isUntracked) {<EOL>                untrackedFiles.push(fileObject.file);<EOL>            }<EOL>             else {<EOL>                fileArray.push(fileObject.file);<EOL>            }<EOL>        });<EOL>        return","gt":"untrackedFiles.length > <NUM_LIT> ?"}
{"input":"<s> function discardAllChanges() {<EOL>    return Utils.askQuestion(Strings.RESET_LOCAL_REPO, Strings.RESET_LOCAL_REPO_CONFIRM, { booleanResponse: true })<EOL>        .then((response) => {<EOL>        if (response) {<EOL>            return","gt":"Git2.discardAllChanges().catch((err) => {"}
{"input":"<s> <EOL>export function contains(arr, item) {<EOL>    return arr.some((","gt":"x) => x === item);"}
{"input":"<s> export function getCommand(args) {<EOL>","gt":"return new ExtensionPublisherBase(args);"}
{"input":"<s> async function fn6(x) {<EOL>    var { x,","gt":"z } = y;"}
{"input":"<s> <EOL>export function getHeader(headers, headerName) {<EOL>    const headerFilter = matchHeaderPartialFn(headerName.toLowerCase());<EOL>    let firstItem;<EOL>    if (","gt":"browserHasFind) {"}
{"input":"<s> function moveUp(cursor, noOfLines = <NUM_LIT>, select) {<EOL>    move(cursor, { to: CursorMove.RawDirection.Up, by: CursorMove.RawUnit.","gt":"WrappedLine, value: noOfLines, select: select });"}
{"input":"<s> export function formatBytes(bytes) {<EOL>    const raw = `<STR_LIT>`;<EOL>    if (bytes >= bytesPerMB) {<EOL>","gt":"return `<STR_LIT>`;"}
{"input":"<s> function isSafari(capabilities, minOrExactVersion, maxVersion) {<EOL>    if (capabilities.browserName !== '<STR_LIT>') {<EOL>","gt":"return false;"}
{"input":"<s> function isFirefox(capabilities, minOrExactVersion, maxVersion) {<EOL>    if (capabilities.browserName !== '<STR_LIT>') {<EOL>","gt":"return false;"}
{"input":"<s> export function testProperty(executor, mockConsole, name, badValue, goodValue, expectedValue, error, allowDeprecated, message) {<EOL>    if (typeof allowDeprecated === '<STR_LIT>') {<EOL>        message = allowDeprecated;<EOL>        allowDeprecated = undefined;<EOL>    }<EOL>    if (typeof","gt":"allowDeprecated === '<STR_LIT>') {"}
{"input":"<s> export function testProperty(executor, mockConsole, name, badValue, goodValue, expectedValue, error, allowDeprecated, message) {<EOL>    if (typeof allowDeprecated === '<STR_LIT>') {<EOL>        message = allowDeprecated;<EOL>        allowDeprecated = undefined;<EOL>    }<EOL>    if (typeof  allowDeprecated === '<STR_LIT>') {<EOL>        allowDeprecated = false;<EOL>    }<EOL>    assert.throws(() => {<EOL>","gt":"executor.configure({ [name]: badValue });"}
{"input":"<s> export function testProperty(executor, mockConsole, name, badValue, goodValue, expectedValue, error, allowDeprecated, message) {<EOL>    if (typeof allowDeprecated === '<STR_LIT>') {<EOL>        message = allowDeprecated;<EOL>        allowDeprecated = undefined;<EOL>    }<EOL>    if (typeof  allowDeprecated === '<STR_LIT>') {<EOL>        allowDeprecated = false;<EOL>    }<EOL>    assert.throws(() => {<EOL>         executor.configure({ [name]: badValue });<EOL>    }, error);<EOL>    executor.configure({ [name]: goodValue });<EOL>    if (","gt":"allowDeprecated) {"}
{"input":"<s> export function testProperty(executor, mockConsole, name, badValue, goodValue, expectedValue, error, allowDeprecated, message) {<EOL>    if (typeof allowDeprecated === '<STR_LIT>') {<EOL>        message = allowDeprecated;<EOL>        allowDeprecated = undefined;<EOL>    }<EOL>    if (typeof  allowDeprecated === '<STR_LIT>') {<EOL>        allowDeprecated = false;<EOL>    }<EOL>    assert.throws(() => {<EOL>         executor.configure({ [name]: badValue });<EOL>    }, error);<EOL>    executor.configure({ [name]: goodValue });<EOL>    if ( allowDeprecated) {<EOL>        for (let call of mockConsole.warn.getCalls()) {<EOL>            assert.include(call.args[<NUM_LIT>], '<STR_LIT>', '<STR_LIT>');<EOL>        }<EOL>    }<EOL>    else {<EOL>        assert.equal(mockConsole.warn.callCount, <NUM_LIT>, '<STR_LIT>');<EOL>    }<EOL>    name = name.replace(/\\+$/, '<STR_LIT>');<EOL>    const config =","gt":"executor.config;"}
{"input":"<s> export function getAuthStatus(state) {<EOL>","gt":"return state.auth;"}
{"input":"<s> <EOL>export function getDefaultBasePath() {<EOL>    const match = /^(.*\\/)node_modules\\/intern\\/?/.exec(global.location.pathname);<EOL>    if (match) {<EOL>        // If the current location contains `node_modules/intern`,<EOL>        // assume the base path is the parent of<EOL>        // `node_modules/intern`<EOL>        return match[<NUM_LIT>];<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function rebaseRemote(remote, branch) {<EOL>    return git([\"<STR_LIT>\", remote + \"<STR_LIT>\" +","gt":"branch]);"}
{"input":"<s> export function resetRemote(remote, branch) {<EOL>    return git([\"<STR_LIT>\", \"<STR_LIT>\",","gt":"remote + \"<STR_LIT>\" + branch]).then((stdout) => {"}
{"input":"<s> export function calculateFullStyle(full, postFix) {<EOL>    if (typeof full === '<STR_LIT>') {<EOL>        if (postFix === '<STR_LIT>') {<EOL>            return full.horizontal ? `<STR_LIT>` : '<STR_LIT>';<EOL>        }<EOL>        else {<EOL>            return full.vertical ? `<STR_LIT>` : '<STR_LIT>';<EOL>        }<EOL>    }<EOL>    else if (typeof full === '<STR_LIT>') {<EOL>        return full ? `<STR_LIT>` :","gt":"'<STR_LIT>';"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +","gt":"\"<STR_LIT>\");"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =","gt":"cmds[<NUM_LIT>];"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var","gt":"localPath = process.env[\"<STR_LIT>\"];"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =","gt":"cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>","gt":"\"<STR_LIT>\": \"<STR_LIT>\""}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>","gt":"var suff = \"<STR_LIT>\";"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test(","gt":"rel)) {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =","gt":"dataPath(\"<STR_LIT>\");"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s.","gt":"replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =","gt":"path +"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +","gt":"suff;"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =","gt":""}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =","gt":"s => {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if (","gt":"specRel == \"<STR_LIT>\") {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +","gt":"\"<STR_LIT>\" + rel;"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead(","gt":"<NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp.","gt":"end(JSON.stringify(d));"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==","gt":"\"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/.","gt":"test(rel)) {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp.","gt":"end(rewrite(text), \"<STR_LIT>\");"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +","gt":"\"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse(","gt":"str);"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>","gt":"if (err) {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>","gt":"resp.writeHead(<NUM_LIT>);"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>","gt":"else {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp.","gt":"replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile(","gt":"cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =","gt":"rewrite;"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>","gt":"rewrite = d => {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if (","gt":"oldrewrite)"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp.","gt":"writeHead(<NUM_LIT>);"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>             else {<EOL>                if (rewrite)<EOL>                    data = rewrite(data);<EOL>                if (","gt":"typeof data == \"<STR_LIT>\")"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>             else {<EOL>                if (rewrite)<EOL>                    data = rewrite(data);<EOL>                if ( typeof data == \"<STR_LIT>\")<EOL>                    data = new Buffer(data, \"<STR_LIT>\");<EOL>                resp.writeHead(<NUM_LIT>, {<EOL>                    '<STR_LIT>': mime,<EOL>                    '<STR_LIT>':","gt":"data.length"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>             else {<EOL>                if (rewrite)<EOL>                    data = rewrite(data);<EOL>                if ( typeof data == \"<STR_LIT>\")<EOL>                    data = new Buffer(data, \"<STR_LIT>\");<EOL>                resp.writeHead(<NUM_LIT>, {<EOL>                    '<STR_LIT>': mime,<EOL>                    '<STR_LIT>':  data.length<EOL>                });<EOL>                resp.end(data);<EOL>            }<EOL>        });<EOL>    }<EOL>","gt":"else if (editorCache.hasOwnProperty(url)) {"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>             else {<EOL>                if (rewrite)<EOL>                    data = rewrite(data);<EOL>                if ( typeof data == \"<STR_LIT>\")<EOL>                    data = new Buffer(data, \"<STR_LIT>\");<EOL>                resp.writeHead(<NUM_LIT>, {<EOL>                    '<STR_LIT>': mime,<EOL>                    '<STR_LIT>':  data.length<EOL>                });<EOL>                resp.end(data);<EOL>            }<EOL>        });<EOL>    }<EOL>     else if (editorCache.hasOwnProperty(url)) {<EOL>        var","gt":"c = editorCache[url];"}
{"input":"<s> function proxyEditor(cmds, req, resp) {<EOL>    if (!editorCache) {<EOL>        editorCache = {};<EOL>        [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(v => {<EOL>            var editorJson = dataPath(v +  \"<STR_LIT>\");<EOL>            if (fs.existsSync(editorJson)) {<EOL>                var c = JSON.parse(fs.readFileSync(editorJson, \"<STR_LIT>\"));<EOL>                Object.keys(c).forEach(k => editorCache[k] = c[k]);<EOL>            }<EOL>        });<EOL>        if (!fs.existsSync(dataPath(\"<STR_LIT>\"))) {<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>            fs.mkdirSync(dataPath(\"<STR_LIT>\"));<EOL>        }<EOL>    }<EOL>    var rel =  cmds[<NUM_LIT>];<EOL>    if (!rel)<EOL>        rel = \"<STR_LIT>\";<EOL>    var  localPath = process.env[\"<STR_LIT>\"];<EOL>    if (rel == \"<STR_LIT>\" && !localPath)<EOL>        rel = \"<STR_LIT>\";<EOL>    if (!/^(current|beta|latest|local|cdn-pub|cdn-thumb|cache|^\\d\\d\\d\\d\\d\\d[\\da-z\\.-]+)$/.test(rel)) {<EOL>        resp.writeHead(<NUM_LIT>, \"<STR_LIT>\");<EOL>        resp.end(\"<STR_LIT>\");<EOL>        return;<EOL>    }<EOL>    var file =  cmds.slice(<NUM_LIT>).join(\"<STR_LIT>\");<EOL>    if (file == \"<STR_LIT>\") {<EOL>        file = \"<STR_LIT>\";<EOL>        if (rel == \"<STR_LIT>\" && cmds[<NUM_LIT>] === undefined) {<EOL>            resp.writeHead(<NUM_LIT>, {<EOL>                 \"<STR_LIT>\": \"<STR_LIT>\"<EOL>            });<EOL>            resp.end();<EOL>            return;<EOL>        }<EOL>    }<EOL>    var cdn = \"<STR_LIT>\";<EOL>    var url = cdn + \"<STR_LIT>\" + rel + \"<STR_LIT>\" + file;<EOL>    var path = \"<STR_LIT>\";<EOL>     var suff = \"<STR_LIT>\";<EOL>    var cacheDir = \"<STR_LIT>\";<EOL>    if (/^cdn-/.test( rel)) {<EOL>        file = encodeURIComponent(cdn + rel.slice(<NUM_LIT>) + \"<STR_LIT>\" + file);<EOL>        rel = \"<STR_LIT>\";<EOL>    }<EOL>    if (rel == \"<STR_LIT>\") {<EOL>        url = decodeURIComponent(file);<EOL>        url = url.replace(/[?&]access_token=.*/, \"<STR_LIT>\");<EOL>        file = url.replace(/^https?:\\/\\/(www\\.|az820584.vo.msecnd.net\\/)/, \"<STR_LIT>\").replace(/[^a-zA-Z0-9\\.\\-]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        var h = crypto.createHash(\"<STR_LIT>\");<EOL>        h.update(new Buffer(url, \"<STR_LIT>\"));<EOL>        file += \"<STR_LIT>\" + h.digest(\"<STR_LIT>\").replace(/[^a-zA-Z0-9]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>        cacheDir =  dataPath(\"<STR_LIT>\");<EOL>    }<EOL>    else<EOL>        suff = \"<STR_LIT>\" + rel;<EOL>    var rewrite;<EOL>    var specRel = rel;<EOL>    var selfUrl = \"<STR_LIT>\" + req.headers.host + \"<STR_LIT>\";<EOL>    var relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>    var replUrl = (s) => s. replace(/https:\\/\\/az820584.vo.msecnd.net\\/app\\/\\d\\d\\d[\\da-z\\.-]+\\/(c\\/)?/g, relUrl);<EOL>    switch (file) {<EOL>        case \"<STR_LIT>\":<EOL>            url =  path +  suff;<EOL>            rewrite =   s => {<EOL>                s = replUrl(s);<EOL>                if (rel != \"<STR_LIT>\") {<EOL>                    s = s.replace(/manifest=\"[^\"]+\"/, \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + \"<STR_LIT>\");<EOL>                    s = s.replace(/(browsers|error)Url = .*/g, (a, b) => b + \"<STR_LIT>\" + selfUrl + \"<STR_LIT>\" + specRel + \"<STR_LIT>\" + b + \"<STR_LIT>\");<EOL>                }<EOL>                s = s.replace(/localProxy = \".*\"/, '<STR_LIT>');<EOL>                if (rel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                else if ( specRel == \"<STR_LIT>\") {<EOL>                    s = s.replace(/betaFriendlyId = \".*\"/, \"<STR_LIT>\");<EOL>                }<EOL>                return s;<EOL>            };<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>        case \"<STR_LIT>\":<EOL>            url = path + file + \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            url = path +  \"<STR_LIT>\" + rel;<EOL>            rewrite = replUrl;<EOL>            break;<EOL>        case \"<STR_LIT>\":<EOL>            fs.readFile(dataPath(\"<STR_LIT>\"), \"<STR_LIT>\", (err, data) => {<EOL>                if (err)<EOL>                    data = \"<STR_LIT>\";<EOL>                resp.writeHead( <NUM_LIT>, { '<STR_LIT>': '<STR_LIT>' });<EOL>                var d = JSON.parse(data);<EOL>                d.entroy = crypto.randomBytes(<NUM_LIT>).toString(\"<STR_LIT>\");<EOL>                resp. end(JSON.stringify(d));<EOL>            });<EOL>            return;<EOL>    }<EOL>    if ((rel == \"<STR_LIT>\" || rel ==  \"<STR_LIT>\" || rel == \"<STR_LIT>\") && file == \"<STR_LIT>\")<EOL>        cacheEditor(rel, url);<EOL>    var serveText = (text) => {<EOL>        if (!rewrite)<EOL>            rewrite = s => s;<EOL>        if (!/^\\d/. test(rel)) {<EOL>            var m = /https:\\/\\/az820584.vo.msecnd.net\\/app\\/(\\d\\d\\d[\\da-z\\.-]+)/.exec(text);<EOL>            if (m) {<EOL>                rel = m[<NUM_LIT>];<EOL>                relUrl = selfUrl + \"<STR_LIT>\" + rel + \"<STR_LIT>\";<EOL>            }<EOL>        }<EOL>        resp. end(rewrite(text), \"<STR_LIT>\");<EOL>    };<EOL>    if (rel == \"<STR_LIT>\" || /^cdn-/.test(rel)) {<EOL>        fs.readFile(cacheDir + \"<STR_LIT>\" + file +  \"<STR_LIT>\", \"<STR_LIT>\", (err, str) => {<EOL>            var sendCached = () => {<EOL>                var meta = JSON.parse( str);<EOL>                resp.writeHead(<NUM_LIT>, meta.headers);<EOL>                fs.readFile(cacheDir + \"<STR_LIT>\" + meta.filename, null, (err, data) => resp.end(data));<EOL>            };<EOL>             if (err) {<EOL>                downloadFile(url, (err, buff, hd) => {<EOL>                    if (err) {<EOL>                        error.log(err);<EOL>                         resp.writeHead(<NUM_LIT>);<EOL>                        resp.end(err);<EOL>                    }<EOL>                     else {<EOL>                        debug.log(\"<STR_LIT>\" + url);<EOL>                        var ctp = hd['<STR_LIT>'];<EOL>                        var ext = ctp. replace(/.*\\//, \"<STR_LIT>\").replace(/[^a-z]/g, \"<STR_LIT>\").slice(<NUM_LIT>, <NUM_LIT>);<EOL>                        var fn = file + \"<STR_LIT>\" + ext;<EOL>                        fs.writeFile( cacheDir + \"<STR_LIT>\" + fn, buff, null, err => {<EOL>                            if (!err) {<EOL>                                str = JSON.stringify({<EOL>                                    filename: fn,<EOL>                                    headers: {<EOL>                                        '<STR_LIT>': hd['<STR_LIT>']<EOL>                                    }<EOL>                                });<EOL>                                fs.writeFile(cacheDir + \"<STR_LIT>\" + file + \"<STR_LIT>\", str, \"<STR_LIT>\", sendCached);<EOL>                            }<EOL>                        });<EOL>                    }<EOL>                });<EOL>            }<EOL>            else<EOL>                sendCached();<EOL>        });<EOL>    }<EOL>    else if (rel == \"<STR_LIT>\") {<EOL>        var mime = getMime(file);<EOL>        var enc = /^text\\//.test(mime) ? \"<STR_LIT>\" : null;<EOL>        if (file == \"<STR_LIT>\") {<EOL>            file = \"<STR_LIT>\";<EOL>            localPath += \"<STR_LIT>\";<EOL>            var oldrewrite =  rewrite;<EOL>             rewrite = d => {<EOL>                if ( oldrewrite)<EOL>                    d = rewrite(d);<EOL>                return d.replace(/\\.\\.\\/\\.\\.\\/files\\//g, \"<STR_LIT>\");<EOL>            };<EOL>        }<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        else if (fs.existsSync(localPath + \"<STR_LIT>\" + file))<EOL>            localPath += \"<STR_LIT>\";<EOL>        fs.readFile(localPath + \"<STR_LIT>\" + file, enc, (err, data) => {<EOL>            if (err) {<EOL>                resp. writeHead(<NUM_LIT>);<EOL>                resp.end(err + \"<STR_LIT>\");<EOL>            }<EOL>             else {<EOL>                if (rewrite)<EOL>                    data = rewrite(data);<EOL>                if ( typeof data == \"<STR_LIT>\")<EOL>                    data = new Buffer(data, \"<STR_LIT>\");<EOL>                resp.writeHead(<NUM_LIT>, {<EOL>                    '<STR_LIT>': mime,<EOL>                    '<STR_LIT>':  data.length<EOL>                });<EOL>                resp.end(data);<EOL>            }<EOL>        });<EOL>    }<EOL>     else if (editorCache.hasOwnProperty(url)) {<EOL>        var  c = editorCache[url];<EOL>        resp.writeHead(<NUM_LIT>, c.headers);<EOL>        if (c.b64Content)<EOL>            resp.end(new Buffer(c.b64Content, \"<STR_LIT>\"));<EOL>        else<EOL>            serveText(c.content);<EOL>    }<EOL>    else {<EOL>        downloadFile(","gt":"url, (err, buff, hd) => {"}
{"input":"<s> export function buildDelayFunction({ initial = <NUM_LIT>, max = Infinity, jitter = true, } = {}) {<EOL>    let baseDelay;<EOL>    if (jitter) {<EOL>        // If we're jittering, baseDelay is half of the maximum delay for that<EOL>        // attempt (and is, on average, the delay we will encounter).<EOL>        baseDelay = initial;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function init() {<EOL>","gt":"return git([\"<STR_LIT>\"]);"}
{"input":"<s> function _unquote(str) {<EOL>    return str.","gt":"substring(<NUM_LIT>, str.length - <NUM_LIT>);"}
{"input":"<s> <EOL>export function isDefined(value) {<EOL>","gt":"return typeof value !== '<STR_LIT>';"}
{"input":"<s> export function runBenchmarks() {<EOL>    Promise.all(groupPromises).then(() => {<EOL>        log('<STR_LIT>');<EOL>        bsuite<EOL>            .on(","gt":"'<STR_LIT>', (error) => {"}
{"input":"<s> export function runBenchmarks() {<EOL>    Promise.all(groupPromises).then(() => {<EOL>        log('<STR_LIT>');<EOL>        bsuite<EOL>            .on( '<STR_LIT>', (error) => {<EOL>            log('<STR_LIT>', error);<EOL>        })<EOL>            .on('<STR_LIT>', (event) => {<EOL>            log('<STR_LIT>', event.target.stats.mean * <NUM_LIT>);<EOL>            log(String(event.target));<EOL>","gt":"log('<STR_LIT>');"}
{"input":"<s> export function stop() {<EOL>    if (","gt":"shell.test('<STR_LIT>', _pidPath)) {"}
{"input":"<s> function balance(out) {<EOL>    if (!validate(false) || !vscode.window.activeTextEditor) {<EOL>        return;<EOL>    }<EOL>    const editor = vscode.window.activeTextEditor;<EOL>    let rootNode = parseDocument(editor.","gt":"document);"}
{"input":"<s> function balance(out) {<EOL>    if (!validate(false) || !vscode.window.activeTextEditor) {<EOL>        return;<EOL>    }<EOL>    const editor = vscode.window.activeTextEditor;<EOL>    let rootNode = parseDocument(editor. document);<EOL>    if (!rootNode) {<EOL>        return;<EOL>    }<EOL>    let","gt":"getRangeFunction = out ? getRangeToBalanceOut : getRangeToBalanceIn;"}
{"input":"<s> function balance(out) {<EOL>    if (!validate(false) || !vscode.window.activeTextEditor) {<EOL>        return;<EOL>    }<EOL>    const editor = vscode.window.activeTextEditor;<EOL>    let rootNode = parseDocument(editor. document);<EOL>    if (!rootNode) {<EOL>        return;<EOL>    }<EOL>    let  getRangeFunction = out ? getRangeToBalanceOut : getRangeToBalanceIn;<EOL>    let newSelections = [];<EOL>    editor.selections.forEach(selection => {<EOL>        let range = getRangeFunction(editor.document, selection, rootNode);<EOL>","gt":"newSelections.push(range);"}
{"input":"<s> // gets the promise for extension info which will be resolved once the package.json is read<EOL>export function get() {<EOL>    if (jsonPromise) {<EOL>        return jsonPromise;<EOL>    }<EOL>    const","gt":"readPromise = FileUtils.readAsText(FileSystem.getFileForPath(getPackageJsonPath()));"}
{"input":"<s> // gets the promise for extension info which will be resolved once the package.json is read<EOL>export function get() {<EOL>    if (jsonPromise) {<EOL>        return jsonPromise;<EOL>    }<EOL>    const  readPromise = FileUtils.readAsText(FileSystem.getFileForPath(getPackageJsonPath()));<EOL>    jsonPromise = Promise.cast(readPromise)<EOL>        .then((content) => {<EOL>        packageJson = JSON.parse(content);<EOL>","gt":"return packageJson;"}
{"input":"<s> export function getEventStreamFromElement(type, element, eventListenerOptions = { passive: true }) {<EOL>    return new MotionObservable((observer) => {<EOL>        if (!supportsPassiveListeners) {<EOL>            eventListenerOptions = (eventListenerOptions.capture || false);<EOL>        }<EOL>        const next =","gt":"observer.next.bind(observer);"}
{"input":"<s> export function getEventStreamFromElement(type, element, eventListenerOptions = { passive: true }) {<EOL>    return new MotionObservable((observer) => {<EOL>        if (!supportsPassiveListeners) {<EOL>            eventListenerOptions = (eventListenerOptions.capture || false);<EOL>        }<EOL>        const next =  observer.next.bind(observer);<EOL>        // For some reason, TypeScript has an interface for<EOL>        // AddEventListenerOptions, but its addEventListener signature hasn't been<EOL>        // updated to use it, so for now, we manually cast to boolean.<EOL>        //<EOL>        // https://github.com/Microsoft/TypeScript/issues/18136<EOL>        element.addEventListener(type, next, eventListenerOptions);<EOL>","gt":"return () => {"}
{"input":"<s> export function push(scope) {<EOL>    return git([\"<STR_LIT>\", \"<STR_LIT>\",","gt":"\"<STR_LIT>\", scope]);"}
{"input":"<s> function normalizePathForOs(path) {<EOL>    return brackets.platform === \"<STR_LIT>\" ? path.replace(/\\//g,","gt":"\"<STR_LIT>\") : path;"}
{"input":"<s> function uninstallBoardSuccess() {<EOL>","gt":"return {"}
{"input":"<s> // For Phantom<EOL>function toObject(val) {<EOL>    if (val === null || val === undefined) {<EOL>        throw new","gt":"TypeError('<STR_LIT>');"}
{"input":"<s> function buildMustache(path, params, hash, raw, loc) {<EOL>    if (!AST.isLiteral(path)) {<EOL>        path = buildPath(path);<EOL>    }<EOL>","gt":"return {"}
{"input":"<s> function buildMustache(path, params, hash, raw, loc) {<EOL>    if (!AST.isLiteral(path)) {<EOL>        path = buildPath(path);<EOL>    }<EOL>     return {<EOL>        type: \"<STR_LIT>\",<EOL>        path,<EOL>        params: params || [],<EOL>        hash: hash || buildHash([]),<EOL>","gt":"escaped: !raw,"}
{"input":"<s> function isLocalEnvironment(environment) {<EOL>    return !isRemoteEnvironment(","gt":"environment);"}
{"input":"<s> <EOL>export function terminadoDetach(term, socket) {<EOL>    const addonTerminal = term;<EOL>    addonTerminal.off('<STR_LIT>', addonTerminal.__sendData);<EOL>","gt":"socket = (typeof socket === '<STR_LIT>') ? addonTerminal.__socket : socket;"}
{"input":"<s> function getEmbeddedDocument(document, contents, languageId, ignoreAttributeValues) {<EOL>    let currentPos = <NUM_LIT>;<EOL>    let oldContent = document.getText();<EOL>    let result = '<STR_LIT>';<EOL>    let lastSuffix = '<STR_LIT>';<EOL>    for (","gt":"let c of contents) {"}
{"input":"<s> function defaultGetWorkerUrl(workerId, label) {<EOL>    return require.","gt":"toUrl('<STR_LIT>' + workerId);"}
{"input":"<s> // @module: amd<EOL>// @Filename: foo_0.ts<EOL>function foo() {<EOL>    return","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function writeResultToStore({ dataId, result, document, storeFactory = defaultNormalizedCacheFactory, store = storeFactory(), variables, dataIdFromObject, fragmentMatcherFunction, }) {<EOL>    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.<EOL>    const operationDefinition = getOperationDefinition(document);<EOL>    const selectionSet = operationDefinition.selectionSet;<EOL>    const fragmentMap = createFragmentMap(getFragmentDefinitions(document));<EOL>","gt":"variables = assign({}, getDefaultValues(operationDefinition), variables);"}
{"input":"<s> export function writeResultToStore({ dataId, result, document, storeFactory = defaultNormalizedCacheFactory, store = storeFactory(), variables, dataIdFromObject, fragmentMatcherFunction, }) {<EOL>    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.<EOL>    const operationDefinition = getOperationDefinition(document);<EOL>    const selectionSet = operationDefinition.selectionSet;<EOL>    const fragmentMap = createFragmentMap(getFragmentDefinitions(document));<EOL>     variables = assign({}, getDefaultValues(operationDefinition), variables);<EOL>    try {<EOL>        return writeSelectionSetToStore({<EOL>","gt":"result,"}
{"input":"<s> export function writeResultToStore({ dataId, result, document, storeFactory = defaultNormalizedCacheFactory, store = storeFactory(), variables, dataIdFromObject, fragmentMatcherFunction, }) {<EOL>    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.<EOL>    const operationDefinition = getOperationDefinition(document);<EOL>    const selectionSet = operationDefinition.selectionSet;<EOL>    const fragmentMap = createFragmentMap(getFragmentDefinitions(document));<EOL>     variables = assign({}, getDefaultValues(operationDefinition), variables);<EOL>    try {<EOL>        return writeSelectionSetToStore({<EOL>             result,<EOL>            dataId,<EOL>            selectionSet,<EOL>            context: {<EOL>                store,<EOL>","gt":"storeFactory,"}
{"input":"<s> export function lastHeartbeat() {<EOL>    if (!fs.existsSync(_pidPath)) {<EOL>","gt":"return -<NUM_LIT>;"}
{"input":"<s> function createApp(options = {}) {<EOL>    const app = new koa();<EOL>    const router = new koaRouter();<EOL>    options.graphqlOptions = options.graphqlOptions || { schema: Schema };<EOL>    if (!options.excludeParser) {<EOL>","gt":"app.use(koaBody());"}
{"input":"<s> function createApp(options = {}) {<EOL>    const app = new koa();<EOL>    const router = new koaRouter();<EOL>    options.graphqlOptions = options.graphqlOptions || { schema: Schema };<EOL>    if (!options.excludeParser) {<EOL>         app.use(koaBody());<EOL>    }<EOL>    if (options.graphiqlOptions) {<EOL>        router.get('<STR_LIT>', graphiqlKoa(options.graphiqlOptions));<EOL>    }<EOL>    router.get('<STR_LIT>', graphqlKoa(options.graphqlOptions));<EOL>","gt":"router.post('<STR_LIT>', graphqlKoa(options.graphqlOptions));"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return (","gt":"function derez(value, path) {"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return ( function derez(value, path) {<EOL>        // The derez function recurses through the object, producing the deep copy.<EOL>        var old_path; // The path of an earlier occurrence of value<EOL>        var nu; // The new object or array<EOL>        // If a replacer function was provided, then call it to get a replacement value.<EOL>        if (replacer !== undefined) {<EOL>            value = replacer(value);<EOL>        }<EOL>        // typeof null === \"object\", so go on if this value is really an object but not<EOL>        // one of the weird builtin objects.<EOL>        if (typeof value === \"<STR_LIT>\" && value !== null &&<EOL>            !(value instanceof Boolean) &&<EOL>            !(value instanceof Date) &&<EOL>            !(value instanceof Number) &&<EOL>            !(","gt":"value instanceof RegExp) &&"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return ( function derez(value, path) {<EOL>        // The derez function recurses through the object, producing the deep copy.<EOL>        var old_path; // The path of an earlier occurrence of value<EOL>        var nu; // The new object or array<EOL>        // If a replacer function was provided, then call it to get a replacement value.<EOL>        if (replacer !== undefined) {<EOL>            value = replacer(value);<EOL>        }<EOL>        // typeof null === \"object\", so go on if this value is really an object but not<EOL>        // one of the weird builtin objects.<EOL>        if (typeof value === \"<STR_LIT>\" && value !== null &&<EOL>            !(value instanceof Boolean) &&<EOL>            !(value instanceof Date) &&<EOL>            !(value instanceof Number) &&<EOL>            !( value instanceof RegExp) &&<EOL>            !(value instanceof String)) {<EOL>            // If the value is an object or array, look to see if we have already<EOL>            // encountered it. If so, return a {\"$ref\":PATH} object. This uses an<EOL>            // ES6 WeakMap.<EOL>            old_path = objects.get(value);<EOL>            if (","gt":"old_path !== undefined) {"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return ( function derez(value, path) {<EOL>        // The derez function recurses through the object, producing the deep copy.<EOL>        var old_path; // The path of an earlier occurrence of value<EOL>        var nu; // The new object or array<EOL>        // If a replacer function was provided, then call it to get a replacement value.<EOL>        if (replacer !== undefined) {<EOL>            value = replacer(value);<EOL>        }<EOL>        // typeof null === \"object\", so go on if this value is really an object but not<EOL>        // one of the weird builtin objects.<EOL>        if (typeof value === \"<STR_LIT>\" && value !== null &&<EOL>            !(value instanceof Boolean) &&<EOL>            !(value instanceof Date) &&<EOL>            !(value instanceof Number) &&<EOL>            !( value instanceof RegExp) &&<EOL>            !(value instanceof String)) {<EOL>            // If the value is an object or array, look to see if we have already<EOL>            // encountered it. If so, return a {\"$ref\":PATH} object. This uses an<EOL>            // ES6 WeakMap.<EOL>            old_path = objects.get(value);<EOL>            if ( old_path !== undefined) {<EOL>                return { $ref: old_path };<EOL>            }<EOL>            // Otherwise, accumulate the unique value and its path.<EOL>            objects.set(value, path);<EOL>            // If it is an array, replicate the array.<EOL>            if (Array.isArray(value)) {<EOL>","gt":"nu = [];"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return ( function derez(value, path) {<EOL>        // The derez function recurses through the object, producing the deep copy.<EOL>        var old_path; // The path of an earlier occurrence of value<EOL>        var nu; // The new object or array<EOL>        // If a replacer function was provided, then call it to get a replacement value.<EOL>        if (replacer !== undefined) {<EOL>            value = replacer(value);<EOL>        }<EOL>        // typeof null === \"object\", so go on if this value is really an object but not<EOL>        // one of the weird builtin objects.<EOL>        if (typeof value === \"<STR_LIT>\" && value !== null &&<EOL>            !(value instanceof Boolean) &&<EOL>            !(value instanceof Date) &&<EOL>            !(value instanceof Number) &&<EOL>            !( value instanceof RegExp) &&<EOL>            !(value instanceof String)) {<EOL>            // If the value is an object or array, look to see if we have already<EOL>            // encountered it. If so, return a {\"$ref\":PATH} object. This uses an<EOL>            // ES6 WeakMap.<EOL>            old_path = objects.get(value);<EOL>            if ( old_path !== undefined) {<EOL>                return { $ref: old_path };<EOL>            }<EOL>            // Otherwise, accumulate the unique value and its path.<EOL>            objects.set(value, path);<EOL>            // If it is an array, replicate the array.<EOL>            if (Array.isArray(value)) {<EOL>                 nu = [];<EOL>                value.forEach(function (element, i) {<EOL>                    nu[i] = derez(element, path + \"<STR_LIT>\" + i + \"<STR_LIT>\");<EOL>                });<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> <EOL>// The file uses the WeakMap feature of ES6.<EOL><EOL><EOL><EOL>export function decycle(object, replacer) {<EOL>    \"<STR_LIT>\";<EOL>    // Make a deep copy of an object or array, assuring that there is at most<EOL>    // one instance of each object or array in the resulting structure. The<EOL>    // duplicate references (which might be forming cycles) are replaced with<EOL>    // an object of the form<EOL>    //      {\"$ref\": PATH}<EOL>    // where the PATH is a JSONPath string that locates the first occurrence.<EOL>    // So,<EOL>    //      var a = [];<EOL>    //      a[0] = a;<EOL>    //      return JSON.stringify(JSON.decycle(a));<EOL>    // produces the string '[{\"$ref\":\"$\"}]'.<EOL>    // If a replacer function is provided, then it will be called for each value.<EOL>    // A replacer function receives a value and returns a replacement value.<EOL>    // JSONPath is used to locate the unique object. $ indicates the top level of<EOL>    // the object or array. [NUMBER] or [STRING] indicates a child element or<EOL>    // property.<EOL>    var objects = new WeakMap(); // object to path mappings<EOL>    return ( function derez(value, path) {<EOL>        // The derez function recurses through the object, producing the deep copy.<EOL>        var old_path; // The path of an earlier occurrence of value<EOL>        var nu; // The new object or array<EOL>        // If a replacer function was provided, then call it to get a replacement value.<EOL>        if (replacer !== undefined) {<EOL>            value = replacer(value);<EOL>        }<EOL>        // typeof null === \"object\", so go on if this value is really an object but not<EOL>        // one of the weird builtin objects.<EOL>        if (typeof value === \"<STR_LIT>\" && value !== null &&<EOL>            !(value instanceof Boolean) &&<EOL>            !(value instanceof Date) &&<EOL>            !(value instanceof Number) &&<EOL>            !( value instanceof RegExp) &&<EOL>            !(value instanceof String)) {<EOL>            // If the value is an object or array, look to see if we have already<EOL>            // encountered it. If so, return a {\"$ref\":PATH} object. This uses an<EOL>            // ES6 WeakMap.<EOL>            old_path = objects.get(value);<EOL>            if ( old_path !== undefined) {<EOL>                return { $ref: old_path };<EOL>            }<EOL>            // Otherwise, accumulate the unique value and its path.<EOL>            objects.set(value, path);<EOL>            // If it is an array, replicate the array.<EOL>            if (Array.isArray(value)) {<EOL>                 nu = [];<EOL>                value.forEach(function (element, i) {<EOL>                    nu[i] = derez(element, path + \"<STR_LIT>\" + i + \"<STR_LIT>\");<EOL>                });<EOL>            }<EOL>             else {<EOL>                // If it is an object, replicate the object.<EOL>                nu = {};<EOL>                Object.","gt":"keys(value).forEach(function (name) {"}
{"input":"<s> <EOL>function getCoverageData(coverageVariable) {<EOL>    let coverageData = (function () {<EOL>        return","gt":"this;"}
{"input":"<s> function _show() {<EOL>    const templateArgs = {<EOL>        config: pullConfig,<EOL>        mode: \"<STR_LIT>\",<EOL>        modeLabel: Strings.PULL_FROM,<EOL>","gt":"Strings"}
{"input":"<s> function _show() {<EOL>    const templateArgs = {<EOL>        config: pullConfig,<EOL>        mode: \"<STR_LIT>\",<EOL>        modeLabel: Strings.PULL_FROM,<EOL>         Strings<EOL>    };<EOL>    const compiledTemplate = Mustache.render(template, templateArgs, {<EOL>        credentials:","gt":"credentialsTemplate,"}
{"input":"<s> function _show() {<EOL>    const templateArgs = {<EOL>        config: pullConfig,<EOL>        mode: \"<STR_LIT>\",<EOL>        modeLabel: Strings.PULL_FROM,<EOL>         Strings<EOL>    };<EOL>    const compiledTemplate = Mustache.render(template, templateArgs, {<EOL>        credentials:  credentialsTemplate,<EOL>        remotes: remotesTemplate<EOL>    });<EOL>    const dialog = Dialogs.showModalDialogUsingTemplate(compiledTemplate);<EOL>    const $dialog = dialog.getElement();<EOL>    _attachEvents(","gt":"$dialog);"}
{"input":"<s> function _show() {<EOL>    const templateArgs = {<EOL>        config: pullConfig,<EOL>        mode: \"<STR_LIT>\",<EOL>        modeLabel: Strings.PULL_FROM,<EOL>         Strings<EOL>    };<EOL>    const compiledTemplate = Mustache.render(template, templateArgs, {<EOL>        credentials:  credentialsTemplate,<EOL>        remotes: remotesTemplate<EOL>    });<EOL>    const dialog = Dialogs.showModalDialogUsingTemplate(compiledTemplate);<EOL>    const $dialog = dialog.getElement();<EOL>    _attachEvents( $dialog);<EOL>    dialog.done((buttonId) => {<EOL>        if (buttonId === \"<STR_LIT>\") {<EOL>            RemoteCommon.collectValues(pullConfig, $dialog);<EOL>            Preferences.set(\"<STR_LIT>\", pullConfig.strategy);<EOL>            defer.","gt":"resolve(pullConfig);"}
{"input":"<s> <EOL>export function setSelection(element, start, end) {<EOL>    if (!element)<EOL>        throw Error(\"<STR_LIT>\");<EOL>    element.","gt":"focus();"}
{"input":"<s> function statusToResponse(p) {<EOL>    switch (p) {<EOL>        case PermissionStatus.NotYetPrompted:<EOL>        case PermissionStatus.Denied:<EOL>            return e.","gt":"PermissionResponses.Denied;"}
{"input":"<s> function statusToResponse(p) {<EOL>    switch (p) {<EOL>        case PermissionStatus.NotYetPrompted:<EOL>        case PermissionStatus.Denied:<EOL>            return e. PermissionResponses.Denied;<EOL>        case PermissionStatus.Granted:<EOL>            return e.PermissionResponses.Granted;<EOL>        case PermissionStatus.NotAvailable:<EOL>","gt":"default:"}
{"input":"<s> function off(el, type, handler, capture = false) {<EOL>    el.","gt":"removeEventListener(type, handler, capture);"}
{"input":"<s> export function before(fn) {<EOL>    if (!currentSuite) {<EOL>","gt":"throw new Error('<STR_LIT>');"}
{"input":"<s> function decode(value) {<EOL>    return","gt":"value.split('<STR_LIT>').reverse().join('<STR_LIT>');"}
{"input":"<s> <EOL>export function dirname(path) {<EOL>    const sep = getPathSep(path);<EOL>    const parts = normalize(path).split('<STR_LIT>');<EOL>","gt":"parts.pop();"}
{"input":"<s> export function loadFile(module, filename) {<EOL>    var js = t.transpile(fs.readFileSync(","gt":"filename, '<STR_LIT>'));"}
{"input":"<s> <EOL>export function throwMd2TooltipInvalidPositionError(position) {<EOL>    throw","gt":"new Error(`<STR_LIT>`);"}
{"input":"<s> function writeFile(filePath, content) {<EOL>    fs.writeFileSync(__dirname + '<STR_LIT>' + filePath,","gt":"content);"}
{"input":"<s> <EOL>export function createSourceReplacingCompilerHost(substituteSource, delegate) {<EOL>    return {<EOL>        getSourceFile,<EOL>        getCancellationToken: delegate.getCancellationToken,<EOL>        getDefaultLibFileName: delegate.getDefaultLibFileName,<EOL>        writeFile:","gt":"delegate.writeFile,"}
{"input":"<s> <EOL>export function createSourceReplacingCompilerHost(substituteSource, delegate) {<EOL>    return {<EOL>        getSourceFile,<EOL>        getCancellationToken: delegate.getCancellationToken,<EOL>        getDefaultLibFileName: delegate.getDefaultLibFileName,<EOL>        writeFile:  delegate.writeFile,<EOL>        getCurrentDirectory: delegate.getCurrentDirectory,<EOL>","gt":"getCanonicalFileName: delegate.getCanonicalFileName,"}
{"input":"<s> <EOL>export function createSourceReplacingCompilerHost(substituteSource, delegate) {<EOL>    return {<EOL>        getSourceFile,<EOL>        getCancellationToken: delegate.getCancellationToken,<EOL>        getDefaultLibFileName: delegate.getDefaultLibFileName,<EOL>        writeFile:  delegate.writeFile,<EOL>        getCurrentDirectory: delegate.getCurrentDirectory,<EOL>         getCanonicalFileName: delegate.getCanonicalFileName,<EOL>        useCaseSensitiveFileNames: delegate.useCaseSensitiveFileNames,<EOL>        getNewLine: delegate.getNewLine,<EOL>        fileExists: delegate.fileExists,<EOL>        readFile: delegate.readFile,<EOL>","gt":"directoryExists: delegate.directoryExists,"}
{"input":"<s> <EOL>export function createSourceReplacingCompilerHost(substituteSource, delegate) {<EOL>    return {<EOL>        getSourceFile,<EOL>        getCancellationToken: delegate.getCancellationToken,<EOL>        getDefaultLibFileName: delegate.getDefaultLibFileName,<EOL>        writeFile:  delegate.writeFile,<EOL>        getCurrentDirectory: delegate.getCurrentDirectory,<EOL>         getCanonicalFileName: delegate.getCanonicalFileName,<EOL>        useCaseSensitiveFileNames: delegate.useCaseSensitiveFileNames,<EOL>        getNewLine: delegate.getNewLine,<EOL>        fileExists: delegate.fileExists,<EOL>        readFile: delegate.readFile,<EOL>         directoryExists: delegate.directoryExists,<EOL>        getDirectories: delegate.getDirectories,<EOL>    };<EOL>    function getSourceFile(fileName, languageVersion, onError) {<EOL>        let path = ts.sys.resolvePath(fileName);<EOL>        let sourceText = substituteSource.get(","gt":"path);"}
{"input":"<s> function allDirty(refs, newValue) {<EOL>    refs.forEach(function (ref) {","gt":"isDirty(ref, newValue); });"}
{"input":"<s> async function fn10(x) {<EOL>    var { z: {","gt":"x } = y } = y;"}
{"input":"<s> function isDataProcessed(dataId, field, processedData) {<EOL>    if (!processedData) {<EOL>        return false;<EOL>    }<EOL>    if (processedData[dataId]) {<EOL>        if (processedData[dataId].indexOf(","gt":"field) >= <NUM_LIT>) {"}
{"input":"<s> function isDataProcessed(dataId, field, processedData) {<EOL>    if (!processedData) {<EOL>        return false;<EOL>    }<EOL>    if (processedData[dataId]) {<EOL>        if (processedData[dataId].indexOf( field) >= <NUM_LIT>) {<EOL>            return true;<EOL>        }<EOL>        else {<EOL>            processedData[dataId].","gt":"push(field);"}
{"input":"<s> function isDataProcessed(dataId, field, processedData) {<EOL>    if (!processedData) {<EOL>        return false;<EOL>    }<EOL>    if (processedData[dataId]) {<EOL>        if (processedData[dataId].indexOf( field) >= <NUM_LIT>) {<EOL>            return true;<EOL>        }<EOL>        else {<EOL>            processedData[dataId]. push(field);<EOL>        }<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function renderModule(name, renderTest) {<EOL>    QUnit.module(name);<EOL>    for (let prop in renderTest.prototype) {<EOL>        const test = renderTest.prototype[prop];<EOL>        if (","gt":"isTestFunction(test) && shouldRun(test)) {"}
{"input":"<s> <EOL>export function vendorTask() {<EOL>    return () => gulpMerge(NPM_VENDOR_FILES.map(root => {<EOL>        const glob = path.join(PROJECT_ROOT, '<STR_LIT>',","gt":"root, '<STR_LIT>');"}
{"input":"<s> function g() {<EOL>    let x;<EOL>    x = \"<STR_LIT>\";<EOL>    do {<EOL>        if (cond) {<EOL>","gt":"x = <NUM_LIT>;"}
{"input":"<s> function getQueriesFromTree({ rootElement, rootContext = {} }, fetchRoot = true) {<EOL>    const queries = [];<EOL>    walkTree(rootElement, rootContext, (element, instance, context) => {<EOL>        const skipRoot = !fetchRoot && element === rootElement;<EOL>        if (skipRoot)<EOL>","gt":"return;"}
{"input":"<s> function getQueriesFromTree({ rootElement, rootContext = {} }, fetchRoot = true) {<EOL>    const queries = [];<EOL>    walkTree(rootElement, rootContext, (element, instance, context) => {<EOL>        const skipRoot = !fetchRoot && element === rootElement;<EOL>        if (skipRoot)<EOL>             return;<EOL>        if (instance && isReactElement(element) && hasFetchDataFunction(instance)) {<EOL>            const query = instance.fetchData();<EOL>            if (isPromise(query)) {<EOL>                queries.push({","gt":"query, element, context });"}
{"input":"<s> function _execNpmPublish(label) {<EOL>    const packageDir = DIST_COMPONENTS_ROOT;<EOL>    if (!statSync(packageDir).isDirectory()) {<EOL>","gt":"return;"}
{"input":"<s> function _execNpmPublish(label) {<EOL>    const packageDir = DIST_COMPONENTS_ROOT;<EOL>    if (!statSync(packageDir).isDirectory()) {<EOL>         return;<EOL>    }<EOL>    if (!existsSync(path.join(packageDir, '<STR_LIT>'))) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    process.chdir(packageDir);<EOL>    console.log(`<STR_LIT>`);<EOL>    const command = '<STR_LIT>';<EOL>    const args = [","gt":"'<STR_LIT>', '<STR_LIT>', '<STR_LIT>', label ? `<STR_LIT>` : undefined, label || undefined];"}
{"input":"<s> function _execNpmPublish(label) {<EOL>    const packageDir = DIST_COMPONENTS_ROOT;<EOL>    if (!statSync(packageDir).isDirectory()) {<EOL>         return;<EOL>    }<EOL>    if (!existsSync(path.join(packageDir, '<STR_LIT>'))) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    process.chdir(packageDir);<EOL>    console.log(`<STR_LIT>`);<EOL>    const command = '<STR_LIT>';<EOL>    const args = [ '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', label ? `<STR_LIT>` : undefined, label || undefined];<EOL>    return new Promise((resolve, reject) => {<EOL>        console.log(`<STR_LIT>`);<EOL>        if (argv[","gt":"'<STR_LIT>']) {"}
{"input":"<s> function _execNpmPublish(label) {<EOL>    const packageDir = DIST_COMPONENTS_ROOT;<EOL>    if (!statSync(packageDir).isDirectory()) {<EOL>         return;<EOL>    }<EOL>    if (!existsSync(path.join(packageDir, '<STR_LIT>'))) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    process.chdir(packageDir);<EOL>    console.log(`<STR_LIT>`);<EOL>    const command = '<STR_LIT>';<EOL>    const args = [ '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', label ? `<STR_LIT>` : undefined, label || undefined];<EOL>    return new Promise((resolve, reject) => {<EOL>        console.log(`<STR_LIT>`);<EOL>        if (argv[ '<STR_LIT>']) {<EOL>            resolve();<EOL>            return;<EOL>        }<EOL>        const childProcess =","gt":"spawn(command, args);"}
{"input":"<s> function _execNpmPublish(label) {<EOL>    const packageDir = DIST_COMPONENTS_ROOT;<EOL>    if (!statSync(packageDir).isDirectory()) {<EOL>         return;<EOL>    }<EOL>    if (!existsSync(path.join(packageDir, '<STR_LIT>'))) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    process.chdir(packageDir);<EOL>    console.log(`<STR_LIT>`);<EOL>    const command = '<STR_LIT>';<EOL>    const args = [ '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', label ? `<STR_LIT>` : undefined, label || undefined];<EOL>    return new Promise((resolve, reject) => {<EOL>        console.log(`<STR_LIT>`);<EOL>        if (argv[ '<STR_LIT>']) {<EOL>            resolve();<EOL>            return;<EOL>        }<EOL>        const childProcess =  spawn(command, args);<EOL>        childProcess.stdout.on('<STR_LIT>', (data) => {<EOL>            console.log(`<STR_LIT>`);<EOL>        });<EOL>        childProcess.stderr.on('<STR_LIT>', (data) => {<EOL>            console.error(`<STR_LIT>`);<EOL>        });<EOL>","gt":"childProcess.on('<STR_LIT>', (code) => {"}
{"input":"<s> function isNullValue(value) {<EOL>","gt":"return value.kind === '<STR_LIT>';"}
{"input":"<s> export function eliminateInterpolations(templateLiteralContents) {<EOL>","gt":"const regex = /\\$\\{[\\s\\S]+?\\}/mg;"}
{"input":"<s> export function isBoolean(obj) {<EOL>","gt":"return obj === true || obj === false;"}
{"input":"<s> export function overwriteDrive(sourcePath, destPath) {<EOL>","gt":"const [val1, val2] = this.getDrives(sourcePath, destPath);"}
{"input":"<s> export function module(name) {<EOL>    return function (klass) {<EOL>        QUnit.module(name);<EOL>        let proto = klass.prototype;<EOL>        for (","gt":"let prop in proto) {"}
{"input":"<s> export function applyMixins(derivedCtor, baseCtors) {<EOL>    for (let i = <NUM_LIT>, len = baseCtors.length; i < len; i++) {<EOL>        const baseCtor = baseCtors[i];<EOL>        const propertyKeys = Object.getOwnPropertyNames(","gt":"baseCtor.prototype);"}
{"input":"<s> function processTree(sourceFile, replacer) {<EOL>    let code = '<STR_LIT>';<EOL>    let cursorPosition = <NUM_LIT>;<EOL>    function skip(node) {<EOL>        cursorPosition = node.end;<EOL>    }<EOL>    function readThrough(node) {<EOL>        code += sourceFile.text.slice(cursorPosition, node.pos);<EOL>        cursorPosition = node.","gt":"pos;"}
{"input":"<s> function processTree(sourceFile, replacer) {<EOL>    let code = '<STR_LIT>';<EOL>    let cursorPosition = <NUM_LIT>;<EOL>    function skip(node) {<EOL>        cursorPosition = node.end;<EOL>    }<EOL>    function readThrough(node) {<EOL>        code += sourceFile.text.slice(cursorPosition, node.pos);<EOL>        cursorPosition = node. pos;<EOL>    }<EOL>    function visit(node) {<EOL>        readThrough(node);<EOL>        const replacement = replacer(node);<EOL>        if (","gt":"replacement != null) {"}
{"input":"<s> function processTree(sourceFile, replacer) {<EOL>    let code = '<STR_LIT>';<EOL>    let cursorPosition = <NUM_LIT>;<EOL>    function skip(node) {<EOL>        cursorPosition = node.end;<EOL>    }<EOL>    function readThrough(node) {<EOL>        code += sourceFile.text.slice(cursorPosition, node.pos);<EOL>        cursorPosition = node. pos;<EOL>    }<EOL>    function visit(node) {<EOL>        readThrough(node);<EOL>        const replacement = replacer(node);<EOL>        if ( replacement != null) {<EOL>            code += replacement;<EOL>            skip(node);<EOL>        }<EOL>        else {<EOL>            ts.forEachChild(","gt":"node, visit);"}
{"input":"<s> <EOL>export function qat(something) {<EOL>","gt":"return something;"}
{"input":"<s> function isNodeKindExportAssignment(value) {<EOL>    return value && value.kind === ts.","gt":"SyntaxKind.ExportAssignment;"}
{"input":"<s> function isNodeKindModuleDeclaration(value) {<EOL>    return value && value.kind ===","gt":"ts.SyntaxKind.ModuleDeclaration;"}
{"input":"<s> export function bounds(parent, first, last) {<EOL>    return new ConcreteBounds(","gt":"parent, first, last);"}
{"input":"<s> <EOL>export default function ifHelper(params) {<EOL>    return params[","gt":"<NUM_LIT>] ? params[<NUM_LIT>] : params[<NUM_LIT>];"}
{"input":"<s> export function sourceMapConsumerToGenerator(sourceMapConsumer) {<EOL>    return SourceMapGenerator.fromSourceMap(","gt":"sourceMapConsumer);"}
{"input":"<s> // ref: http://blog.wolksoftware.com/decorators-reflection-javascript-typescript<EOL>// ref: https://medium.com/@NetanelBasal/javascript-make-your-code-cleaner-with-decorators-d34fc72af947#.fe9f2rfb8<EOL>export function timeout(milliseconds = <NUM_LIT>) {<EOL>    return function (target, key, descriptor) {<EOL>        var originalMethod = descriptor.value;<EOL>        descriptor.value = function (...","gt":"args) {"}
{"input":"<s> export function blockStack() {<EOL>    let stack = [];<EOL>    return (id) => {<EOL>        if (stack.indexOf(id) > -<NUM_LIT>) {<EOL>","gt":"let close = `<STR_LIT>`;"}
{"input":"<s> export function blockStack() {<EOL>    let stack = [];<EOL>    return (id) => {<EOL>        if (stack.indexOf(id) > -<NUM_LIT>) {<EOL>             let close = `<STR_LIT>`;<EOL>            stack.pop();<EOL>            return close;<EOL>        }<EOL>        else {<EOL>            stack.push(id);<EOL>","gt":"return `<STR_LIT>`;"}
{"input":"<s> function isMarker(node) {<EOL>    return","gt":"node.nodeType === <NUM_LIT> && node.nodeValue === '<STR_LIT>';"}
{"input":"<s> export function getAssign(root) {<EOL>    return","gt":"root.Object.assign || assignImpl;"}
{"input":"<s> function setFieldProperties(field, propertiesObj) {<EOL>    Object.","gt":"keys(propertiesObj).forEach(propertyName => {"}
{"input":"<s> // @target: es5<EOL>function f() {<EOL>    var","gt":"arguments;"}
{"input":"<s> function maybeCommentedOut(content) {<EOL>    return (content.","gt":"indexOf('<STR_LIT>') > -<NUM_LIT> && content.indexOf('<STR_LIT>') > -<NUM_LIT>) ||"}
{"input":"<s> export default function render(program, env, self, dynamicScope, builder, handle) {<EOL>    let vm = VM.","gt":"initial(program, env, self, dynamicScope, builder, handle);"}
{"input":"<s> async function readRawResourceDirectoryEntry(file, buffer, filePosition, idType) {<EOL>    await file.readAsync(buffer, <NUM_LIT>, resourceDirectoryEntrySize, filePosition);<EOL>    let idField = buffer.readUInt32LE(<NUM_LIT>);<EOL>    let offsetField = buffer.readUInt32LE(<NUM_LIT>);<EOL>    // JS acts as if all integers are signed, except for the >>> operator.<EOL>    let offsetIsSubdirectory = (offsetField >>> <NUM_LIT>) === <NUM_LIT>; // tslint:disable-line:no-bitwise<EOL>    let offsetValue = offsetField & <NUM_LIT>; // tslint:disable-line:no-bitwise<EOL>    return {<EOL>        nameOffset: idType === ResourceDirectoryEntryIdType.NAME ? idField : undefined,<EOL>        integerId: idType === ResourceDirectoryEntryIdType.ID ? idField : undefined,<EOL>        dataEntryOffset: !offsetIsSubdirectory ? offsetValue :","gt":"undefined,"}
{"input":"<s> async function main() {<EOL>    for (const secret of allSecrets) {<EOL>        console.log(","gt":"secret]}'<STR_LIT>;"}
{"input":"<s> function executeSubSelectedArray(field, result, execContext) {<EOL>    return Promise.all(result.map(item => {<EOL>        // null value in array<EOL>        if (item === null) {<EOL>","gt":"return null;"}
{"input":"<s> function compileWhile(e, b) {<EOL>    var cond = compileExpression(e, b.getInputTargetBlock(\"<STR_LIT>\"));<EOL>    var body = compileStatements(e,","gt":"b.getInputTargetBlock(\"<STR_LIT>\"));"}
{"input":"<s> function installLibraryRequest(libraryName) {<EOL>    return {<EOL>        type:","gt":"INSTALL_LIBRARY_REQUEST,"}
{"input":"<s> export function debugRehydration(env, cursor) {<EOL>    return DebugRehydrationBuilder.forInitialRender(","gt":"env, cursor);"}
{"input":"<s> function isReadOnly(operation) {<EOL>    switch (operation) {<EOL>        case Operation.Show:<EOL>","gt":"case Operation.GetCommitTemplate:"}
{"input":"<s> function assertGuess(expectedInsertSpaces, expectedTabSize, text, msg) {<EOL>    if (typeof expectedInsertSpaces === '<STR_LIT>') {<EOL>        // cannot guess insertSpaces<EOL>        if (typeof expectedTabSize === '<STR_LIT>') {<EOL>            // cannot guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, <NUM_LIT>,","gt":"text, msg);"}
{"input":"<s> function assertGuess(expectedInsertSpaces, expectedTabSize, text, msg) {<EOL>    if (typeof expectedInsertSpaces === '<STR_LIT>') {<EOL>        // cannot guess insertSpaces<EOL>        if (typeof expectedTabSize === '<STR_LIT>') {<EOL>            // cannot guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, <NUM_LIT>,  text, msg);<EOL>            testGuessIndentation(false, <NUM_LIT>, false, <NUM_LIT>, text, msg);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function assertGuess(expectedInsertSpaces, expectedTabSize, text, msg) {<EOL>    if (typeof expectedInsertSpaces === '<STR_LIT>') {<EOL>        // cannot guess insertSpaces<EOL>        if (typeof expectedTabSize === '<STR_LIT>') {<EOL>            // cannot guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, <NUM_LIT>,  text, msg);<EOL>            testGuessIndentation(false, <NUM_LIT>, false, <NUM_LIT>, text, msg);<EOL>        }<EOL>         else {<EOL>            // can guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, expectedTabSize, text, msg);<EOL>            testGuessIndentation(false,","gt":"<NUM_LIT>, false, expectedTabSize, text, msg);"}
{"input":"<s> function assertGuess(expectedInsertSpaces, expectedTabSize, text, msg) {<EOL>    if (typeof expectedInsertSpaces === '<STR_LIT>') {<EOL>        // cannot guess insertSpaces<EOL>        if (typeof expectedTabSize === '<STR_LIT>') {<EOL>            // cannot guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, <NUM_LIT>,  text, msg);<EOL>            testGuessIndentation(false, <NUM_LIT>, false, <NUM_LIT>, text, msg);<EOL>        }<EOL>         else {<EOL>            // can guess tabSize<EOL>            testGuessIndentation(true, <NUM_LIT>, true, expectedTabSize, text, msg);<EOL>            testGuessIndentation(false,  <NUM_LIT>, false, expectedTabSize, text, msg);<EOL>        }<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {<EOL>    const arrayType = compilerOptions.useFlowReadOnlyTypes ? '<STR_LIT>' : '<STR_LIT>';<EOL>    function nonNullableTypeAnnotationFromGraphQLType(type, typeName) {<EOL>","gt":"if (type instanceof GraphQLList) {"}
{"input":"<s> export function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {<EOL>    const arrayType = compilerOptions.useFlowReadOnlyTypes ? '<STR_LIT>' : '<STR_LIT>';<EOL>    function nonNullableTypeAnnotationFromGraphQLType(type, typeName) {<EOL>         if (type instanceof GraphQLList) {<EOL>            return t.genericTypeAnnotation(t.identifier(arrayType), t.typeParameterInstantiation([typeAnnotationFromGraphQLType(type.ofType, typeName)]));<EOL>        }<EOL>        else if (type instanceof GraphQLScalarType) {<EOL>            const builtIn = builtInScalarMap[typeName ||","gt":"type.name];"}
{"input":"<s> export function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {<EOL>    const arrayType = compilerOptions.useFlowReadOnlyTypes ? '<STR_LIT>' : '<STR_LIT>';<EOL>    function nonNullableTypeAnnotationFromGraphQLType(type, typeName) {<EOL>         if (type instanceof GraphQLList) {<EOL>            return t.genericTypeAnnotation(t.identifier(arrayType), t.typeParameterInstantiation([typeAnnotationFromGraphQLType(type.ofType, typeName)]));<EOL>        }<EOL>        else if (type instanceof GraphQLScalarType) {<EOL>            const builtIn = builtInScalarMap[typeName ||  type.name];<EOL>            if (builtIn != null) {<EOL>                return builtIn;<EOL>            }<EOL>            else","gt":"if (compilerOptions.passthroughCustomScalars) {"}
{"input":"<s> export function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {<EOL>    const arrayType = compilerOptions.useFlowReadOnlyTypes ? '<STR_LIT>' : '<STR_LIT>';<EOL>    function nonNullableTypeAnnotationFromGraphQLType(type, typeName) {<EOL>         if (type instanceof GraphQLList) {<EOL>            return t.genericTypeAnnotation(t.identifier(arrayType), t.typeParameterInstantiation([typeAnnotationFromGraphQLType(type.ofType, typeName)]));<EOL>        }<EOL>        else if (type instanceof GraphQLScalarType) {<EOL>            const builtIn = builtInScalarMap[typeName ||  type.name];<EOL>            if (builtIn != null) {<EOL>                return builtIn;<EOL>            }<EOL>            else  if (compilerOptions.passthroughCustomScalars) {<EOL>                return t.anyTypeAnnotation();<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function createTypeAnnotationFromGraphQLTypeFunction(compilerOptions) {<EOL>    const arrayType = compilerOptions.useFlowReadOnlyTypes ? '<STR_LIT>' : '<STR_LIT>';<EOL>    function nonNullableTypeAnnotationFromGraphQLType(type, typeName) {<EOL>         if (type instanceof GraphQLList) {<EOL>            return t.genericTypeAnnotation(t.identifier(arrayType), t.typeParameterInstantiation([typeAnnotationFromGraphQLType(type.ofType, typeName)]));<EOL>        }<EOL>        else if (type instanceof GraphQLScalarType) {<EOL>            const builtIn = builtInScalarMap[typeName ||  type.name];<EOL>            if (builtIn != null) {<EOL>                return builtIn;<EOL>            }<EOL>            else  if (compilerOptions.passthroughCustomScalars) {<EOL>                return t.anyTypeAnnotation();<EOL>            }<EOL>             else {<EOL>                return t.genericTypeAnnotation(t.identifier(typeName || type.name));<EOL>            }<EOL>        }<EOL>        else if (type instanceof GraphQLNonNull) {<EOL>            // This won't happen; but for TypeScript completeness:<EOL>            return typeAnnotationFromGraphQLType(type.ofType, typeName);<EOL>        }<EOL>        else {<EOL>            return t.genericTypeAnnotation(t.identifier(typeName || type.name));<EOL>        }<EOL>    }<EOL>    function typeAnnotationFromGraphQLType(","gt":"type, typeName) {"}
{"input":"<s> function isImmediate(value) {<EOL>    let type = typeof value;<EOL>    if (value === null || value === undefined)<EOL>        return true;<EOL>    switch (type) {<EOL>        case '<STR_LIT>':<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function isImmediate(value) {<EOL>    let type = typeof value;<EOL>    if (value === null || value === undefined)<EOL>        return true;<EOL>    switch (type) {<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>            return true;<EOL>        case '<STR_LIT>':<EOL>            // not an integer<EOL>            if (value % <NUM_LIT> !== <NUM_LIT>)<EOL>                return","gt":"false;"}
{"input":"<s> function isImmediate(value) {<EOL>    let type = typeof value;<EOL>    if (value === null || value === undefined)<EOL>        return true;<EOL>    switch (type) {<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>            return true;<EOL>        case '<STR_LIT>':<EOL>            // not an integer<EOL>            if (value % <NUM_LIT> !== <NUM_LIT>)<EOL>                return  false;<EOL>            let abs = Math.abs(value);<EOL>            // too big<EOL>            if (abs > HI)<EOL>","gt":"return false;"}
{"input":"<s> <EOL>export function windowWhen(closingSelector) {<EOL>    return this.lift(new","gt":"WindowOperator(closingSelector));"}
{"input":"<s> export async function introspect(schemaContents) {<EOL>    const schema =","gt":"buildASTSchema(parse(schemaContents), { commentDescriptions: true });"}
{"input":"<s> async function func() {<EOL>","gt":"before();"}
{"input":"<s> export function createCSSRule(selector, cssText, style = sharedStyle) {<EOL>    if (!style || !cssText) {<EOL>","gt":"return;"}
{"input":"<s> function storeRoundtrip(query, result, variables = {}) {<EOL>    const fragmentMap = createFragmentMap(getFragmentDefinitions(query));<EOL>    const store = writeQueryToStore({<EOL>        result,<EOL>        query,<EOL>","gt":"variables,"}
{"input":"<s> function storeRoundtrip(query, result, variables = {}) {<EOL>    const fragmentMap = createFragmentMap(getFragmentDefinitions(query));<EOL>    const store = writeQueryToStore({<EOL>        result,<EOL>        query,<EOL>         variables,<EOL>        fragmentMap,<EOL>    });<EOL>    const reconstructedResult = readQueryFromStore({<EOL>        store,<EOL>        query,<EOL>","gt":"variables,"}
{"input":"<s> function compileForever(e, b) {<EOL>    var bBody =","gt":"b.getInputTargetBlock(\"<STR_LIT>\");"}
{"input":"<s> export function errLog(arg) {<EOL>    if (typeof arg === \"<STR_LIT>\") {<EOL>        trace.error(arg);<EOL>    }<EOL>    else if (typeof arg.toString === \"<STR_LIT>\") {<EOL>        trace.debug(arg.stack);<EOL>        trace.error(","gt":"arg.toString());"}
{"input":"<s> <EOL>export function getFragmentQueryDocument(document, fragmentName) {<EOL>    let actualFragmentName = fragmentName;<EOL>    // Build an array of all our fragment definitions that will be used for<EOL>    // validations. We also do some validations on the other definitions in the<EOL>    // document while building this list.<EOL>","gt":"const fragments = [];"}
{"input":"<s> <EOL>export function getFragmentQueryDocument(document, fragmentName) {<EOL>    let actualFragmentName = fragmentName;<EOL>    // Build an array of all our fragment definitions that will be used for<EOL>    // validations. We also do some validations on the other definitions in the<EOL>    // document while building this list.<EOL>     const fragments = [];<EOL>    document.definitions.forEach(definition => {<EOL>        // Throw an error if we encounter an operation definition because we will<EOL>        // define our own operation definition later on.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            throw","gt":"new Error(`<STR_LIT>` +"}
{"input":"<s> <EOL>export function getFragmentQueryDocument(document, fragmentName) {<EOL>    let actualFragmentName = fragmentName;<EOL>    // Build an array of all our fragment definitions that will be used for<EOL>    // validations. We also do some validations on the other definitions in the<EOL>    // document while building this list.<EOL>     const fragments = [];<EOL>    document.definitions.forEach(definition => {<EOL>        // Throw an error if we encounter an operation definition because we will<EOL>        // define our own operation definition later on.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            throw  new Error(`<STR_LIT>` +<EOL>                '<STR_LIT>');<EOL>        }<EOL>        // Add our definition to the fragments array if it is a fragment<EOL>        // definition.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            fragments.","gt":"push(definition);"}
{"input":"<s> <EOL>export function getFragmentQueryDocument(document, fragmentName) {<EOL>    let actualFragmentName = fragmentName;<EOL>    // Build an array of all our fragment definitions that will be used for<EOL>    // validations. We also do some validations on the other definitions in the<EOL>    // document while building this list.<EOL>     const fragments = [];<EOL>    document.definitions.forEach(definition => {<EOL>        // Throw an error if we encounter an operation definition because we will<EOL>        // define our own operation definition later on.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            throw  new Error(`<STR_LIT>` +<EOL>                '<STR_LIT>');<EOL>        }<EOL>        // Add our definition to the fragments array if it is a fragment<EOL>        // definition.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            fragments. push(definition);<EOL>        }<EOL>    });<EOL>    // If the user did not give us a fragment name then let us try to get a<EOL>    // name from a single fragment in the definition.<EOL>    if (typeof","gt":"actualFragmentName === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function getFragmentQueryDocument(document, fragmentName) {<EOL>    let actualFragmentName = fragmentName;<EOL>    // Build an array of all our fragment definitions that will be used for<EOL>    // validations. We also do some validations on the other definitions in the<EOL>    // document while building this list.<EOL>     const fragments = [];<EOL>    document.definitions.forEach(definition => {<EOL>        // Throw an error if we encounter an operation definition because we will<EOL>        // define our own operation definition later on.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            throw  new Error(`<STR_LIT>` +<EOL>                '<STR_LIT>');<EOL>        }<EOL>        // Add our definition to the fragments array if it is a fragment<EOL>        // definition.<EOL>        if (definition.kind === '<STR_LIT>') {<EOL>            fragments. push(definition);<EOL>        }<EOL>    });<EOL>    // If the user did not give us a fragment name then let us try to get a<EOL>    // name from a single fragment in the definition.<EOL>    if (typeof  actualFragmentName === '<STR_LIT>') {<EOL>        if (fragments.length !== <NUM_LIT>) {<EOL>            throw new Error(`<STR_LIT>`);<EOL>        }<EOL>        actualFragmentName = fragments[<NUM_LIT>].name.value;<EOL>    }<EOL>    // Generate a query document with an operation that simply spreads the<EOL>    // fragment inside of it.<EOL>    const query = {<EOL>        ...document,<EOL>        definitions: [<EOL>            {<EOL>                kind: '<STR_LIT>',<EOL>                operation: '<STR_LIT>',<EOL>                selectionSet: {<EOL>                    kind: '<STR_LIT>',<EOL>                    selections: [<EOL>                        {<EOL>","gt":"kind: '<STR_LIT>',"}
{"input":"<s> export default function renameBranch(branchId, branchName, history) {<EOL>    const { graph } = history;<EOL>    log('<STR_LIT>', branchId, branchName);<EOL>","gt":"return {"}
{"input":"<s> function uniq(arr) {<EOL>    return arr.reduce((accum, val) => {<EOL>        if (accum.indexOf(","gt":"val) === -<NUM_LIT>)"}
{"input":"<s> function parseFragmentToInlineFragment(definitions) {<EOL>    const document = parse(definitions);<EOL>    for (const definition of document.definitions) {<EOL>        if (definition.kind === Kind.FRAGMENT_DEFINITION) {<EOL>","gt":"return {"}
{"input":"<s> function testRandomFile(file) {<EOL>    let tests = getRandomInt(<NUM_LIT>, <NUM_LIT>);<EOL>    for (let i = <NUM_LIT>; i < tests; i++) {<EOL>        let chunks = generateRandomChunks(file);<EOL>","gt":"try {"}
{"input":"<s> function testRandomFile(file) {<EOL>    let tests = getRandomInt(<NUM_LIT>, <NUM_LIT>);<EOL>    for (let i = <NUM_LIT>; i < tests; i++) {<EOL>        let chunks = generateRandomChunks(file);<EOL>         try {<EOL>            testModelBuilder(chunks);<EOL>        }<EOL>        catch (err) {<EOL>            console.log(err);<EOL>            console.log(JSON.stringify(chunks));<EOL>            return","gt":"false;"}
{"input":"<s> <EOL>export function select(selector, comparator) {<EOL>    return (target, key) => {<EOL>        const adjustedSelector = selector<EOL>            ?","gt":"selector"}
{"input":"<s> export function minifyTask(src, sourceMapBaseUrl) {<EOL>    const sourceMappingURL = sourceMapBaseUrl && (f => `<STR_LIT>`);<EOL>    return cb => {<EOL>        const jsFilter = filter('<STR_LIT>', { restore: true });<EOL>        const cssFilter = filter('<STR_LIT>', { restore: true });<EOL>        pump(gulp.src([src + '<STR_LIT>',","gt":"'<STR_LIT>' + src + '<STR_LIT>']), jsFilter, sourcemaps.init({ loadMaps: true }), uglifyWithCopyrights(), jsFilter.restore, cssFilter, minifyCSS({ reduceIdents: false }), cssFilter.restore, sourcemaps.write('<STR_LIT>', {"}
{"input":"<s> export function minifyTask(src, sourceMapBaseUrl) {<EOL>    const sourceMappingURL = sourceMapBaseUrl && (f => `<STR_LIT>`);<EOL>    return cb => {<EOL>        const jsFilter = filter('<STR_LIT>', { restore: true });<EOL>        const cssFilter = filter('<STR_LIT>', { restore: true });<EOL>        pump(gulp.src([src + '<STR_LIT>',  '<STR_LIT>' + src + '<STR_LIT>']), jsFilter, sourcemaps.init({ loadMaps: true }), uglifyWithCopyrights(), jsFilter.restore, cssFilter, minifyCSS({ reduceIdents: false }), cssFilter.restore, sourcemaps.write('<STR_LIT>', {<EOL>            sourceMappingURL,<EOL>            sourceRoot: null,<EOL>            includeContent: true,<EOL>","gt":"addComment: true"}
{"input":"<s> export function cannotReplaceNode(node, parent, key) {<EOL>    return new TraversalError(","gt":"\"<STR_LIT>\", node, parent, key);"}
{"input":"<s> <EOL>export function distinct(keySelector, flushes) {<EOL>    return this.","gt":"lift(new DistinctOperator(keySelector, flushes));"}
{"input":"<s> export function isWhitespace(string) {<EOL>    return WHITESPACE.test(","gt":"string);"}
{"input":"<s> function distrs(fn, scripts, f) {<EOL>    var byV = {};<EOL>    scripts.forEach(s => {<EOL>        var k = f(s);<EOL>        if (byV[k])<EOL>            byV[","gt":"k]++;"}
{"input":"<s> function distrs(fn, scripts, f) {<EOL>    var byV = {};<EOL>    scripts.forEach(s => {<EOL>        var k = f(s);<EOL>        if (byV[k])<EOL>            byV[ k]++;<EOL>        else<EOL>            byV[k] = <NUM_LIT>;<EOL>    });<EOL>    var res = Object.keys(byV).","gt":"map(k => { return { name: k, value: byV[k] }; });"}
{"input":"<s> function distrs(fn, scripts, f) {<EOL>    var byV = {};<EOL>    scripts.forEach(s => {<EOL>        var k = f(s);<EOL>        if (byV[k])<EOL>            byV[ k]++;<EOL>        else<EOL>            byV[k] = <NUM_LIT>;<EOL>    });<EOL>    var res = Object.keys(byV). map(k => { return { name: k, value: byV[k] }; });<EOL>    res.sort((a, b) => b.value - a.value);<EOL>    res = res.slice(<NUM_LIT>, <NUM_LIT>);<EOL>    var csv = fn + \"<STR_LIT>\" + fn + \"<STR_LIT>\";<EOL>    res.","gt":"forEach(k => {"}
{"input":"<s> export function renderTemplate(src, env, self, builder) {<EOL>    let template =","gt":"env.compile(src);"}
{"input":"<s> function compileSet(e, b) {<EOL>    var bVar = b.getFieldValue(\"<STR_LIT>\");<EOL>    var bExpr = b.","gt":"getInputTargetBlock(\"<STR_LIT>\");"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>","gt":"y = z;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z.","gt":"delta;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>","gt":"T.requestNormalizeDelta = true;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z.","gt":"delta;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if (","gt":"y === T.root) {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T.","gt":"root.parent = SENTINEL;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = (","gt":"getNodeColor(y) === NodeColor.Red);"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>","gt":"if (y === y.parent."}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent.","gt":"left) {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x.","gt":"parent = y.parent;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =","gt":"z.left;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T.","gt":"root = y;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y.","gt":"right.parent = y;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>","gt":"recomputeMaxEndWalkToRoot(x.parent);"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>","gt":"resetSentinel();"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==","gt":"z) {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y.","gt":"parent);"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x.","gt":"parent.right;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w.","gt":"left, NodeColor.Black);"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>","gt":"x = T.root;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>         else {<EOL>            w = x.","gt":"parent.left;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>         else {<EOL>            w = x. parent.left;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                rightRotate(T,","gt":"x.parent);"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>         else {<EOL>            w = x. parent.left;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                rightRotate(T,  x.parent);<EOL>                w = x.parent.","gt":"left;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>         else {<EOL>            w = x. parent.left;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                rightRotate(T,  x.parent);<EOL>                w = x.parent. left;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>","gt":"x = x.parent;"}
{"input":"<s> //#endregion<EOL>//#region Deletion<EOL>function rbTreeDelete(T, z) {<EOL>    let x;<EOL>    let y;<EOL>    // RB-DELETE except we don't swap z and y in case c)<EOL>    // i.e. we always delete what's pointed at by z.<EOL>    if (z.left === SENTINEL) {<EOL>        x = z.right;<EOL>         y = z;<EOL>        // x's delta is no longer influenced by z's delta<EOL>        x.delta += z.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>        x.start += z.delta;<EOL>        x.end += z. delta;<EOL>    }<EOL>    else if (z.right === SENTINEL) {<EOL>        x = z.left;<EOL>        y = z;<EOL>    }<EOL>     else {<EOL>        y = leftest(z.right);<EOL>        x = y.right;<EOL>        // y's delta is no longer influenced by z's delta,<EOL>        // but we don't want to walk the entire right-hand-side subtree of x.<EOL>        // we therefore maintain z's delta in y, and adjust only x<EOL>        x.start += y.delta;<EOL>        x.end += y.delta;<EOL>        x.delta += y.delta;<EOL>        if (x.delta < Constants.MIN_SAFE_DELTA || x.delta > Constants.MAX_SAFE_DELTA) {<EOL>             T.requestNormalizeDelta = true;<EOL>        }<EOL>        y.start += z. delta;<EOL>        y.end += z.delta;<EOL>        y.delta = z.delta;<EOL>        if (y.delta < Constants.MIN_SAFE_DELTA || y.delta > Constants.MAX_SAFE_DELTA) {<EOL>            T.requestNormalizeDelta = true;<EOL>        }<EOL>    }<EOL>    if ( y === T.root) {<EOL>        T.root = x;<EOL>        setNodeColor(x, NodeColor.Black);<EOL>        z.detach();<EOL>        resetSentinel();<EOL>        recomputeMaxEnd(x);<EOL>        T. root.parent = SENTINEL;<EOL>        return;<EOL>    }<EOL>    let yWasRed = ( getNodeColor(y) === NodeColor.Red);<EOL>     if (y === y.parent. left) {<EOL>        y.parent.left = x;<EOL>    }<EOL>    else {<EOL>        y.parent.right = x;<EOL>    }<EOL>    if (y === z) {<EOL>        x. parent = y.parent;<EOL>    }<EOL>    else {<EOL>        if (y.parent === z) {<EOL>            x.parent = y;<EOL>        }<EOL>        else {<EOL>            x.parent = y.parent;<EOL>        }<EOL>        y.left =  z.left;<EOL>        y.right = z.right;<EOL>        y.parent = z.parent;<EOL>        setNodeColor(y, getNodeColor(z));<EOL>        if (z === T.root) {<EOL>            T. root = y;<EOL>        }<EOL>         else {<EOL>            if (z === z.parent.left) {<EOL>                z.parent.left = y;<EOL>            }<EOL>            else {<EOL>                z.parent.right = y;<EOL>            }<EOL>        }<EOL>        if (y.left !== SENTINEL) {<EOL>            y.left.parent = y;<EOL>        }<EOL>        if (y.right !== SENTINEL) {<EOL>            y. right.parent = y;<EOL>        }<EOL>    }<EOL>    z.detach();<EOL>    if (yWasRed) {<EOL>         recomputeMaxEndWalkToRoot(x.parent);<EOL>        if (y !== z) {<EOL>            recomputeMaxEndWalkToRoot(y);<EOL>            recomputeMaxEndWalkToRoot(y.parent);<EOL>        }<EOL>         resetSentinel();<EOL>        return;<EOL>    }<EOL>    recomputeMaxEndWalkToRoot(x);<EOL>    recomputeMaxEndWalkToRoot(x.parent);<EOL>    if (y !==  z) {<EOL>        recomputeMaxEndWalkToRoot(y);<EOL>        recomputeMaxEndWalkToRoot(y. parent);<EOL>    }<EOL>    // RB-DELETE-FIXUP<EOL>    let w;<EOL>    while (x !== T.root && getNodeColor(x) === NodeColor.Black) {<EOL>        if (x === x.parent.left) {<EOL>            w = x. parent.right;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                leftRotate(T, x.parent);<EOL>                w = x.parent.right;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.right) === NodeColor.Black) {<EOL>                    setNodeColor(w. left, NodeColor.Black);<EOL>                    setNodeColor(w, NodeColor.Red);<EOL>                    rightRotate(T, w);<EOL>                    w = x.parent.right;<EOL>                }<EOL>                setNodeColor(w, getNodeColor(x.parent));<EOL>                setNodeColor(x.parent, NodeColor.Black);<EOL>                setNodeColor(w.right, NodeColor.Black);<EOL>                leftRotate(T, x.parent);<EOL>                 x = T.root;<EOL>            }<EOL>        }<EOL>         else {<EOL>            w = x. parent.left;<EOL>            if (getNodeColor(w) === NodeColor.Red) {<EOL>                setNodeColor(w, NodeColor.Black);<EOL>                setNodeColor(x.parent, NodeColor.Red);<EOL>                rightRotate(T,  x.parent);<EOL>                w = x.parent. left;<EOL>            }<EOL>            if (getNodeColor(w.left) === NodeColor.Black && getNodeColor(w.right) === NodeColor.Black) {<EOL>                setNodeColor(w, NodeColor.Red);<EOL>                 x = x.parent;<EOL>            }<EOL>            else {<EOL>                if (getNodeColor(w.left) === NodeColor.Black) {<EOL>                    setNodeColor(w.right, NodeColor.Black);<EOL>                    setNodeColor(","gt":"w, NodeColor.Red);"}
{"input":"<s> function assertFired(component, name, count = <NUM_LIT>) {<EOL>    let hooks = component['<STR_LIT>'];<EOL>    if (!hooks) {<EOL>        throw new TypeError(\"<STR_LIT>\" + component);<EOL>    }<EOL>    if (name in hooks) {<EOL>        assert.strictEqual(hooks[name], count, `<STR_LIT>`);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function timeout(due, scheduler = async) {<EOL>    const absoluteTimeout =","gt":"isDate(due);"}
{"input":"<s> <EOL><EOL>export function find(predicate, thisArg) {<EOL>    if (typeof predicate !== '<STR_LIT>') {<EOL>        throw","gt":"new TypeError('<STR_LIT>');"}
{"input":"<s> <EOL><EOL>export function defaultIfEmpty(defaultValue = null) {<EOL>","gt":"return this.lift(new DefaultIfEmptyOperator(defaultValue));"}
{"input":"<s> <EOL>export function sample(notifier) {<EOL>    return this.","gt":"lift(new SampleOperator(notifier));"}
{"input":"<s> function getDirectiveMatcher(directives) {<EOL>    return function directiveMatcher(directive) {<EOL>        return directives.some((dir) => {<EOL>            if (dir.name && dir.name === directive.","gt":"name.value)"}
{"input":"<s> function typeToAst(type) {<EOL>    if (type instanceof GraphQLNonNull) {<EOL>        const innerType = typeToAst(type.ofType);<EOL>        if (innerType.kind === Kind.LIST_TYPE ||<EOL>            innerType.kind === Kind.NAMED_TYPE) {<EOL>            return {<EOL>","gt":"kind: Kind.NON_NULL_TYPE,"}
{"input":"<s> function typeToAst(type) {<EOL>    if (type instanceof GraphQLNonNull) {<EOL>        const innerType = typeToAst(type.ofType);<EOL>        if (innerType.kind === Kind.LIST_TYPE ||<EOL>            innerType.kind === Kind.NAMED_TYPE) {<EOL>            return {<EOL>                 kind: Kind.NON_NULL_TYPE,<EOL>                type: innerType,<EOL>            };<EOL>        }<EOL>        else {<EOL>            throw new Error('<STR_LIT>');<EOL>        }<EOL>    }<EOL>    else if (type instanceof GraphQLList) {<EOL>","gt":"return {"}
{"input":"<s> function typeToAst(type) {<EOL>    if (type instanceof GraphQLNonNull) {<EOL>        const innerType = typeToAst(type.ofType);<EOL>        if (innerType.kind === Kind.LIST_TYPE ||<EOL>            innerType.kind === Kind.NAMED_TYPE) {<EOL>            return {<EOL>                 kind: Kind.NON_NULL_TYPE,<EOL>                type: innerType,<EOL>            };<EOL>        }<EOL>        else {<EOL>            throw new Error('<STR_LIT>');<EOL>        }<EOL>    }<EOL>    else if (type instanceof GraphQLList) {<EOL>         return {<EOL>            kind: Kind.LIST_TYPE,<EOL>            type: typeToAst(type.ofType),<EOL>        };<EOL>    }<EOL>    else {<EOL>        return {<EOL>            kind:","gt":"Kind.NAMED_TYPE,"}
{"input":"<s> function makeInterfaceType(typeRegistry, node) {<EOL>    return new GraphQLInterfaceType({<EOL>        name: node.","gt":"name.value,"}
{"input":"<s> function concatErrors(errors) {<EOL>    return errors.","gt":"map(error => error.message).join('<STR_LIT>');"}
{"input":"<s> // taken straight from https://github.com/substack/deep-freeze to avoid import hassles with rollup<EOL>function deepFreeze(o) {<EOL>    Object.freeze(o);<EOL>    Object.getOwnPropertyNames(o).forEach(function (prop) {<EOL>        if (o.hasOwnProperty(prop) &&<EOL>            o[","gt":"prop] !== null &&"}
{"input":"<s> function f82() {<EOL>    let x1 = f81({ a: {","gt":"x: \"<STR_LIT>\" } });"}
{"input":"<s> function objectHash(obj, initialHashVal) {<EOL>    initialHashVal = numberHash(<NUM_LIT>, initialHashVal);<EOL>    return Object.keys(obj).sort().reduce((hashVal,","gt":"key) => {"}
{"input":"<s> function createEditableTextModelFromString(text) {<EOL>    return","gt":"new TextModel(text, TextModel.DEFAULT_CREATION_OPTIONS, null);"}
{"input":"<s> async function func() {<EOL>","gt":"before();"}
{"input":"<s> function moduleIdToPath(out, moduleId) {<EOL>    if (/\\.d\\.ts/.test(moduleId)) {<EOL>        return path.join(SRC,","gt":"moduleId);"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:","gt":"/^var __assign/, end: /^};$/ },"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,","gt":"end: /^};$/ },"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,  end: /^};$/ },<EOL>        { start: /^var __param/, end: /^};$/ },<EOL>        { start: /^var __awaiter/, end: /^};$/ },<EOL>    ];<EOL>    destFiles.forEach((destFile) => {<EOL>        let SEEN_BOILERPLATE = [];<EOL>        destFile.sources.forEach((source) => {<EOL>            let lines = source.contents.split(/\\r\\n|\\n|\\r/);<EOL>            let newLines = [];<EOL>            let IS_REMOVING_BOILERPLATE = false,","gt":"END_BOILERPLATE;"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,  end: /^};$/ },<EOL>        { start: /^var __param/, end: /^};$/ },<EOL>        { start: /^var __awaiter/, end: /^};$/ },<EOL>    ];<EOL>    destFiles.forEach((destFile) => {<EOL>        let SEEN_BOILERPLATE = [];<EOL>        destFile.sources.forEach((source) => {<EOL>            let lines = source.contents.split(/\\r\\n|\\n|\\r/);<EOL>            let newLines = [];<EOL>            let IS_REMOVING_BOILERPLATE = false,  END_BOILERPLATE;<EOL>            for (let i = <NUM_LIT>; i < lines.length; i++) {<EOL>                let line = lines[i];<EOL>                if (IS_REMOVING_BOILERPLATE) {<EOL>                    newLines.push('<STR_LIT>');<EOL>                    if (END_BOILERPLATE.","gt":"test(line)) {"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,  end: /^};$/ },<EOL>        { start: /^var __param/, end: /^};$/ },<EOL>        { start: /^var __awaiter/, end: /^};$/ },<EOL>    ];<EOL>    destFiles.forEach((destFile) => {<EOL>        let SEEN_BOILERPLATE = [];<EOL>        destFile.sources.forEach((source) => {<EOL>            let lines = source.contents.split(/\\r\\n|\\n|\\r/);<EOL>            let newLines = [];<EOL>            let IS_REMOVING_BOILERPLATE = false,  END_BOILERPLATE;<EOL>            for (let i = <NUM_LIT>; i < lines.length; i++) {<EOL>                let line = lines[i];<EOL>                if (IS_REMOVING_BOILERPLATE) {<EOL>                    newLines.push('<STR_LIT>');<EOL>                    if (END_BOILERPLATE. test(line)) {<EOL>                        IS_REMOVING_BOILERPLATE = false;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    for (let j = <NUM_LIT>; j < BOILERPLATE.length; j++) {<EOL>                        let","gt":"boilerplate = BOILERPLATE[j];"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,  end: /^};$/ },<EOL>        { start: /^var __param/, end: /^};$/ },<EOL>        { start: /^var __awaiter/, end: /^};$/ },<EOL>    ];<EOL>    destFiles.forEach((destFile) => {<EOL>        let SEEN_BOILERPLATE = [];<EOL>        destFile.sources.forEach((source) => {<EOL>            let lines = source.contents.split(/\\r\\n|\\n|\\r/);<EOL>            let newLines = [];<EOL>            let IS_REMOVING_BOILERPLATE = false,  END_BOILERPLATE;<EOL>            for (let i = <NUM_LIT>; i < lines.length; i++) {<EOL>                let line = lines[i];<EOL>                if (IS_REMOVING_BOILERPLATE) {<EOL>                    newLines.push('<STR_LIT>');<EOL>                    if (END_BOILERPLATE. test(line)) {<EOL>                        IS_REMOVING_BOILERPLATE = false;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    for (let j = <NUM_LIT>; j < BOILERPLATE.length; j++) {<EOL>                        let  boilerplate = BOILERPLATE[j];<EOL>                        if (boilerplate.start.test(line)) {<EOL>                            if (SEEN_BOILERPLATE[j]) {<EOL>                                IS_REMOVING_BOILERPLATE = true;<EOL>                                END_BOILERPLATE = boilerplate.end;<EOL>                            }<EOL>                            else {<EOL>                                SEEN_BOILERPLATE[j] = true;<EOL>                            }<EOL>                        }<EOL>                    }<EOL>","gt":"if (IS_REMOVING_BOILERPLATE) {"}
{"input":"<s> function removeDuplicateTSBoilerplate(destFiles) {<EOL>    // Taken from typescript compiler => emitFiles<EOL>    let BOILERPLATE = [<EOL>        { start: /^var __extends/, end: /^};$/ },<EOL>        { start:  /^var __assign/, end: /^};$/ },<EOL>        { start: /^var __decorate/, end: /^};$/ },<EOL>        { start: /^var __metadata/,  end: /^};$/ },<EOL>        { start: /^var __param/, end: /^};$/ },<EOL>        { start: /^var __awaiter/, end: /^};$/ },<EOL>    ];<EOL>    destFiles.forEach((destFile) => {<EOL>        let SEEN_BOILERPLATE = [];<EOL>        destFile.sources.forEach((source) => {<EOL>            let lines = source.contents.split(/\\r\\n|\\n|\\r/);<EOL>            let newLines = [];<EOL>            let IS_REMOVING_BOILERPLATE = false,  END_BOILERPLATE;<EOL>            for (let i = <NUM_LIT>; i < lines.length; i++) {<EOL>                let line = lines[i];<EOL>                if (IS_REMOVING_BOILERPLATE) {<EOL>                    newLines.push('<STR_LIT>');<EOL>                    if (END_BOILERPLATE. test(line)) {<EOL>                        IS_REMOVING_BOILERPLATE = false;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    for (let j = <NUM_LIT>; j < BOILERPLATE.length; j++) {<EOL>                        let  boilerplate = BOILERPLATE[j];<EOL>                        if (boilerplate.start.test(line)) {<EOL>                            if (SEEN_BOILERPLATE[j]) {<EOL>                                IS_REMOVING_BOILERPLATE = true;<EOL>                                END_BOILERPLATE = boilerplate.end;<EOL>                            }<EOL>                            else {<EOL>                                SEEN_BOILERPLATE[j] = true;<EOL>                            }<EOL>                        }<EOL>                    }<EOL>                     if (IS_REMOVING_BOILERPLATE) {<EOL>                        newLines.push('<STR_LIT>');<EOL>                    }<EOL>","gt":"else {"}
{"input":"<s> export function fileTransformations(isFolderBasedDeployment, JSONFiles, xmlTransformation, xmlVariableSubstitution, folderPath, isMSBuildPackage) {<EOL>    if (xmlTransformation) {<EOL>        if (isMSBuildPackage) {<EOL>            var debugMode = tl.","gt":"getVariable('<STR_LIT>');"}
{"input":"<s> export function fileTransformations(isFolderBasedDeployment, JSONFiles, xmlTransformation, xmlVariableSubstitution, folderPath, isMSBuildPackage) {<EOL>    if (xmlTransformation) {<EOL>        if (isMSBuildPackage) {<EOL>            var debugMode = tl. getVariable('<STR_LIT>');<EOL>            if (debugMode && debugMode.toLowerCase() == '<STR_LIT>') {<EOL>                tl.warning(tl.loc('<STR_LIT>'));<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function fileTransformations(isFolderBasedDeployment, JSONFiles, xmlTransformation, xmlVariableSubstitution, folderPath, isMSBuildPackage) {<EOL>    if (xmlTransformation) {<EOL>        if (isMSBuildPackage) {<EOL>            var debugMode = tl. getVariable('<STR_LIT>');<EOL>            if (debugMode && debugMode.toLowerCase() == '<STR_LIT>') {<EOL>                tl.warning(tl.loc('<STR_LIT>'));<EOL>            }<EOL>             else {<EOL>                console.log(tl.loc('<STR_LIT>'));<EOL>            }<EOL>        }<EOL>        var environmentName =","gt":"tl.getVariable('<STR_LIT>');"}
{"input":"<s> export function fileTransformations(isFolderBasedDeployment, JSONFiles, xmlTransformation, xmlVariableSubstitution, folderPath, isMSBuildPackage) {<EOL>    if (xmlTransformation) {<EOL>        if (isMSBuildPackage) {<EOL>            var debugMode = tl. getVariable('<STR_LIT>');<EOL>            if (debugMode && debugMode.toLowerCase() == '<STR_LIT>') {<EOL>                tl.warning(tl.loc('<STR_LIT>'));<EOL>            }<EOL>             else {<EOL>                console.log(tl.loc('<STR_LIT>'));<EOL>            }<EOL>        }<EOL>        var environmentName =  tl.getVariable('<STR_LIT>');<EOL>        if (tl.osType().match(/^Win/)) {<EOL>            var transformConfigs = [\"<STR_LIT>\"];<EOL>            if (environmentName && environmentName.toLowerCase() !=","gt":"'<STR_LIT>') {"}
{"input":"<s> export function fileTransformations(isFolderBasedDeployment, JSONFiles, xmlTransformation, xmlVariableSubstitution, folderPath, isMSBuildPackage) {<EOL>    if (xmlTransformation) {<EOL>        if (isMSBuildPackage) {<EOL>            var debugMode = tl. getVariable('<STR_LIT>');<EOL>            if (debugMode && debugMode.toLowerCase() == '<STR_LIT>') {<EOL>                tl.warning(tl.loc('<STR_LIT>'));<EOL>            }<EOL>             else {<EOL>                console.log(tl.loc('<STR_LIT>'));<EOL>            }<EOL>        }<EOL>        var environmentName =  tl.getVariable('<STR_LIT>');<EOL>        if (tl.osType().match(/^Win/)) {<EOL>            var transformConfigs = [\"<STR_LIT>\"];<EOL>            if (environmentName && environmentName.toLowerCase() !=  '<STR_LIT>') {<EOL>                transformConfigs.push(environmentName + \"<STR_LIT>\");<EOL>            }<EOL>            var isTransformationApplied = xdtTransformationUtility.basicXdtTransformation(folderPath, transformConfigs);<EOL>            if (","gt":"isTransformationApplied) {"}
{"input":"<s> export function append(parent, ...children) {<EOL>    children.forEach(child => parent.","gt":"appendChild(child));"}
{"input":"<s> function isD1(x) {<EOL>","gt":"return true;"}
{"input":"<s> <EOL>export function asFileResource(obj) {<EOL>    if (obj instanceof FileStat) {<EOL>        let stat = obj;<EOL>","gt":"return {"}
{"input":"<s> async function func() {<EOL>","gt":"before();"}
{"input":"<s> <EOL>export function getModelMarkers(filter) {<EOL>    return StaticServices.markerService.get().read(","gt":"filter);"}
{"input":"<s> <EOL>export function getModel(uri) {<EOL>    return StaticServices.modelService.get().getModel(","gt":"uri);"}
{"input":"<s> export function getNonWhitespacePrefix(model, position) {<EOL>    <EOL>    const MAX_PREFIX_LENGTH = <NUM_LIT>;<EOL>    let line = model.getLineContent(position.lineNumber).substr(<NUM_LIT>, position.column - <NUM_LIT>);<EOL>    let minChIndex = Math.max(<NUM_LIT>, line.length - MAX_PREFIX_LENGTH);<EOL>    for (let chIndex = line.","gt":"length - <NUM_LIT>; chIndex >= minChIndex; chIndex--) {"}
{"input":"<s> export function getNonWhitespacePrefix(model, position) {<EOL>    <EOL>    const MAX_PREFIX_LENGTH = <NUM_LIT>;<EOL>    let line = model.getLineContent(position.lineNumber).substr(<NUM_LIT>, position.column - <NUM_LIT>);<EOL>    let minChIndex = Math.max(<NUM_LIT>, line.length - MAX_PREFIX_LENGTH);<EOL>    for (let chIndex = line. length - <NUM_LIT>; chIndex >= minChIndex; chIndex--) {<EOL>        let ch = line.charAt(chIndex);<EOL>        if (/\\s/.test(ch)) {<EOL>            return line.substr(chIndex + <NUM_LIT>);<EOL>        }<EOL>    }<EOL>    if (minChIndex ===","gt":"<NUM_LIT>) {"}
{"input":"<s> function test(r) {<EOL>","gt":"r.method(<NUM_LIT>);"}
{"input":"<s> function kindIs(kind, is) {<EOL>    return","gt":"kind === is;"}
{"input":"<s> export function decodeTextMateToken(decodeMap, scopes) {<EOL>    const prevTokenScopes = decodeMap.prevToken.scopes;<EOL>    const prevTokenScopesLength = prevTokenScopes.length;<EOL>    const prevTokenScopeTokensMaps = decodeMap.prevToken.scopeTokensMaps;<EOL>    let scopeTokensMaps = [];<EOL>    let","gt":"prevScopeTokensMaps = [];"}
{"input":"<s> export function decodeTextMateToken(decodeMap, scopes) {<EOL>    const prevTokenScopes = decodeMap.prevToken.scopes;<EOL>    const prevTokenScopesLength = prevTokenScopes.length;<EOL>    const prevTokenScopeTokensMaps = decodeMap.prevToken.scopeTokensMaps;<EOL>    let scopeTokensMaps = [];<EOL>    let  prevScopeTokensMaps = [];<EOL>    let sameAsPrev = true;<EOL>    for (let level = <NUM_LIT> ; level < scopes.length; level++) {<EOL>        let scope = scopes[","gt":"level];"}
{"input":"<s> export function decodeTextMateToken(decodeMap, scopes) {<EOL>    const prevTokenScopes = decodeMap.prevToken.scopes;<EOL>    const prevTokenScopesLength = prevTokenScopes.length;<EOL>    const prevTokenScopeTokensMaps = decodeMap.prevToken.scopeTokensMaps;<EOL>    let scopeTokensMaps = [];<EOL>    let  prevScopeTokensMaps = [];<EOL>    let sameAsPrev = true;<EOL>    for (let level = <NUM_LIT> ; level < scopes.length; level++) {<EOL>        let scope = scopes[ level];<EOL>        if (sameAsPrev) {<EOL>            if (level < prevTokenScopesLength && prevTokenScopes[level] === scope) {<EOL>                prevScopeTokensMaps = prevTokenScopeTokensMaps[","gt":"level];"}
{"input":"<s> export function decodeTextMateToken(decodeMap, scopes) {<EOL>    const prevTokenScopes = decodeMap.prevToken.scopes;<EOL>    const prevTokenScopesLength = prevTokenScopes.length;<EOL>    const prevTokenScopeTokensMaps = decodeMap.prevToken.scopeTokensMaps;<EOL>    let scopeTokensMaps = [];<EOL>    let  prevScopeTokensMaps = [];<EOL>    let sameAsPrev = true;<EOL>    for (let level = <NUM_LIT> ; level < scopes.length; level++) {<EOL>        let scope = scopes[ level];<EOL>        if (sameAsPrev) {<EOL>            if (level < prevTokenScopesLength && prevTokenScopes[level] === scope) {<EOL>                prevScopeTokensMaps = prevTokenScopeTokensMaps[ level];<EOL>                scopeTokensMaps[level] = prevScopeTokensMaps;<EOL>                continue;<EOL>            }<EOL>            sameAsPrev = false;<EOL>        }<EOL>        let tokens = decodeMap.getTokenIds(scope);<EOL>        prevScopeTokensMaps = prevScopeTokensMaps.slice(<NUM_LIT>);<EOL>        for (let i = <NUM_LIT>; i < tokens.length;","gt":"i++) {"}
{"input":"<s> function toQueueKey(path) {<EOL>    let queueKey = path;<EOL>    if (","gt":"platform.isWindows || platform.isMacintosh) {"}
{"input":"<s> export function resolveArduinoPath() {<EOL>    let pathString;<EOL>    try {<EOL>        pathString = childProcess.execSync(\"<STR_LIT>\", { encoding: \"<STR_LIT>\" });<EOL>        pathString = path.resolve(","gt":"pathString).trim();"}
{"input":"<s> // Small helper functions<EOL><EOL>export function empty(s) {<EOL>","gt":"return (s ? false : true);"}
{"input":"<s> function fff(x, y) {<EOL>    foo2(","gt":"x);"}
{"input":"<s> function update(tr) {<EOL>","gt":"assert(tr.stdOutContained('<STR_LIT>'), '<STR_LIT>');"}
{"input":"<s> function findGitHubGitWin32() {<EOL>    const github = join(process.env['<STR_LIT>'], '<STR_LIT>');<EOL>    return readdir(github).then(children => {<EOL>","gt":"const git = children.filter(child => /^PortableGit/.test(child))[<NUM_LIT>];"}
{"input":"<s> export function validateArduinoPath(arduinoPath) {<EOL>    return fileExistsSync(path.join(","gt":"arduinoPath, \"<STR_LIT>\"));"}
{"input":"<s> function treeInsert(T, z) {<EOL>    let delta = <NUM_LIT>;<EOL>    let x = T.root;<EOL>    const zAbsoluteStart = z.start;<EOL>    const zAbsoluteEnd =","gt":"z.end;"}
{"input":"<s> function treeInsert(T, z) {<EOL>    let delta = <NUM_LIT>;<EOL>    let x = T.root;<EOL>    const zAbsoluteStart = z.start;<EOL>    const zAbsoluteEnd =  z.end;<EOL>    while (","gt":"true) {"}
{"input":"<s> function treeInsert(T, z) {<EOL>    let delta = <NUM_LIT>;<EOL>    let x = T.root;<EOL>    const zAbsoluteStart = z.start;<EOL>    const zAbsoluteEnd =  z.end;<EOL>    while ( true) {<EOL>        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);<EOL>        if (cmp < <NUM_LIT>) {<EOL>            // this node should be inserted to the left<EOL>            // => it is not affected by the node's delta<EOL>            if (x.left === SENTINEL) {<EOL>                z.start -= delta;<EOL>                z.end -= delta;<EOL>                z.","gt":"maxEnd -= delta;"}
{"input":"<s> function treeInsert(T, z) {<EOL>    let delta = <NUM_LIT>;<EOL>    let x = T.root;<EOL>    const zAbsoluteStart = z.start;<EOL>    const zAbsoluteEnd =  z.end;<EOL>    while ( true) {<EOL>        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);<EOL>        if (cmp < <NUM_LIT>) {<EOL>            // this node should be inserted to the left<EOL>            // => it is not affected by the node's delta<EOL>            if (x.left === SENTINEL) {<EOL>                z.start -= delta;<EOL>                z.end -= delta;<EOL>                z. maxEnd -= delta;<EOL>                x.left = z;<EOL>                break;<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API<EOL>function getLocalStorage() {<EOL>    try {<EOL>        const storage = window['<STR_LIT>'];<EOL>        const x = '<STR_LIT>';<EOL>        storage.setItem(","gt":"x, x);"}
{"input":"<s> // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API<EOL>function getLocalStorage() {<EOL>    try {<EOL>        const storage = window['<STR_LIT>'];<EOL>        const x = '<STR_LIT>';<EOL>        storage.setItem( x, x);<EOL>        storage.removeItem(x);<EOL>        return localStorage;<EOL>    }<EOL>    catch (","gt":"e) {"}
{"input":"<s> function getInstructions(networkName) {<EOL>    var label = {<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> function getDefaultProps() {<EOL>    return {<EOL>        releaseuri: tl.getVariable(","gt":"'<STR_LIT>'),"}
{"input":"<s> <EOL>export default function generateAnyPackage(pkg, packages, versions, options) {<EOL>    return pkg.isNotNeeded() ? generateNotNeededPackage(pkg, versions) : generatePackage(","gt":"pkg, packages, versions, options);"}
{"input":"<s> export function consolidate(configMap) {<EOL>    const finalConfig = Object.create(null);<EOL>    const parseErrors = [];<EOL>    const regexp =","gt":"/\\/(team\\.)?([^\\.]*)*\\.json/;"}
{"input":"<s> export function consolidate(configMap) {<EOL>    const finalConfig = Object.create(null);<EOL>    const parseErrors = [];<EOL>    const regexp =  /\\/(team\\.)?([^\\.]*)*\\.json/;<EOL>    // For each config file in .vscode folder<EOL>    Object.keys(configMap).forEach((configFileName) => {<EOL>        const config = objects.clone(configMap[configFileName]);<EOL>","gt":"const matches = regexp.exec(configFileName);"}
{"input":"<s> export function consolidate(configMap) {<EOL>    const finalConfig = Object.create(null);<EOL>    const parseErrors = [];<EOL>    const regexp =  /\\/(team\\.)?([^\\.]*)*\\.json/;<EOL>    // For each config file in .vscode folder<EOL>    Object.keys(configMap).forEach((configFileName) => {<EOL>        const config = objects.clone(configMap[configFileName]);<EOL>         const matches = regexp.exec(configFileName);<EOL>        if (!matches || !config) {<EOL>            return;<EOL>        }<EOL>        // If a file is team.foo.json, it indicates team settings, strip this away<EOL>        const isTeamSetting = !!matches[<NUM_LIT>];<EOL>        // Extract the config key from the file name (except for settings.json which is the default)<EOL>        let configElement =","gt":"finalConfig;"}
{"input":"<s> export function consolidate(configMap) {<EOL>    const finalConfig = Object.create(null);<EOL>    const parseErrors = [];<EOL>    const regexp =  /\\/(team\\.)?([^\\.]*)*\\.json/;<EOL>    // For each config file in .vscode folder<EOL>    Object.keys(configMap).forEach((configFileName) => {<EOL>        const config = objects.clone(configMap[configFileName]);<EOL>         const matches = regexp.exec(configFileName);<EOL>        if (!matches || !config) {<EOL>            return;<EOL>        }<EOL>        // If a file is team.foo.json, it indicates team settings, strip this away<EOL>        const isTeamSetting = !!matches[<NUM_LIT>];<EOL>        // Extract the config key from the file name (except for settings.json which is the default)<EOL>        let configElement =  finalConfig;<EOL>        if (matches && matches[<NUM_LIT>] && matches[<NUM_LIT>] !== CONFIG_DEFAULT_NAME) {<EOL>            // Use the name of the file as top level config section for all settings inside<EOL>            const configSection = matches[<NUM_LIT>];<EOL>            let element =","gt":"configElement[configSection];"}
{"input":"<s> export function consolidate(configMap) {<EOL>    const finalConfig = Object.create(null);<EOL>    const parseErrors = [];<EOL>    const regexp =  /\\/(team\\.)?([^\\.]*)*\\.json/;<EOL>    // For each config file in .vscode folder<EOL>    Object.keys(configMap).forEach((configFileName) => {<EOL>        const config = objects.clone(configMap[configFileName]);<EOL>         const matches = regexp.exec(configFileName);<EOL>        if (!matches || !config) {<EOL>            return;<EOL>        }<EOL>        // If a file is team.foo.json, it indicates team settings, strip this away<EOL>        const isTeamSetting = !!matches[<NUM_LIT>];<EOL>        // Extract the config key from the file name (except for settings.json which is the default)<EOL>        let configElement =  finalConfig;<EOL>        if (matches && matches[<NUM_LIT>] && matches[<NUM_LIT>] !== CONFIG_DEFAULT_NAME) {<EOL>            // Use the name of the file as top level config section for all settings inside<EOL>            const configSection = matches[<NUM_LIT>];<EOL>            let element =  configElement[configSection];<EOL>            if (!element) {<EOL>                element = Object.create(null);<EOL>                configElement[configSection] = element;<EOL>            }<EOL>            configElement = element;<EOL>        }<EOL>","gt":"merge(configElement, config.contents, !isTeamSetting );"}
{"input":"<s> export function getWordAtText(column, wordDefinition, text, textOffset) {<EOL>    // console.log('_getWordAtText: ', column, text, textOffset);<EOL>    var words = text.match(wordDefinition), k, startWord, endWord, startColumn, endColumn, word;<EOL>    if (words) {<EOL>","gt":"for (k = <NUM_LIT>; k < words.length; k++) {"}
{"input":"<s> export function getWordAtText(column, wordDefinition, text, textOffset) {<EOL>    // console.log('_getWordAtText: ', column, text, textOffset);<EOL>    var words = text.match(wordDefinition), k, startWord, endWord, startColumn, endColumn, word;<EOL>    if (words) {<EOL>         for (k = <NUM_LIT>; k < words.length; k++) {<EOL>            word = words[k].trim();<EOL>            if (word.length > <NUM_LIT>) {<EOL>                startWord = text.indexOf(","gt":"word, endWord);"}
{"input":"<s> export function getWordAtText(column, wordDefinition, text, textOffset) {<EOL>    // console.log('_getWordAtText: ', column, text, textOffset);<EOL>    var words = text.match(wordDefinition), k, startWord, endWord, startColumn, endColumn, word;<EOL>    if (words) {<EOL>         for (k = <NUM_LIT>; k < words.length; k++) {<EOL>            word = words[k].trim();<EOL>            if (word.length > <NUM_LIT>) {<EOL>                startWord = text.indexOf( word, endWord);<EOL>                endWord = startWord + word.length;<EOL>                startColumn = textOffset + startWord + <NUM_LIT>;<EOL>                endColumn = textOffset + endWord + <NUM_LIT>;<EOL>                if (startColumn <= column && column <= endColumn) {<EOL>","gt":"return {"}
{"input":"<s> export function getWordAtText(column, wordDefinition, text, textOffset) {<EOL>    // console.log('_getWordAtText: ', column, text, textOffset);<EOL>    var words = text.match(wordDefinition), k, startWord, endWord, startColumn, endColumn, word;<EOL>    if (words) {<EOL>         for (k = <NUM_LIT>; k < words.length; k++) {<EOL>            word = words[k].trim();<EOL>            if (word.length > <NUM_LIT>) {<EOL>                startWord = text.indexOf( word, endWord);<EOL>                endWord = startWord + word.length;<EOL>                startColumn = textOffset + startWord + <NUM_LIT>;<EOL>                endColumn = textOffset + endWord + <NUM_LIT>;<EOL>                if (startColumn <= column && column <= endColumn) {<EOL>                     return {<EOL>                        word: word,<EOL>                        startColumn: startColumn,<EOL>                        endColumn:","gt":"endColumn"}
{"input":"<s> export function executeTests(tokenizationSupport, tests) {<EOL>    for (var i = <NUM_LIT>, len = tests.length; i < len; i++) {<EOL>        assert.ok(true,","gt":"'<STR_LIT>' + i);"}
{"input":"<s> // Replaces the global storage for tests.<EOL>// TODO: Use dependency injection instead of globals.<EOL>export function setGlobalStorageForTest(newStorage) {<EOL>    storage =","gt":"newStorage;"}
{"input":"<s> // Whether |s| is some sort of keyword in JS.  We also include the<EOL>// properties of Object.<EOL>export function isReservedWord(s) {<EOL>    var keywords = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>',<EOL>        '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    for (var","gt":"k in keywords) {"}
{"input":"<s> async function validateIsSubset(notNeeded) {<EOL>    await installForValidate();<EOL>    const indexJson = \"<STR_LIT>\";<EOL>    await assertDirectoriesEqual(registryOutputPath, validateTypesRegistryPath, {<EOL>","gt":"ignore: f => f === \"<STR_LIT>\" || f === indexJson,"}
{"input":"<s> async function validateIsSubset(notNeeded) {<EOL>    await installForValidate();<EOL>    const indexJson = \"<STR_LIT>\";<EOL>    await assertDirectoriesEqual(registryOutputPath, validateTypesRegistryPath, {<EOL>         ignore: f => f === \"<STR_LIT>\" || f === indexJson,<EOL>    });<EOL>    const actual = await readJson(joinPaths(validateTypesRegistryPath, indexJson));<EOL>    const expected = await readJson(joinPaths(registryOutputPath, indexJson));<EOL>    for (const key in actual.entries) {<EOL>        if (!(key in expected.entries) && !notNeeded.some(p => p.name === key)) {<EOL>","gt":"throw new Error(`<STR_LIT>`);"}
{"input":"<s> <EOL>export function sanitize(s) {<EOL>    return s.replace(/[&<>'\"_]/g,","gt":"'<STR_LIT>');"}
{"input":"<s> function _translateRef(ref) {<EOL>    var brPre = '<STR_LIT>';<EOL>","gt":"if (ref.startsWith(brPre)) {"}
{"input":"<s> //-----------------------------------------------------------<EOL>// Helpers<EOL>//-----------------------------------------------------------<EOL>export function execAll(func, items, state) {<EOL>    var initialState = state;<EOL>    var current = Q(null);<EOL>    items.forEach((","gt":"item) => {"}
{"input":"<s> export function finalHandler(fn) {<EOL>    return e => {<EOL>","gt":"e.preventDefault();"}
{"input":"<s> <EOL>export function mapPager(pager, fn) {<EOL>    return {<EOL>        firstPage: pager.","gt":"firstPage.map(fn),"}
{"input":"<s> export default function f2() {<EOL>","gt":"f1();"}
{"input":"<s> // Helper functions for rule finding and substitution<EOL><EOL>export function substituteMatches(lexer, str, id, matches, state) {<EOL>    var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;<EOL>    var stateMatches = null;<EOL>    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {<EOL>        if (!empty(dollar)) {<EOL>            return","gt":"'<STR_LIT>';"}
{"input":"<s> // Helper functions for rule finding and substitution<EOL><EOL>export function substituteMatches(lexer, str, id, matches, state) {<EOL>    var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;<EOL>    var stateMatches = null;<EOL>    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {<EOL>        if (!empty(dollar)) {<EOL>            return  '<STR_LIT>'; // $$<EOL>        }<EOL>        if (!empty(hash)) {<EOL>            return fixCase(","gt":"lexer, id);"}
{"input":"<s> // Helper functions for rule finding and substitution<EOL><EOL>export function substituteMatches(lexer, str, id, matches, state) {<EOL>    var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;<EOL>    var stateMatches = null;<EOL>    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {<EOL>        if (!empty(dollar)) {<EOL>            return  '<STR_LIT>'; // $$<EOL>        }<EOL>        if (!empty(hash)) {<EOL>            return fixCase( lexer, id); // default $#<EOL>        }<EOL>        if (!empty(n) && n < matches.length) {<EOL>            return fixCase(lexer, matches[n]); // $n<EOL>        }<EOL>        if (!empty(","gt":"attr) && lexer && typeof (lexer[attr]) === '<STR_LIT>') {"}
{"input":"<s> function createClient() {<EOL>    return new Client(uri.parse(require.toUrl('<STR_LIT>')).fsPath, {<EOL>","gt":"serverName: '<STR_LIT>',"}
{"input":"<s> function toBooleanWithDefault(value, defaultValue) {<EOL>    if (typeof value === '<STR_LIT>') {<EOL>        return","gt":"defaultValue;"}
{"input":"<s> function sorter(a, b) {<EOL>    if (a.weight1 !== b.weight1) {<EOL>        return a.weight1 - b.weight1;<EOL>    }<EOL>    if (a.","gt":"command < b.command) {"}
{"input":"<s> function sorter(a, b) {<EOL>    if (a.weight1 !== b.weight1) {<EOL>        return a.weight1 - b.weight1;<EOL>    }<EOL>    if (a. command < b.command) {<EOL>        return -<NUM_LIT>;<EOL>    }<EOL>    if (a.command > b.command) {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> export function finalHandler(fn) {<EOL>    return e => {<EOL>        e.","gt":"preventDefault();"}
{"input":"<s> export function isValidExtensionVersion(version, extensionDesc, notices) {<EOL>    if (extensionDesc.isBuiltin || typeof extensionDesc.main === '<STR_LIT>') {<EOL>        // No version check for builtin or declarative extensions<EOL>","gt":"return true;"}
{"input":"<s> export function isValidExtensionVersion(version, extensionDesc, notices) {<EOL>    if (extensionDesc.isBuiltin || typeof extensionDesc.main === '<STR_LIT>') {<EOL>        // No version check for builtin or declarative extensions<EOL>         return true;<EOL>    }<EOL>    let desiredVersion = normalizeVersion(parseVersion(extensionDesc.engines.vscode));<EOL>","gt":"if (!desiredVersion) {"}
{"input":"<s> export function isValidExtensionVersion(version, extensionDesc, notices) {<EOL>    if (extensionDesc.isBuiltin || typeof extensionDesc.main === '<STR_LIT>') {<EOL>        // No version check for builtin or declarative extensions<EOL>         return true;<EOL>    }<EOL>    let desiredVersion = normalizeVersion(parseVersion(extensionDesc.engines.vscode));<EOL>     if (!desiredVersion) {<EOL>        notices.push(nls.localize('<STR_LIT>', \"<STR_LIT>\", extensionDesc.engines.vscode));<EOL>        return false;<EOL>    }<EOL>    // enforce that a breaking API version is specified.<EOL>    // for 0.X.Y, that means up to 0.X must be specified<EOL>    // otherwise for Z.X.Y, that means Z must be specified<EOL>","gt":"if (desiredVersion.majorBase === <NUM_LIT>) {"}
{"input":"<s> export function isValidExtensionVersion(version, extensionDesc, notices) {<EOL>    if (extensionDesc.isBuiltin || typeof extensionDesc.main === '<STR_LIT>') {<EOL>        // No version check for builtin or declarative extensions<EOL>         return true;<EOL>    }<EOL>    let desiredVersion = normalizeVersion(parseVersion(extensionDesc.engines.vscode));<EOL>     if (!desiredVersion) {<EOL>        notices.push(nls.localize('<STR_LIT>', \"<STR_LIT>\", extensionDesc.engines.vscode));<EOL>        return false;<EOL>    }<EOL>    // enforce that a breaking API version is specified.<EOL>    // for 0.X.Y, that means up to 0.X must be specified<EOL>    // otherwise for Z.X.Y, that means Z must be specified<EOL>     if (desiredVersion.majorBase === <NUM_LIT>) {<EOL>        // force that major and minor must be specific<EOL>        if (!desiredVersion.majorMustEqual || !desiredVersion.minorMustEqual) {<EOL>            notices.push(nls.localize('<STR_LIT>', \"<STR_LIT>\", extensionDesc.engines.vscode));<EOL>","gt":"return false;"}
{"input":"<s> export function createWordRegExp(allowInWords = '<STR_LIT>') {<EOL>    return wordHelper.","gt":"createWordRegExp(allowInWords);"}
{"input":"<s> function foo2(x, y) {<EOL>    foo(","gt":"x);"}
{"input":"<s> function MODEL_ID(resource) {<EOL>","gt":"return resource.toString();"}
{"input":"<s> function printJson(object) {<EOL>    log(","gt":"JSON.stringify(object,  null,  <NUM_LIT>));"}
{"input":"<s> async function processRuntimeDependencies() {<EOL>    const installLockExists = await util.checkInstallLockFile();<EOL>    if (installLockExists) {<EOL>        // Offline Scenario: Lock file exists but package.json has not had its activationEvents rewritten.<EOL>        if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === <NUM_LIT>) {<EOL>","gt":"try {"}
{"input":"<s> async function processRuntimeDependencies() {<EOL>    const installLockExists = await util.checkInstallLockFile();<EOL>    if (installLockExists) {<EOL>        // Offline Scenario: Lock file exists but package.json has not had its activationEvents rewritten.<EOL>        if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === <NUM_LIT>) {<EOL>             try {<EOL>                await offlineInstallation();<EOL>            }<EOL>","gt":"catch (error) {"}
{"input":"<s> async function processRuntimeDependencies() {<EOL>    const installLockExists = await util.checkInstallLockFile();<EOL>    if (installLockExists) {<EOL>        // Offline Scenario: Lock file exists but package.json has not had its activationEvents rewritten.<EOL>        if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === <NUM_LIT>) {<EOL>             try {<EOL>                await offlineInstallation();<EOL>            }<EOL>             catch (error) {<EOL>                getOutputChannelLogger().showErrorMessage('<STR_LIT>');<EOL>                showOutputChannel();<EOL>            }<EOL>            // The extension have been installed and activated before.<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> async function processRuntimeDependencies() {<EOL>    const installLockExists = await util.checkInstallLockFile();<EOL>    if (installLockExists) {<EOL>        // Offline Scenario: Lock file exists but package.json has not had its activationEvents rewritten.<EOL>        if (util.packageJson.activationEvents && util.packageJson.activationEvents.length === <NUM_LIT>) {<EOL>             try {<EOL>                await offlineInstallation();<EOL>            }<EOL>             catch (error) {<EOL>                getOutputChannelLogger().showErrorMessage('<STR_LIT>');<EOL>                showOutputChannel();<EOL>            }<EOL>            // The extension have been installed and activated before.<EOL>        }<EOL>         else {<EOL>            await finalizeExtensionActivation();<EOL>        }<EOL>        // No lock file, need to download and install dependencies.<EOL>    }<EOL>    else {<EOL>","gt":"try {"}
{"input":"<s> function f3(s) {<EOL>    return s === \"<STR_LIT>\" || s ===","gt":"\"<STR_LIT>\" ? s : undefined;"}
{"input":"<s> <EOL>export function showTestOutput() {<EOL>    outputChannel.show(","gt":"true);"}
{"input":"<s> function f1() {<EOL>    var a = [<NUM_LIT>,","gt":"<NUM_LIT>, <NUM_LIT>];"}
{"input":"<s> <EOL>export function windowOpenNoOpener(url) {<EOL>    if (platform.isNative) {<EOL>        // In VSCode, window.open() always returns null...<EOL>        window.open(url);<EOL>    }<EOL>    else {<EOL>        let newTab = window.open();<EOL>        if (newTab) {<EOL>            newTab.opener = null;<EOL>            newTab.location.","gt":"href = url;"}
{"input":"<s> function matches(segments, pattern) {<EOL>    let k = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; k < pattern.length && i < segments.length; i++) {<EOL>        if (pattern[k] === segments[i] || pattern[k] === '<STR_LIT>') {<EOL>","gt":"k++;"}
{"input":"<s> async function downloadAndInstallPackages(info) {<EOL>    let outputChannelLogger = getOutputChannelLogger();<EOL>    outputChannelLogger.appendLine(\"<STR_LIT>\");<EOL>    let statusItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right);<EOL>    let","gt":"packageManager = new PackageManager(info, outputChannelLogger, statusItem);"}
{"input":"<s> async function downloadAndInstallPackages(info) {<EOL>    let outputChannelLogger = getOutputChannelLogger();<EOL>    outputChannelLogger.appendLine(\"<STR_LIT>\");<EOL>    let statusItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right);<EOL>    let  packageManager = new PackageManager(info, outputChannelLogger, statusItem);<EOL>    outputChannelLogger.appendLine('<STR_LIT>');<EOL>    setInstallationStage('<STR_LIT>');<EOL>    await packageManager.DownloadPackages();<EOL>    outputChannelLogger.appendLine('<STR_LIT>');<EOL>    setInstallationStage(","gt":"'<STR_LIT>');"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>","gt":"if (/tdpublogger/.test(localUrl)) {"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>","gt":"else if (m) {"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>         else {<EOL>            hurl = localUrl + \"<STR_LIT>\" +","gt":"hurl;"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>         else {<EOL>            hurl = localUrl + \"<STR_LIT>\" +  hurl;<EOL>        }<EOL>        dir = \"<STR_LIT>\";<EOL>    }<EOL>    // if (name == \"comments\") hurl = \"comments?count=10\"<EOL>    var allUsers = [];<EOL>    var","gt":"n = <NUM_LIT>;"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>         else {<EOL>            hurl = localUrl + \"<STR_LIT>\" +  hurl;<EOL>        }<EOL>        dir = \"<STR_LIT>\";<EOL>    }<EOL>    // if (name == \"comments\") hurl = \"comments?count=10\"<EOL>    var allUsers = [];<EOL>    var  n = <NUM_LIT>;<EOL>    var","gt":"seen = {};"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>         else {<EOL>            hurl = localUrl + \"<STR_LIT>\" +  hurl;<EOL>        }<EOL>        dir = \"<STR_LIT>\";<EOL>    }<EOL>    // if (name == \"comments\") hurl = \"comments?count=10\"<EOL>    var allUsers = [];<EOL>    var  n = <NUM_LIT>;<EOL>    var  seen = {};<EOL>    function getHFrom(cont) {<EOL>        tdevGet(hurl + cont, text => {<EOL>            var resp = JSON.parse(text);<EOL>            console.log(\"<STR_LIT>\", n++, hurl + cont, resp.items.length);<EOL>            if (saveFiles)<EOL>","gt":"allUsers = [];"}
{"input":"<s> function getOneList(name, saveFiles, f) {<EOL>    var hurl = name + \"<STR_LIT>\";<EOL>    var dir = \"<STR_LIT>\";<EOL>    if (!/localhost/.test(localUrl)) {<EOL>        var m = /(.*)\\?(.*)/.exec(localUrl);<EOL>         if (/tdpublogger/.test(localUrl)) {<EOL>            hurl = localUrl + hurl;<EOL>        }<EOL>         else if (m) {<EOL>            hurl = m[<NUM_LIT>] + \"<STR_LIT>\" + name + \"<STR_LIT>\" + m[<NUM_LIT>];<EOL>        }<EOL>         else {<EOL>            hurl = localUrl + \"<STR_LIT>\" +  hurl;<EOL>        }<EOL>        dir = \"<STR_LIT>\";<EOL>    }<EOL>    // if (name == \"comments\") hurl = \"comments?count=10\"<EOL>    var allUsers = [];<EOL>    var  n = <NUM_LIT>;<EOL>    var  seen = {};<EOL>    function getHFrom(cont) {<EOL>        tdevGet(hurl + cont, text => {<EOL>            var resp = JSON.parse(text);<EOL>            console.log(\"<STR_LIT>\", n++, hurl + cont, resp.items.length);<EOL>            if (saveFiles)<EOL>                 allUsers = [];<EOL>            resp.items.forEach(it => {<EOL>                if (it.id && seen[it.id])<EOL>                    return;<EOL>                seen[it.id] = true;<EOL>                allUsers.push(it);<EOL>            });<EOL>            if (saveFiles)<EOL>                fs.writeFile(dir + name + \"<STR_LIT>\" + Date.now() + \"<STR_LIT>\", JSON.stringify(allUsers, null, <NUM_LIT>), \"<STR_LIT>\", err => {<EOL>                    if (err)<EOL>                        throw err;<EOL>                    if (resp.continuation) {<EOL>                        fs.writeFile(dir + \"<STR_LIT>\" + name, resp.continuation, \"<STR_LIT>\", err => {<EOL>                            if (err)<EOL>                                throw err;<EOL>                            getHFrom(\"<STR_LIT>\" + resp.continuation);<EOL>                        });<EOL>                    }<EOL>                });<EOL>            else {<EOL>","gt":"if (resp.continuation)"}
{"input":"<s> // --- Editor Actions<EOL>export function editorAction(ctor) {<EOL>    CommonEditorRegistry.registerEditorAction(new","gt":"ctor());"}
{"input":"<s> function listDir(tr) {<EOL>    assert(tr.stdOutContained(","gt":"'<STR_LIT>'), '<STR_LIT>');"}
{"input":"<s> export function createTaskDummy(userId, name, description) {<EOL>    var user = {<EOL>        name: name || \"<STR_LIT>\",<EOL>        description: description ||","gt":"\"<STR_LIT>\""}
{"input":"<s> export function removeAttribute(attributes, namespaceURI, localName) {<EOL>    const index = indexOfAttribute(attributes, namespaceURI, localName);<EOL>    if (","gt":"index !== -<NUM_LIT>) {"}
{"input":"<s> export function startSpinner(message) {<EOL>    if (spinnerTimer == null) {<EOL>        let state = <NUM_LIT>;<EOL>        spinnerTimer =","gt":"setInterval(function () {"}
{"input":"<s> function reactionEquals(one, other) {<EOL>    if (!one && !other) {<EOL>        return true;<EOL>    }<EOL>    else if (!one || !other) {<EOL>        return false;<EOL>    }<EOL>    else if (one.accept !== other.accept) {<EOL>        return false;<EOL>    }<EOL>","gt":"else if (one.bubble !== other.bubble) {"}
{"input":"<s> function reactionEquals(one, other) {<EOL>    if (!one && !other) {<EOL>        return true;<EOL>    }<EOL>    else if (!one || !other) {<EOL>        return false;<EOL>    }<EOL>    else if (one.accept !== other.accept) {<EOL>        return false;<EOL>    }<EOL>     else if (one.bubble !== other.bubble) {<EOL>        return false;<EOL>    }<EOL>    else if (one.effect !== other.effect) {<EOL>        return","gt":"false;"}
{"input":"<s> function foo() {<EOL>","gt":"bar();"}
{"input":"<s> export function toggleShowQuotes() {<EOL>","gt":"return {"}
{"input":"<s> export function loadSettings(callback) {<EOL>","gt":"chrome.storage.sync.get(null, (data) => {"}
{"input":"<s> function g(value) {<EOL>","gt":"return value[<NUM_LIT>];"}
{"input":"<s> function lazyFetch(url, options) {<EOL>    return new Observable(fetchObserver => {<EOL>        let cancelToken = false;<EOL>        fetch(url, options)<EOL>            .then(res => {<EOL>","gt":"if (!cancelToken) {"}
{"input":"<s> function lazyFetch(url, options) {<EOL>    return new Observable(fetchObserver => {<EOL>        let cancelToken = false;<EOL>        fetch(url, options)<EOL>            .then(res => {<EOL>             if (!cancelToken) {<EOL>                return res.json()<EOL>                    .then(data => {<EOL>                    fetchObserver.next(data);<EOL>","gt":"fetchObserver.complete();"}
{"input":"<s> function lazyFetch(url, options) {<EOL>    return new Observable(fetchObserver => {<EOL>        let cancelToken = false;<EOL>        fetch(url, options)<EOL>            .then(res => {<EOL>             if (!cancelToken) {<EOL>                return res.json()<EOL>                    .then(data => {<EOL>                    fetchObserver.next(data);<EOL>                     fetchObserver.complete();<EOL>                });<EOL>            }<EOL>        }).catch(err => fetchObserver.error(err));<EOL>","gt":"return () => {"}
{"input":"<s> // Utils<EOL>export function isValidBranchName(value) {<EOL>    return !/^\\.|\\/\\.|\\.\\.|~|\\^|:|\\/$|\\.lock$|\\.lock\\/|\\\\|\\*|\\s|^\\s*$/.test(","gt":"value);"}
{"input":"<s> function ensureAIEngineIsInitialized() {<EOL>    if (_initialized === false) {<EOL>        // we need to pass some fake key, otherwise AI throws an exception<EOL>","gt":"appInsights.setup('<STR_LIT>')"}
{"input":"<s> function patchDockermakeHexInfo(extInfo) {<EOL>    let hexPath = thisBuild.buildPath + \"<STR_LIT>\";<EOL>","gt":"return {"}
{"input":"<s> function createArray(length, value) {<EOL>    var r = [];<EOL>    for (","gt":"var i = <NUM_LIT>; i < length; i++) {"}
{"input":"<s> export function createLineParts(lineNumber, minLineColumn, lineContent, tabSize, lineTokens, rawLineDecorations, renderWhitespace) {<EOL>    if (renderWhitespace) {<EOL>        let oldLength = rawLineDecorations.length;<EOL>        rawLineDecorations = insertWhitespaceLineDecorations(lineNumber, lineContent, tabSize, lineTokens.getFauxIndentLength(), rawLineDecorations);<EOL>        if (rawLineDecorations.length !==","gt":"oldLength) {"}
{"input":"<s> function getDefaultMetadata(topLevelLanguageId) {<EOL>    return ((topLevelLanguageId << MetadataConsts.LANGUAGEID_OFFSET)<EOL>        | (","gt":"StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)"}
{"input":"<s> function getClient(aiKey) {<EOL>    ensureAIEngineIsInitialized();<EOL>    const client = appInsights.getClient(aiKey);<EOL>    client.channel.","gt":"setOfflineMode(true);"}
{"input":"<s> export function compress(s) {<EOL>","gt":"return LZString.compressToBase64(s);"}
{"input":"<s> function isSuccess(context) {<EOL>    return (context.","gt":"res.statusCode >= <NUM_LIT> && context.res.statusCode < <NUM_LIT>) || context.res.statusCode === <NUM_LIT>;"}
{"input":"<s> export function watchCoverageFiles(root) {<EOL>    // TODO: remove hardcoded \"coverage\". Read from config. This is configurable.<EOL>    const coveragePath = join(root, \"<STR_LIT>\");<EOL>    let changeCallback = (path) => { };<EOL>    setTimeout(() => {<EOL>        changeCallback(getCoverageFiles(","gt":"coveragePath));"}
{"input":"<s> export function watchCoverageFiles(root) {<EOL>    // TODO: remove hardcoded \"coverage\". Read from config. This is configurable.<EOL>    const coveragePath = join(root, \"<STR_LIT>\");<EOL>    let changeCallback = (path) => { };<EOL>    setTimeout(() => {<EOL>        changeCallback(getCoverageFiles( coveragePath));<EOL>    }, <NUM_LIT>);<EOL>    chokidar<EOL>        .watch(coveragePath, { ignoreInitial: true })<EOL>        .on(\"<STR_LIT>\", (","gt":"event, path) => {"}
{"input":"<s> export function watchCoverageFiles(root) {<EOL>    // TODO: remove hardcoded \"coverage\". Read from config. This is configurable.<EOL>    const coveragePath = join(root, \"<STR_LIT>\");<EOL>    let changeCallback = (path) => { };<EOL>    setTimeout(() => {<EOL>        changeCallback(getCoverageFiles( coveragePath));<EOL>    }, <NUM_LIT>);<EOL>    chokidar<EOL>        .watch(coveragePath, { ignoreInitial: true })<EOL>        .on(\"<STR_LIT>\", ( event, path) => {<EOL>        changeCallback(getCoverageFiles(coveragePath));<EOL>    });<EOL>    return {<EOL>        change(","gt":"callback) {"}
{"input":"<s> export async function noNext(t, source) {<EOL>    const next =","gt":"await source.next();"}
{"input":"<s> export async function executeInSequence(funcs) {<EOL>    for (","gt":"const { fn, delay } of funcs) {"}
{"input":"<s> function testComma() {<EOL>    glb1 = <NUM_LIT>;<EOL>    let x = (incrBy_2(), <NUM_LIT>);<EOL>    assert(x == <NUM_LIT>,","gt":"\"<STR_LIT>\");"}
{"input":"<s> function isLeapYear(year) {<EOL>    var date = new Date(year, <NUM_LIT>,","gt":"<NUM_LIT>);"}
{"input":"<s> export function getWalletConfig(state) {<EOL>    return","gt":"state.wallet.config;"}
{"input":"<s> function getSafeTokenizationSupport(languageIdentifier) {<EOL>    let tokenizationSupport = TokenizationRegistry.get(languageIdentifier.language);<EOL>    if (tokenizationSupport) {<EOL>","gt":"return tokenizationSupport;"}
{"input":"<s> function resolveQuirks(nuGetVersion, definitions) {<EOL>    return","gt":"definitions"}
{"input":"<s> export function getResource(sourceFile) {<EOL>    let resource;<EOL>    if (/^vs\\/platform/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor\\/contrib/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',","gt":"project: editorProject };"}
{"input":"<s> export function getResource(sourceFile) {<EOL>    let resource;<EOL>    if (/^vs\\/platform/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor\\/contrib/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor/.test(sourceFile)) {<EOL>","gt":"return { name: '<STR_LIT>', project: editorProject };"}
{"input":"<s> export function getResource(sourceFile) {<EOL>    let resource;<EOL>    if (/^vs\\/platform/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor\\/contrib/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor/.test(sourceFile)) {<EOL>         return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/base/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',","gt":"project: editorProject };"}
{"input":"<s> export function getResource(sourceFile) {<EOL>    let resource;<EOL>    if (/^vs\\/platform/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor\\/contrib/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor/.test(sourceFile)) {<EOL>         return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/base/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/code/.test(sourceFile)) {<EOL>        return { name:","gt":"'<STR_LIT>', project: workbenchProject };"}
{"input":"<s> export function getResource(sourceFile) {<EOL>    let resource;<EOL>    if (/^vs\\/platform/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor\\/contrib/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/editor/.test(sourceFile)) {<EOL>         return { name: '<STR_LIT>', project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/base/.test(sourceFile)) {<EOL>        return { name: '<STR_LIT>',  project: editorProject };<EOL>    }<EOL>    else if (/^vs\\/code/.test(sourceFile)) {<EOL>        return { name:  '<STR_LIT>', project: workbenchProject };<EOL>    }<EOL>    else if (/^vs\\/workbench\\/parts/.test(sourceFile)) {<EOL>        resource = sourceFile.split('<STR_LIT>', <NUM_LIT>).join('<STR_LIT>');<EOL>        return { name: resource, project: workbenchProject };<EOL>    }<EOL>    else if (/^vs\\/workbench\\/services/.test(sourceFile)) {<EOL>","gt":"resource = sourceFile.split('<STR_LIT>', <NUM_LIT>).join('<STR_LIT>');"}
{"input":"<s> function testOn(...args) {<EOL>    let handle = on.apply(","gt":"null, arguments);"}
{"input":"<s> export function undefined(value) {<EOL>    return typeof value ===","gt":"'<STR_LIT>';"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,","gt":"<NUM_LIT>);"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =","gt":"assign({}, process.env, {"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:","gt":"'<STR_LIT>'"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:  '<STR_LIT>'<EOL>        });<EOL>        const command = `<STR_LIT>`;<EOL>        const child = cp.spawn(process.env.SHELL, ['<STR_LIT>', command], {<EOL>            detached: true,<EOL>            stdio: ['<STR_LIT>', '<STR_LIT>', process.stderr],<EOL>","gt":"env"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:  '<STR_LIT>'<EOL>        });<EOL>        const command = `<STR_LIT>`;<EOL>        const child = cp.spawn(process.env.SHELL, ['<STR_LIT>', command], {<EOL>            detached: true,<EOL>            stdio: ['<STR_LIT>', '<STR_LIT>', process.stderr],<EOL>             env<EOL>        });<EOL>        const buffers = [];<EOL>        child.on('<STR_LIT>', () => c({}));<EOL>        child.stdout.on('<STR_LIT>', b => buffers.push(b));<EOL>        child.on('<STR_LIT>', (code, signal) => {<EOL>            if (code !==","gt":"<NUM_LIT>) {"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:  '<STR_LIT>'<EOL>        });<EOL>        const command = `<STR_LIT>`;<EOL>        const child = cp.spawn(process.env.SHELL, ['<STR_LIT>', command], {<EOL>            detached: true,<EOL>            stdio: ['<STR_LIT>', '<STR_LIT>', process.stderr],<EOL>             env<EOL>        });<EOL>        const buffers = [];<EOL>        child.on('<STR_LIT>', () => c({}));<EOL>        child.stdout.on('<STR_LIT>', b => buffers.push(b));<EOL>        child.on('<STR_LIT>', (code, signal) => {<EOL>            if (code !==  <NUM_LIT>) {<EOL>                return e(new Error('<STR_LIT>'));<EOL>            }<EOL>            const raw = Buffer.concat(buffers).toString('<STR_LIT>');<EOL>            const match = regex.exec(raw);<EOL>            const rawStripped = match ? match[<NUM_LIT>] :","gt":"'<STR_LIT>';"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:  '<STR_LIT>'<EOL>        });<EOL>        const command = `<STR_LIT>`;<EOL>        const child = cp.spawn(process.env.SHELL, ['<STR_LIT>', command], {<EOL>            detached: true,<EOL>            stdio: ['<STR_LIT>', '<STR_LIT>', process.stderr],<EOL>             env<EOL>        });<EOL>        const buffers = [];<EOL>        child.on('<STR_LIT>', () => c({}));<EOL>        child.stdout.on('<STR_LIT>', b => buffers.push(b));<EOL>        child.on('<STR_LIT>', (code, signal) => {<EOL>            if (code !==  <NUM_LIT>) {<EOL>                return e(new Error('<STR_LIT>'));<EOL>            }<EOL>            const raw = Buffer.concat(buffers).toString('<STR_LIT>');<EOL>            const match = regex.exec(raw);<EOL>            const rawStripped = match ? match[<NUM_LIT>] :  '<STR_LIT>';<EOL>            try {<EOL>                const env = JSON.parse(rawStripped);<EOL>                if (runAsNode) {<EOL>                    env['<STR_LIT>'] = runAsNode;<EOL>                }<EOL>                else {<EOL>                    delete env['<STR_LIT>'];<EOL>                }<EOL>                if (noAttach) {<EOL>                    env['<STR_LIT>'] = noAttach;<EOL>                }<EOL>                else {<EOL>                    delete env['<STR_LIT>'];<EOL>                }<EOL>                c(","gt":"env);"}
{"input":"<s> function getUnixShellEnvironment() {<EOL>    const promise = new TPromise((c, e) => {<EOL>        const runAsNode = process.env['<STR_LIT>'];<EOL>        const noAttach = process.env['<STR_LIT>'];<EOL>        const mark = generateUuid().replace(/-/g, '<STR_LIT>').substr(<NUM_LIT>,  <NUM_LIT>);<EOL>        const regex = new RegExp(mark + '<STR_LIT>' + mark);<EOL>        const env =  assign({}, process.env, {<EOL>            ATOM_SHELL_INTERNAL_RUN_AS_NODE: '<STR_LIT>',<EOL>            ELECTRON_NO_ATTACH_CONSOLE:  '<STR_LIT>'<EOL>        });<EOL>        const command = `<STR_LIT>`;<EOL>        const child = cp.spawn(process.env.SHELL, ['<STR_LIT>', command], {<EOL>            detached: true,<EOL>            stdio: ['<STR_LIT>', '<STR_LIT>', process.stderr],<EOL>             env<EOL>        });<EOL>        const buffers = [];<EOL>        child.on('<STR_LIT>', () => c({}));<EOL>        child.stdout.on('<STR_LIT>', b => buffers.push(b));<EOL>        child.on('<STR_LIT>', (code, signal) => {<EOL>            if (code !==  <NUM_LIT>) {<EOL>                return e(new Error('<STR_LIT>'));<EOL>            }<EOL>            const raw = Buffer.concat(buffers).toString('<STR_LIT>');<EOL>            const match = regex.exec(raw);<EOL>            const rawStripped = match ? match[<NUM_LIT>] :  '<STR_LIT>';<EOL>            try {<EOL>                const env = JSON.parse(rawStripped);<EOL>                if (runAsNode) {<EOL>                    env['<STR_LIT>'] = runAsNode;<EOL>                }<EOL>                else {<EOL>                    delete env['<STR_LIT>'];<EOL>                }<EOL>                if (noAttach) {<EOL>                    env['<STR_LIT>'] = noAttach;<EOL>                }<EOL>                else {<EOL>                    delete env['<STR_LIT>'];<EOL>                }<EOL>                c( env);<EOL>            }<EOL>            catch (","gt":"err) {"}
{"input":"<s> <EOL>export function intersectProto(second, comparer) {<EOL>    return intersect(this,","gt":"second, comparer);"}
{"input":"<s> export function generateDiv(width = <NUM_LIT>, height = <NUM_LIT>) {<EOL>","gt":"const parent = getElementParent();"}
{"input":"<s> export function isMultilineText(text) {<EOL>    return /\\n/.test(","gt":"text);"}
{"input":"<s> async function finalizeExtensionActivation() {<EOL>    const cpptoolsJsonFile = util.getExtensionFilePath(\"<STR_LIT>\");<EOL>    try {<EOL>        const exists = await util.checkFileExists(cpptoolsJsonFile);<EOL>        if (exists) {<EOL>            const cpptoolsString = await util.readFileText(","gt":"cpptoolsJsonFile);"}
{"input":"<s> async function finalizeExtensionActivation() {<EOL>    const cpptoolsJsonFile = util.getExtensionFilePath(\"<STR_LIT>\");<EOL>    try {<EOL>        const exists = await util.checkFileExists(cpptoolsJsonFile);<EOL>        if (exists) {<EOL>            const cpptoolsString = await util.readFileText( cpptoolsJsonFile);<EOL>            await cpptoolsJsonUtils.processCpptoolsJson(cpptoolsString);<EOL>        }<EOL>    }<EOL>    catch (","gt":"error) {"}
{"input":"<s> async function finalizeExtensionActivation() {<EOL>    const cpptoolsJsonFile = util.getExtensionFilePath(\"<STR_LIT>\");<EOL>    try {<EOL>        const exists = await util.checkFileExists(cpptoolsJsonFile);<EOL>        if (exists) {<EOL>            const cpptoolsString = await util.readFileText( cpptoolsJsonFile);<EOL>            await cpptoolsJsonUtils.processCpptoolsJson(cpptoolsString);<EOL>        }<EOL>    }<EOL>    catch ( error) {<EOL>        // Ignore any cpptoolsJsonFile errors<EOL>    }<EOL>    getTemporaryCommandRegistrarInstance().","gt":"activateLanguageServer();"}
{"input":"<s> export default function (GanttColumn) {<EOL>","gt":"'<STR_LIT>';"}
{"input":"<s> function getPropDocData(srcPath, docClassName, inputs, outputs) {<EOL>    let prog = ts.createProgram([srcPath], {<EOL>        target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS<EOL>    });<EOL>    let","gt":"sourceFiles = prog.getSourceFiles();"}
{"input":"<s> function getPropDocData(srcPath, docClassName, inputs, outputs) {<EOL>    let prog = ts.createProgram([srcPath], {<EOL>        target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS<EOL>    });<EOL>    let  sourceFiles = prog.getSourceFiles();<EOL>    let checker = prog.getTypeChecker();<EOL>    for (var i = <NUM_LIT>; i < sourceFiles.length; i++) {<EOL>","gt":"if (!sourceFiles[i].isDeclarationFile)"}
{"input":"<s> function getPropDocData(srcPath, docClassName, inputs, outputs) {<EOL>    let prog = ts.createProgram([srcPath], {<EOL>        target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS<EOL>    });<EOL>    let  sourceFiles = prog.getSourceFiles();<EOL>    let checker = prog.getTypeChecker();<EOL>    for (var i = <NUM_LIT>; i < sourceFiles.length; i++) {<EOL>         if (!sourceFiles[i].isDeclarationFile)<EOL>            ts.forEachChild(sourceFiles[i], visit);<EOL>    }<EOL>    function visit(node) {<EOL>","gt":"if (!isNodeExported(node))"}
{"input":"<s> function getPropDocData(srcPath, docClassName, inputs, outputs) {<EOL>    let prog = ts.createProgram([srcPath], {<EOL>        target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS<EOL>    });<EOL>    let  sourceFiles = prog.getSourceFiles();<EOL>    let checker = prog.getTypeChecker();<EOL>    for (var i = <NUM_LIT>; i < sourceFiles.length; i++) {<EOL>         if (!sourceFiles[i].isDeclarationFile)<EOL>            ts.forEachChild(sourceFiles[i], visit);<EOL>    }<EOL>    function visit(node) {<EOL>         if (!isNodeExported(node))<EOL>            return;<EOL>        if (ts.isClassDeclaration(node) && node.name) {<EOL>            let classDec = node;<EOL>            let sourceFile = classDec.getSourceFile();<EOL>            if (classDec.name.escapedText ===","gt":"docClassName) {"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp.","gt":"outfiles[pxt.outputName()];"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp. outfiles[pxt.outputName()];<EOL>    const fn = pkg.genFileName(ext);<EOL>    const userContext = pxt.BrowserUtils.isBrowserDownloadWithinUserContext();<EOL>","gt":"if (userContext) {"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp. outfiles[pxt.outputName()];<EOL>    const fn = pkg.genFileName(ext);<EOL>    const userContext = pxt.BrowserUtils.isBrowserDownloadWithinUserContext();<EOL>     if (userContext) {<EOL>        url = pxt.BrowserUtils.toDownloadDataUri(pxt.isOutputText() ? ts.pxtc.encodeBase64(out) : out, pxt.appTarget.compile.hexMimeType);<EOL>    }<EOL>    else if (!pxt.isOutputText()) {<EOL>        pxt.","gt":"debug('<STR_LIT>' + fn);"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp. outfiles[pxt.outputName()];<EOL>    const fn = pkg.genFileName(ext);<EOL>    const userContext = pxt.BrowserUtils.isBrowserDownloadWithinUserContext();<EOL>     if (userContext) {<EOL>        url = pxt.BrowserUtils.toDownloadDataUri(pxt.isOutputText() ? ts.pxtc.encodeBase64(out) : out, pxt.appTarget.compile.hexMimeType);<EOL>    }<EOL>    else if (!pxt.isOutputText()) {<EOL>        pxt. debug('<STR_LIT>' + fn);<EOL>        url = pxt.BrowserUtils.browserDownloadBase64(out, fn, \"<STR_LIT>\", resp.userContextWindow, e => core.errorNotification(lf(\"<STR_LIT>\")));<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp. outfiles[pxt.outputName()];<EOL>    const fn = pkg.genFileName(ext);<EOL>    const userContext = pxt.BrowserUtils.isBrowserDownloadWithinUserContext();<EOL>     if (userContext) {<EOL>        url = pxt.BrowserUtils.toDownloadDataUri(pxt.isOutputText() ? ts.pxtc.encodeBase64(out) : out, pxt.appTarget.compile.hexMimeType);<EOL>    }<EOL>    else if (!pxt.isOutputText()) {<EOL>        pxt. debug('<STR_LIT>' + fn);<EOL>        url = pxt.BrowserUtils.browserDownloadBase64(out, fn, \"<STR_LIT>\", resp.userContextWindow, e => core.errorNotification(lf(\"<STR_LIT>\")));<EOL>    }<EOL>     else {<EOL>        pxt.debug('<STR_LIT>' + fn);<EOL>        url = pxt.BrowserUtils.browserDownloadBinText(out, fn, pxt.appTarget.compile.hexMimeType, resp.userContextWindow, e => core.errorNotification(lf(\"<STR_LIT>\")));<EOL>    }<EOL>    if (!resp.","gt":"success) {"}
{"input":"<s> export function browserDownloadDeployCoreAsync(resp) {<EOL>    let url = \"<STR_LIT>\";<EOL>    const ext = pxt.outputName().replace(/[^.]*/, \"<STR_LIT>\");<EOL>    const out = resp. outfiles[pxt.outputName()];<EOL>    const fn = pkg.genFileName(ext);<EOL>    const userContext = pxt.BrowserUtils.isBrowserDownloadWithinUserContext();<EOL>     if (userContext) {<EOL>        url = pxt.BrowserUtils.toDownloadDataUri(pxt.isOutputText() ? ts.pxtc.encodeBase64(out) : out, pxt.appTarget.compile.hexMimeType);<EOL>    }<EOL>    else if (!pxt.isOutputText()) {<EOL>        pxt. debug('<STR_LIT>' + fn);<EOL>        url = pxt.BrowserUtils.browserDownloadBase64(out, fn, \"<STR_LIT>\", resp.userContextWindow, e => core.errorNotification(lf(\"<STR_LIT>\")));<EOL>    }<EOL>     else {<EOL>        pxt.debug('<STR_LIT>' + fn);<EOL>        url = pxt.BrowserUtils.browserDownloadBinText(out, fn, pxt.appTarget.compile.hexMimeType, resp.userContextWindow, e => core.errorNotification(lf(\"<STR_LIT>\")));<EOL>    }<EOL>    if (!resp. success) {<EOL>        return core.confirmAsync({<EOL>            header: lf(\"<STR_LIT>\"),<EOL>            body: lf(\"<STR_LIT>\"),<EOL>            hideAgree: true,<EOL>            disagreeLbl: lf(\"<STR_LIT>\")<EOL>        }).","gt":"then(() => { });"}
{"input":"<s> export function* updateTokenBalance(action) {<EOL>    try {<EOL>        const isOffline = yield select(getOffline);<EOL>        if (isOffline) {<EOL>            return;<EOL>        }<EOL>        const wallet = yield select(getWalletInst);<EOL>        const { tokenSymbol } =","gt":"action.payload;"}
{"input":"<s> export function* updateTokenBalance(action) {<EOL>    try {<EOL>        const isOffline = yield select(getOffline);<EOL>        if (isOffline) {<EOL>            return;<EOL>        }<EOL>        const wallet = yield select(getWalletInst);<EOL>        const { tokenSymbol } =  action.payload;<EOL>        const allTokens = yield select(getAllTokens);<EOL>        const token = allTokens.find(t => t.symbol === tokenSymbol);<EOL>        if (!wallet) {<EOL>            return;<EOL>        }<EOL>        if (!token) {<EOL>            throw Error('<STR_LIT>');<EOL>        }<EOL>        const tokenBalances = yield call(getTokenBalances, wallet, [token]);<EOL>        yield put(","gt":"setTokenBalanceFulfilled(tokenBalances));"}
{"input":"<s> function hasNonMatchingParameterType2(x) {<EOL>","gt":"return true;"}
{"input":"<s> <EOL>function* getWalletAndTransaction(partialTx) {<EOL>    // get the wallet we're going to sign with<EOL>    const wallet = yield select(getWalletInst);<EOL>    if (!wallet) {<EOL>        throw Error(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>function* getWalletAndTransaction(partialTx) {<EOL>    // get the wallet we're going to sign with<EOL>    const wallet = yield select(getWalletInst);<EOL>    if (!wallet) {<EOL>        throw Error( '<STR_LIT>');<EOL>    }<EOL>    // get the chainId<EOL>    const { chainId } = yield select(getNetworkConfig);<EOL>    // get the rest of the transaction parameters<EOL>    partialTx._chainId = chainId;<EOL>","gt":"return {"}
{"input":"<s> <EOL>export function unpack_models(value, manager) {<EOL>    let unpacked;<EOL>    if (Array.isArray(value)) {<EOL>        unpacked = [];<EOL>        value.forEach((sub_value, key) => {<EOL>            unpacked.push(unpack_models(","gt":"sub_value, manager));"}
{"input":"<s> <EOL>export function unpack_models(value, manager) {<EOL>    let unpacked;<EOL>    if (Array.isArray(value)) {<EOL>        unpacked = [];<EOL>        value.forEach((sub_value, key) => {<EOL>            unpacked.push(unpack_models( sub_value, manager));<EOL>        });<EOL>        return Promise.","gt":"all(unpacked);"}
{"input":"<s> <EOL>export function unpack_models(value, manager) {<EOL>    let unpacked;<EOL>    if (Array.isArray(value)) {<EOL>        unpacked = [];<EOL>        value.forEach((sub_value, key) => {<EOL>            unpacked.push(unpack_models( sub_value, manager));<EOL>        });<EOL>        return Promise. all(unpacked);<EOL>    }<EOL>    else if (value instanceof Object) {<EOL>        unpacked = {};<EOL>        Object.keys(value).forEach((key) => {<EOL>            unpacked[","gt":"key] = unpack_models(value[key], manager);"}
{"input":"<s> //@target: ES6<EOL>function* g() {<EOL>","gt":"var x = class C extends (yield) {"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item.","gt":"hasAttr('<STR_LIT>') ||"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>","gt":"item.content.some(i => i.isElem('<STR_LIT>'))) {"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =","gt":"params;"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let","gt":"i = data.length; i-- > <NUM_LIT>;) {"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>","gt":"if (+data[i].toFixed(floatPrecision) !== data[i]) {"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>","gt":"return data;"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const","gt":"roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const  roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;<EOL>    const g1Attrs = getGroupAttrs(item);<EOL>    item.content.forEach(i => {<EOL>        if (i.isElem('<STR_LIT>')) {<EOL>            const g2Attrs = getGroupAttrs(i);<EOL>            const matrix = flattenGroups([g1Attrs, g2Attrs]);<EOL>            const { sx, sy } = getScaling(matrix);<EOL>            const { r } = getRotation(matrix);<EOL>            const { tx, ty } = getTranslation(matrix);<EOL>            const g3Attrs = { sx,","gt":"sy, r, tx, ty };"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const  roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;<EOL>    const g1Attrs = getGroupAttrs(item);<EOL>    item.content.forEach(i => {<EOL>        if (i.isElem('<STR_LIT>')) {<EOL>            const g2Attrs = getGroupAttrs(i);<EOL>            const matrix = flattenGroups([g1Attrs, g2Attrs]);<EOL>            const { sx, sy } = getScaling(matrix);<EOL>            const { r } = getRotation(matrix);<EOL>            const { tx, ty } = getTranslation(matrix);<EOL>            const g3Attrs = { sx,  sy, r, tx, ty };<EOL>            const addAttrFn = (local, value) => {<EOL>                i.addAttr({<EOL>                    name: `<STR_LIT>`,<EOL>                    prefix:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const  roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;<EOL>    const g1Attrs = getGroupAttrs(item);<EOL>    item.content.forEach(i => {<EOL>        if (i.isElem('<STR_LIT>')) {<EOL>            const g2Attrs = getGroupAttrs(i);<EOL>            const matrix = flattenGroups([g1Attrs, g2Attrs]);<EOL>            const { sx, sy } = getScaling(matrix);<EOL>            const { r } = getRotation(matrix);<EOL>            const { tx, ty } = getTranslation(matrix);<EOL>            const g3Attrs = { sx,  sy, r, tx, ty };<EOL>            const addAttrFn = (local, value) => {<EOL>                i.addAttr({<EOL>                    name: `<STR_LIT>`,<EOL>                    prefix:  '<STR_LIT>',<EOL>                    local,<EOL>                    value: String(value),<EOL>                });<EOL>            };<EOL>            addAttrFn('<STR_LIT>', sx);<EOL>            addAttrFn('<STR_LIT>', sy);<EOL>            addAttrFn('<STR_LIT>', r);<EOL>            addAttrFn('<STR_LIT>', tx);<EOL>            addAttrFn('<STR_LIT>', ty);<EOL>        }<EOL>        else if (i.isElem('<STR_LIT>') || i.isElem('<STR_LIT>')) {<EOL>            let data = path2js(i);<EOL>","gt":"if (!data.length) {"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const  roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;<EOL>    const g1Attrs = getGroupAttrs(item);<EOL>    item.content.forEach(i => {<EOL>        if (i.isElem('<STR_LIT>')) {<EOL>            const g2Attrs = getGroupAttrs(i);<EOL>            const matrix = flattenGroups([g1Attrs, g2Attrs]);<EOL>            const { sx, sy } = getScaling(matrix);<EOL>            const { r } = getRotation(matrix);<EOL>            const { tx, ty } = getTranslation(matrix);<EOL>            const g3Attrs = { sx,  sy, r, tx, ty };<EOL>            const addAttrFn = (local, value) => {<EOL>                i.addAttr({<EOL>                    name: `<STR_LIT>`,<EOL>                    prefix:  '<STR_LIT>',<EOL>                    local,<EOL>                    value: String(value),<EOL>                });<EOL>            };<EOL>            addAttrFn('<STR_LIT>', sx);<EOL>            addAttrFn('<STR_LIT>', sy);<EOL>            addAttrFn('<STR_LIT>', r);<EOL>            addAttrFn('<STR_LIT>', tx);<EOL>            addAttrFn('<STR_LIT>', ty);<EOL>        }<EOL>        else if (i.isElem('<STR_LIT>') || i.isElem('<STR_LIT>')) {<EOL>            let data = path2js(i);<EOL>             if (!data.length) {<EOL>                return;<EOL>            }<EOL>            convertToRelative(data);<EOL>            data = applyTransforms(item, i, data,","gt":"params);"}
{"input":"<s> <EOL>function fn(item, params) {<EOL>    if (!item.isElem('<STR_LIT>') ||<EOL>        !item.hasAttr() ||<EOL>        item. hasAttr('<STR_LIT>') ||<EOL>        item.isEmpty() ||<EOL>        item.content.some(i => i.hasAttr('<STR_LIT>')) ||<EOL>        // TODO: are there some cases where we can bake group transforms into a clip-path?<EOL>         item.content.some(i => i.isElem('<STR_LIT>'))) {<EOL>        return item;<EOL>    }<EOL>    const { floatPrecision } =  params;<EOL>    const error = +Math.pow(<NUM_LIT>, floatPrecision).toFixed(floatPrecision);<EOL>    <EOL>    function strongRound(data) {<EOL>        for (let  i = data.length; i-- > <NUM_LIT>;) {<EOL>             if (+data[i].toFixed(floatPrecision) !== data[i]) {<EOL>                const rounded = +data[i].toFixed(floatPrecision - <NUM_LIT>);<EOL>                data[i] =<EOL>                    +Math.abs(rounded - data[i]).toFixed(floatPrecision + <NUM_LIT>) >= error<EOL>                        ? +data[i].toFixed(floatPrecision)<EOL>                        : rounded;<EOL>            }<EOL>        }<EOL>         return data;<EOL>    }<EOL>    <EOL>    function round(data) {<EOL>        for (let i = data.length; i-- > <NUM_LIT>;) {<EOL>            data[i] = Math.round(data[i]);<EOL>        }<EOL>        return data;<EOL>    }<EOL>    const  roundData = floatPrecision > <NUM_LIT> && floatPrecision < <NUM_LIT> ? strongRound : round;<EOL>    const g1Attrs = getGroupAttrs(item);<EOL>    item.content.forEach(i => {<EOL>        if (i.isElem('<STR_LIT>')) {<EOL>            const g2Attrs = getGroupAttrs(i);<EOL>            const matrix = flattenGroups([g1Attrs, g2Attrs]);<EOL>            const { sx, sy } = getScaling(matrix);<EOL>            const { r } = getRotation(matrix);<EOL>            const { tx, ty } = getTranslation(matrix);<EOL>            const g3Attrs = { sx,  sy, r, tx, ty };<EOL>            const addAttrFn = (local, value) => {<EOL>                i.addAttr({<EOL>                    name: `<STR_LIT>`,<EOL>                    prefix:  '<STR_LIT>',<EOL>                    local,<EOL>                    value: String(value),<EOL>                });<EOL>            };<EOL>            addAttrFn('<STR_LIT>', sx);<EOL>            addAttrFn('<STR_LIT>', sy);<EOL>            addAttrFn('<STR_LIT>', r);<EOL>            addAttrFn('<STR_LIT>', tx);<EOL>            addAttrFn('<STR_LIT>', ty);<EOL>        }<EOL>        else if (i.isElem('<STR_LIT>') || i.isElem('<STR_LIT>')) {<EOL>            let data = path2js(i);<EOL>             if (!data.length) {<EOL>                return;<EOL>            }<EOL>            convertToRelative(data);<EOL>            data = applyTransforms(item, i, data,  params);<EOL>            data.","gt":"forEach(d => {"}
{"input":"<s> function loadSvgIcons(svgIcons) {<EOL>    const matIconRegistry = TestBed.get(MatIconRegistry);<EOL>","gt":"const sanitizer = TestBed.get(DomSanitizer);"}
{"input":"<s> export function fromPosition(position) {<EOL>    return { lineNumber: position.","gt":"line + <NUM_LIT>, column: position.character + <NUM_LIT> };"}
{"input":"<s> function hasNonMathcingGenericType(a) {<EOL>","gt":"return true;"}
{"input":"<s> <EOL>export function sorter(fst, snd) {<EOL>    return fst > snd ? <NUM_LIT> : fst <","gt":"snd ? -<NUM_LIT> : <NUM_LIT>;"}
{"input":"<s> function render(text) {<EOL>","gt":"return escape(text);"}
{"input":"<s> function isIgnoredPropertyValue(name, a, b, ignoredPropertyValues) {<EOL>    return Array.isArray(ignoredPropertyValues)<EOL>        ? ignoredPropertyValues.some((","gt":"value) => {"}
{"input":"<s> function* getFrom() {<EOL>    yield put(getFromRequested());<EOL>    // wait for it to finish<EOL>    const { type } = yield take([<EOL>","gt":"TK.GET_FROM_SUCCEEDED,"}
{"input":"<s> function* getFrom() {<EOL>    yield put(getFromRequested());<EOL>    // wait for it to finish<EOL>    const { type } = yield take([<EOL>         TK.GET_FROM_SUCCEEDED,<EOL>        TK.GET_FROM_FAILED<EOL>    ]);<EOL>    // continue if it doesnt fail<EOL>    if (type ===","gt":"TK.GET_FROM_FAILED) {"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>","gt":"scope: {"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>","gt":"dateFormat: '<STR_LIT>',"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:","gt":"'<STR_LIT>'"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:  '<STR_LIT>'<EOL>        },<EOL>        link: function (scope, element, attrs,","gt":"ganttCtrl) {"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:  '<STR_LIT>'<EOL>        },<EOL>        link: function (scope, element, attrs,  ganttCtrl) {<EOL>            let api = ganttCtrl.gantt.api;<EOL>            // Load options from global options attribute.<EOL>            if (scope.options && typeof (scope.options.tooltips) === '<STR_LIT>') {<EOL>                for (let option in scope.options.tooltips) {<EOL>                    scope[option] = scope.options.tooltips[","gt":"option];"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:  '<STR_LIT>'<EOL>        },<EOL>        link: function (scope, element, attrs,  ganttCtrl) {<EOL>            let api = ganttCtrl.gantt.api;<EOL>            // Load options from global options attribute.<EOL>            if (scope.options && typeof (scope.options.tooltips) === '<STR_LIT>') {<EOL>                for (let option in scope.options.tooltips) {<EOL>                    scope[option] = scope.options.tooltips[ option];<EOL>                }<EOL>            }<EOL>            if (scope.enabled === undefined) {<EOL>                scope.enabled = true;<EOL>            }<EOL>            if (scope.dateFormat ===","gt":"undefined) {"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:  '<STR_LIT>'<EOL>        },<EOL>        link: function (scope, element, attrs,  ganttCtrl) {<EOL>            let api = ganttCtrl.gantt.api;<EOL>            // Load options from global options attribute.<EOL>            if (scope.options && typeof (scope.options.tooltips) === '<STR_LIT>') {<EOL>                for (let option in scope.options.tooltips) {<EOL>                    scope[option] = scope.options.tooltips[ option];<EOL>                }<EOL>            }<EOL>            if (scope.enabled === undefined) {<EOL>                scope.enabled = true;<EOL>            }<EOL>            if (scope.dateFormat ===  undefined) {<EOL>                scope.dateFormat = '<STR_LIT>';<EOL>            }<EOL>            if (scope.delay === undefined) {<EOL>                scope.delay = <NUM_LIT>;<EOL>            }<EOL>            if (scope.content === undefined) {<EOL>                scope.","gt":"content = '<STR_LIT>' +"}
{"input":"<s> export default function ($compile, $document) {<EOL>    '<STR_LIT>';<EOL>    return {<EOL>        restrict: '<STR_LIT>',<EOL>        require: '<STR_LIT>',<EOL>         scope: {<EOL>            enabled: '<STR_LIT>',<EOL>             dateFormat: '<STR_LIT>',<EOL>            content: '<STR_LIT>',<EOL>            delay:  '<STR_LIT>'<EOL>        },<EOL>        link: function (scope, element, attrs,  ganttCtrl) {<EOL>            let api = ganttCtrl.gantt.api;<EOL>            // Load options from global options attribute.<EOL>            if (scope.options && typeof (scope.options.tooltips) === '<STR_LIT>') {<EOL>                for (let option in scope.options.tooltips) {<EOL>                    scope[option] = scope.options.tooltips[ option];<EOL>                }<EOL>            }<EOL>            if (scope.enabled === undefined) {<EOL>                scope.enabled = true;<EOL>            }<EOL>            if (scope.dateFormat ===  undefined) {<EOL>                scope.dateFormat = '<STR_LIT>';<EOL>            }<EOL>            if (scope.delay === undefined) {<EOL>                scope.delay = <NUM_LIT>;<EOL>            }<EOL>            if (scope.content === undefined) {<EOL>                scope. content = '<STR_LIT>' +<EOL>                    '<STR_LIT>' +<EOL>                    '<STR_LIT>' +<EOL>                    '<STR_LIT>';<EOL>            }<EOL>            scope.api = api;<EOL>            api.directives.on.new(scope, function (directiveName, taskScope, taskElement) {<EOL>                if (directiveName === '<STR_LIT>') {<EOL>                    let tooltipScope = taskScope.$new();<EOL>                    tooltipScope.pluginScope = scope;<EOL>                    let ifElement = $document[<NUM_LIT>].createElement('<STR_LIT>');<EOL>                    angular.element(ifElement).","gt":"attr('<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> <EOL>function isSpliceRecord(value) {<EOL>    return value && value.type === '<STR_LIT>' &&","gt":"'<STR_LIT>' in value && '<STR_LIT>' in value;"}
{"input":"<s> function newHashObj() {<EOL>","gt":"return Object.create(null);"}
{"input":"<s> export function array(value) {<EOL>    return Array.","gt":"isArray(value);"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>","gt":"restrict: '<STR_LIT>',"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',","gt":"'<STR_LIT>'],"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',  '<STR_LIT>'],<EOL>        link: function (scope, element, attrs, controllers) {<EOL>            let el = element[<NUM_LIT>];<EOL>            let","gt":"updateListeners = function () {"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',  '<STR_LIT>'],<EOL>        link: function (scope, element, attrs, controllers) {<EOL>            let el = element[<NUM_LIT>];<EOL>            let  updateListeners = function () {<EOL>                let i;<EOL>                let l;<EOL>                let vertical = controllers[<NUM_LIT>].getVerticalRecievers();<EOL>                for (i = <NUM_LIT>, l = vertical.length; i < l; i++) {<EOL>                    let vElement =","gt":"vertical[i];"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',  '<STR_LIT>'],<EOL>        link: function (scope, element, attrs, controllers) {<EOL>            let el = element[<NUM_LIT>];<EOL>            let  updateListeners = function () {<EOL>                let i;<EOL>                let l;<EOL>                let vertical = controllers[<NUM_LIT>].getVerticalRecievers();<EOL>                for (i = <NUM_LIT>, l = vertical.length; i < l; i++) {<EOL>                    let vElement =  vertical[i];<EOL>                    if (vElement.parentNode.scrollTop !== el.scrollTop) {<EOL>                        vElement.parentNode.scrollTop = el.scrollTop;<EOL>                    }<EOL>                }<EOL>                let horizontal = controllers[<NUM_LIT>].getHorizontalRecievers();<EOL>                for (i = <NUM_LIT>, l = horizontal.length; i < l; i++) {<EOL>                    let hElement = horizontal[i];<EOL>                    if (hElement.parentNode.scrollLeft !== el.scrollLeft) {<EOL>","gt":"hElement.parentNode.scrollLeft = el.scrollLeft;"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',  '<STR_LIT>'],<EOL>        link: function (scope, element, attrs, controllers) {<EOL>            let el = element[<NUM_LIT>];<EOL>            let  updateListeners = function () {<EOL>                let i;<EOL>                let l;<EOL>                let vertical = controllers[<NUM_LIT>].getVerticalRecievers();<EOL>                for (i = <NUM_LIT>, l = vertical.length; i < l; i++) {<EOL>                    let vElement =  vertical[i];<EOL>                    if (vElement.parentNode.scrollTop !== el.scrollTop) {<EOL>                        vElement.parentNode.scrollTop = el.scrollTop;<EOL>                    }<EOL>                }<EOL>                let horizontal = controllers[<NUM_LIT>].getHorizontalRecievers();<EOL>                for (i = <NUM_LIT>, l = horizontal.length; i < l; i++) {<EOL>                    let hElement = horizontal[i];<EOL>                    if (hElement.parentNode.scrollLeft !== el.scrollLeft) {<EOL>                         hElement.parentNode.scrollLeft = el.scrollLeft;<EOL>                    }<EOL>                }<EOL>            };<EOL>            element.bind('<STR_LIT>', updateListeners);<EOL>            scope.$watch(function () {<EOL>                return controllers[<NUM_LIT>].gantt.width;<EOL>            }, function (newValue, oldValue) {<EOL>                if (newValue !== oldValue) {<EOL>                    let horizontal =","gt":"controllers[<NUM_LIT>].getHorizontalRecievers();"}
{"input":"<s> export default function () {<EOL>    '<STR_LIT>';<EOL>    // Updates the element which are registered for the horizontal or vertical scroll event<EOL>    return {<EOL>         restrict: '<STR_LIT>',<EOL>        require: ['<STR_LIT>',  '<STR_LIT>'],<EOL>        link: function (scope, element, attrs, controllers) {<EOL>            let el = element[<NUM_LIT>];<EOL>            let  updateListeners = function () {<EOL>                let i;<EOL>                let l;<EOL>                let vertical = controllers[<NUM_LIT>].getVerticalRecievers();<EOL>                for (i = <NUM_LIT>, l = vertical.length; i < l; i++) {<EOL>                    let vElement =  vertical[i];<EOL>                    if (vElement.parentNode.scrollTop !== el.scrollTop) {<EOL>                        vElement.parentNode.scrollTop = el.scrollTop;<EOL>                    }<EOL>                }<EOL>                let horizontal = controllers[<NUM_LIT>].getHorizontalRecievers();<EOL>                for (i = <NUM_LIT>, l = horizontal.length; i < l; i++) {<EOL>                    let hElement = horizontal[i];<EOL>                    if (hElement.parentNode.scrollLeft !== el.scrollLeft) {<EOL>                         hElement.parentNode.scrollLeft = el.scrollLeft;<EOL>                    }<EOL>                }<EOL>            };<EOL>            element.bind('<STR_LIT>', updateListeners);<EOL>            scope.$watch(function () {<EOL>                return controllers[<NUM_LIT>].gantt.width;<EOL>            }, function (newValue, oldValue) {<EOL>                if (newValue !== oldValue) {<EOL>                    let horizontal =  controllers[<NUM_LIT>].getHorizontalRecievers();<EOL>                    // tslint:disable:one-variable-per-declaration<EOL>                    for (let i = <NUM_LIT>, l = horizontal.length; i < l; i++) {<EOL>","gt":"let hElement = horizontal[i];"}
{"input":"<s> export function _finally(source, action) {<EOL>    return","gt":"new FinallyAsyncIterable(source, action);"}
{"input":"<s> function fn1(x2) {<EOL>    x2 **=","gt":"value;"}
{"input":"<s> <EOL>export function add(aList, bList) {<EOL>    if (aList.length !== bList.length) {<EOL>","gt":"throw new Error(\"<STR_LIT>\");"}
{"input":"<s> export function* ens() {<EOL>    yield all([fork(","gt":"resolveDomain)]);"}
{"input":"<s> function define(constructor, instanceMembers, staticMembers) {<EOL>    constructor = constructor || function () { };<EOL>    PluginUtilities.Utilities.markSupportedForProcessing(constructor);<EOL>    if (","gt":"instanceMembers) {"}
{"input":"<s> // Generic call with parameter of object type with member of function type of n args passed object whose associated member is call signature with n+1 args<EOL>function foo(arg) {<EOL>    return","gt":"new arg.cb(null);"}
{"input":"<s> function runPlatformioAsync(args) {<EOL>    pxt.log(\"<STR_LIT>\" + args.join(\"<STR_LIT>\"));<EOL>    let child = child_process.spawn(\"<STR_LIT>\", args, {<EOL>        cwd: thisBuild.buildPath,<EOL>        stdio: \"<STR_LIT>\",<EOL>        env:","gt":"process.env"}
{"input":"<s> function runPlatformioAsync(args) {<EOL>    pxt.log(\"<STR_LIT>\" + args.join(\"<STR_LIT>\"));<EOL>    let child = child_process.spawn(\"<STR_LIT>\", args, {<EOL>        cwd: thisBuild.buildPath,<EOL>        stdio: \"<STR_LIT>\",<EOL>        env:  process.env<EOL>    });<EOL>    return new Promise((resolve, reject) => {<EOL>        child.on(\"<STR_LIT>\", (code) => {<EOL>            if (code === <NUM_LIT>)<EOL>                resolve();<EOL>","gt":"else"}
{"input":"<s> export default function () {<EOL>","gt":"'<STR_LIT>';"}
{"input":"<s> function assertUrl(raw, scheme, domain, port, path, queryString, fragmentId) {<EOL>    // check for equivalent behaviour<EOL>    const uri = URI.parse(raw);<EOL>","gt":"assert.equal(uri.scheme, scheme);"}
{"input":"<s> function noneComputedMemoize() {<EOL>    console.time(\"<STR_LIT>\");<EOL>    class C {<EOL>        a;<EOL>        b;<EOL>","gt":"get sum() { return this.a + this.b; }"}
{"input":"<s> function noneComputedMemoize() {<EOL>    console.time(\"<STR_LIT>\");<EOL>    class C {<EOL>        a;<EOL>        b;<EOL>         get sum() { return this.a + this.b; }<EOL>    }<EOL>    let c = new C();<EOL>    c.a = <NUM_LIT>;<EOL>    c.","gt":"b = <NUM_LIT>;"}
{"input":"<s> function noneComputedMemoize() {<EOL>    console.time(\"<STR_LIT>\");<EOL>    class C {<EOL>        a;<EOL>        b;<EOL>         get sum() { return this.a + this.b; }<EOL>    }<EOL>    let c = new C();<EOL>    c.a = <NUM_LIT>;<EOL>    c. b = <NUM_LIT>;<EOL>    let s = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>        s += c.","gt":"sum;"}
{"input":"<s> function showFirmwareUpdateInstructionsAsync(resp) {<EOL>    return pxt.targetConfigAsync()<EOL>        .then(config => {<EOL>        const firmwareUrl = (config.firmwareUrls || {})[pxt.appTarget.simulator.boardDefinition.id];<EOL>        if (!firmwareUrl) // skip firmware update<EOL>            return","gt":"showWebUSBPairingInstructionsAsync(resp);"}
{"input":"<s> function showFirmwareUpdateInstructionsAsync(resp) {<EOL>    return pxt.targetConfigAsync()<EOL>        .then(config => {<EOL>        const firmwareUrl = (config.firmwareUrls || {})[pxt.appTarget.simulator.boardDefinition.id];<EOL>        if (!firmwareUrl) // skip firmware update<EOL>            return  showWebUSBPairingInstructionsAsync(resp);<EOL>        pxt.tickEvent(`<STR_LIT>`);<EOL>        const boardName = pxt.appTarget.appTheme.boardName || lf(\"<STR_LIT>\");<EOL>        const driveName = pxt.appTarget.appTheme.driveDisplayName || \"<STR_LIT>\";<EOL>        const htmlBody =","gt":"lf(\"<STR_LIT>\")}</a>"}
{"input":"<s> function showFirmwareUpdateInstructionsAsync(resp) {<EOL>    return pxt.targetConfigAsync()<EOL>        .then(config => {<EOL>        const firmwareUrl = (config.firmwareUrls || {})[pxt.appTarget.simulator.boardDefinition.id];<EOL>        if (!firmwareUrl) // skip firmware update<EOL>            return  showWebUSBPairingInstructionsAsync(resp);<EOL>        pxt.tickEvent(`<STR_LIT>`);<EOL>        const boardName = pxt.appTarget.appTheme.boardName || lf(\"<STR_LIT>\");<EOL>        const driveName = pxt.appTarget.appTheme.driveDisplayName || \"<STR_LIT>\";<EOL>        const htmlBody = `<STR_LIT>`;<EOL>        return core.confirmAsync({<EOL>            header: lf(\"<STR_LIT>\"),<EOL>            htmlBody,<EOL>            agreeLbl:","gt":"lf(\"<STR_LIT>\")"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>","gt":"const y = x.parent.parent.right;"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===","gt":"NodeColor.Red) {"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent.","gt":"parent.color = NodeColor.Red;"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent. parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.right) {<EOL>","gt":"x = x.parent;"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent. parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.right) {<EOL>                     x = x.parent;<EOL>                    leftRotate(tree, x);<EOL>                }<EOL>                x.parent.color = NodeColor.Black;<EOL>                x.parent.parent.","gt":"color = NodeColor.Red;"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent. parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.right) {<EOL>                     x = x.parent;<EOL>                    leftRotate(tree, x);<EOL>                }<EOL>                x.parent.color = NodeColor.Black;<EOL>                x.parent.parent. color = NodeColor.Red;<EOL>                rightRotate(tree, x.parent.parent);<EOL>            }<EOL>        }<EOL>        else {<EOL>            const y =","gt":"x.parent.parent.left;"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent. parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.right) {<EOL>                     x = x.parent;<EOL>                    leftRotate(tree, x);<EOL>                }<EOL>                x.parent.color = NodeColor.Black;<EOL>                x.parent.parent. color = NodeColor.Red;<EOL>                rightRotate(tree, x.parent.parent);<EOL>            }<EOL>        }<EOL>        else {<EOL>            const y =  x.parent.parent.left;<EOL>            if (y.color === NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent.parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.","gt":"left) {"}
{"input":"<s> export function fixInsert(tree, x) {<EOL>    recomputeTreeMetadata(tree, x);<EOL>    while (x !== tree.root && x.parent.color === NodeColor.Red) {<EOL>        if (x.parent === x.parent.parent.left) {<EOL>             const y = x.parent.parent.right;<EOL>            if (y.color ===  NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent. parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent.right) {<EOL>                     x = x.parent;<EOL>                    leftRotate(tree, x);<EOL>                }<EOL>                x.parent.color = NodeColor.Black;<EOL>                x.parent.parent. color = NodeColor.Red;<EOL>                rightRotate(tree, x.parent.parent);<EOL>            }<EOL>        }<EOL>        else {<EOL>            const y =  x.parent.parent.left;<EOL>            if (y.color === NodeColor.Red) {<EOL>                x.parent.color = NodeColor.Black;<EOL>                y.color = NodeColor.Black;<EOL>                x.parent.parent.color = NodeColor.Red;<EOL>                x = x.parent.parent;<EOL>            }<EOL>            else {<EOL>                if (x === x.parent. left) {<EOL>                    x = x.parent;<EOL>                    rightRotate(tree, x);<EOL>                }<EOL>                x.parent.color = NodeColor.","gt":"Black;"}
{"input":"<s> function deleteWordLeft(cursor) {<EOL>","gt":"cursorCommand(cursor, H.DeleteWordLeft);"}
{"input":"<s> <EOL>export function transform2js(transformString) {<EOL>    // JS representation of the transform data<EOL>    var transforms = [], <EOL>    // current transform context<EOL>    current;<EOL>    // split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate', '-45', '']<EOL>    transformString.split(regTransformSplit).forEach(","gt":"function (item) {"}
{"input":"<s> <EOL>export function transform2js(transformString) {<EOL>    // JS representation of the transform data<EOL>    var transforms = [], <EOL>    // current transform context<EOL>    current;<EOL>    // split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate', '-45', '']<EOL>    transformString.split(regTransformSplit).forEach( function (item) {<EOL>        <EOL>        var num;<EOL>        if (","gt":"item) {"}
{"input":"<s> export function* unlockPrivateKey(action) {<EOL>    let wallet = null;<EOL>    const { key, password } = action.payload;<EOL>    try {<EOL>        wallet =","gt":"getPrivKeyWallet(key, password);"}
{"input":"<s> export function* unlockPrivateKey(action) {<EOL>    let wallet = null;<EOL>    const { key, password } = action.payload;<EOL>    try {<EOL>        wallet =  getPrivKeyWallet(key, password);<EOL>    }<EOL>    catch (e) {<EOL>        yield put(showNotification('<STR_LIT>', translate('<STR_LIT>')));<EOL>","gt":"return;"}
{"input":"<s> export function startupServiceFactory(configService) {<EOL>","gt":"return () => configService.load();"}
{"input":"<s> <EOL>function f1() {<EOL>    return","gt":"<NUM_LIT> || true;"}
{"input":"<s> <EOL>export function uniq(arr) {<EOL>    const seen = d3.set();<EOL>    const result = [];<EOL>    arr.","gt":"forEach((x) => {"}
{"input":"<s> export function unregisterFocusRoot(ctx) {<EOL>    let idx = focusRootStack.indexOf(ctx.me);<EOL>    if (","gt":"idx !== -<NUM_LIT>) {"}
{"input":"<s> function scanWalletForTokens(state) {<EOL>    return {<EOL>        ...","gt":"state,"}
{"input":"<s> export function mergeVectorLayers(vl1, vl2) {<EOL>    const { vl1: newVl1, vl2: newVl2 } = adjustViewports(vl1, vl2);<EOL>    const vl = setLayerChildren(newVl1, [...newVl1.children, ...newVl2.children]);<EOL>    if (!newVl1.","gt":"children.length) {"}
{"input":"<s> function finishInitialize() {<EOL>    initializing =","gt":"false;"}
{"input":"<s> function firstInvalidate() {<EOL>    initializing =","gt":"true;"}
{"input":"<s> export function init(factory, element) {<EOL>    assert(rootIds == null, \"<STR_LIT>\");<EOL>","gt":"removeRoot(\"<STR_LIT>\");"}
{"input":"<s> function testShiftCommandInDocBlockCommentMode(lines, selection, expectedLines, expectedSelection) {<EOL>    testCommand(lines, new DocBlockCommentMode(), selection, (sel) => new ShiftCommand(sel, {<EOL>        isUnshift:","gt":"false,"}
{"input":"<s> export function select(node, start, end = start) {<EOL>    node.element.setSelectionRange(","gt":"Math.min(start, end), Math.max(start, end), start > end ? \"<STR_LIT>\" : \"<STR_LIT>\");"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,","gt":"action);"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return","gt":"setBalancePending(state);"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return  setBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_BALANCE_FULFILLED:<EOL>            return setBalanceFullfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_BALANCE_REJECTED:<EOL>            return","gt":"setBalanceRejected(state);"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return  setBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_BALANCE_FULFILLED:<EOL>            return setBalanceFullfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_BALANCE_REJECTED:<EOL>            return  setBalanceRejected(state);<EOL>        case","gt":"TypeKeys.WALLET_SET_PENDING:"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return  setBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_BALANCE_FULFILLED:<EOL>            return setBalanceFullfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_BALANCE_REJECTED:<EOL>            return  setBalanceRejected(state);<EOL>        case  TypeKeys.WALLET_SET_PENDING:<EOL>            return setWalletPending(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_PENDING:<EOL>            return setTokenBalancesPending(","gt":"state);"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return  setBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_BALANCE_FULFILLED:<EOL>            return setBalanceFullfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_BALANCE_REJECTED:<EOL>            return  setBalanceRejected(state);<EOL>        case  TypeKeys.WALLET_SET_PENDING:<EOL>            return setWalletPending(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_PENDING:<EOL>            return setTokenBalancesPending( state);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_FULFILLED:<EOL>            return setTokenBalancesFulfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_REJECTED:<EOL>            return setTokenBalancesRejected(","gt":"state);"}
{"input":"<s> export function wallet(state = INITIAL_STATE, action) {<EOL>    switch (action.type) {<EOL>        case TypeKeys.WALLET_SET:<EOL>            return setWallet(state,  action);<EOL>        case TypeKeys.WALLET_RESET:<EOL>            return INITIAL_STATE;<EOL>        case TypeKeys.WALLET_SET_BALANCE_PENDING:<EOL>            return  setBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_BALANCE_FULFILLED:<EOL>            return setBalanceFullfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_BALANCE_REJECTED:<EOL>            return  setBalanceRejected(state);<EOL>        case  TypeKeys.WALLET_SET_PENDING:<EOL>            return setWalletPending(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_PENDING:<EOL>            return setTokenBalancesPending( state);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_FULFILLED:<EOL>            return setTokenBalancesFulfilled(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCES_REJECTED:<EOL>            return setTokenBalancesRejected( state);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCE_PENDING:<EOL>            return setTokenBalancePending(state);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCE_FULFILLED:<EOL>            return setTokenBalanceFufilled(state, action);<EOL>        case TypeKeys.WALLET_SET_TOKEN_BALANCE_REJECTED:<EOL>            return setTokenBalanceRejected(state);<EOL>        case TypeKeys.WALLET_SCAN_WALLET_FOR_TOKENS:<EOL>            return scanWalletForTokens(","gt":"state);"}
{"input":"<s> function isRelativePattern(obj) {<EOL>    const","gt":"rp = obj;"}
{"input":"<s> function updateDndFromPointerEvent(dnd, ev) {<EOL>    dnd.shift = ev.shift;<EOL>","gt":"dnd.ctrl = ev.ctrl;"}
{"input":"<s> function setDropEffect(ev, op) {<EOL>    ev.dataTransfer.dropEffect = [\"<STR_LIT>\",","gt":"\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"][op];"}
{"input":"<s> export function on(target, methodName, advice) {<EOL>    return advise(getDispatcher(target,","gt":"methodName), '<STR_LIT>', advice, true);"}
{"input":"<s> export function getRoutes() {<EOL>","gt":"return rootRoutes;"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>","gt":"ctx.drawImage(image, -left, -top);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>","gt":"let rgba = rgbaRegex.exec(colorStr);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>","gt":"cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[","gt":"<NUM_LIT>], <NUM_LIT>);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr.","gt":"substr(<NUM_LIT>, <NUM_LIT>),"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr. substr(<NUM_LIT>, <NUM_LIT>),","gt":"<NUM_LIT>);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr. substr(<NUM_LIT>, <NUM_LIT>),  <NUM_LIT>);<EOL>        cBlue = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cAlpha = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>) || <NUM_LIT>;<EOL>    }<EOL>    if (cAlpha === <NUM_LIT>) {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            // Horrible workaround for imprecisions due to browsers using premultiplied alpha internally for canvas<EOL>            let red =","gt":"imgDataData[i];"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr. substr(<NUM_LIT>, <NUM_LIT>),  <NUM_LIT>);<EOL>        cBlue = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cAlpha = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>) || <NUM_LIT>;<EOL>    }<EOL>    if (cAlpha === <NUM_LIT>) {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            // Horrible workaround for imprecisions due to browsers using premultiplied alpha internally for canvas<EOL>            let red =  imgDataData[i];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (imgDataData[i + <NUM_LIT>] < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                imgDataData[i] = cRed;<EOL>                imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                imgDataData[i + <NUM_LIT>] = cBlue;<EOL>            }<EOL>        }<EOL>    }<EOL>    else {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            let red = imgDataData[i];<EOL>            let alpha = imgDataData[i + <NUM_LIT>];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (alpha < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                if (alpha === <NUM_LIT>) {<EOL>                    imgDataData[i] = cRed;<EOL>                    imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                    imgDataData[i +","gt":"<NUM_LIT>] = cBlue;"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr. substr(<NUM_LIT>, <NUM_LIT>),  <NUM_LIT>);<EOL>        cBlue = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cAlpha = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>) || <NUM_LIT>;<EOL>    }<EOL>    if (cAlpha === <NUM_LIT>) {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            // Horrible workaround for imprecisions due to browsers using premultiplied alpha internally for canvas<EOL>            let red =  imgDataData[i];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (imgDataData[i + <NUM_LIT>] < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                imgDataData[i] = cRed;<EOL>                imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                imgDataData[i + <NUM_LIT>] = cBlue;<EOL>            }<EOL>        }<EOL>    }<EOL>    else {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            let red = imgDataData[i];<EOL>            let alpha = imgDataData[i + <NUM_LIT>];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (alpha < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                if (alpha === <NUM_LIT>) {<EOL>                    imgDataData[i] = cRed;<EOL>                    imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                    imgDataData[i +  <NUM_LIT>] = cBlue;<EOL>                    imgDataData[i + <NUM_LIT>] = cAlpha;<EOL>                }<EOL>                else {<EOL>                    alpha =","gt":"alpha * (<NUM_LIT> / <NUM_LIT>);"}
{"input":"<s> function recolorAndClip(image, colorStr, width, height, left, top) {<EOL>    var canvas = document.createElement(\"<STR_LIT>\");<EOL>    canvas.width = width;<EOL>    canvas.height = height;<EOL>    var ctx = canvas.getContext(\"<STR_LIT>\");<EOL>     ctx.drawImage(image, -left, -top);<EOL>    var imgData = ctx.getImageData(<NUM_LIT>, <NUM_LIT>, width, height);<EOL>    var imgDataData = imgData.data;<EOL>     let rgba = rgbaRegex.exec(colorStr);<EOL>    let cRed, cGreen, cBlue, cAlpha;<EOL>    if (rgba) {<EOL>         cRed = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cGreen = parseInt(rgba[ <NUM_LIT>], <NUM_LIT>);<EOL>        cBlue = parseInt(rgba[<NUM_LIT>], <NUM_LIT>);<EOL>        cAlpha = Math.round(parseFloat(rgba[<NUM_LIT>]) * <NUM_LIT>);<EOL>    }<EOL>    else {<EOL>        cRed = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cGreen = parseInt(colorStr. substr(<NUM_LIT>, <NUM_LIT>),  <NUM_LIT>);<EOL>        cBlue = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>);<EOL>        cAlpha = parseInt(colorStr.substr(<NUM_LIT>, <NUM_LIT>), <NUM_LIT>) || <NUM_LIT>;<EOL>    }<EOL>    if (cAlpha === <NUM_LIT>) {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            // Horrible workaround for imprecisions due to browsers using premultiplied alpha internally for canvas<EOL>            let red =  imgDataData[i];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (imgDataData[i + <NUM_LIT>] < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                imgDataData[i] = cRed;<EOL>                imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                imgDataData[i + <NUM_LIT>] = cBlue;<EOL>            }<EOL>        }<EOL>    }<EOL>    else {<EOL>        for (var i = <NUM_LIT>; i < imgDataData.length; i += <NUM_LIT>) {<EOL>            let red = imgDataData[i];<EOL>            let alpha = imgDataData[i + <NUM_LIT>];<EOL>            if (red === imgDataData[i + <NUM_LIT>] &&<EOL>                red === imgDataData[i + <NUM_LIT>] &&<EOL>                (red === <NUM_LIT> || (alpha < <NUM_LIT> && red > <NUM_LIT>))) {<EOL>                if (alpha === <NUM_LIT>) {<EOL>                    imgDataData[i] = cRed;<EOL>                    imgDataData[i + <NUM_LIT>] = cGreen;<EOL>                    imgDataData[i +  <NUM_LIT>] = cBlue;<EOL>                    imgDataData[i + <NUM_LIT>] = cAlpha;<EOL>                }<EOL>                else {<EOL>                    alpha =  alpha * (<NUM_LIT> / <NUM_LIT>);<EOL>                    imgDataData[i] = Math.round(cRed * alpha);<EOL>                    imgDataData[i + <NUM_LIT>] = Math.round(cGreen * alpha);<EOL>                    imgDataData[i + <NUM_LIT>] =","gt":"Math.round(cBlue * alpha);"}
{"input":"<s> function lineHasNoDecorations(model, lineNumber) {<EOL>    lineHasDecorations(model,","gt":"lineNumber, []);"}
{"input":"<s> export function propim(value, ctx, onChange) {<EOL>    return (val) => {<EOL>        if (val !== undefined && val !== value) {<EOL>            const oldVal = val;<EOL>            value =","gt":"val;"}
{"input":"<s> export function* loadBityRates() {<EOL>    while (true) {<EOL>        try {<EOL>            const data = yield call(getAllRates);<EOL>            yield put(loadBityRatesSucceededSwap(data));<EOL>        }<EOL>        catch (error) {<EOL>            const hasNotified = yield select(getHasNotifiedRatesFailure);<EOL>            if (!hasNotified) {<EOL>","gt":"console.error('<STR_LIT>', error);"}
{"input":"<s> export function* loadBityRates() {<EOL>    while (true) {<EOL>        try {<EOL>            const data = yield call(getAllRates);<EOL>            yield put(loadBityRatesSucceededSwap(data));<EOL>        }<EOL>        catch (error) {<EOL>            const hasNotified = yield select(getHasNotifiedRatesFailure);<EOL>            if (!hasNotified) {<EOL>                 console.error('<STR_LIT>', error);<EOL>                yield put(showNotification('<STR_LIT>', error.message));<EOL>            }<EOL>            yield put(","gt":"loadBityRatesFailedSwap());"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>","gt":"let logPerformance = false;"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =","gt":"function (...args) {"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =  function (...args) {<EOL>        if (locked) {<EOL>","gt":"return lastValue;"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =  function (...args) {<EOL>        if (locked) {<EOL>             return lastValue;<EOL>        }<EOL>        const inputSignature = signArray(args);<EOL>        if (lastSignature === undefined<EOL>            || lastSignature.isDifferent(inputSignature)) {<EOL>            if (","gt":"logPerformance) {"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =  function (...args) {<EOL>        if (locked) {<EOL>             return lastValue;<EOL>        }<EOL>        const inputSignature = signArray(args);<EOL>        if (lastSignature === undefined<EOL>            || lastSignature.isDifferent(inputSignature)) {<EOL>            if ( logPerformance) {<EOL>                console.log(\"<STR_LIT>\");<EOL>            }<EOL>            lastSignature = inputSignature;<EOL>","gt":"lastValue = compute.apply(this, args);"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =  function (...args) {<EOL>        if (locked) {<EOL>             return lastValue;<EOL>        }<EOL>        const inputSignature = signArray(args);<EOL>        if (lastSignature === undefined<EOL>            || lastSignature.isDifferent(inputSignature)) {<EOL>            if ( logPerformance) {<EOL>                console.log(\"<STR_LIT>\");<EOL>            }<EOL>            lastSignature = inputSignature;<EOL>             lastValue = compute.apply(this, args);<EOL>        }<EOL>        else {<EOL>            if (logPerformance) {<EOL>                console.log(","gt":"\"<STR_LIT>\");"}
{"input":"<s> <EOL>export function memoize(compute) {<EOL>    let lastSignature = undefined;<EOL>    let lastValue;<EOL>    let locked = false;<EOL>     let logPerformance = false;<EOL>    const memoizeFn =  function (...args) {<EOL>        if (locked) {<EOL>             return lastValue;<EOL>        }<EOL>        const inputSignature = signArray(args);<EOL>        if (lastSignature === undefined<EOL>            || lastSignature.isDifferent(inputSignature)) {<EOL>            if ( logPerformance) {<EOL>                console.log(\"<STR_LIT>\");<EOL>            }<EOL>            lastSignature = inputSignature;<EOL>             lastValue = compute.apply(this, args);<EOL>        }<EOL>        else {<EOL>            if (logPerformance) {<EOL>                console.log( \"<STR_LIT>\");<EOL>            }<EOL>        }<EOL>        return lastValue;<EOL>    };<EOL>    memoizeFn.doLocked = function (cb) {<EOL>        if (locked) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>","gt":"locked = true;"}
{"input":"<s> export function getProviders() {<EOL>    return [<EOL>        { provide:","gt":"Modal_, useClass: InAppModal },"}
{"input":"<s> function validateMethodName(name) {<EOL>    if (!name) {<EOL>        throw new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> export async function reopenIssue(githubAccessToken, timeStamp, error, fetcher) {<EOL>    await doUpdate(githubAccessToken, createContent(), fetcher);<EOL>    function createContent() {<EOL>        const lines = [];<EOL>        const l = lines.push.bind(lines);<EOL>        l(","gt":"timeStamp}**.`<STR_LIT>;"}
{"input":"<s> export async function reopenIssue(githubAccessToken, timeStamp, error, fetcher) {<EOL>    await doUpdate(githubAccessToken, createContent(), fetcher);<EOL>    function createContent() {<EOL>        const lines = [];<EOL>        const l = lines.push.bind(lines);<EOL>        l(`<STR_LIT>`);<EOL>        l(\"<STR_LIT>\");<EOL>        l(\"<STR_LIT>\");<EOL>        l(\"<STR_LIT>\");<EOL>        const url = `<STR_LIT>`;<EOL>        l(`<STR_LIT>`);<EOL>        l(","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function getNetworkTokens(state) {<EOL>","gt":"const network = getStaticNetworkConfig(state);"}
{"input":"<s> export function intersect(first, second, comparer = comparerAsync) {<EOL>    return","gt":"new IntersectAsyncIterable(first, second, comparer);"}
{"input":"<s> <EOL>export function createFilledArray(value, count) {<EOL>    const out = [];<EOL>    for (let i = <NUM_LIT>; i <","gt":"count; i++) {"}
{"input":"<s> function _mixin(target, source) {<EOL>    for (var name in source) {<EOL>        var sourceValue = source[name];<EOL>        // TODO: If it is already the same, what are we saving by doing this?<EOL>","gt":"if (name in target && target[name] === sourceValue) {"}
{"input":"<s> function _mixin(target, source) {<EOL>    for (var name in source) {<EOL>        var sourceValue = source[name];<EOL>        // TODO: If it is already the same, what are we saving by doing this?<EOL>         if (name in target && target[name] === sourceValue) {<EOL>            // skip properties that target already has<EOL>            continue;<EOL>        }<EOL>        target[name] =","gt":"sourceValue;"}
{"input":"<s> // Draws a labeled point with optional text.<EOL>function executeLabeledPoint(ctx, attrScale, point, radius, color, text) {<EOL>    // Convert the point and the radius to physical pixel coordinates.<EOL>    // We do this to avoid fractional font sizes less than 1px, which<EOL>    // show up OK on Chrome but not on Firefox or Safari.<EOL>    point = MathUtil.transformPoint(point, Matrix.scaling(attrScale, attrScale));<EOL>","gt":"radius *= attrScale;"}
{"input":"<s> // Draws a labeled point with optional text.<EOL>function executeLabeledPoint(ctx, attrScale, point, radius, color, text) {<EOL>    // Convert the point and the radius to physical pixel coordinates.<EOL>    // We do this to avoid fractional font sizes less than 1px, which<EOL>    // show up OK on Chrome but not on Firefox or Safari.<EOL>    point = MathUtil.transformPoint(point, Matrix.scaling(attrScale, attrScale));<EOL>     radius *= attrScale;<EOL>    ctx.save();<EOL>    ctx.beginPath();<EOL>    ctx.arc(point.x, point.y, radius * POINT_BORDER_FACTOR, <NUM_LIT>,","gt":"<NUM_LIT> * Math.PI, false);"}
{"input":"<s> // Draws a labeled point with optional text.<EOL>function executeLabeledPoint(ctx, attrScale, point, radius, color, text) {<EOL>    // Convert the point and the radius to physical pixel coordinates.<EOL>    // We do this to avoid fractional font sizes less than 1px, which<EOL>    // show up OK on Chrome but not on Firefox or Safari.<EOL>    point = MathUtil.transformPoint(point, Matrix.scaling(attrScale, attrScale));<EOL>     radius *= attrScale;<EOL>    ctx.save();<EOL>    ctx.beginPath();<EOL>    ctx.arc(point.x, point.y, radius * POINT_BORDER_FACTOR, <NUM_LIT>,  <NUM_LIT> * Math.PI, false);<EOL>    ctx.fillStyle = POINT_BORDER_COLOR;<EOL>    ctx.fill();<EOL>    ctx.","gt":"beginPath();"}
{"input":"<s> // Draws a labeled point with optional text.<EOL>function executeLabeledPoint(ctx, attrScale, point, radius, color, text) {<EOL>    // Convert the point and the radius to physical pixel coordinates.<EOL>    // We do this to avoid fractional font sizes less than 1px, which<EOL>    // show up OK on Chrome but not on Firefox or Safari.<EOL>    point = MathUtil.transformPoint(point, Matrix.scaling(attrScale, attrScale));<EOL>     radius *= attrScale;<EOL>    ctx.save();<EOL>    ctx.beginPath();<EOL>    ctx.arc(point.x, point.y, radius * POINT_BORDER_FACTOR, <NUM_LIT>,  <NUM_LIT> * Math.PI, false);<EOL>    ctx.fillStyle = POINT_BORDER_COLOR;<EOL>    ctx.fill();<EOL>    ctx. beginPath();<EOL>    ctx.arc(point.x, point.y, radius, <NUM_LIT>, <NUM_LIT> * Math.PI, false);<EOL>    ctx.fillStyle = color;<EOL>    ctx.","gt":"fill();"}
{"input":"<s> // Draws a labeled point with optional text.<EOL>function executeLabeledPoint(ctx, attrScale, point, radius, color, text) {<EOL>    // Convert the point and the radius to physical pixel coordinates.<EOL>    // We do this to avoid fractional font sizes less than 1px, which<EOL>    // show up OK on Chrome but not on Firefox or Safari.<EOL>    point = MathUtil.transformPoint(point, Matrix.scaling(attrScale, attrScale));<EOL>     radius *= attrScale;<EOL>    ctx.save();<EOL>    ctx.beginPath();<EOL>    ctx.arc(point.x, point.y, radius * POINT_BORDER_FACTOR, <NUM_LIT>,  <NUM_LIT> * Math.PI, false);<EOL>    ctx.fillStyle = POINT_BORDER_COLOR;<EOL>    ctx.fill();<EOL>    ctx. beginPath();<EOL>    ctx.arc(point.x, point.y, radius, <NUM_LIT>, <NUM_LIT> * Math.PI, false);<EOL>    ctx.fillStyle = color;<EOL>    ctx. fill();<EOL>    if (text) {<EOL>        ctx.beginPath();<EOL>        ctx.fillStyle = POINT_TEXT_COLOR;<EOL>        ctx.font = radius + '<STR_LIT>';<EOL>        const width = ctx.","gt":"measureText(text).width;"}
{"input":"<s> export function stripBOM(s) {<EOL>    if (s && s[<NUM_LIT>] === '<STR_LIT>') {<EOL>        s =","gt":"s.substr(<NUM_LIT>);"}
{"input":"<s> export function resolveWebpackConfig(config, ...args) {<EOL>    if (typeof config === '<STR_LIT>') {<EOL>        return resolveWebpackConfig(require(config), ...args);<EOL>    }<EOL>    else if (typeof config ===","gt":"'<STR_LIT>') {"}
{"input":"<s> export function resolveWebpackConfig(config, ...args) {<EOL>    if (typeof config === '<STR_LIT>') {<EOL>        return resolveWebpackConfig(require(config), ...args);<EOL>    }<EOL>    else if (typeof config ===  '<STR_LIT>') {<EOL>        return config(...args);<EOL>    }<EOL>    else if (config.__esModule === true && !!config.default) {<EOL>        return resolveWebpackConfig(config.default, ...args);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function deepMixin(target, source) {<EOL>    if (source && typeof source === '<STR_LIT>') {<EOL>        if (Array.isArray(source)) {<EOL>            target.length = source.length;<EOL>        }<EOL>        for (var name in source) {<EOL>","gt":"var targetValue = target[name];"}
{"input":"<s> export function deepMixin(target, source) {<EOL>    if (source && typeof source === '<STR_LIT>') {<EOL>        if (Array.isArray(source)) {<EOL>            target.length = source.length;<EOL>        }<EOL>        for (var name in source) {<EOL>             var targetValue = target[name];<EOL>            var sourceValue = source[name];<EOL>            if (targetValue !== sourceValue) {<EOL>                if (","gt":"sourceValue && typeof sourceValue === '<STR_LIT>') {"}
{"input":"<s> export function deepMixin(target, source) {<EOL>    if (source && typeof source === '<STR_LIT>') {<EOL>        if (Array.isArray(source)) {<EOL>            target.length = source.length;<EOL>        }<EOL>        for (var name in source) {<EOL>             var targetValue = target[name];<EOL>            var sourceValue = source[name];<EOL>            if (targetValue !== sourceValue) {<EOL>                if ( sourceValue && typeof sourceValue === '<STR_LIT>') {<EOL>                    if (sourceValue instanceof RegExp ||<EOL>                        sourceValue instanceof Date ||<EOL>","gt":"sourceValue instanceof String ||"}
{"input":"<s> export function deepMixin(target, source) {<EOL>    if (source && typeof source === '<STR_LIT>') {<EOL>        if (Array.isArray(source)) {<EOL>            target.length = source.length;<EOL>        }<EOL>        for (var name in source) {<EOL>             var targetValue = target[name];<EOL>            var sourceValue = source[name];<EOL>            if (targetValue !== sourceValue) {<EOL>                if ( sourceValue && typeof sourceValue === '<STR_LIT>') {<EOL>                    if (sourceValue instanceof RegExp ||<EOL>                        sourceValue instanceof Date ||<EOL>                         sourceValue instanceof String ||<EOL>                        sourceValue instanceof Number ||<EOL>                        sourceValue instanceof Boolean) {<EOL>                        target[","gt":"name] = targetValue = new sourceValue.constructor(sourceValue);"}
{"input":"<s> export function startPollShapeshiftOrderStatus() {<EOL>","gt":"return {"}
{"input":"<s> function b7({ a, b, c: { p1 } }, p2, p3) {<EOL>","gt":"return true;"}
{"input":"<s> export function getAutoGasLimitEnabled(state) {<EOL>    const meta =","gt":"getMeta(state);"}
{"input":"<s> <EOL>function afterJoinPoint(joinPoint, advice) {<EOL>    return","gt":"adviseJoinPoint(joinPoint, '<STR_LIT>', advice);"}
{"input":"<s> <EOL>function afterObject(target, methodName, advice) {<EOL>    return adviseObject(","gt":"getDispatcherObject(target, methodName), '<STR_LIT>', advice);"}
{"input":"<s> function lcsTests(Algorithm) {<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // simple<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // skip<EOL>    lcsTest(Algorithm,","gt":"'<STR_LIT>', '<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> function lcsTests(Algorithm) {<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // simple<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // skip<EOL>    lcsTest(Algorithm,  '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // long<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'); // no match<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');<EOL>    lcsTest(Algorithm, '<STR_LIT>', '<STR_LIT>',","gt":"'<STR_LIT>');"}
{"input":"<s> export function confirm(modal) {<EOL>    return modal.confirm().message(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>function bubbleNonAncestorHandlerFactory(element, handler) {<EOL>    return (event) => {<EOL>        let current = event.target;<EOL>","gt":"do {"}
{"input":"<s> <EOL>export function aroundJoinPoint(joinPoint, advice) {<EOL>    return adviseJoinPoint(joinPoint, '<STR_LIT>',","gt":"advice);"}
{"input":"<s> <EOL>export function aroundObject(target, methodName, advice) {<EOL>    let dispatcher = getDispatcherObject(target, methodName);<EOL>    let previous = dispatcher.around;<EOL>    let advised;<EOL>    if (advice) {<EOL>        advised = advice(function () {<EOL>            if (previous &&","gt":"previous.advice) {"}
{"input":"<s> <EOL>export function isThenable(value) {<EOL>","gt":"return value && typeof value.then === '<STR_LIT>';"}
{"input":"<s> function foo3() {<EOL>    return","gt":"foo3();"}
{"input":"<s> // As a mitigation for extensions like ESLint showing warnings and errors<EOL>// for git URIs, let's change the file extension of these uris to .git,<EOL>// when `replaceFileExtension` is true.<EOL>export function toGitUri(uri, ref, options = {}) {<EOL>    const params = {<EOL>        path: uri.fsPath,<EOL>        ref<EOL>    };<EOL>    if (options.submoduleOf) {<EOL>        params.","gt":"submoduleOf = options.submoduleOf;"}
{"input":"<s> // As a mitigation for extensions like ESLint showing warnings and errors<EOL>// for git URIs, let's change the file extension of these uris to .git,<EOL>// when `replaceFileExtension` is true.<EOL>export function toGitUri(uri, ref, options = {}) {<EOL>    const params = {<EOL>        path: uri.fsPath,<EOL>        ref<EOL>    };<EOL>    if (options.submoduleOf) {<EOL>        params. submoduleOf = options.submoduleOf;<EOL>    }<EOL>    let path = uri.path;<EOL>    if (options.replaceFileExtension) {<EOL>        path = `<STR_LIT>`;<EOL>    }<EOL>    else if (options.submoduleOf) {<EOL>        path = `<STR_LIT>`;<EOL>    }<EOL>","gt":"return uri.with({"}
{"input":"<s> function stateEqual(state, content) {<EOL>    assert.equal(","gt":"state.prevLineContent, content);"}
{"input":"<s> function statesEqual(model, states) {<EOL>    var i, len = states.length - <NUM_LIT>;<EOL>    for (i = <NUM_LIT>;","gt":"i < len; i++) {"}
{"input":"<s> // When encoding UNFORMATTED DATA (byte arrays, account addresses, hashes, bytecode arrays): encode as hex, prefix with \"0x\", two hex digits per byte.<EOL>export function hexEncodeData(value) {<EOL>    return bufferToHex(","gt":"toBuffer(value));"}
{"input":"<s> <EOL>export function beforeObject(target, methodName, advice) {<EOL>    return adviseObject(getDispatcherObject(target,","gt":"methodName), '<STR_LIT>', advice);"}
{"input":"<s> <EOL>export function find(items, callback) {<EOL>    const list = isArrayLike(items) ? items : array.from(items);<EOL>    return findIndex(list, callback).","gt":"then(function (i) {"}
{"input":"<s> export function profanity_filter(str) {<EOL>    for (let lang in filters) {<EOL>        str = str.replace(profanity_regex[lang], \"<STR_LIT>\",","gt":"str);"}
{"input":"<s> <EOL>export function getOrderedBlocksByPropertyByLayer(animation) {<EOL>    const blocksByPropertyByLayer = {};<EOL>    animation.blocks.forEach(block => {<EOL>        let blocksByProperty = blocksByPropertyByLayer[block.layerId];<EOL>        if (!blocksByProperty) {<EOL>            blocksByProperty = {};<EOL>","gt":"blocksByPropertyByLayer[block.layerId] = blocksByProperty;"}
{"input":"<s> <EOL>export function getOrderedBlocksByPropertyByLayer(animation) {<EOL>    const blocksByPropertyByLayer = {};<EOL>    animation.blocks.forEach(block => {<EOL>        let blocksByProperty = blocksByPropertyByLayer[block.layerId];<EOL>        if (!blocksByProperty) {<EOL>            blocksByProperty = {};<EOL>             blocksByPropertyByLayer[block.layerId] = blocksByProperty;<EOL>        }<EOL>        const propertyName = block.propertyName;<EOL>        blocksByProperty[propertyName] = blocksByProperty[propertyName] || [];<EOL>","gt":"blocksByProperty[propertyName].push(block);"}
{"input":"<s> <EOL>export function getOrderedBlocksByPropertyByLayer(animation) {<EOL>    const blocksByPropertyByLayer = {};<EOL>    animation.blocks.forEach(block => {<EOL>        let blocksByProperty = blocksByPropertyByLayer[block.layerId];<EOL>        if (!blocksByProperty) {<EOL>            blocksByProperty = {};<EOL>             blocksByPropertyByLayer[block.layerId] = blocksByProperty;<EOL>        }<EOL>        const propertyName = block.propertyName;<EOL>        blocksByProperty[propertyName] = blocksByProperty[propertyName] || [];<EOL>         blocksByProperty[propertyName].push(block);<EOL>    });<EOL>    _.forEach(blocksByPropertyByLayer, blocksByProperty => {<EOL>        _.forEach(","gt":"blocksByProperty, blocks => {"}
{"input":"<s> export function is_rank_bounded(user_or_rank) {<EOL>    let rank =","gt":"overall_rank(user_or_rank);"}
{"input":"<s> export function buildExtensionMetadata(pkg) {<EOL>    return pkg.libExtensions.map(ext => {<EOL>        normalizeLibExtension(ext);<EOL>        const meta = deepcopy(pkg);<EOL>        meta.parent = pkg;<EOL>        meta.","gt":"extension = ext;"}
{"input":"<s> export function buildExtensionMetadata(pkg) {<EOL>    return pkg.libExtensions.map(ext => {<EOL>        normalizeLibExtension(ext);<EOL>        const meta = deepcopy(pkg);<EOL>        meta.parent = pkg;<EOL>        meta. extension = ext;<EOL>        meta.name = meta.name + titleCamelCase(ext.name);<EOL>        meta.umd = meta.umd + '<STR_LIT>' +","gt":"ext.name;"}
{"input":"<s> export function buildExtensionMetadata(pkg) {<EOL>    return pkg.libExtensions.map(ext => {<EOL>        normalizeLibExtension(ext);<EOL>        const meta = deepcopy(pkg);<EOL>        meta.parent = pkg;<EOL>        meta. extension = ext;<EOL>        meta.name = meta.name + titleCamelCase(ext.name);<EOL>        meta.umd = meta.umd + '<STR_LIT>' +  ext.name;<EOL>        meta.dirName = ext.name;<EOL>        meta.dir = meta.dir + '<STR_LIT>' + ext.dir;<EOL>        meta.moduleName = meta.moduleName + '<STR_LIT>' + voca.camelCase(ext.name);<EOL>        meta.externals.push(meta.parent.dir);<EOL>        meta.externalsWebpack.push(getExternalsWebpack(meta.dir)[","gt":"<NUM_LIT>]);"}
{"input":"<s> function f11(x) {<EOL>","gt":"var r7 = true ? () => { } : x;"}
{"input":"<s> function isRule(ruleName) {<EOL>    let result = cache.get(ruleName);<EOL>","gt":"if (result === undefined) {"}
{"input":"<s> function* g3() {<EOL>    yield;<EOL>    yield","gt":"new Foo;"}
{"input":"<s> export function stat(path) {<EOL>    return nfcall(fs.stat,","gt":"path);"}
{"input":"<s> function assignNonLibPaths(oldPaths, paths) {<EOL>    const automatedPaths = tsConfigPaths();<EOL>    Object.","gt":"keys(oldPaths)"}
{"input":"<s> export function dispatchTouchEvent(target, eventType = \"<STR_LIT>\", clientX = <NUM_LIT>, clientY = <NUM_LIT>) {<EOL>    target.dispatchEvent(","gt":"createTouchEvent(eventType, clientX, clientY));"}
{"input":"<s> export function acceptTournamentInvite(id) {<EOL>    return post(\"<STR_LIT>\", { \"<STR_LIT>\": id }).","gt":"catch(errorAlerter);"}
{"input":"<s> export function getFormatter(formatterName) {<EOL>","gt":"const formattersDirectory = path.join(__dirname, \"<STR_LIT>\");"}
{"input":"<s> export function lookup(player_id) {<EOL>    if (player_id in cache) {<EOL>        return cache[","gt":"player_id];"}
{"input":"<s> function ping() {<EOL>    if (termination_socket.connected) {<EOL>        termination_socket.send(\"<STR_LIT>\", {<EOL>            client: Date.","gt":"now(),"}
{"input":"<s> function* flattenData(data) {<EOL>    for (const","gt":"versions of data.values()) {"}
{"input":"<s> export function rmdir(path) {<EOL>    return","gt":"nfcall(fs.rmdir, path);"}
{"input":"<s> function other(t, u) {<EOL>    var r10 = foo2(<NUM_LIT>, (x) => '<STR_LIT>'); // error<EOL>    var","gt":"r10 = foo2(<NUM_LIT>, (x) => '<STR_LIT>');"}
{"input":"<s> export function bomLength(encoding) {<EOL>    switch (encoding) {<EOL>        case UTF8:<EOL>            return","gt":"<NUM_LIT>;"}
{"input":"<s> export function createKeyEventHandler(actions, preventDefault = false) {<EOL>    return (e) => {<EOL>        for (const k of Object.keys(actions)) {<EOL>            const key = Number(k);<EOL>","gt":"if (e.which === key) {"}
{"input":"<s> function isSubPathSplit(map, spsIdx) {<EOL>","gt":"return !!findSubPathState(map, spsIdx).getSplitSubPaths().length;"}
{"input":"<s> <EOL>export function colorize(text, languageId, options) {<EOL>    startup.","gt":"initStaticServicesIfNecessary();"}
{"input":"<s> function positionEqual(position, lineNumber, column) {<EOL>    assert.deepEqual({<EOL>        lineNumber: position.lineNumber,<EOL>","gt":"column: position.column"}
{"input":"<s> export function diamond() {<EOL>    return (","gt":"symbolSize) => {"}
{"input":"<s> export function existsWithResult(path, successResult) {<EOL>    return exists(path).then((exists) => {<EOL>","gt":"return exists ? successResult : null;"}
{"input":"<s> function f11() {<EOL>","gt":"return cond ? <NUM_LIT> : \"<STR_LIT>\";"}
{"input":"<s> export function toSelection(selection) {<EOL>    let { selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn } = selection;<EOL>    let start = new types.Position(selectionStartLineNumber - <NUM_LIT>, selectionStartColumn -","gt":"<NUM_LIT>);"}
{"input":"<s> export function fromDiagnosticSeverity(value) {<EOL>    switch (value) {<EOL>        case types.DiagnosticSeverity.Error:<EOL>            return Severity.Error;<EOL>        case","gt":"types.DiagnosticSeverity.Warning:"}
{"input":"<s> export function fromDiagnosticSeverity(value) {<EOL>    switch (value) {<EOL>        case types.DiagnosticSeverity.Error:<EOL>            return Severity.Error;<EOL>        case  types.DiagnosticSeverity.Warning:<EOL>            return Severity.Warning;<EOL>        case types.DiagnosticSeverity.Information:<EOL>            return Severity.Info;<EOL>        case types.DiagnosticSeverity.Hint:<EOL>            return Severity.","gt":"Ignore;"}
{"input":"<s> export function removeAll() {<EOL>    let keys = [];<EOL>    for (let key in store) {<EOL>        keys.push(key);<EOL>    }<EOL>    for (let key of keys) {<EOL>        try {<EOL>            remove(key);<EOL>        }<EOL>        catch (e) {<EOL>            console.error(","gt":"e);"}
{"input":"<s> export function hide(...elements) {<EOL>    for (let element of","gt":"elements) {"}
{"input":"<s> export function removeTabIndexAndUpdateFocus(node) {<EOL>    if (!node || !node.hasAttribute('<STR_LIT>')) {<EOL>        return;<EOL>    }<EOL>    // If we are the currently focused element and tabIndex is removed,<EOL>    // standard DOM behavior is to move focus to the <body> element. We<EOL>    // typically never want that, rather put focus to the closest element<EOL>    // in the hierarchy of the parent DOM nodes.<EOL>    if (document.activeElement === node) {<EOL>        let parentFocusable = findParentWithAttribute(node.parentElement, '<STR_LIT>');<EOL>        if (parentFocusable) {<EOL>","gt":"parentFocusable.focus();"}
{"input":"<s> export function are_in_browser() {<EOL>    return process.","gt":"platform === '<STR_LIT>';"}
{"input":"<s> <EOL>export function tail(array, n = <NUM_LIT>) {<EOL>    return array[","gt":"array.length - (<NUM_LIT> + n)];"}
{"input":"<s> <EOL>export function getLoader(thread, jclo) {<EOL>    if ((jclo != null) && (jclo.$loader != null)) {<EOL>        return","gt":"jclo.$loader;"}
{"input":"<s> function stringRepeat(str, numTimes) {<EOL>    return new Array(numTimes + <NUM_LIT>).","gt":"join(str);"}
{"input":"<s> function assertAPISurface(traceAPI) {<EOL>    assert.strictEqual(typeof traceAPI.enhancedDatabaseReportingEnabled(), '<STR_LIT>');<EOL>    traceAPI.runInRootSpan({ name: '<STR_LIT>' }, function (root) {<EOL>        // TODO: Once NullSpans are in the functional implementation,<EOL>        // remove the conditional check<EOL>        if (","gt":"root) {"}
{"input":"<s> function assertAPISurface(traceAPI) {<EOL>    assert.strictEqual(typeof traceAPI.enhancedDatabaseReportingEnabled(), '<STR_LIT>');<EOL>    traceAPI.runInRootSpan({ name: '<STR_LIT>' }, function (root) {<EOL>        // TODO: Once NullSpans are in the functional implementation,<EOL>        // remove the conditional check<EOL>        if ( root) {<EOL>            assert.strictEqual(typeof root.addLabel, '<STR_LIT>');<EOL>            assert.strictEqual(typeof root.endSpan, '<STR_LIT>');<EOL>","gt":"assert.strictEqual(typeof root.getTraceContext(), '<STR_LIT>');"}
{"input":"<s> function assertAPISurface(traceAPI) {<EOL>    assert.strictEqual(typeof traceAPI.enhancedDatabaseReportingEnabled(), '<STR_LIT>');<EOL>    traceAPI.runInRootSpan({ name: '<STR_LIT>' }, function (root) {<EOL>        // TODO: Once NullSpans are in the functional implementation,<EOL>        // remove the conditional check<EOL>        if ( root) {<EOL>            assert.strictEqual(typeof root.addLabel, '<STR_LIT>');<EOL>            assert.strictEqual(typeof root.endSpan, '<STR_LIT>');<EOL>             assert.strictEqual(typeof root.getTraceContext(), '<STR_LIT>');<EOL>        }<EOL>    });<EOL>    assert.strictEqual(typeof traceAPI.getCurrentContextId, '<STR_LIT>');<EOL>    assert.strictEqual(typeof traceAPI.getWriterProjectId, '<STR_LIT>');<EOL>    var child = traceAPI.","gt":"createChildSpan({ name: '<STR_LIT>' });"}
{"input":"<s> function assertAPISurface(traceAPI) {<EOL>    assert.strictEqual(typeof traceAPI.enhancedDatabaseReportingEnabled(), '<STR_LIT>');<EOL>    traceAPI.runInRootSpan({ name: '<STR_LIT>' }, function (root) {<EOL>        // TODO: Once NullSpans are in the functional implementation,<EOL>        // remove the conditional check<EOL>        if ( root) {<EOL>            assert.strictEqual(typeof root.addLabel, '<STR_LIT>');<EOL>            assert.strictEqual(typeof root.endSpan, '<STR_LIT>');<EOL>             assert.strictEqual(typeof root.getTraceContext(), '<STR_LIT>');<EOL>        }<EOL>    });<EOL>    assert.strictEqual(typeof traceAPI.getCurrentContextId, '<STR_LIT>');<EOL>    assert.strictEqual(typeof traceAPI.getWriterProjectId, '<STR_LIT>');<EOL>    var child = traceAPI. createChildSpan({ name: '<STR_LIT>' });<EOL>    // TODO: Ditto but with child spans<EOL>    if (child) {<EOL>        assert.strictEqual(typeof child.addLabel, '<STR_LIT>');<EOL>        assert.strictEqual(typeof child.endSpan, '<STR_LIT>');<EOL>        assert.","gt":"strictEqual(typeof child.getTraceContext(), '<STR_LIT>');"}
{"input":"<s> export function deviceCanvasScalingRatio() {<EOL>    if (!__deviceCanvasScalingRatio) {<EOL>        let canvas = $(\"<STR_LIT>\").attr(\"<STR_LIT>\", <NUM_LIT>).attr(\"<STR_LIT>\", <NUM_LIT>)[<NUM_LIT>];<EOL>        let context = canvas.getContext(\"<STR_LIT>\");<EOL>        let devicePixelRatio = window.","gt":"devicePixelRatio || <NUM_LIT>;"}
{"input":"<s> export function deviceCanvasScalingRatio() {<EOL>    if (!__deviceCanvasScalingRatio) {<EOL>        let canvas = $(\"<STR_LIT>\").attr(\"<STR_LIT>\", <NUM_LIT>).attr(\"<STR_LIT>\", <NUM_LIT>)[<NUM_LIT>];<EOL>        let context = canvas.getContext(\"<STR_LIT>\");<EOL>        let devicePixelRatio = window. devicePixelRatio || <NUM_LIT>;<EOL>        let backingStoreRatio = context.webkitBackingStorePixelRatio ||<EOL>            context.mozBackingStorePixelRatio ||<EOL>            context.msBackingStorePixelRatio ||<EOL>            context.oBackingStorePixelRatio ||<EOL>            context.backingStorePixelRatio || <NUM_LIT>;<EOL>        let ratio = devicePixelRatio /","gt":"backingStoreRatio;"}
{"input":"<s> function createWrapGetConnection(api) {<EOL>    return function wrapGetConnection(getConnection) {<EOL>        return function getConnection_trace(","gt":"cb) {"}
{"input":"<s> function selection_attrs(map) {<EOL>    return (typeof map === \"<STR_LIT>\" ? attrsFunction :","gt":"attrsObject)(this, map);"}
{"input":"<s> function CreatePipeTransportString(pipeProgram, debuggerProgram) {<EOL>    return","gt":"}\"<STR_LIT>,"}
{"input":"<s> export async function mapAsyncOrdered(arr, mapper) {<EOL>    const out = new Array(arr.length);<EOL>    await Promise.all(arr.map(async (em,","gt":"idx) => {"}
{"input":"<s> <EOL>export function top(array, compare, n) {<EOL>    if (n === <NUM_LIT>) {<EOL>","gt":"return [];"}
{"input":"<s> function stone_center_in_square(radius, scaled) {<EOL>    return Math.","gt":"ceil(radius) + (scaled ? <NUM_LIT> : <NUM_LIT>);"}
{"input":"<s> export function delayEach(source, dueTime) {<EOL>    return new DelayEachAsyncIterable(","gt":"source, dueTime);"}
{"input":"<s> function getPath(arg1) {<EOL>    if (!arg1) {<EOL>        return null;<EOL>    }<EOL>","gt":"if (typeof arg1 === '<STR_LIT>') {"}
{"input":"<s> function getPath(arg1) {<EOL>    if (!arg1) {<EOL>        return null;<EOL>    }<EOL>     if (typeof arg1 === '<STR_LIT>') {<EOL>        return arg1;<EOL>    }<EOL>    if (types.isFunction(arg1.getWorkspace)) {<EOL>        let ws = arg1.getWorkspace();<EOL>        return ws ?","gt":"ws.resource.fsPath : void <NUM_LIT>;"}
{"input":"<s> export function memoize(readerCount = -<NUM_LIT>, selector) {<EOL>    return","gt":"function memoizeOperatorFunction(source) {"}
{"input":"<s> function stylesObject(selection, map, priority) {<EOL>    for (const","gt":"name in map)"}
{"input":"<s> export function encodingExists(encoding) {<EOL>    return","gt":"iconv.encodingExists(toNodeEncoding(encoding));"}
{"input":"<s> export function clearTraceData() {<EOL>    traces.","gt":"clear();"}
{"input":"<s> <EOL>export function concatAll(source) {<EOL>    return","gt":"new ConcatIterable(source);"}
{"input":"<s> function wrapSendCommand(redis, api) {<EOL>    shimmer.wrap(redis.","gt":"RedisClient.prototype, '<STR_LIT>', createSendCommandWrap(api));"}
{"input":"<s> // used for debugging the stack and local variables<EOL>export function debug_vars(arr) {<EOL>    return arr.","gt":"map(debug_var);"}
{"input":"<s> <EOL>export async function guessEncodingByBuffer(buffer) {<EOL>    const jschardet = await import('<STR_LIT>');<EOL>    jschardet.Constants.MINIMUM_THRESHOLD = MINIMUM_THRESHOLD;<EOL>    const guessed = jschardet.detect(buffer);<EOL>    if (!guessed || !guessed.","gt":"encoding) {"}
{"input":"<s> <EOL>export async function guessEncodingByBuffer(buffer) {<EOL>    const jschardet = await import('<STR_LIT>');<EOL>    jschardet.Constants.MINIMUM_THRESHOLD = MINIMUM_THRESHOLD;<EOL>    const guessed = jschardet.detect(buffer);<EOL>    if (!guessed || !guessed. encoding) {<EOL>        return null;<EOL>    }<EOL>    const enc = guessed.encoding.toLowerCase();<EOL>    // Ignore encodings that cannot guess correctly<EOL>    // (http://chardet.readthedocs.io/en/latest/supported-encodings.html)<EOL>","gt":"if (<NUM_LIT> <= IGNORE_ENCODINGS.indexOf(enc)) {"}
{"input":"<s> export function encodeStream(encoding, options) {<EOL>    return","gt":"iconv.encodeStream(toNodeEncoding(encoding), options);"}
{"input":"<s> // Deletes the given path by first moving it out of the workspace. This has two benefits. For one, the operation can return fast because<EOL>// after the rename, the contents are out of the workspace although not yet deleted. The greater benefit however is that this operation<EOL>// will fail in case any file is used by another process. fs.unlink() in node will not bail if a file unlinked is used by another process.<EOL>// However, the consequences are bad as outlined in all the related bugs from https://github.com/joyent/node/issues/7164<EOL>export function del(path, tmpFolder, callback, done) {<EOL>    fs.exists(path, (exists) => {<EOL>        if (!exists) {<EOL>","gt":"return callback(null);"}
{"input":"<s> // Deletes the given path by first moving it out of the workspace. This has two benefits. For one, the operation can return fast because<EOL>// after the rename, the contents are out of the workspace although not yet deleted. The greater benefit however is that this operation<EOL>// will fail in case any file is used by another process. fs.unlink() in node will not bail if a file unlinked is used by another process.<EOL>// However, the consequences are bad as outlined in all the related bugs from https://github.com/joyent/node/issues/7164<EOL>export function del(path, tmpFolder, callback, done) {<EOL>    fs.exists(path, (exists) => {<EOL>        if (!exists) {<EOL>             return callback(null);<EOL>        }<EOL>        fs.stat(path, (err, stat) => {<EOL>            if (","gt":"err || !stat) {"}
{"input":"<s> // Deletes the given path by first moving it out of the workspace. This has two benefits. For one, the operation can return fast because<EOL>// after the rename, the contents are out of the workspace although not yet deleted. The greater benefit however is that this operation<EOL>// will fail in case any file is used by another process. fs.unlink() in node will not bail if a file unlinked is used by another process.<EOL>// However, the consequences are bad as outlined in all the related bugs from https://github.com/joyent/node/issues/7164<EOL>export function del(path, tmpFolder, callback, done) {<EOL>    fs.exists(path, (exists) => {<EOL>        if (!exists) {<EOL>             return callback(null);<EOL>        }<EOL>        fs.stat(path, (err, stat) => {<EOL>            if ( err || !stat) {<EOL>                return callback(err);<EOL>            }<EOL>            // Special windows workaround: A file or folder that ends with a \".\" cannot be moved to another place<EOL>            // because it is not a valid file name. In this case, we really have to do the deletion without prior move.<EOL>            if (path[path.length - <NUM_LIT>] === '<STR_LIT>' || strings.endsWith(path, '<STR_LIT>') || strings.endsWith(path, '<STR_LIT>')) {<EOL>                return rmRecursive(path, callback);<EOL>            }<EOL>","gt":"let pathInTemp = paths.join(tmpFolder, uuid.generateUuid());"}
{"input":"<s> export function onDidChangeAccessibilitySupport(callback) {<EOL>    return WindowManager.INSTANCE.","gt":"onDidChangeAccessibilitySupport(callback);"}
{"input":"<s> export function emptyScheduled(scheduler) {<EOL>    return","gt":"new Observable(subscriber => scheduler.schedule(() => subscriber.complete()));"}
{"input":"<s> function assertClassInitializedOrResolved(thread, cl, type, initialized) {<EOL>    var cls = null;<EOL>    // Break out of loop once class is found.<EOL>    while (cls === null) {<EOL>        cls = initialized ? cl.getInitializedClass(thread, type) : cl.getResolvedClass(type);<EOL>        if (cl.getLoaderObject() !== null) {<EOL>","gt":"if (cl.getLoaderObject()['<STR_LIT>'] === null) {"}
{"input":"<s> function assertClassInitializedOrResolved(thread, cl, type, initialized) {<EOL>    var cls = null;<EOL>    // Break out of loop once class is found.<EOL>    while (cls === null) {<EOL>        cls = initialized ? cl.getInitializedClass(thread, type) : cl.getResolvedClass(type);<EOL>        if (cl.getLoaderObject() !== null) {<EOL>             if (cl.getLoaderObject()['<STR_LIT>'] === null) {<EOL>                cl = thread.getBsCl();<EOL>            }<EOL>            else {<EOL>                cl = cl.getLoaderObject()['<STR_LIT>'].","gt":"$loader;"}
{"input":"<s> function dispatchNext(subscriber) {<EOL>","gt":"subscriber.debouncedNext();"}
{"input":"<s> function patchHttp2(h2, api) {<EOL>    shimmer.wrap(h2, '<STR_LIT>', (connect) => function (authority) {<EOL>        const session =","gt":"connect.apply(this, arguments);"}
{"input":"<s> export function safeBtoa(str) {<EOL>    return","gt":"btoa(encodeURIComponent(str));"}
{"input":"<s> export function isIE() {<EOL>    const userAgent = window.","gt":"navigator.userAgent;"}
{"input":"<s> function isInputElement(e) {<EOL>    return e.","gt":"tagName === '<STR_LIT>' || e.tagName === '<STR_LIT>';"}
{"input":"<s> export function renderLine(context, d3Line, data, style) {<EOL>    context.save();<EOL>    context.beginPath();<EOL>    d3Line.","gt":"context(context);"}
{"input":"<s> // @target: es5<EOL>function f() {<EOL>    function g() {<EOL>        var _arguments = <NUM_LIT>; // No capture in 'g', so no conflict.<EOL>        function h() {<EOL>","gt":"var capture = () => arguments;"}
{"input":"<s> // @target: es5<EOL>function f() {<EOL>    function g() {<EOL>        var _arguments = <NUM_LIT>; // No capture in 'g', so no conflict.<EOL>        function h() {<EOL>             var capture = () => arguments; // Should trigger an '_arguments' capture into function 'h'<EOL>            foo(_arguments); // Error as this does not resolve to the user defined '_arguments'<EOL>        }<EOL>    }<EOL>    function foo(","gt":"x) {"}
{"input":"<s> // Definite assignment assertion requires type annotation and no initializer<EOL>function f4() {<EOL>","gt":"let a;"}
{"input":"<s> // Combined filters<EOL><EOL>export function or(...filter) {<EOL>    return function (word, wordToMatchAgainst) {<EOL>        for (let i = <NUM_LIT>, len = filter.length; i < len; i++) {<EOL>            let","gt":"match = filter[i](word, wordToMatchAgainst);"}
{"input":"<s> export function uniqueFilter(keyFn) {<EOL>    const seen = Object.create(null);<EOL>","gt":"return element => {"}
{"input":"<s> export function uniqueFilter(keyFn) {<EOL>    const seen = Object.create(null);<EOL>     return element => {<EOL>        const key = keyFn(element);<EOL>        if (seen[key]) {<EOL>            return false;<EOL>        }<EOL>        seen[","gt":"key] = true;"}
{"input":"<s> <EOL><EOL>export function text_diff(a_lines, b_lines, context) {<EOL>    return (","gt":"new SequenceMatcher(a_lines, b_lines)).text_diff(context);"}
{"input":"<s> function link(href, title, text) {<EOL>    return","gt":"}\"<STR_LIT>\"${title || text}\"<STR_LIT>;"}
{"input":"<s> function _encode(ch) {<EOL>","gt":"return '<STR_LIT>' + ch.charCodeAt(<NUM_LIT>).toString(<NUM_LIT>).toUpperCase();"}
{"input":"<s> <EOL>export function checkPreheader(walker) {<EOL>    let value = walker.readString(PRE_HEADER.length);<EOL>    if (value !==","gt":"PRE_HEADER) {"}
{"input":"<s> <EOL>export function calculatePaletteLength(numColors) {<EOL>    return (numColors * <NUM_LIT> + // PLTE chunk size<EOL>        <NUM_LIT> + // PLTE identifier<EOL>","gt":"<NUM_LIT> +"}
{"input":"<s> function isValidHeaderAscii(val) {<EOL>    return isAllowedControlChars(val) || (val >=","gt":"<NUM_LIT> && val <= <NUM_LIT>);"}
{"input":"<s> <EOL>export function toBase64(str) {<EOL>    if (typeof btoa === \"<STR_LIT>\") {<EOL>        return new Buffer(str, '<STR_LIT>').toString(","gt":"'<STR_LIT>');"}
{"input":"<s> function dispatch(state) {<EOL>    const { index, period, subscriber } = state;<EOL>    subscriber.next(index);<EOL>    if (subscriber.closed) {<EOL>","gt":"return;"}
{"input":"<s> export function urlOfBlob(blobName) {<EOL>    return","gt":"azureContainer}/${blobName}`;"}
{"input":"<s> export function printFileDescriptorTSD(fileDescriptor, exportMap) {<EOL>    const fileName = fileDescriptor.getName();<EOL>    const packageName = fileDescriptor.getPackage();<EOL>    const printer = new Printer(<NUM_LIT>);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    const","gt":"upToRoot = getPathToRoot(fileName);"}
{"input":"<s> export function printFileDescriptorTSD(fileDescriptor, exportMap) {<EOL>    const fileName = fileDescriptor.getName();<EOL>    const packageName = fileDescriptor.getPackage();<EOL>    const printer = new Printer(<NUM_LIT>);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    const  upToRoot = getPathToRoot(fileName);<EOL>    printer.printEmptyLn();<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    fileDescriptor.","gt":"getDependencyList().forEach((dependency) => {"}
{"input":"<s> export function printFileDescriptorTSD(fileDescriptor, exportMap) {<EOL>    const fileName = fileDescriptor.getName();<EOL>    const packageName = fileDescriptor.getPackage();<EOL>    const printer = new Printer(<NUM_LIT>);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    const  upToRoot = getPathToRoot(fileName);<EOL>    printer.printEmptyLn();<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    fileDescriptor. getDependencyList().forEach((dependency) => {<EOL>        const pseudoNamespace = filePathToPseudoNamespace(dependency);<EOL>        if (dependency in WellKnownTypesMap) {<EOL>            printer.printLn(","gt":"dependency]}\"<STR_LIT>;"}
{"input":"<s> export function printFileDescriptorTSD(fileDescriptor, exportMap) {<EOL>    const fileName = fileDescriptor.getName();<EOL>    const packageName = fileDescriptor.getPackage();<EOL>    const printer = new Printer(<NUM_LIT>);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    const  upToRoot = getPathToRoot(fileName);<EOL>    printer.printEmptyLn();<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    fileDescriptor. getDependencyList().forEach((dependency) => {<EOL>        const pseudoNamespace = filePathToPseudoNamespace(dependency);<EOL>        if (dependency in WellKnownTypesMap) {<EOL>            printer.printLn(`<STR_LIT>`);<EOL>        }<EOL>        else {<EOL>            const filePath = filePathFromProtoWithoutExtension(dependency);<EOL>            printer.printLn(","gt":"}${filePath}\"<STR_LIT>;"}
{"input":"<s> export function printFileDescriptorTSD(fileDescriptor, exportMap) {<EOL>    const fileName = fileDescriptor.getName();<EOL>    const packageName = fileDescriptor.getPackage();<EOL>    const printer = new Printer(<NUM_LIT>);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    const  upToRoot = getPathToRoot(fileName);<EOL>    printer.printEmptyLn();<EOL>    printer.printLn(`<STR_LIT>`);<EOL>    fileDescriptor. getDependencyList().forEach((dependency) => {<EOL>        const pseudoNamespace = filePathToPseudoNamespace(dependency);<EOL>        if (dependency in WellKnownTypesMap) {<EOL>            printer.printLn(`<STR_LIT>`);<EOL>        }<EOL>        else {<EOL>            const filePath = filePathFromProtoWithoutExtension(dependency);<EOL>            printer.printLn(`<STR_LIT>`);<EOL>        }<EOL>    });<EOL>    fileDescriptor.getMessageTypeList().forEach(enumType => {<EOL>        printer.print(printMessage(fileName, exportMap, enumType, <NUM_LIT>, fileDescriptor));<EOL>    });<EOL>    fileDescriptor.getExtensionList().","gt":"forEach(extension => {"}
{"input":"<s> function msg(s) {<EOL>    serial.writeString(","gt":"s);"}
{"input":"<s> <EOL>export function countDecimalPlaces(num) {<EOL>    if (typeof num !== \"<STR_LIT>\" || Math.floor(num) === num) {<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> function f74(x, y) {<EOL>    x =","gt":"y;"}
{"input":"<s> <EOL>export default function xhrRequest(options) {<EOL>    options.debug &&","gt":"debug(\"<STR_LIT>\", options);"}
{"input":"<s> export function printEnum(enumDescriptor, indentLevel) {<EOL>    const printer = new Printer(indentLevel);<EOL>    printer.printEmptyLn();<EOL>    printer.","gt":"printLn(`<STR_LIT>`);"}
{"input":"<s> <EOL>export function debounce(msec, callback, context) {<EOL>    let timeoutToken = null;<EOL>    let args = [];<EOL>    const deferredCallback = function () {<EOL>        callback.","gt":"apply(context, args);"}
{"input":"<s> <EOL>export function debounce(msec, callback, context) {<EOL>    let timeoutToken = null;<EOL>    let args = [];<EOL>    const deferredCallback = function () {<EOL>        callback. apply(context, args);<EOL>    };<EOL>    // coerce to T<EOL>    return function () {<EOL>        args = Array.prototype.slice.call(arguments);<EOL>        clearTimeout(","gt":"timeoutToken);"}
{"input":"<s> export function isNodeArray(nodeOrArray) {<EOL>    return Array.isArray(","gt":"nodeOrArray);"}
{"input":"<s> function testFloat() {<EOL>    if (!hasFloat)<EOL>        return;<EOL>    let v =","gt":"<NUM_LIT> / <NUM_LIT>;"}
{"input":"<s> export function copy(source, target, callback, copiedSources) {<EOL>    if (!copiedSources) {<EOL>        copiedSources = Object.create(null);<EOL>    }<EOL>    fs.stat(source, (error, stat) => {<EOL>","gt":"if (error) {"}
{"input":"<s> export function copy(source, target, callback, copiedSources) {<EOL>    if (!copiedSources) {<EOL>        copiedSources = Object.create(null);<EOL>    }<EOL>    fs.stat(source, (error, stat) => {<EOL>         if (error) {<EOL>            return callback(error);<EOL>        }<EOL>        if (!stat.","gt":"isDirectory()) {"}
{"input":"<s> export function copy(source, target, callback, copiedSources) {<EOL>    if (!copiedSources) {<EOL>        copiedSources = Object.create(null);<EOL>    }<EOL>    fs.stat(source, (error, stat) => {<EOL>         if (error) {<EOL>            return callback(error);<EOL>        }<EOL>        if (!stat. isDirectory()) {<EOL>            return pipeFs(source, target, stat.mode & <NUM_LIT>, callback);<EOL>        }<EOL>        if (copiedSources[source]) {<EOL>            return callback(null); // escape when there are cycles (can happen with symlinks)<EOL>        }<EOL>        copiedSources[source] = true; // remember as copied<EOL>        const proceed = function () {<EOL>            readdir(source, (err, files) => {<EOL>                loop(files, (file, clb) => {<EOL>                    copy(paths.join(source, file), paths.join(","gt":"target, file), (error) => clb(error, void <NUM_LIT>), copiedSources);"}
{"input":"<s> function foo1(...stuff) {<EOL>    return","gt":"undefined;"}
{"input":"<s> export default function reducer(state = initialState, action) {<EOL>    switch (action.type) {<EOL>","gt":"default:"}
{"input":"<s> export function* loginRequestSaga() {<EOL>    const lock = new Auth0Lock(process.env.AUTH0_CLIENT_ID, process.env.AUTH0_DOMAIN, {<EOL>        auth: { redirect: false },<EOL>        languageDictionary: { title: '<STR_LIT>' },<EOL>    });<EOL>    const showLock = () => new Promise((resolve, reject) => {<EOL>        lock.","gt":"on('<STR_LIT>', () => reject('<STR_LIT>'));"}
{"input":"<s> export function* loginRequestSaga() {<EOL>    const lock = new Auth0Lock(process.env.AUTH0_CLIENT_ID, process.env.AUTH0_DOMAIN, {<EOL>        auth: { redirect: false },<EOL>        languageDictionary: { title: '<STR_LIT>' },<EOL>    });<EOL>    const showLock = () => new Promise((resolve, reject) => {<EOL>        lock. on('<STR_LIT>', () => reject('<STR_LIT>'));<EOL>        lock.on('<STR_LIT>', (authResult) => {<EOL>            lock.getUserInfo(authResult.accessToken, (error, profile) => {<EOL>","gt":"if (!error) {"}
{"input":"<s> export function* loginRequestSaga() {<EOL>    const lock = new Auth0Lock(process.env.AUTH0_CLIENT_ID, process.env.AUTH0_DOMAIN, {<EOL>        auth: { redirect: false },<EOL>        languageDictionary: { title: '<STR_LIT>' },<EOL>    });<EOL>    const showLock = () => new Promise((resolve, reject) => {<EOL>        lock. on('<STR_LIT>', () => reject('<STR_LIT>'));<EOL>        lock.on('<STR_LIT>', (authResult) => {<EOL>            lock.getUserInfo(authResult.accessToken, (error, profile) => {<EOL>                 if (!error) {<EOL>                    lock.hide();<EOL>                    resolve({ profile, idToken: authResult.idToken });<EOL>                }<EOL>            });<EOL>        });<EOL>        lock.on('<STR_LIT>', (error) => {<EOL>            lock.","gt":"hide();"}
{"input":"<s> export function* loginRequestSaga() {<EOL>    const lock = new Auth0Lock(process.env.AUTH0_CLIENT_ID, process.env.AUTH0_DOMAIN, {<EOL>        auth: { redirect: false },<EOL>        languageDictionary: { title: '<STR_LIT>' },<EOL>    });<EOL>    const showLock = () => new Promise((resolve, reject) => {<EOL>        lock. on('<STR_LIT>', () => reject('<STR_LIT>'));<EOL>        lock.on('<STR_LIT>', (authResult) => {<EOL>            lock.getUserInfo(authResult.accessToken, (error, profile) => {<EOL>                 if (!error) {<EOL>                    lock.hide();<EOL>                    resolve({ profile, idToken: authResult.idToken });<EOL>                }<EOL>            });<EOL>        });<EOL>        lock.on('<STR_LIT>', (error) => {<EOL>            lock. hide();<EOL>            reject(error);<EOL>        });<EOL>        lock.show();<EOL>    });<EOL>    try {<EOL>        const { profile, idToken } =","gt":"yield call(showLock);"}
{"input":"<s> function reindexsearch(args) {<EOL>    if (args.length == <NUM_LIT>) {<EOL>        [\"<STR_LIT>\",","gt":"\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"].forEach(k => reindexone(k));"}
{"input":"<s> export function readdir(path, callback) {<EOL>    // Mac: uses NFD unicode form on disk, but we want NFC<EOL>    // See also https://github.com/nodejs/node/issues/2165<EOL>    if (platform.isMacintosh) {<EOL>        return fs.","gt":"readdir(path, (error, children) => {"}
{"input":"<s> export function hideDialog() {<EOL>    $('<STR_LIT>').modal(","gt":"\"<STR_LIT>\");"}
{"input":"<s> export function buffer(source, count, skip) {<EOL>    if (skip == null) {<EOL>","gt":"skip = count;"}
{"input":"<s> function foo(t) {<EOL>    return","gt":"t;"}
{"input":"<s> <EOL>export function reduceProto(accumulator, ...seed) {<EOL>    return","gt":"reduce(this, accumulator, ...seed);"}
{"input":"<s> function litepost(args) {<EOL>    var k = tdliteKey();<EOL>    var","gt":"dat = args[<NUM_LIT>] ? eval(\"<STR_LIT>\" + args[<NUM_LIT>] + \"<STR_LIT>\") : {};"}
{"input":"<s> <EOL>export function mergeAllProto() {<EOL>    return","gt":"mergeAll(this);"}
{"input":"<s> <EOL>export function getBooleanLiteral(node) {<EOL>    if (!isJsxAttribute(node)) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const initializer = node == null ? null : node.initializer;<EOL>    const getBooleanFromString = (value) => {<EOL>        if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return","gt":"true;"}
{"input":"<s> <EOL>export function getBooleanLiteral(node) {<EOL>    if (!isJsxAttribute(node)) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const initializer = node == null ? null : node.initializer;<EOL>    const getBooleanFromString = (value) => {<EOL>        if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return  true;<EOL>        }<EOL>        else if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return false;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function getBooleanLiteral(node) {<EOL>    if (!isJsxAttribute(node)) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const initializer = node == null ? null : node.initializer;<EOL>    const getBooleanFromString = (value) => {<EOL>        if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return  true;<EOL>        }<EOL>        else if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return false;<EOL>        }<EOL>         else {<EOL>            return undefined;<EOL>        }<EOL>    };<EOL>    if (isStringLiteral(initializer)) {<EOL>        return getBooleanFromString(initializer.text);<EOL>    }<EOL>    else if (isJsxExpression(initializer)) {<EOL>        const expression = initializer.","gt":"expression;"}
{"input":"<s> <EOL>export function getBooleanLiteral(node) {<EOL>    if (!isJsxAttribute(node)) {<EOL>        throw new Error('<STR_LIT>');<EOL>    }<EOL>    const initializer = node == null ? null : node.initializer;<EOL>    const getBooleanFromString = (value) => {<EOL>        if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return  true;<EOL>        }<EOL>        else if (value.toLowerCase() === '<STR_LIT>') {<EOL>            return false;<EOL>        }<EOL>         else {<EOL>            return undefined;<EOL>        }<EOL>    };<EOL>    if (isStringLiteral(initializer)) {<EOL>        return getBooleanFromString(initializer.text);<EOL>    }<EOL>    else if (isJsxExpression(initializer)) {<EOL>        const expression = initializer. expression;<EOL>        if (isStringLiteral(expression)) {<EOL>            return getBooleanFromString(expression.text);<EOL>        }<EOL>        else {<EOL>            if (isTrueKeyword(expression)) {<EOL>                return true;<EOL>            }<EOL>            else if (isFalseKeyword(","gt":"expression)) {"}
{"input":"<s> function testFunDecl() {<EOL>    msg(\"<STR_LIT>\");<EOL>    let x = <NUM_LIT>;<EOL>    sum = <NUM_LIT>;<EOL>","gt":"function addX() {"}
{"input":"<s> function testFunDecl() {<EOL>    msg(\"<STR_LIT>\");<EOL>    let x = <NUM_LIT>;<EOL>    sum = <NUM_LIT>;<EOL>     function addX() {<EOL>        sum = sum + x;<EOL>    }<EOL>","gt":"function add10() {"}
{"input":"<s> function testFunDecl() {<EOL>    msg(\"<STR_LIT>\");<EOL>    let x = <NUM_LIT>;<EOL>    sum = <NUM_LIT>;<EOL>     function addX() {<EOL>        sum = sum + x;<EOL>    }<EOL>     function add10() {<EOL>        sum = sum + <NUM_LIT>;<EOL>    }<EOL>    runTwice(addX);<EOL>    assert(sum == <NUM_LIT>, \"<STR_LIT>\");<EOL>","gt":"msg(\"<STR_LIT>\");"}
{"input":"<s> function testFunDecl() {<EOL>    msg(\"<STR_LIT>\");<EOL>    let x = <NUM_LIT>;<EOL>    sum = <NUM_LIT>;<EOL>     function addX() {<EOL>        sum = sum + x;<EOL>    }<EOL>     function add10() {<EOL>        sum = sum + <NUM_LIT>;<EOL>    }<EOL>    runTwice(addX);<EOL>    assert(sum == <NUM_LIT>, \"<STR_LIT>\");<EOL>     msg(\"<STR_LIT>\");<EOL>    runTwice(add10);<EOL>    msg(\"<STR_LIT>\");<EOL>    assert(sum == <NUM_LIT>, \"<STR_LIT>\");<EOL>    runTwice(","gt":"add7);"}
{"input":"<s> export function uploadFiles(ctx, stagingFolder, containerId, containerRoot, filePaths) {<EOL>    _ctx = ctx;<EOL>    _ensureTracing(_ctx, '<STR_LIT>');<EOL>    _stagingFolder = stagingFolder;<EOL>    _containerId =","gt":"containerId;"}
{"input":"<s> export function uploadFiles(ctx, stagingFolder, containerId, containerRoot, filePaths) {<EOL>    _ctx = ctx;<EOL>    _ensureTracing(_ctx, '<STR_LIT>');<EOL>    _stagingFolder = stagingFolder;<EOL>    _containerId =  containerId;<EOL>    _containerRoot = containerRoot;<EOL>    _ensureTemp(ctx.workingDirectory);<EOL>    return _uploadFiles(filePaths)<EOL>        .","gt":"then(() => {"}
{"input":"<s> export function createAsyncCommand(executionContext, command) {<EOL>","gt":"return new ArtifactAssociateCommand(executionContext, command);"}
{"input":"<s> function isLineBreak(ch) {<EOL>    return ch === CharacterCodes.","gt":"lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;"}
{"input":"<s> <EOL>function getImageSizeFromFile(file) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const isDataUrl = file.match(/^data:.+?;base64,/);<EOL>        if (isDataUrl) {<EOL>            // NB should use sync version of `sizeOf()` for buffers<EOL>            try {<EOL>                const data = Buffer.from(file.slice(isDataUrl[<NUM_LIT>].length), '<STR_LIT>');<EOL>                return resolve(sizeForFileName('<STR_LIT>',","gt":"sizeOf(data)));"}
{"input":"<s> export function detectBufferEncoding(buffer, length = buffer.length) {<EOL>    if (length < <NUM_LIT>) {<EOL>        return \"<STR_LIT>\";<EOL>    }<EOL>    switch (","gt":"buffer[<NUM_LIT>]) {"}
{"input":"<s> export function detectBufferEncoding(buffer, length = buffer.length) {<EOL>    if (length < <NUM_LIT>) {<EOL>        return \"<STR_LIT>\";<EOL>    }<EOL>    switch ( buffer[<NUM_LIT>]) {<EOL>        case <NUM_LIT>:<EOL>            if (buffer[<NUM_LIT>] === <NUM_LIT> && length >= <NUM_LIT> && buffer[<NUM_LIT>] === <NUM_LIT>) {<EOL>                return","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function detectBufferEncoding(buffer, length = buffer.length) {<EOL>    if (length < <NUM_LIT>) {<EOL>        return \"<STR_LIT>\";<EOL>    }<EOL>    switch ( buffer[<NUM_LIT>]) {<EOL>        case <NUM_LIT>:<EOL>            if (buffer[<NUM_LIT>] === <NUM_LIT> && length >= <NUM_LIT> && buffer[<NUM_LIT>] === <NUM_LIT>) {<EOL>                return  \"<STR_LIT>\";<EOL>            }<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            if (buffer[","gt":"<NUM_LIT>] === <NUM_LIT>) {"}
{"input":"<s> export function detectBufferEncoding(buffer, length = buffer.length) {<EOL>    if (length < <NUM_LIT>) {<EOL>        return \"<STR_LIT>\";<EOL>    }<EOL>    switch ( buffer[<NUM_LIT>]) {<EOL>        case <NUM_LIT>:<EOL>            if (buffer[<NUM_LIT>] === <NUM_LIT> && length >= <NUM_LIT> && buffer[<NUM_LIT>] === <NUM_LIT>) {<EOL>                return  \"<STR_LIT>\";<EOL>            }<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            if (buffer[ <NUM_LIT>] === <NUM_LIT>) {<EOL>                return \"<STR_LIT>\";<EOL>            }<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>","gt":"if (buffer[<NUM_LIT>] === <NUM_LIT>) {"}
{"input":"<s> function saveGlobalAction() {<EOL>    let s = \"<STR_LIT>\" + \"<STR_LIT>\";<EOL>","gt":"tot = \"<STR_LIT>\";"}
{"input":"<s> function x() {<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> // Calls fs.writeFile() followed by a fs.sync() call to flush the changes to disk<EOL>// We do this in cases where we want to make sure the data is really on disk and<EOL>// not in some cache.<EOL>//<EOL>// See https://github.com/nodejs/node/blob/v5.10.0/lib/fs.js#L1194<EOL>function doWriteFileAndFlush(path, data, options, callback) {<EOL>    if (options.encoding) {<EOL>        data = encode(data, options.encoding.charset, { addBOM: options.encoding.addBOM });<EOL>    }<EOL>    if (!canFlush) {<EOL>        return fs.writeFile(path, data, { mode: options.mode, flag: options.flag }, callback);<EOL>    }<EOL>    // Open the file with same flags and mode as fs.writeFile()<EOL>    fs.open(path, options.flag, options.mode, (openError, fd) => {<EOL>","gt":"if (openError) {"}
{"input":"<s> // Calls fs.writeFile() followed by a fs.sync() call to flush the changes to disk<EOL>// We do this in cases where we want to make sure the data is really on disk and<EOL>// not in some cache.<EOL>//<EOL>// See https://github.com/nodejs/node/blob/v5.10.0/lib/fs.js#L1194<EOL>function doWriteFileAndFlush(path, data, options, callback) {<EOL>    if (options.encoding) {<EOL>        data = encode(data, options.encoding.charset, { addBOM: options.encoding.addBOM });<EOL>    }<EOL>    if (!canFlush) {<EOL>        return fs.writeFile(path, data, { mode: options.mode, flag: options.flag }, callback);<EOL>    }<EOL>    // Open the file with same flags and mode as fs.writeFile()<EOL>    fs.open(path, options.flag, options.mode, (openError, fd) => {<EOL>         if (openError) {<EOL>            return callback(openError);<EOL>        }<EOL>        // It is valid to pass a fd handle to fs.writeFile() and this will keep the handle open!<EOL>        fs.writeFile(fd, data, writeError => {<EOL>            if (writeError) {<EOL>                return fs.","gt":"close(fd, () => callback(writeError));"}
{"input":"<s> // Calls fs.writeFile() followed by a fs.sync() call to flush the changes to disk<EOL>// We do this in cases where we want to make sure the data is really on disk and<EOL>// not in some cache.<EOL>//<EOL>// See https://github.com/nodejs/node/blob/v5.10.0/lib/fs.js#L1194<EOL>function doWriteFileAndFlush(path, data, options, callback) {<EOL>    if (options.encoding) {<EOL>        data = encode(data, options.encoding.charset, { addBOM: options.encoding.addBOM });<EOL>    }<EOL>    if (!canFlush) {<EOL>        return fs.writeFile(path, data, { mode: options.mode, flag: options.flag }, callback);<EOL>    }<EOL>    // Open the file with same flags and mode as fs.writeFile()<EOL>    fs.open(path, options.flag, options.mode, (openError, fd) => {<EOL>         if (openError) {<EOL>            return callback(openError);<EOL>        }<EOL>        // It is valid to pass a fd handle to fs.writeFile() and this will keep the handle open!<EOL>        fs.writeFile(fd, data, writeError => {<EOL>            if (writeError) {<EOL>                return fs. close(fd, () => callback(writeError)); // still need to close the handle on error!<EOL>            }<EOL>            // Flush contents (not metadata) of the file to disk<EOL>            fs.fdatasync(fd, (syncError) => {<EOL>                // In some exotic setups it is well possible that node fails to sync<EOL>                // In that case we disable flushing and warn to the console<EOL>                if (syncError) {<EOL>                    console.warn('<STR_LIT>',","gt":"syncError);"}
{"input":"<s> function isLineBreak(ch) {<EOL>    return ch === CharacterCodes.lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator ||","gt":"ch === CharacterCodes.paragraphSeparator;"}
{"input":"<s> // @declaration: true<EOL>function f(a, []) {<EOL>","gt":"var x, y, z;"}
{"input":"<s> <EOL>export function first(predicate, resultSelector, defaultValue) {<EOL>    return higherOrder(","gt":"predicate, resultSelector, defaultValue)(this);"}
{"input":"<s> async function uploadDirectory(container, uploadedDirPath, dirPath, log, filter) {<EOL>    let files = await readdir(dirPath);<EOL>    if (filter) {<EOL>","gt":"files = files.filter(filter);"}
{"input":"<s> export function groupJoin(inner, outerSelector, innerSelector, resultSelector) {<EOL>","gt":"return function groupJoinOperatorFunction(outer) {"}
{"input":"<s> // Repro from #13872<EOL>function fun(item) {<EOL>    const strings = [];<EOL>    for (const key in item) {<EOL>        const","gt":"value = item[key];"}
{"input":"<s> <EOL>function getImplicitRoleForDatalist() {<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> export function realpath(path, callback) {<EOL>    return fs.realpath(path, (error, realpath) => {<EOL>        if (!error) {<EOL>            return callback(null, realpath);<EOL>        }<EOL>        // We hit an error calling fs.realpath(). Since fs.realpath() is doing some path normalization<EOL>        // we now do a similar normalization and then try again if we can access the path with read<EOL>        // permissions at least. If that succeeds, we return that path.<EOL>        // fs.realpath() is resolving symlinks and that can fail in certain cases. The workaround is<EOL>        // to not resolve links but to simply see if the path is read accessible or not.<EOL>        const normalizedPath = normalizePath(path);<EOL>        return","gt":"fs.access(normalizedPath, fs.constants.R_OK, error => {"}
{"input":"<s> export async function sleep(seconds) {<EOL>","gt":"return new Promise(resolve => setTimeout(resolve, seconds * <NUM_LIT>));"}
{"input":"<s> <EOL>export function getElementTransform(elem) {<EOL>    const style = window.getComputedStyle(elem, null);<EOL>    const transform = style.getPropertyValue(\"<STR_LIT>\") ||<EOL>        style.","gt":"getPropertyValue(\"<STR_LIT>\") ||"}
{"input":"<s> function isSuccess(result) {<EOL>","gt":"return !isFailure(result);"}
{"input":"<s> function isFailure(result) {<EOL>","gt":"return result === FAILURE;"}
{"input":"<s> export function removeProperty(text, path, formattingOptions) {<EOL>    return setProperty(text, path, void <NUM_LIT>,","gt":"formattingOptions);"}
{"input":"<s> function isJsDoc(sourceText, kind, range) {<EOL>    return kind === ts.SyntaxKind.MultiLineCommentTrivia && sourceText[range.pos + <NUM_LIT>] ===","gt":"\"<STR_LIT>\" && sourceText[range.pos + <NUM_LIT>] !== \"<STR_LIT>\";"}
{"input":"<s> export function help() {<EOL>","gt":"return `<STR_LIT>`"}
{"input":"<s> function isTrue(value) {<EOL>    return value === '<STR_LIT>' || value ===","gt":"'<STR_LIT>';"}
{"input":"<s> export function fromNodeStream(stream, size) {<EOL>","gt":"return new ReadableStreamAsyncIterable(stream, size);"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile } = ctx;<EOL>    visitStatements(sourceFile.statements);<EOL>    return ts.forEachChild(sourceFile, function cb(node) {<EOL>        switch (node.kind) {<EOL>","gt":"case ts.SyntaxKind.ModuleBlock:"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile } = ctx;<EOL>    visitStatements(sourceFile.statements);<EOL>    return ts.forEachChild(sourceFile, function cb(node) {<EOL>        switch (node.kind) {<EOL>             case ts.SyntaxKind.ModuleBlock:<EOL>                visitStatements(node.statements);<EOL>                break;<EOL>            case ts.SyntaxKind.","gt":"InterfaceDeclaration:"}
{"input":"<s> function isExpressionNaN(node) {<EOL>    return node.kind === ts.SyntaxKind.Identifier && node.text ===","gt":"\"<STR_LIT>\";"}
{"input":"<s> <EOL>export function _case(selector, sources, defaultSource = empty()) {<EOL>    return defer(() => {<EOL>        const","gt":"key = selector();"}
{"input":"<s> function walk(ctx) {<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (isBinaryExpression(node)) {<EOL>            if ((node.operatorToken.kind === ts.SyntaxKind.EqualsEqualsToken ||<EOL>","gt":"node.operatorToken.kind === ts.SyntaxKind.ExclamationEqualsToken) &&"}
{"input":"<s> <EOL>function getConstantBoolean(type, predicate) {<EOL>    let anyTrue = false;<EOL>    let anyFalse = false;<EOL>    for (const ty of unionParts(type)) {<EOL>        if (predicate(ty)) {<EOL>","gt":"anyTrue = true;"}
{"input":"<s> <EOL>function getConstantBoolean(type, predicate) {<EOL>    let anyTrue = false;<EOL>    let anyFalse = false;<EOL>    for (const ty of unionParts(type)) {<EOL>        if (predicate(ty)) {<EOL>             anyTrue = true;<EOL>        }<EOL>        else {<EOL>            anyFalse = true;<EOL>        }<EOL>        if (anyTrue && anyFalse) {<EOL>            return","gt":"undefined;"}
{"input":"<s> function isFunctionLiteral(node) {<EOL>    if (node === undefined) {<EOL>        return false;<EOL>    }<EOL>","gt":"switch (node.kind) {"}
{"input":"<s> function isFunctionLiteral(node) {<EOL>    if (node === undefined) {<EOL>        return false;<EOL>    }<EOL>     switch (node.kind) {<EOL>        case ts.SyntaxKind.ArrowFunction:<EOL>        case ts.SyntaxKind.FunctionExpression:<EOL>            return true;<EOL>","gt":"default:"}
{"input":"<s> function walk(ctx) {<EOL>    const { options: { never } } = ctx;<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (utils.isInterfaceDeclaration(node)) {<EOL>            const { name } = node;<EOL>            if (never && hasPrefixI(","gt":"name.text)) {"}
{"input":"<s> function walk(ctx) {<EOL>    const { options: { never } } = ctx;<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (utils.isInterfaceDeclaration(node)) {<EOL>            const { name } = node;<EOL>            if (never && hasPrefixI( name.text)) {<EOL>                ctx.addFailureAtNode(name, Rule.FAILURE_STRING_NO_PREFIX);<EOL>            }<EOL>            else if (!never && name.text[<NUM_LIT>] !== \"<STR_LIT>\") {<EOL>                ctx.addFailureAtNode(name, Rule.","gt":"FAILURE_STRING);"}
{"input":"<s> function walk(ctx) {<EOL>    const { options: { never } } = ctx;<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (utils.isInterfaceDeclaration(node)) {<EOL>            const { name } = node;<EOL>            if (never && hasPrefixI( name.text)) {<EOL>                ctx.addFailureAtNode(name, Rule.FAILURE_STRING_NO_PREFIX);<EOL>            }<EOL>            else if (!never && name.text[<NUM_LIT>] !== \"<STR_LIT>\") {<EOL>                ctx.addFailureAtNode(name, Rule. FAILURE_STRING);<EOL>            }<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function assertNever(x) {<EOL>","gt":"throw new Error(\"<STR_LIT>\");"}
{"input":"<s> <EOL>export function moveLogsWithErrors(dest, { infos, errors }, mapper) {<EOL>    moveLogs(dest.info, infos,","gt":"mapper);"}
{"input":"<s> function isPossiblyVoidExpression(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.AwaitExpression:<EOL>        case","gt":"ts.SyntaxKind.CallExpression:"}
{"input":"<s> function f13(x) {<EOL>    if (x === Choice.Yes) {<EOL>","gt":"x;"}
{"input":"<s> function walk(ctx) {<EOL>    walkWorker(ctx, ctx.","gt":"sourceFile.statements, new Set());"}
{"input":"<s> <EOL>export function rtrim(haystack, needle) {<EOL>    if (!haystack || !needle) {<EOL>        return haystack;<EOL>    }<EOL>    let needleLen = needle.length, haystackLen = haystack.length;<EOL>    if (needleLen === <NUM_LIT> || haystackLen === <NUM_LIT>) {<EOL>","gt":"return haystack;"}
{"input":"<s> <EOL>export function rtrim(haystack, needle) {<EOL>    if (!haystack || !needle) {<EOL>        return haystack;<EOL>    }<EOL>    let needleLen = needle.length, haystackLen = haystack.length;<EOL>    if (needleLen === <NUM_LIT> || haystackLen === <NUM_LIT>) {<EOL>         return haystack;<EOL>    }<EOL>    let offset = haystackLen, idx = -<NUM_LIT>;<EOL>    while (true) {<EOL>        idx = haystack.lastIndexOf(needle, offset - <NUM_LIT>);<EOL>        if (idx === -<NUM_LIT> || idx + needleLen !==","gt":"offset) {"}
{"input":"<s> <EOL>export function rtrim(haystack, needle) {<EOL>    if (!haystack || !needle) {<EOL>        return haystack;<EOL>    }<EOL>    let needleLen = needle.length, haystackLen = haystack.length;<EOL>    if (needleLen === <NUM_LIT> || haystackLen === <NUM_LIT>) {<EOL>         return haystack;<EOL>    }<EOL>    let offset = haystackLen, idx = -<NUM_LIT>;<EOL>    while (true) {<EOL>        idx = haystack.lastIndexOf(needle, offset - <NUM_LIT>);<EOL>        if (idx === -<NUM_LIT> || idx + needleLen !==  offset) {<EOL>            break;<EOL>        }<EOL>        if (idx === <NUM_LIT>) {<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> <EOL>export function ltrim(haystack, needle) {<EOL>    if (!haystack || !needle) {<EOL>        return haystack;<EOL>    }<EOL>","gt":"let needleLen = needle.length;"}
{"input":"<s> <EOL>export function ltrim(haystack, needle) {<EOL>    if (!haystack || !needle) {<EOL>        return haystack;<EOL>    }<EOL>     let needleLen = needle.length;<EOL>    if (needleLen === <NUM_LIT> || haystack.length === <NUM_LIT>) {<EOL>        return haystack;<EOL>    }<EOL>    let offset = <NUM_LIT>, idx = -<NUM_LIT>;<EOL>    while ((idx = haystack.indexOf(needle, offset)) === offset) {<EOL>","gt":"offset = offset + needleLen;"}
{"input":"<s> <EOL>export function countProto(fn) {<EOL>","gt":"return count(this, fn);"}
{"input":"<s> <EOL>export function zipAll(project) {<EOL>","gt":"return higherOrder(project)(this);"}
{"input":"<s> async function newExpression16() {<EOL>    new (await","gt":"x[a])(y, z);"}
{"input":"<s> function fillOptions(value) {<EOL>    return {<EOL>        arrays: value,<EOL>","gt":"exports: value,"}
{"input":"<s> function walk(ctx) {<EOL>    const { sourceFile, options: { multiline } } = ctx;<EOL>    return ts.forEachChild(sourceFile, function cb(node) {<EOL>        if (utils.isArrowFunction(node) && utils.isBlock(node.body)) {<EOL>            const expr = getSimpleReturnExpression(node.","gt":"body);"}
{"input":"<s> async function newExpression18() {<EOL>    new x[await a](","gt":"y, z);"}
{"input":"<s> <EOL>export function concatStatic(...args) {<EOL>    return","gt":"new ConcatIterable(args);"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync(","gt":"path.join(\"<STR_LIT>\", \"<STR_LIT>\")))"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(","gt":""}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(","gt":"f => fs.statSync(f))"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return","gt":"Promise.resolve();"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join(","gt":"\"<STR_LIT>\", \"<STR_LIT>\"));"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile.","gt":"toString(\"<STR_LIT>\") + \"<STR_LIT>\";"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>","gt":"let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>","gt":"return Promise.resolve();"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>             return Promise.resolve();<EOL>        return nodeutil.spawnAsync({<EOL>            cmd: \"<STR_LIT>\",<EOL>            args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>        });<EOL>    }).then(() => {<EOL>        // run postcss with autoprefixer and rtlcss<EOL>        pxt.debug(\"<STR_LIT>\");<EOL>        const","gt":"postcss = require('<STR_LIT>');"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>             return Promise.resolve();<EOL>        return nodeutil.spawnAsync({<EOL>            cmd: \"<STR_LIT>\",<EOL>            args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>        });<EOL>    }).then(() => {<EOL>        // run postcss with autoprefixer and rtlcss<EOL>        pxt.debug(\"<STR_LIT>\");<EOL>        const  postcss = require('<STR_LIT>');<EOL>        const browserList = [<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>","gt":"\"<STR_LIT>\","}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>             return Promise.resolve();<EOL>        return nodeutil.spawnAsync({<EOL>            cmd: \"<STR_LIT>\",<EOL>            args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>        });<EOL>    }).then(() => {<EOL>        // run postcss with autoprefixer and rtlcss<EOL>        pxt.debug(\"<STR_LIT>\");<EOL>        const  postcss = require('<STR_LIT>');<EOL>        const browserList = [<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>             \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\"<EOL>        ];<EOL>        const cssnano = require('<STR_LIT>')({<EOL>            zindex: false,<EOL>            autoprefixer: { browsers: browserList,","gt":"add: true }"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>             return Promise.resolve();<EOL>        return nodeutil.spawnAsync({<EOL>            cmd: \"<STR_LIT>\",<EOL>            args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>        });<EOL>    }).then(() => {<EOL>        // run postcss with autoprefixer and rtlcss<EOL>        pxt.debug(\"<STR_LIT>\");<EOL>        const  postcss = require('<STR_LIT>');<EOL>        const browserList = [<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>             \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\"<EOL>        ];<EOL>        const cssnano = require('<STR_LIT>')({<EOL>            zindex: false,<EOL>            autoprefixer: { browsers: browserList,  add: true }<EOL>        });<EOL>        const rtlcss = require('<STR_LIT>');<EOL>        const files = ['<STR_LIT>', '<STR_LIT>'];<EOL>        files.forEach(cssFile => {<EOL>            fs.readFile(`<STR_LIT>`, \"<STR_LIT>\", (err, css) => {<EOL>                postcss([cssnano])<EOL>                    .process(css, { from: `<STR_LIT>`, to: `<STR_LIT>` }).then((","gt":"result) => {"}
{"input":"<s> function buildSemanticUIAsync(parsed) {<EOL>    const forceRedbuild = parsed && parsed.flags[\"<STR_LIT>\"] || false;<EOL>    if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")) ||<EOL>        !fs.existsSync( path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>        return Promise.resolve();<EOL>    let dirty = !fs.existsSync(\"<STR_LIT>\");<EOL>    if (!dirty) {<EOL>        const csstime = fs.statSync(\"<STR_LIT>\").mtime;<EOL>        dirty = nodeutil.allFiles(\"<STR_LIT>\")<EOL>            .map(  f => fs.statSync(f))<EOL>            .some(stat => stat.mtime > csstime);<EOL>    }<EOL>    if (!dirty && !forceRedbuild)<EOL>        return  Promise.resolve();<EOL>    nodeutil.mkdirP(path.join( \"<STR_LIT>\", \"<STR_LIT>\"));<EOL>    return nodeutil.spawnAsync({<EOL>        cmd: \"<STR_LIT>\",<EOL>        args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>    }).then(() => {<EOL>        const fontFile = fs.readFileSync(\"<STR_LIT>\");<EOL>        const url = \"<STR_LIT>\"<EOL>            + fontFile. toString(\"<STR_LIT>\") + \"<STR_LIT>\";<EOL>         let semCss = fs.readFileSync('<STR_LIT>', \"<STR_LIT>\");<EOL>        semCss = semCss.replace('<STR_LIT>', \"<STR_LIT>\")<EOL>            .replace(/src:.*url\\(\"fonts\\/icons\\.woff.*/g, \"<STR_LIT>\" + url + \"<STR_LIT>\");<EOL>        fs.writeFileSync('<STR_LIT>', semCss);<EOL>    }).then(() => {<EOL>        // generate blockly css<EOL>        if (!fs.existsSync(path.join(\"<STR_LIT>\", \"<STR_LIT>\")))<EOL>             return Promise.resolve();<EOL>        return nodeutil.spawnAsync({<EOL>            cmd: \"<STR_LIT>\",<EOL>            args: [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"]<EOL>        });<EOL>    }).then(() => {<EOL>        // run postcss with autoprefixer and rtlcss<EOL>        pxt.debug(\"<STR_LIT>\");<EOL>        const  postcss = require('<STR_LIT>');<EOL>        const browserList = [<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>             \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\",<EOL>            \"<STR_LIT>\"<EOL>        ];<EOL>        const cssnano = require('<STR_LIT>')({<EOL>            zindex: false,<EOL>            autoprefixer: { browsers: browserList,  add: true }<EOL>        });<EOL>        const rtlcss = require('<STR_LIT>');<EOL>        const files = ['<STR_LIT>', '<STR_LIT>'];<EOL>        files.forEach(cssFile => {<EOL>            fs.readFile(`<STR_LIT>`, \"<STR_LIT>\", (err, css) => {<EOL>                postcss([cssnano])<EOL>                    .process(css, { from: `<STR_LIT>`, to: `<STR_LIT>` }).then(( result) => {<EOL>                    fs.writeFile(`<STR_LIT>`, result.css, (err2) => {<EOL>                        // process rtl css<EOL>","gt":"postcss([rtlcss])"}
{"input":"<s> function testLambdasWithMoreParams() {<EOL>    function a(f) {<EOL>        f(","gt":"<NUM_LIT>, \"<STR_LIT>\" + \"<STR_LIT>\", <NUM_LIT>);"}
{"input":"<s> function f13(x) {<EOL>    if (x === Choice.Yes) {<EOL>","gt":"x;"}
{"input":"<s> export function getFailureString(propName, expectedType, permittedValues) {<EOL>    switch (expectedType) {<EOL>        case '<STR_LIT>':<EOL>            return `<STR_LIT>`;<EOL>        case '<STR_LIT>':<EOL>            return","gt":"} must be a single token from the following: ${permittedValues}.`<STR_LIT>;"}
{"input":"<s> export function getFailureString(propName, expectedType, permittedValues) {<EOL>    switch (expectedType) {<EOL>        case '<STR_LIT>':<EOL>            return `<STR_LIT>`;<EOL>        case '<STR_LIT>':<EOL>            return `<STR_LIT>`;<EOL>        case '<STR_LIT>':<EOL>            return `<STR_LIT>`;<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function isNodeAny(node, checker) {<EOL>    let symbol = checker.getSymbolAtLocation(node);<EOL>    if (symbol !== undefined && isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)) {<EOL>        symbol = checker.getAliasedSymbol(symbol);<EOL>    }<EOL>    if (","gt":"symbol !== undefined) {"}
{"input":"<s> function isNodeAny(node, checker) {<EOL>    let symbol = checker.getSymbolAtLocation(node);<EOL>    if (symbol !== undefined && isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)) {<EOL>        symbol = checker.getAliasedSymbol(symbol);<EOL>    }<EOL>    if ( symbol !== undefined) {<EOL>        // NamespaceModule is a type-only namespace without runtime value, its type is 'any' when used as 'ns.Type' -> avoid error<EOL>        if (isSymbolFlagSet(symbol, ts.SymbolFlags.NamespaceModule)) {<EOL>            return false;<EOL>        }<EOL>        if (isSymbolFlagSet(symbol, ts.SymbolFlags.Type)) {<EOL>            return isAny(","gt":"checker.getDeclaredTypeOfSymbol(symbol));"}
{"input":"<s> function walk(ctx, tc) {<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (isIdentifier(node)) {<EOL>            if (!isDeclaration(node)) {<EOL>                const deprecation = getDeprecation(node,","gt":"tc);"}
{"input":"<s> function walk(ctx, tc) {<EOL>    return ts.forEachChild(ctx.sourceFile, function cb(node) {<EOL>        if (isIdentifier(node)) {<EOL>            if (!isDeclaration(node)) {<EOL>                const deprecation = getDeprecation(node,  tc);<EOL>                if (deprecation !== undefined) {<EOL>                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING(node.text, deprecation));<EOL>                }<EOL>            }<EOL>        }<EOL>        else {<EOL>","gt":"switch (node.kind) {"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return","gt":"null;"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return  null;<EOL>    }<EOL>    let { imports, pkg } = parseFilePrelude(vscode.window.activeTextEditor.document.getText());<EOL>    let multis = imports.filter(x => x.kind === '<STR_LIT>');<EOL>    if (multis.","gt":"length > <NUM_LIT>) {"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return  null;<EOL>    }<EOL>    let { imports, pkg } = parseFilePrelude(vscode.window.activeTextEditor.document.getText());<EOL>    let multis = imports.filter(x => x.kind === '<STR_LIT>');<EOL>    if (multis. length > <NUM_LIT>) {<EOL>        // There is a multiple import declaration, add to the last one<EOL>        const lastImportSection = multis[multis.length - <NUM_LIT>];<EOL>        if (lastImportSection.end === -<NUM_LIT>) {<EOL>            // For some reason there was an empty import section like `import ()`<EOL>            return [vscode.TextEdit.insert(new vscode.Position(lastImportSection.start + <NUM_LIT>, <NUM_LIT>),","gt":"arg}\"<STR_LIT>;"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return  null;<EOL>    }<EOL>    let { imports, pkg } = parseFilePrelude(vscode.window.activeTextEditor.document.getText());<EOL>    let multis = imports.filter(x => x.kind === '<STR_LIT>');<EOL>    if (multis. length > <NUM_LIT>) {<EOL>        // There is a multiple import declaration, add to the last one<EOL>        const lastImportSection = multis[multis.length - <NUM_LIT>];<EOL>        if (lastImportSection.end === -<NUM_LIT>) {<EOL>            // For some reason there was an empty import section like `import ()`<EOL>            return [vscode.TextEdit.insert(new vscode.Position(lastImportSection.start + <NUM_LIT>, <NUM_LIT>), `<STR_LIT>`)];<EOL>        }<EOL>        // Add import at the start of the block so that goimports/goreturns can order them correctly<EOL>        return [vscode.TextEdit.insert(new vscode.Position(","gt":"lastImportSection.start + <NUM_LIT>, <NUM_LIT>), '<STR_LIT>' + arg + '<STR_LIT>')];"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return  null;<EOL>    }<EOL>    let { imports, pkg } = parseFilePrelude(vscode.window.activeTextEditor.document.getText());<EOL>    let multis = imports.filter(x => x.kind === '<STR_LIT>');<EOL>    if (multis. length > <NUM_LIT>) {<EOL>        // There is a multiple import declaration, add to the last one<EOL>        const lastImportSection = multis[multis.length - <NUM_LIT>];<EOL>        if (lastImportSection.end === -<NUM_LIT>) {<EOL>            // For some reason there was an empty import section like `import ()`<EOL>            return [vscode.TextEdit.insert(new vscode.Position(lastImportSection.start + <NUM_LIT>, <NUM_LIT>), `<STR_LIT>`)];<EOL>        }<EOL>        // Add import at the start of the block so that goimports/goreturns can order them correctly<EOL>        return [vscode.TextEdit.insert(new vscode.Position( lastImportSection.start + <NUM_LIT>, <NUM_LIT>), '<STR_LIT>' + arg + '<STR_LIT>')];<EOL>    }<EOL>    else if (imports.length > <NUM_LIT>) {<EOL>        // There are some number of single line imports, which can just be collapsed into a block import.<EOL>        const edits = [];<EOL>        edits.push(vscode.TextEdit.insert(new vscode.Position(imports[<NUM_LIT>].start, <NUM_LIT>), '<STR_LIT>' + arg +","gt":"'<STR_LIT>'));"}
{"input":"<s> export function getTextEditForAddImport(arg) {<EOL>    // Import name wasn't provided<EOL>    if (arg === undefined) {<EOL>        return  null;<EOL>    }<EOL>    let { imports, pkg } = parseFilePrelude(vscode.window.activeTextEditor.document.getText());<EOL>    let multis = imports.filter(x => x.kind === '<STR_LIT>');<EOL>    if (multis. length > <NUM_LIT>) {<EOL>        // There is a multiple import declaration, add to the last one<EOL>        const lastImportSection = multis[multis.length - <NUM_LIT>];<EOL>        if (lastImportSection.end === -<NUM_LIT>) {<EOL>            // For some reason there was an empty import section like `import ()`<EOL>            return [vscode.TextEdit.insert(new vscode.Position(lastImportSection.start + <NUM_LIT>, <NUM_LIT>), `<STR_LIT>`)];<EOL>        }<EOL>        // Add import at the start of the block so that goimports/goreturns can order them correctly<EOL>        return [vscode.TextEdit.insert(new vscode.Position( lastImportSection.start + <NUM_LIT>, <NUM_LIT>), '<STR_LIT>' + arg + '<STR_LIT>')];<EOL>    }<EOL>    else if (imports.length > <NUM_LIT>) {<EOL>        // There are some number of single line imports, which can just be collapsed into a block import.<EOL>        const edits = [];<EOL>        edits.push(vscode.TextEdit.insert(new vscode.Position(imports[<NUM_LIT>].start, <NUM_LIT>), '<STR_LIT>' + arg +  '<STR_LIT>'));<EOL>        imports.forEach(element => {<EOL>            const currentLine = vscode.window.activeTextEditor.document.lineAt(element.start).text;<EOL>            const updatedLine = currentLine.replace(/^\\s*import\\s*/, '<STR_LIT>');<EOL>            edits.push(vscode.TextEdit.replace(new vscode.Range(element.start, <NUM_LIT>, element.start, currentLine.length), updatedLine));<EOL>        });<EOL>        edits.push(vscode.TextEdit.insert(new vscode.Position(imports[imports.length - <NUM_LIT>].end + <NUM_LIT>, <NUM_LIT>), '<STR_LIT>'));<EOL>        return","gt":"edits;"}
{"input":"<s> <EOL><EOL>export function switchMap(project, resultSelector) {<EOL>    return higherOrderSwitchMap(","gt":"project, resultSelector)(this);"}
{"input":"<s> export function endWith(source, ...args) {<EOL>    return","gt":"new EndWithAsyncIterable(source, args);"}
{"input":"<s> export function equalsIgnoreCase(a, b) {<EOL>    const len1 = a ? a.length : <NUM_LIT>;<EOL>    const len2 = b ?","gt":"b.length : <NUM_LIT>;"}
{"input":"<s> function everyCase({ expression, elseStatement }, test) {<EOL>    if (!everyCondition(expression, test)) {<EOL>","gt":"return false;"}
{"input":"<s> function isSimple(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.PropertyAccessExpression:<EOL>            return isSimple(node.expression);<EOL>        case ts.SyntaxKind.PrefixUnaryExpression:<EOL>","gt":"switch (node.operator) {"}
{"input":"<s> function isSimple(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.PropertyAccessExpression:<EOL>            return isSimple(node.expression);<EOL>        case ts.SyntaxKind.PrefixUnaryExpression:<EOL>             switch (node.operator) {<EOL>                case ts.SyntaxKind.PlusPlusToken:<EOL>                case ts.SyntaxKind.MinusMinusToken:<EOL>                    return","gt":"false;"}
{"input":"<s> function isSimple(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.PropertyAccessExpression:<EOL>            return isSimple(node.expression);<EOL>        case ts.SyntaxKind.PrefixUnaryExpression:<EOL>             switch (node.operator) {<EOL>                case ts.SyntaxKind.PlusPlusToken:<EOL>                case ts.SyntaxKind.MinusMinusToken:<EOL>                    return  false;<EOL>                default:<EOL>                    return isSimple(node.operand);<EOL>            }<EOL>        case ts.SyntaxKind.Identifier:<EOL>","gt":"case ts.SyntaxKind.NumericLiteral:"}
{"input":"<s> function isSimple(node) {<EOL>    switch (node.kind) {<EOL>        case ts.SyntaxKind.PropertyAccessExpression:<EOL>            return isSimple(node.expression);<EOL>        case ts.SyntaxKind.PrefixUnaryExpression:<EOL>             switch (node.operator) {<EOL>                case ts.SyntaxKind.PlusPlusToken:<EOL>                case ts.SyntaxKind.MinusMinusToken:<EOL>                    return  false;<EOL>                default:<EOL>                    return isSimple(node.operand);<EOL>            }<EOL>        case ts.SyntaxKind.Identifier:<EOL>         case ts.SyntaxKind.NumericLiteral:<EOL>        case ts.SyntaxKind.StringLiteral:<EOL>        case ts.SyntaxKind.ThisKeyword:<EOL>        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:<EOL>        case ts.SyntaxKind.TrueKeyword:<EOL>        case","gt":"ts.SyntaxKind.FalseKeyword:"}
{"input":"<s> function substrEquals(a, aStart, aEnd, b, bStart, bEnd) {<EOL>    while (aStart < aEnd && bStart < bEnd) {<EOL>        if (a[aStart] !== b[bStart]) {<EOL>","gt":"return false;"}
{"input":"<s> function f10(x) {<EOL>    switch (x) {<EOL>        case true: return","gt":"\"<STR_LIT>\";"}
{"input":"<s> export async function find(source, predicate, thisArg) {<EOL>    const fn = bindCallback(predicate, thisArg, <NUM_LIT>);<EOL>    let i = <NUM_LIT>;<EOL>    for","gt":"await (let item of source) {"}
{"input":"<s> function newFunction(t1, t2) {<EOL>","gt":"t1.toString();"}
{"input":"<s> <EOL>export function finalize(callback) {<EOL>    return (source) =>","gt":"source.lift(new FinallyOperator(callback));"}
{"input":"<s> export function safeBtoa(str) {<EOL>    return btoa(encodeURIComponent(","gt":"str));"}
{"input":"<s> function f1() {<EOL>    var a;<EOL>","gt":"var a;"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>","gt":"if (!path.isAbsolute(gogetdoc)) {"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let","gt":"p;"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>","gt":"killProcess(p));"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>  killProcess(p));<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        let gogetdocFlagsWithoutTags = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', document.fileName + '<STR_LIT>' +","gt":"offset.toString()];"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>  killProcess(p));<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        let gogetdocFlagsWithoutTags = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', document.fileName + '<STR_LIT>' +  offset.toString()];<EOL>        let buildTags = vscode.workspace.getConfiguration('<STR_LIT>', document.uri)['<STR_LIT>'];<EOL>        let gogetdocFlags = (buildTags && useTags) ? [...gogetdocFlagsWithoutTags, '<STR_LIT>', buildTags] : gogetdocFlagsWithoutTags;<EOL>        p = cp.execFile(gogetdoc, gogetdocFlags, { env }, (err, stdout, stderr) => {<EOL>            try {<EOL>                if (err && err.code === '<STR_LIT>') {<EOL>                    return reject(","gt":"missingToolMsg + '<STR_LIT>');"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>  killProcess(p));<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        let gogetdocFlagsWithoutTags = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', document.fileName + '<STR_LIT>' +  offset.toString()];<EOL>        let buildTags = vscode.workspace.getConfiguration('<STR_LIT>', document.uri)['<STR_LIT>'];<EOL>        let gogetdocFlags = (buildTags && useTags) ? [...gogetdocFlagsWithoutTags, '<STR_LIT>', buildTags] : gogetdocFlagsWithoutTags;<EOL>        p = cp.execFile(gogetdoc, gogetdocFlags, { env }, (err, stdout, stderr) => {<EOL>            try {<EOL>                if (err && err.code === '<STR_LIT>') {<EOL>                    return reject( missingToolMsg + '<STR_LIT>');<EOL>                }<EOL>                if (stderr && stderr.startsWith('<STR_LIT>')) {<EOL>                    p = null;<EOL>                    return definitionLocation_gogetdoc(document, position, offset, env, false, token);<EOL>                }<EOL>                if (err) {<EOL>                    return reject(err.message || stderr);<EOL>                }<EOL>                ;<EOL>                let goGetDocOutput = JSON.parse(stdout.toString());<EOL>                let match = /(.*):(\\d+):(\\d+)/.exec(goGetDocOutput.pos);<EOL>","gt":"let definitionInfo = {"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>  killProcess(p));<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        let gogetdocFlagsWithoutTags = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', document.fileName + '<STR_LIT>' +  offset.toString()];<EOL>        let buildTags = vscode.workspace.getConfiguration('<STR_LIT>', document.uri)['<STR_LIT>'];<EOL>        let gogetdocFlags = (buildTags && useTags) ? [...gogetdocFlagsWithoutTags, '<STR_LIT>', buildTags] : gogetdocFlagsWithoutTags;<EOL>        p = cp.execFile(gogetdoc, gogetdocFlags, { env }, (err, stdout, stderr) => {<EOL>            try {<EOL>                if (err && err.code === '<STR_LIT>') {<EOL>                    return reject( missingToolMsg + '<STR_LIT>');<EOL>                }<EOL>                if (stderr && stderr.startsWith('<STR_LIT>')) {<EOL>                    p = null;<EOL>                    return definitionLocation_gogetdoc(document, position, offset, env, false, token);<EOL>                }<EOL>                if (err) {<EOL>                    return reject(err.message || stderr);<EOL>                }<EOL>                ;<EOL>                let goGetDocOutput = JSON.parse(stdout.toString());<EOL>                let match = /(.*):(\\d+):(\\d+)/.exec(goGetDocOutput.pos);<EOL>                 let definitionInfo = {<EOL>                    file: null,<EOL>                    line: <NUM_LIT>,<EOL>                    column: <NUM_LIT>,<EOL>                    toolUsed: '<STR_LIT>',<EOL>                    declarationlines: goGetDocOutput.decl.split('<STR_LIT>'),<EOL>                    doc: goGetDocOutput.doc,<EOL>                    name: goGetDocOutput.name<EOL>                };<EOL>                if (!match) {<EOL>                    return resolve(","gt":"definitionInfo);"}
{"input":"<s> function definitionLocation_gogetdoc(document, position, offset, env, useTags, token) {<EOL>    let gogetdoc = getBinPath('<STR_LIT>');<EOL>     if (!path.isAbsolute(gogetdoc)) {<EOL>        return Promise.reject(missingToolMsg + '<STR_LIT>');<EOL>    }<EOL>    let  p;<EOL>    if (token) {<EOL>        token.onCancellationRequested(() =>  killProcess(p));<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        let gogetdocFlagsWithoutTags = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', document.fileName + '<STR_LIT>' +  offset.toString()];<EOL>        let buildTags = vscode.workspace.getConfiguration('<STR_LIT>', document.uri)['<STR_LIT>'];<EOL>        let gogetdocFlags = (buildTags && useTags) ? [...gogetdocFlagsWithoutTags, '<STR_LIT>', buildTags] : gogetdocFlagsWithoutTags;<EOL>        p = cp.execFile(gogetdoc, gogetdocFlags, { env }, (err, stdout, stderr) => {<EOL>            try {<EOL>                if (err && err.code === '<STR_LIT>') {<EOL>                    return reject( missingToolMsg + '<STR_LIT>');<EOL>                }<EOL>                if (stderr && stderr.startsWith('<STR_LIT>')) {<EOL>                    p = null;<EOL>                    return definitionLocation_gogetdoc(document, position, offset, env, false, token);<EOL>                }<EOL>                if (err) {<EOL>                    return reject(err.message || stderr);<EOL>                }<EOL>                ;<EOL>                let goGetDocOutput = JSON.parse(stdout.toString());<EOL>                let match = /(.*):(\\d+):(\\d+)/.exec(goGetDocOutput.pos);<EOL>                 let definitionInfo = {<EOL>                    file: null,<EOL>                    line: <NUM_LIT>,<EOL>                    column: <NUM_LIT>,<EOL>                    toolUsed: '<STR_LIT>',<EOL>                    declarationlines: goGetDocOutput.decl.split('<STR_LIT>'),<EOL>                    doc: goGetDocOutput.doc,<EOL>                    name: goGetDocOutput.name<EOL>                };<EOL>                if (!match) {<EOL>                    return resolve( definitionInfo);<EOL>                }<EOL>                let [_, file, line, col] = match;<EOL>                definitionInfo.file = match[<NUM_LIT>];<EOL>                definitionInfo.line = +match[<NUM_LIT>] - <NUM_LIT>;<EOL>","gt":"definitionInfo.column = +match[<NUM_LIT>] - <NUM_LIT>;"}
{"input":"<s> function validateAllFilters(prototype, attributes) {<EOL>    for (const attributeMetadata","gt":"of collectUniqueMetadatas(attributes)) {"}
{"input":"<s> async function terminalCommandExecutor(terminal, commandId, commandArguments) {<EOL>","gt":"const scriptCommands = getScriptCommands(terminal, commandId);"}
{"input":"<s> <EOL>export function emitResizeEvent(el) {<EOL>    const","gt":"event = new CustomEvent(EVENT_RESIZE, { bubbles: true });"}
{"input":"<s> function f5(b) {<EOL>    var z1 = g(","gt":"true);"}
{"input":"<s> function subscribe(component, path) {<EOL>    let e = lookup(path);<EOL>    let lst = e.","gt":"components;"}
{"input":"<s> function readDefaultUserShellFromEtcPasswd(userName) {<EOL>    let shell = \"<STR_LIT>\";<EOL>    const passwdDb = readPasswd(\"<STR_LIT>\");<EOL>    const userRecords =","gt":"passwdDb.filter(row => row.username === userName);"}
{"input":"<s> <EOL>export function Filter(...targets) {<EOL>    return function (proto, methodName, descriptor) {<EOL>        // Register this method as being an attribute observer.<EOL>        if (!proto.constructor.hasOwnProperty(ATTRIBUTES_REGISTRATION_KEY)) {<EOL>            proto.constructor[ATTRIBUTES_REGISTRATION_KEY] = new Map();<EOL>        }<EOL>        const attributes = proto.constructor[ATTRIBUTES_REGISTRATION_KEY];<EOL>        for (const target of targets) {<EOL>            if (!attributes.has(target)) {<EOL>                const metadata = {","gt":"name: target, attributeName: null, dataType: '<STR_LIT>', directSetter: null, filterRegistrations: [] };"}
{"input":"<s> <EOL>export function Filter(...targets) {<EOL>    return function (proto, methodName, descriptor) {<EOL>        // Register this method as being an attribute observer.<EOL>        if (!proto.constructor.hasOwnProperty(ATTRIBUTES_REGISTRATION_KEY)) {<EOL>            proto.constructor[ATTRIBUTES_REGISTRATION_KEY] = new Map();<EOL>        }<EOL>        const attributes = proto.constructor[ATTRIBUTES_REGISTRATION_KEY];<EOL>        for (const target of targets) {<EOL>            if (!attributes.has(target)) {<EOL>                const metadata = {  name: target, attributeName: null, dataType: '<STR_LIT>', directSetter: null, filterRegistrations: [] };<EOL>                attributes.set(target, metadata);<EOL>            }<EOL>            const metadata = attributes.get(target);<EOL>            metadata.filterRegistrations.push({","gt":"name: methodName, method: proto[methodName] });"}
{"input":"<s> // ==ORIGINAL==<EOL>function f() {<EOL>     let","gt":"x;"}
{"input":"<s> <EOL>export default function log(target, key, descriptor) {<EOL>    const originalMethod = descriptor.value;<EOL>    descriptor.value = function (...args) {<EOL>        var formatArgs = args.map(repr).join(\"<STR_LIT>\");<EOL>        if (\"<STR_LIT>\" in this) {<EOL>            const logger = this._log;<EOL>","gt":"logger.debug(`<STR_LIT>`);"}
{"input":"<s> <EOL>export default function log(target, key, descriptor) {<EOL>    const originalMethod = descriptor.value;<EOL>    descriptor.value = function (...args) {<EOL>        var formatArgs = args.map(repr).join(\"<STR_LIT>\");<EOL>        if (\"<STR_LIT>\" in this) {<EOL>            const logger = this._log;<EOL>             logger.debug(`<STR_LIT>`);<EOL>            var result = originalMethod.apply(this, args);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export default function log(target, key, descriptor) {<EOL>    const originalMethod = descriptor.value;<EOL>    descriptor.value = function (...args) {<EOL>        var formatArgs = args.map(repr).join(\"<STR_LIT>\");<EOL>        if (\"<STR_LIT>\" in this) {<EOL>            const logger = this._log;<EOL>             logger.debug(`<STR_LIT>`);<EOL>            var result = originalMethod.apply(this, args);<EOL>            logger.debug(`<STR_LIT>`);<EOL>        }<EOL>         else {<EOL>            console.log(`<STR_LIT>`);<EOL>            var result = originalMethod.apply(this, args);<EOL>            console.","gt":"log(`<STR_LIT>`);"}
{"input":"<s> // Random binary data.<EOL>export function testRandom(test) {<EOL>    const result = MimeTypeDetector.detect(null, readTestFile(\"<STR_LIT>\"));<EOL>    test.","gt":"notEqual(result, null);"}
{"input":"<s> export function testFilter2StringAttributeViaJS(test) {<EOL>    filterStringTest((sc) => {<EOL>        sc.shortString =","gt":"\"<STR_LIT>\";"}
{"input":"<s> function someNumberTest(guts) {<EOL>    const sc = document.createElement(\"<STR_LIT>\");<EOL>    document.body.appendChild(sc);<EOL>","gt":"try {"}
{"input":"<s> <EOL>export function pixelLengthToInt(length) {<EOL>    if (typeof length === \"<STR_LIT>\") {<EOL>        const lengthStr = length.indexOf(\"<STR_LIT>\") !== -<NUM_LIT> ? length.substr(<NUM_LIT>, length.length - <NUM_LIT>) : length;<EOL>        return","gt":"parseInt(lengthStr, <NUM_LIT>);"}
{"input":"<s> function handleWriteBulkFile(msg) {<EOL>    bulkFileStorage.","gt":"write(msg.identifier, msg.data);"}
{"input":"<s> <EOL>export function to2DigitHex(value) {<EOL>    const","gt":"h = value.toString(<NUM_LIT>);"}
{"input":"<s> function uploadBundledTranslationsAsync(crowdinDir, branch, prj, key) {<EOL>    const todo = [];<EOL>    pxt.appTarget.bundleddirs.forEach(dir => {<EOL>        const locdir = path.join(dir, \"<STR_LIT>\");<EOL>        if (fs.","gt":"existsSync(locdir))"}
{"input":"<s> function uploadBundledTranslationsAsync(crowdinDir, branch, prj, key) {<EOL>    const todo = [];<EOL>    pxt.appTarget.bundleddirs.forEach(dir => {<EOL>        const locdir = path.join(dir, \"<STR_LIT>\");<EOL>        if (fs. existsSync(locdir))<EOL>            fs.readdirSync(locdir)<EOL>                .filter(f => /strings\\.json$/i.test(f))<EOL>                .forEach(f => todo.push(path.","gt":"join(locdir, f)));"}
{"input":"<s> function uploadBundledTranslationsAsync(crowdinDir, branch, prj, key) {<EOL>    const todo = [];<EOL>    pxt.appTarget.bundleddirs.forEach(dir => {<EOL>        const locdir = path.join(dir, \"<STR_LIT>\");<EOL>        if (fs. existsSync(locdir))<EOL>            fs.readdirSync(locdir)<EOL>                .filter(f => /strings\\.json$/i.test(f))<EOL>                .forEach(f => todo.push(path. join(locdir, f)));<EOL>    });<EOL>    pxt.log(`<STR_LIT>`);<EOL>    const nextFileAsync = () => {<EOL>        const","gt":"f = todo.pop();"}
{"input":"<s> function uploadBundledTranslationsAsync(crowdinDir, branch, prj, key) {<EOL>    const todo = [];<EOL>    pxt.appTarget.bundleddirs.forEach(dir => {<EOL>        const locdir = path.join(dir, \"<STR_LIT>\");<EOL>        if (fs. existsSync(locdir))<EOL>            fs.readdirSync(locdir)<EOL>                .filter(f => /strings\\.json$/i.test(f))<EOL>                .forEach(f => todo.push(path. join(locdir, f)));<EOL>    });<EOL>    pxt.log(`<STR_LIT>`);<EOL>    const nextFileAsync = () => {<EOL>        const  f = todo.pop();<EOL>        if (!f)<EOL>            return Promise.resolve();<EOL>        const data = JSON.parse(fs.readFileSync(f, '<STR_LIT>'));<EOL>        const crowdf = path.join(crowdinDir, path.basename(f));<EOL>","gt":"pxt.log(`<STR_LIT>`);"}
{"input":"<s> function aggregateBasenameMatches(parsedPatterns, result) {<EOL>    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);<EOL>    if (basenamePatterns.length < <NUM_LIT>) {<EOL>        return parsedPatterns;<EOL>    }<EOL>    const basenames = basenamePatterns.","gt":"reduce((all, current) => all.concat(current.basenames), []);"}
{"input":"<s> function aggregateBasenameMatches(parsedPatterns, result) {<EOL>    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);<EOL>    if (basenamePatterns.length < <NUM_LIT>) {<EOL>        return parsedPatterns;<EOL>    }<EOL>    const basenames = basenamePatterns. reduce((all, current) => all.concat(current.basenames), []);<EOL>    let patterns;<EOL>    if (","gt":"result) {"}
{"input":"<s> function aggregateBasenameMatches(parsedPatterns, result) {<EOL>    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);<EOL>    if (basenamePatterns.length < <NUM_LIT>) {<EOL>        return parsedPatterns;<EOL>    }<EOL>    const basenames = basenamePatterns. reduce((all, current) => all.concat(current.basenames), []);<EOL>    let patterns;<EOL>    if ( result) {<EOL>        patterns = [];<EOL>        for (let i = <NUM_LIT>, n = basenames.length; i < n; i++) {<EOL>            patterns.push(result);<EOL>        }<EOL>    }<EOL>    else {<EOL>        patterns = basenamePatterns.reduce((all, current) => all.concat(current.patterns), []);<EOL>    }<EOL>    const aggregate = function (","gt":"path, basename) {"}
{"input":"<s> function aggregateBasenameMatches(parsedPatterns, result) {<EOL>    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);<EOL>    if (basenamePatterns.length < <NUM_LIT>) {<EOL>        return parsedPatterns;<EOL>    }<EOL>    const basenames = basenamePatterns. reduce((all, current) => all.concat(current.basenames), []);<EOL>    let patterns;<EOL>    if ( result) {<EOL>        patterns = [];<EOL>        for (let i = <NUM_LIT>, n = basenames.length; i < n; i++) {<EOL>            patterns.push(result);<EOL>        }<EOL>    }<EOL>    else {<EOL>        patterns = basenamePatterns.reduce((all, current) => all.concat(current.patterns), []);<EOL>    }<EOL>    const aggregate = function ( path, basename) {<EOL>        if (!path) {<EOL>            return null;<EOL>        }<EOL>        if (!basename) {<EOL>            let","gt":"i;"}
{"input":"<s> function aggregateBasenameMatches(parsedPatterns, result) {<EOL>    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);<EOL>    if (basenamePatterns.length < <NUM_LIT>) {<EOL>        return parsedPatterns;<EOL>    }<EOL>    const basenames = basenamePatterns. reduce((all, current) => all.concat(current.basenames), []);<EOL>    let patterns;<EOL>    if ( result) {<EOL>        patterns = [];<EOL>        for (let i = <NUM_LIT>, n = basenames.length; i < n; i++) {<EOL>            patterns.push(result);<EOL>        }<EOL>    }<EOL>    else {<EOL>        patterns = basenamePatterns.reduce((all, current) => all.concat(current.patterns), []);<EOL>    }<EOL>    const aggregate = function ( path, basename) {<EOL>        if (!path) {<EOL>            return null;<EOL>        }<EOL>        if (!basename) {<EOL>            let  i;<EOL>            for (i = path.length; i > <NUM_LIT>; i--) {<EOL>                const ch = path.charCodeAt(i - <NUM_LIT>);<EOL>                if (ch === CharCode.Slash || ch === CharCode.Backslash) {<EOL>                    break;<EOL>                }<EOL>            }<EOL>            basename = path.substr(","gt":"i);"}
{"input":"<s> function parseExpressionPattern(pattern, value, options) {<EOL>    if (value === false) {<EOL>        return NULL; // pattern is disabled<EOL>    }<EOL>    const parsedPattern = parsePattern(pattern,","gt":"options);"}
{"input":"<s> function parseExpressionPattern(pattern, value, options) {<EOL>    if (value === false) {<EOL>        return NULL; // pattern is disabled<EOL>    }<EOL>    const parsedPattern = parsePattern(pattern,  options);<EOL>    if (parsedPattern === NULL) {<EOL>","gt":"return NULL;"}
{"input":"<s> function parseExpressionPattern(pattern, value, options) {<EOL>    if (value === false) {<EOL>        return NULL; // pattern is disabled<EOL>    }<EOL>    const parsedPattern = parsePattern(pattern,  options);<EOL>    if (parsedPattern === NULL) {<EOL>         return NULL;<EOL>    }<EOL>    // Expression Pattern is <boolean><EOL>    if (typeof value === '<STR_LIT>') {<EOL>        return parsedPattern;<EOL>    }<EOL>    // Expression Pattern is <SiblingClause><EOL>","gt":"if (value) {"}
{"input":"<s> function parseExpressionPattern(pattern, value, options) {<EOL>    if (value === false) {<EOL>        return NULL; // pattern is disabled<EOL>    }<EOL>    const parsedPattern = parsePattern(pattern,  options);<EOL>    if (parsedPattern === NULL) {<EOL>         return NULL;<EOL>    }<EOL>    // Expression Pattern is <boolean><EOL>    if (typeof value === '<STR_LIT>') {<EOL>        return parsedPattern;<EOL>    }<EOL>    // Expression Pattern is <SiblingClause><EOL>     if (value) {<EOL>        const when = value.when;<EOL>        if (typeof when === '<STR_LIT>') {<EOL>            const siblingsPatternToMatchingPattern = (siblingsPattern) => {<EOL>                let clausePattern = when.replace('<STR_LIT>', siblingsPattern.name);<EOL>                if (siblingsPattern.","gt":"siblings.indexOf(clausePattern) !== -<NUM_LIT>) {"}
{"input":"<s> function parseExpressionPattern(pattern, value, options) {<EOL>    if (value === false) {<EOL>        return NULL; // pattern is disabled<EOL>    }<EOL>    const parsedPattern = parsePattern(pattern,  options);<EOL>    if (parsedPattern === NULL) {<EOL>         return NULL;<EOL>    }<EOL>    // Expression Pattern is <boolean><EOL>    if (typeof value === '<STR_LIT>') {<EOL>        return parsedPattern;<EOL>    }<EOL>    // Expression Pattern is <SiblingClause><EOL>     if (value) {<EOL>        const when = value.when;<EOL>        if (typeof when === '<STR_LIT>') {<EOL>            const siblingsPatternToMatchingPattern = (siblingsPattern) => {<EOL>                let clausePattern = when.replace('<STR_LIT>', siblingsPattern.name);<EOL>                if (siblingsPattern. siblings.indexOf(clausePattern) !== -<NUM_LIT>) {<EOL>                    return pattern;<EOL>                }<EOL>                else {<EOL>                    return null; // pattern does not match in the end because the when clause is not satisfied<EOL>                }<EOL>            };<EOL>            const result = (path, basename, siblingsPatternFn) => {<EOL>                if (!parsedPattern(path, basename)) {<EOL>                    return null;<EOL>                }<EOL>                const siblingsPattern = siblingsPatternFn();<EOL>                if (!siblingsPattern) {<EOL>                    return null; // pattern is malformed or we don't have siblings<EOL>                }<EOL>                return TPromise.is(siblingsPattern) ?<EOL>                    siblingsPattern.then(siblingsPatternToMatchingPattern) :<EOL>                    siblingsPatternToMatchingPattern(","gt":"siblingsPattern);"}
{"input":"<s> //@target: ES6<EOL>function* g() {<EOL>","gt":"return;"}
{"input":"<s> <EOL>export function loadKeyBindingsFromObject(obj, platform) {<EOL>    return new","gt":"KeyBindingContexts(obj, platform);"}
{"input":"<s> export function runAsync() {<EOL>    return buildCoreAsync({","gt":"mode: BuildOption.Run })"}
{"input":"<s> function saveToCloudAsync(h) {<EOL>","gt":"return Promise.resolve();"}
{"input":"<s> export function writeBulkFile(identifier, data) {<EOL>","gt":"const msg = { type: Messages.MessageType.BULK_FILE_WRITE, identifier, data };"}
{"input":"<s> function fetchTextAsync(filename) {<EOL>    if (filename == \"<STR_LIT>\" || !filename)<EOL>        return nodeutil.readResAsync(process.stdin);<EOL>    if (isScriptId(","gt":"filename))"}
{"input":"<s> function fetchTextAsync(filename) {<EOL>    if (filename == \"<STR_LIT>\" || !filename)<EOL>        return nodeutil.readResAsync(process.stdin);<EOL>    if (isScriptId( filename))<EOL>        filename = Cloud.apiRoot + filename + \"<STR_LIT>\";<EOL>    let m = /^(https:\\/\\/[^\\/]+\\/)([^\\/]+)$/.exec(filename);<EOL>    let fn2 =","gt":"\"<STR_LIT>\";"}
{"input":"<s> function fetchTextAsync(filename) {<EOL>    if (filename == \"<STR_LIT>\" || !filename)<EOL>        return nodeutil.readResAsync(process.stdin);<EOL>    if (isScriptId( filename))<EOL>        filename = Cloud.apiRoot + filename + \"<STR_LIT>\";<EOL>    let m = /^(https:\\/\\/[^\\/]+\\/)([^\\/]+)$/.exec(filename);<EOL>    let fn2 =  \"<STR_LIT>\";<EOL>    if (m) {<EOL>        let id = m[<NUM_LIT>];<EOL>        if (/^api\\//.test(id))<EOL>            id = id.slice(","gt":"<NUM_LIT>);"}
{"input":"<s> function fetchTextAsync(filename) {<EOL>    if (filename == \"<STR_LIT>\" || !filename)<EOL>        return nodeutil.readResAsync(process.stdin);<EOL>    if (isScriptId( filename))<EOL>        filename = Cloud.apiRoot + filename + \"<STR_LIT>\";<EOL>    let m = /^(https:\\/\\/[^\\/]+\\/)([^\\/]+)$/.exec(filename);<EOL>    let fn2 =  \"<STR_LIT>\";<EOL>    if (m) {<EOL>        let id = m[<NUM_LIT>];<EOL>        if (/^api\\//.test(id))<EOL>            id = id.slice( <NUM_LIT>);<EOL>        if (isScriptId(id)) {<EOL>            fn2 = m[<NUM_LIT>] + \"<STR_LIT>\" + id + \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    if (/^https?:/.test(filename)) {<EOL>        pxt.log(`<STR_LIT>`);<EOL>        if (/\\.json$/i.","gt":"test(filename))"}
{"input":"<s> function fetchTextAsync(filename) {<EOL>    if (filename == \"<STR_LIT>\" || !filename)<EOL>        return nodeutil.readResAsync(process.stdin);<EOL>    if (isScriptId( filename))<EOL>        filename = Cloud.apiRoot + filename + \"<STR_LIT>\";<EOL>    let m = /^(https:\\/\\/[^\\/]+\\/)([^\\/]+)$/.exec(filename);<EOL>    let fn2 =  \"<STR_LIT>\";<EOL>    if (m) {<EOL>        let id = m[<NUM_LIT>];<EOL>        if (/^api\\//.test(id))<EOL>            id = id.slice( <NUM_LIT>);<EOL>        if (isScriptId(id)) {<EOL>            fn2 = m[<NUM_LIT>] + \"<STR_LIT>\" + id + \"<STR_LIT>\";<EOL>        }<EOL>    }<EOL>    if (/^https?:/.test(filename)) {<EOL>        pxt.log(`<STR_LIT>`);<EOL>        if (/\\.json$/i. test(filename))<EOL>            pxt.log(`<STR_LIT>`);<EOL>        return U.requestAsync({ url: filename, allowHttpErrors: !!fn2 })<EOL>            .then(resp => {<EOL>            if (fn2 && (resp.statusCode != <NUM_LIT> || /html/.test(resp.headers[\"<STR_LIT>\"]))) {<EOL>                pxt.log(`<STR_LIT>`);<EOL>                return U.requestAsync({","gt":"url: fn2 });"}
{"input":"<s> function test8(a) {<EOL>    if (typeof a !== \"<STR_LIT>\" && typeof a === \"<STR_LIT>\") {<EOL>","gt":"a;"}
{"input":"<s> function Foo() {<EOL>","gt":"this.x = <NUM_LIT>;"}
{"input":"<s> <EOL>function getImplicitRoleForProgress() {<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> function ensureApisInfoAsync() {<EOL>    if (refreshApis || !cachedApis)<EOL>        return workerOpAsync(\"<STR_LIT>\", {})<EOL>            .then(apis => {<EOL>","gt":"refreshApis = false;"}
{"input":"<s> export function getParseErrorMessage(errorCode) {<EOL>    switch (errorCode) {<EOL>        case ParseErrorCode.InvalidSymbol: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.InvalidNumberFormat: return localize('<STR_LIT>', '<STR_LIT>');<EOL>","gt":"case ParseErrorCode.PropertyNameExpected: return localize('<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function getParseErrorMessage(errorCode) {<EOL>    switch (errorCode) {<EOL>        case ParseErrorCode.InvalidSymbol: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.InvalidNumberFormat: return localize('<STR_LIT>', '<STR_LIT>');<EOL>         case ParseErrorCode.PropertyNameExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.ValueExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.ColonExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.CommaExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.CloseBraceExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.CloseBracketExpected: return localize('<STR_LIT>', '<STR_LIT>');<EOL>        case ParseErrorCode.EndOfFileExpected: return localize(","gt":"'<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> // @target: es5<EOL>function foo() {<EOL>","gt":"var obj = {"}
{"input":"<s> // ==SCOPE::Extract to function in global scope==<EOL>function f() {<EOL>    let a = <NUM_LIT>;<EOL>    let","gt":"x;"}
{"input":"<s> <EOL>function getImplicitRoleForTextarea() {<EOL>","gt":"return '<STR_LIT>';"}
{"input":"<s> export function compareByPrefix(one, other, lookFor) {<EOL>    let elementAName = one.toLowerCase();<EOL>    let elementBName = other.toLowerCase();<EOL>    // Sort prefix matches over non prefix matches<EOL>    let elementAPrefixMatch = strings.startsWith(elementAName, lookFor);<EOL>    let elementBPrefixMatch = strings.startsWith(elementBName, lookFor);<EOL>    if (elementAPrefixMatch !==","gt":"elementBPrefixMatch) {"}
{"input":"<s> export function compareByPrefix(one, other, lookFor) {<EOL>    let elementAName = one.toLowerCase();<EOL>    let elementBName = other.toLowerCase();<EOL>    // Sort prefix matches over non prefix matches<EOL>    let elementAPrefixMatch = strings.startsWith(elementAName, lookFor);<EOL>    let elementBPrefixMatch = strings.startsWith(elementBName, lookFor);<EOL>    if (elementAPrefixMatch !==  elementBPrefixMatch) {<EOL>        return elementAPrefixMatch ? -<NUM_LIT> : <NUM_LIT>;<EOL>    }<EOL>    // Same prefix: Sort shorter matches to the top to have those on top that match more precisely<EOL>","gt":"else if (elementAPrefixMatch && elementBPrefixMatch) {"}
{"input":"<s> export function compareByPrefix(one, other, lookFor) {<EOL>    let elementAName = one.toLowerCase();<EOL>    let elementBName = other.toLowerCase();<EOL>    // Sort prefix matches over non prefix matches<EOL>    let elementAPrefixMatch = strings.startsWith(elementAName, lookFor);<EOL>    let elementBPrefixMatch = strings.startsWith(elementBName, lookFor);<EOL>    if (elementAPrefixMatch !==  elementBPrefixMatch) {<EOL>        return elementAPrefixMatch ? -<NUM_LIT> : <NUM_LIT>;<EOL>    }<EOL>    // Same prefix: Sort shorter matches to the top to have those on top that match more precisely<EOL>     else if (elementAPrefixMatch && elementBPrefixMatch) {<EOL>        if (elementAName.length < elementBName.length) {<EOL>            return -<NUM_LIT>;<EOL>        }<EOL>","gt":"if (elementAName.length > elementBName.length) {"}
{"input":"<s> export function dispose(first, ...rest) {<EOL>    if (Array.isArray(first)) {<EOL>        first.forEach(d => d && d.dispose());<EOL>        return [];<EOL>    }<EOL>","gt":"else if (rest.length === <NUM_LIT>) {"}
{"input":"<s> export function dispose(first, ...rest) {<EOL>    if (Array.isArray(first)) {<EOL>        first.forEach(d => d && d.dispose());<EOL>        return [];<EOL>    }<EOL>     else if (rest.length === <NUM_LIT>) {<EOL>        if (first) {<EOL>            first.dispose();<EOL>            return first;<EOL>        }<EOL>        return undefined;<EOL>    }<EOL>    else {<EOL>","gt":"dispose(first);"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter.","gt":"getPaneSizes();"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>","gt":"let edgePosition = <NUM_LIT>;"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>     let edgePosition = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < splitterNode.children.length; i++) {<EOL>        const size = sizes[i] + (i !== splitterNode.children.length - <NUM_LIT> ? dividerSize : <NUM_LIT>);<EOL>","gt":"let childBounds;"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>     let edgePosition = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < splitterNode.children.length; i++) {<EOL>        const size = sizes[i] + (i !== splitterNode.children.length - <NUM_LIT> ? dividerSize : <NUM_LIT>);<EOL>         let childBounds;<EOL>        if (splitterNode.orientation === SplitOrientation.VERTICAL) {<EOL>            childBounds = {<EOL>                top: bounds.top,<EOL>                bottom: bounds.","gt":"bottom,"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>     let edgePosition = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < splitterNode.children.length; i++) {<EOL>        const size = sizes[i] + (i !== splitterNode.children.length - <NUM_LIT> ? dividerSize : <NUM_LIT>);<EOL>         let childBounds;<EOL>        if (splitterNode.orientation === SplitOrientation.VERTICAL) {<EOL>            childBounds = {<EOL>                top: bounds.top,<EOL>                bottom: bounds. bottom,<EOL>                height: bounds.height,<EOL>                left: bounds.left + edgePosition,<EOL>                right: bounds.left + edgePosition + size,<EOL>                width: size,<EOL>","gt":"tabWidgetInfo: null"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>     let edgePosition = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < splitterNode.children.length; i++) {<EOL>        const size = sizes[i] + (i !== splitterNode.children.length - <NUM_LIT> ? dividerSize : <NUM_LIT>);<EOL>         let childBounds;<EOL>        if (splitterNode.orientation === SplitOrientation.VERTICAL) {<EOL>            childBounds = {<EOL>                top: bounds.top,<EOL>                bottom: bounds. bottom,<EOL>                height: bounds.height,<EOL>                left: bounds.left + edgePosition,<EOL>                right: bounds.left + edgePosition + size,<EOL>                width: size,<EOL>                 tabWidgetInfo: null<EOL>            };<EOL>        }<EOL>        else {<EOL>            childBounds = {<EOL>","gt":"left: bounds.left,"}
{"input":"<s> function getSplitterPanePositions(splitterNode, bounds) {<EOL>    let result = [];<EOL>    const splitter = splitterNode.splitter;<EOL>    const dividerSize = splitter.getDividerSize();<EOL>    const sizes = splitter. getPaneSizes();<EOL>     let edgePosition = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < splitterNode.children.length; i++) {<EOL>        const size = sizes[i] + (i !== splitterNode.children.length - <NUM_LIT> ? dividerSize : <NUM_LIT>);<EOL>         let childBounds;<EOL>        if (splitterNode.orientation === SplitOrientation.VERTICAL) {<EOL>            childBounds = {<EOL>                top: bounds.top,<EOL>                bottom: bounds. bottom,<EOL>                height: bounds.height,<EOL>                left: bounds.left + edgePosition,<EOL>                right: bounds.left + edgePosition + size,<EOL>                width: size,<EOL>                 tabWidgetInfo: null<EOL>            };<EOL>        }<EOL>        else {<EOL>            childBounds = {<EOL>                 left: bounds.left,<EOL>                right: bounds.right,<EOL>                width: bounds.width,<EOL>                top: bounds.top + edgePosition,<EOL>                bottom: bounds.top + edgePosition + size,<EOL>                height: size,<EOL>                tabWidgetInfo: null<EOL>            };<EOL>        }<EOL>","gt":"const childInfo = splitterNode.children[i];"}
{"input":"<s> export function mergeObjects(obj1, obj2) {<EOL>    if (!obj1) {<EOL>        obj1 = {};<EOL>    }<EOL>    if (!obj2) {<EOL>","gt":"obj2 = {};"}
{"input":"<s> export function mergeObjects(obj1, obj2) {<EOL>    if (!obj1) {<EOL>        obj1 = {};<EOL>    }<EOL>    if (!obj2) {<EOL>         obj2 = {};<EOL>    }<EOL>    var obj3 = {};<EOL>    for (let attrname in obj1) {<EOL>        obj3[attrname] = obj1[attrname];<EOL>    }<EOL>    for (let attrname in","gt":"obj2) {"}
{"input":"<s> function parsePrimaryExpression() {<EOL>    throw","gt":"\"<STR_LIT>\";"}
{"input":"<s> function foo(...stuff) {<EOL>    return","gt":"undefined;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let","gt":"availableNode;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,","gt":"<NUM_LIT>);"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===","gt":"cellIndex && n.tmpl === cell.tmpl);"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>","gt":"if (existingNode) {"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==","gt":"node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',","gt":"availableNode);"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',","gt":"availableNode);"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>","gt":"if (viewInsertIndex === null) {"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const","gt":"node = nodes[j];"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>","gt":"continue;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>","gt":"tmpl: cell.tmpl,"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>                 tmpl: cell.tmpl,<EOL>                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)<EOL>            };<EOL>            totalNodes = nodes.push(availableNode);<EOL>        }<EOL>        // assign who's the new cell index for this node<EOL>        availableNode.","gt":"cell ="}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>                 tmpl: cell.tmpl,<EOL>                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)<EOL>            };<EOL>            totalNodes = nodes.push(availableNode);<EOL>        }<EOL>        // assign who's the new cell index for this node<EOL>        availableNode. cell =","gt":"cellIndex;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>                 tmpl: cell.tmpl,<EOL>                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)<EOL>            };<EOL>            totalNodes = nodes.push(availableNode);<EOL>        }<EOL>        // assign who's the new cell index for this node<EOL>        availableNode. cell =  cellIndex;<EOL>        // apply the cell's data to this node<EOL>        var context = availableNode.view.context;<EOL>        context.$implicit = cell.data || records[cell.record];<EOL>        context.index =","gt":"cellIndex;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>                 tmpl: cell.tmpl,<EOL>                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)<EOL>            };<EOL>            totalNodes = nodes.push(availableNode);<EOL>        }<EOL>        // assign who's the new cell index for this node<EOL>        availableNode. cell =  cellIndex;<EOL>        // apply the cell's data to this node<EOL>        var context = availableNode.view.context;<EOL>        context.$implicit = cell.data || records[cell.record];<EOL>        context.index =  cellIndex;<EOL>        context.count = recordsLength;<EOL>        availableNode.","gt":"hasChanges = true;"}
{"input":"<s> <EOL>export function populateNodeData(startCellIndex, endCellIndex, scrollingDown, cells, records, nodes, viewContainer, itmTmp, hdrTmp, ftrTmp) {<EOL>    if (!records || records.length === <NUM_LIT>) {<EOL>        nodes.length =  <NUM_LIT>;<EOL>        viewContainer.clear();<EOL>        return true;<EOL>    }<EOL>    const recordsLength = records.length;<EOL>    let hasChanges = false;<EOL>    // let node: VirtualNode;<EOL>    let  availableNode;<EOL>    let cell;<EOL>    let viewInsertIndex = null;<EOL>    let totalNodes = nodes.length;<EOL>    let templateRef;<EOL>    startCellIndex = Math.max(startCellIndex,  <NUM_LIT>);<EOL>    endCellIndex = Math.min(endCellIndex, cells.length - <NUM_LIT>);<EOL>    const usedNodes = [];<EOL>    for (var cellIndex = startCellIndex; cellIndex <= endCellIndex; cellIndex++) {<EOL>        cell = cells[cellIndex];<EOL>        availableNode = null;<EOL>        // find the first one that's available<EOL>        const existingNode = nodes.find(n => n.cell ===  cellIndex && n.tmpl === cell.tmpl);<EOL>         if (existingNode) {<EOL>            if (existingNode.view.context.$implicit === records[cell.record]) {<EOL>                usedNodes.push(existingNode);<EOL>                continue; // optimization: node data is the same no need to update<EOL>            }<EOL>            console.debug('<STR_LIT>', '<STR_LIT>');<EOL>            availableNode = existingNode; // update existing node<EOL>        }<EOL>        else {<EOL>            console.debug('<STR_LIT>',  '<STR_LIT>');<EOL>            for (var i = <NUM_LIT>; i < totalNodes; i++) {<EOL>                const node = nodes[i];<EOL>                if (cell.tmpl !==  node.tmpl || i === <NUM_LIT> && cellIndex !== <NUM_LIT>) {<EOL>                    // the cell must use the correct template<EOL>                    // first node can only be used by the first cell (css :first-child reasons)<EOL>                    // this node is never available to be reused<EOL>                    continue;<EOL>                }<EOL>                if (node.cell < startCellIndex || node.cell > endCellIndex) {<EOL>                    if (!availableNode) {<EOL>                        // havent gotten an available node yet<EOL>                        availableNode = node;<EOL>                        console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                    }<EOL>                    else if (scrollingDown) {<EOL>                        // scrolling down<EOL>                        if (node.cell < availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>', availableNode);<EOL>                        }<EOL>                    }<EOL>                    else {<EOL>                        // scrolling up<EOL>                        if (node.cell > availableNode.cell) {<EOL>                            availableNode = node;<EOL>                            console.debug('<STR_LIT>', '<STR_LIT>',  availableNode);<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (!availableNode) {<EOL>            // did not find an available node to put the cell data into<EOL>            // insert a new node after existing ones<EOL>             if (viewInsertIndex === null) {<EOL>                viewInsertIndex = -<NUM_LIT>;<EOL>                for (var j = totalNodes - <NUM_LIT>; j >= <NUM_LIT>; j--) {<EOL>                    const  node = nodes[j];<EOL>                    if (node) {<EOL>                        viewInsertIndex = viewContainer.indexOf(node.view);<EOL>                        break;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // select which templateRef should be used for this cell<EOL>            templateRef = cell.tmpl === TemplateType.Header ? hdrTmp : cell.tmpl === TemplateType.Footer ? ftrTmp : itmTmp;<EOL>            if (!templateRef) {<EOL>                console.error(`<STR_LIT>`);<EOL>                 continue;<EOL>            }<EOL>            availableNode = {<EOL>                 tmpl: cell.tmpl,<EOL>                view: viewContainer.createEmbeddedView(templateRef, new VirtualContext(null, null, null), viewInsertIndex)<EOL>            };<EOL>            totalNodes = nodes.push(availableNode);<EOL>        }<EOL>        // assign who's the new cell index for this node<EOL>        availableNode. cell =  cellIndex;<EOL>        // apply the cell's data to this node<EOL>        var context = availableNode.view.context;<EOL>        context.$implicit = cell.data || records[cell.record];<EOL>        context.index =  cellIndex;<EOL>        context.count = recordsLength;<EOL>        availableNode. hasChanges = true;<EOL>        availableNode.lastTransform = null;<EOL>        hasChanges =","gt":"true;"}
{"input":"<s> // Substring<EOL>export function matchesSubString(word, wordToMatchAgainst) {<EOL>    return _matchesSubString(word.toLowerCase(),","gt":"wordToMatchAgainst.toLowerCase(), <NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> function sambaCmd(ch, addr, len) {<EOL>    let r = ch + addr.toString(<NUM_LIT>);<EOL>    if (len !=","gt":"null)"}
{"input":"<s> function getUnitValue(val) {<EOL>    if (isPresent(val)) {<EOL>        if (typeof val === '<STR_LIT>') {<EOL>            if (val.indexOf('<STR_LIT>') > -<NUM_LIT> || val.indexOf('<STR_LIT>') > -<NUM_LIT>) {<EOL>                return val;<EOL>            }<EOL>            if (val.length) {<EOL>                return val + '<STR_LIT>';<EOL>            }<EOL>        }<EOL>        else if (typeof val === '<STR_LIT>') {<EOL>","gt":"return val + '<STR_LIT>';"}
{"input":"<s> <EOL>export function compilePaths(filePath) {<EOL>    filePath = path.normalize(filePath);<EOL>    if (!path.isAbsolute(filePath)) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    const parsed = path.parse(filePath);<EOL>    if (filePath === parsed.root) {<EOL>        return [filePath];<EOL>    }<EOL>    return filePath<EOL>        .slice(","gt":"parsed.root.length)"}
{"input":"<s> function f15() {<EOL>    var a = \"<STR_LIT>\";<EOL>    var b =","gt":"<NUM_LIT>;"}
{"input":"<s> export function readPkgConfig(dir) {<EOL>    pxt.debug(\"<STR_LIT>\" + dir);<EOL>    const fn = path.join(dir, pxt.CONFIG_NAME);<EOL>    const js = readJson(fn);<EOL>    if (js.additionalFilePath) {<EOL>","gt":"let addjson = path.join(dir, js.additionalFilePath, pxt.CONFIG_NAME);"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let","gt":"simpleMatchCount = <NUM_LIT>;"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let","gt":"score = _scores[patternPos][wordPos];"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>","gt":"wordPos -= <NUM_LIT>;"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>","gt":"if (lastMatched) {"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>","gt":"lastMatched = false;"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>             lastMatched = false;<EOL>            simpleMatchCount = <NUM_LIT>;<EOL>        }<EOL>        else if (arrow & Arrow.Diag) {<EOL>            if (arrow & Arrow.Left) {<EOL>                // left<EOL>                _findAllMatches(patternPos, wordPos - <NUM_LIT>, !matches.isEmpty() ? total - <NUM_LIT> : total, // gap penalty after first match<EOL>","gt":"matches.slice(), lastMatched);"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>             lastMatched = false;<EOL>            simpleMatchCount = <NUM_LIT>;<EOL>        }<EOL>        else if (arrow & Arrow.Diag) {<EOL>            if (arrow & Arrow.Left) {<EOL>                // left<EOL>                _findAllMatches(patternPos, wordPos - <NUM_LIT>, !matches.isEmpty() ? total - <NUM_LIT> : total, // gap penalty after first match<EOL>                 matches.slice(), lastMatched);<EOL>            }<EOL>            // diag<EOL>            total += score;<EOL>            patternPos -= <NUM_LIT>;<EOL>            wordPos -= <NUM_LIT>;<EOL>            matches.unshift(wordPos);<EOL>            lastMatched = true;<EOL>            // count simple matches and boost a row of<EOL>            // simple matches when they yield in a<EOL>            // strong match.<EOL>","gt":"if (score === <NUM_LIT>) {"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>             lastMatched = false;<EOL>            simpleMatchCount = <NUM_LIT>;<EOL>        }<EOL>        else if (arrow & Arrow.Diag) {<EOL>            if (arrow & Arrow.Left) {<EOL>                // left<EOL>                _findAllMatches(patternPos, wordPos - <NUM_LIT>, !matches.isEmpty() ? total - <NUM_LIT> : total, // gap penalty after first match<EOL>                 matches.slice(), lastMatched);<EOL>            }<EOL>            // diag<EOL>            total += score;<EOL>            patternPos -= <NUM_LIT>;<EOL>            wordPos -= <NUM_LIT>;<EOL>            matches.unshift(wordPos);<EOL>            lastMatched = true;<EOL>            // count simple matches and boost a row of<EOL>            // simple matches when they yield in a<EOL>            // strong match.<EOL>             if (score === <NUM_LIT>) {<EOL>                simpleMatchCount += <NUM_LIT>;<EOL>                if (patternPos === _patternStartPos) {<EOL>                    // when the first match is a weak<EOL>                    // match we discard it<EOL>                    return undefined;<EOL>                }<EOL>            }<EOL>            else {<EOL>                // boost<EOL>                total += <NUM_LIT> + (simpleMatchCount * (","gt":"score - <NUM_LIT>));"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>             lastMatched = false;<EOL>            simpleMatchCount = <NUM_LIT>;<EOL>        }<EOL>        else if (arrow & Arrow.Diag) {<EOL>            if (arrow & Arrow.Left) {<EOL>                // left<EOL>                _findAllMatches(patternPos, wordPos - <NUM_LIT>, !matches.isEmpty() ? total - <NUM_LIT> : total, // gap penalty after first match<EOL>                 matches.slice(), lastMatched);<EOL>            }<EOL>            // diag<EOL>            total += score;<EOL>            patternPos -= <NUM_LIT>;<EOL>            wordPos -= <NUM_LIT>;<EOL>            matches.unshift(wordPos);<EOL>            lastMatched = true;<EOL>            // count simple matches and boost a row of<EOL>            // simple matches when they yield in a<EOL>            // strong match.<EOL>             if (score === <NUM_LIT>) {<EOL>                simpleMatchCount += <NUM_LIT>;<EOL>                if (patternPos === _patternStartPos) {<EOL>                    // when the first match is a weak<EOL>                    // match we discard it<EOL>                    return undefined;<EOL>                }<EOL>            }<EOL>            else {<EOL>                // boost<EOL>                total += <NUM_LIT> + (simpleMatchCount * ( score - <NUM_LIT>));<EOL>                simpleMatchCount = <NUM_LIT>;<EOL>            }<EOL>        }<EOL>        else {<EOL>","gt":"return undefined;"}
{"input":"<s> function _findAllMatches(patternPos, wordPos, total, matches, lastMatched) {<EOL>    if (_matchesCount >= <NUM_LIT> || total < -<NUM_LIT>) {<EOL>        // stop when having already 10 results, or<EOL>        // when a potential alignment as already 5 gaps<EOL>        return;<EOL>    }<EOL>    let  simpleMatchCount = <NUM_LIT>;<EOL>    while (patternPos > _patternStartPos && wordPos > <NUM_LIT>) {<EOL>        let  score = _scores[patternPos][wordPos];<EOL>        let arrow = _arrows[patternPos][wordPos];<EOL>        if (arrow === Arrow.Left) {<EOL>            // left<EOL>             wordPos -= <NUM_LIT>;<EOL>             if (lastMatched) {<EOL>                total -= <NUM_LIT>; // new gap penalty<EOL>            }<EOL>            else if (!matches.isEmpty()) {<EOL>                total -= <NUM_LIT>; // gap penalty after first match<EOL>            }<EOL>             lastMatched = false;<EOL>            simpleMatchCount = <NUM_LIT>;<EOL>        }<EOL>        else if (arrow & Arrow.Diag) {<EOL>            if (arrow & Arrow.Left) {<EOL>                // left<EOL>                _findAllMatches(patternPos, wordPos - <NUM_LIT>, !matches.isEmpty() ? total - <NUM_LIT> : total, // gap penalty after first match<EOL>                 matches.slice(), lastMatched);<EOL>            }<EOL>            // diag<EOL>            total += score;<EOL>            patternPos -= <NUM_LIT>;<EOL>            wordPos -= <NUM_LIT>;<EOL>            matches.unshift(wordPos);<EOL>            lastMatched = true;<EOL>            // count simple matches and boost a row of<EOL>            // simple matches when they yield in a<EOL>            // strong match.<EOL>             if (score === <NUM_LIT>) {<EOL>                simpleMatchCount += <NUM_LIT>;<EOL>                if (patternPos === _patternStartPos) {<EOL>                    // when the first match is a weak<EOL>                    // match we discard it<EOL>                    return undefined;<EOL>                }<EOL>            }<EOL>            else {<EOL>                // boost<EOL>                total += <NUM_LIT> + (simpleMatchCount * ( score - <NUM_LIT>));<EOL>                simpleMatchCount = <NUM_LIT>;<EOL>            }<EOL>        }<EOL>        else {<EOL>             return undefined;<EOL>        }<EOL>    }<EOL>","gt":"total -= wordPos >= <NUM_LIT> ? <NUM_LIT> : wordPos * <NUM_LIT>;"}
{"input":"<s> <EOL>export function isNumber(obj) {<EOL>    if ((typeof (obj) === _typeof.number || obj instanceof Number) && !isNaN(obj)) {<EOL>        return","gt":"true;"}
{"input":"<s> // ==SCOPE::Extract to inner function in function 'f'==<EOL>function f() {<EOL>    let a = <NUM_LIT>;<EOL>    let x = newFunction();<EOL>","gt":"a;"}
{"input":"<s> <EOL>export function isNumber(obj) {<EOL>    if ((typeof (obj) === _typeof.number || obj instanceof Number) && !isNaN(obj)) {<EOL>","gt":"return true;"}
{"input":"<s> export function slug(str) {<EOL>","gt":"return _slug(str, { lower: true });"}
{"input":"<s> function inject(root, title, level) {<EOL>    if (level === <NUM_LIT>) {<EOL>        root.title = title;<EOL>    }<EOL>    else {<EOL>        if (level === <NUM_LIT> || root.children.length ===","gt":"<NUM_LIT>) {"}
{"input":"<s> function inject(root, title, level) {<EOL>    if (level === <NUM_LIT>) {<EOL>        root.title = title;<EOL>    }<EOL>    else {<EOL>        if (level === <NUM_LIT> || root.children.length ===  <NUM_LIT>) {<EOL>            root.children.push({<EOL>                title: null,<EOL>                children: [],<EOL>            });<EOL>        }<EOL>        const","gt":"lastChild = root.children[root.children.length - <NUM_LIT>];"}
{"input":"<s> // ==ORIGINAL==<EOL>function F() {<EOL>","gt":"arguments.length ;"}
{"input":"<s> <EOL>export function timeout(n) {<EOL>    return","gt":"new Promise(resolve => setTimeout(resolve, n));"}
{"input":"<s> function processLine(line) {<EOL>    const matches = parseLine(line);<EOL>    if (matches) {<EOL>        // console.log('match:', line)<EOL>        // console.log(matches)<EOL>        const link = matches[<NUM_LIT>] + matches[<NUM_LIT>];<EOL>        const contributor = matches[","gt":"<NUM_LIT>];"}
{"input":"<s> function processLine(line) {<EOL>    const matches = parseLine(line);<EOL>    if (matches) {<EOL>        // console.log('match:', line)<EOL>        // console.log(matches)<EOL>        const link = matches[<NUM_LIT>] + matches[<NUM_LIT>];<EOL>        const contributor = matches[ <NUM_LIT>];<EOL>        // console.log('link:', link)<EOL>        // console.log('contributor:', contributor)<EOL>        if (!(contributor in contributeMap)) {<EOL>","gt":"contributeMap[contributor] = [];"}
{"input":"<s> export function first(promiseFactories, shouldStop = t => !!t) {<EOL>    promiseFactories = [...promiseFactories.reverse()];<EOL>    const loop = () => {<EOL>        if (promiseFactories.length === <NUM_LIT>) {<EOL>            return TPromise.as(null);<EOL>        }<EOL>        const factory = promiseFactories.pop();<EOL>        const promise = factory();<EOL>        return promise.then(result => {<EOL>            if (","gt":"shouldStop(result)) {"}
{"input":"<s> export function first(promiseFactories, shouldStop = t => !!t) {<EOL>    promiseFactories = [...promiseFactories.reverse()];<EOL>    const loop = () => {<EOL>        if (promiseFactories.length === <NUM_LIT>) {<EOL>            return TPromise.as(null);<EOL>        }<EOL>        const factory = promiseFactories.pop();<EOL>        const promise = factory();<EOL>        return promise.then(result => {<EOL>            if ( shouldStop(result)) {<EOL>                return TPromise.as(result);<EOL>            }<EOL>","gt":"return loop();"}
{"input":"<s> function foo1() {<EOL>","gt":"return {"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let","gt":"cell;"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>","gt":"node = nodes[i];"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>","gt":"if (cell && cell.reads < REQUIRED_DOM_READS) {"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>","gt":"if (initialUpdate) {"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>","gt":"if (cell.left === <NUM_LIT>) {"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell.","gt":"width;"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell. width;<EOL>                    }<EOL>                }<EOL>            }<EOL>            cell.reads++;<EOL>        }<EOL>    }<EOL>    // figure out which cells are currently viewable within the viewport<EOL>    const viewableBottom = (data.scrollTop + data.viewHeight);<EOL>    data.topViewCell =","gt":"totalCells;"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell. width;<EOL>                    }<EOL>                }<EOL>            }<EOL>            cell.reads++;<EOL>        }<EOL>    }<EOL>    // figure out which cells are currently viewable within the viewport<EOL>    const viewableBottom = (data.scrollTop + data.viewHeight);<EOL>    data.topViewCell =  totalCells;<EOL>    data.bottomViewCell = <NUM_LIT>;<EOL>    if (totalCells > <NUM_LIT>) {<EOL>        // completely realign position to ensure they're all accurately placed<EOL>        cell = cells[<NUM_LIT>];<EOL>","gt":"previousCell = {"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell. width;<EOL>                    }<EOL>                }<EOL>            }<EOL>            cell.reads++;<EOL>        }<EOL>    }<EOL>    // figure out which cells are currently viewable within the viewport<EOL>    const viewableBottom = (data.scrollTop + data.viewHeight);<EOL>    data.topViewCell =  totalCells;<EOL>    data.bottomViewCell = <NUM_LIT>;<EOL>    if (totalCells > <NUM_LIT>) {<EOL>        // completely realign position to ensure they're all accurately placed<EOL>        cell = cells[<NUM_LIT>];<EOL>         previousCell = {<EOL>            row: <NUM_LIT>,<EOL>            width: <NUM_LIT>,<EOL>","gt":"height: <NUM_LIT>,"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell. width;<EOL>                    }<EOL>                }<EOL>            }<EOL>            cell.reads++;<EOL>        }<EOL>    }<EOL>    // figure out which cells are currently viewable within the viewport<EOL>    const viewableBottom = (data.scrollTop + data.viewHeight);<EOL>    data.topViewCell =  totalCells;<EOL>    data.bottomViewCell = <NUM_LIT>;<EOL>    if (totalCells > <NUM_LIT>) {<EOL>        // completely realign position to ensure they're all accurately placed<EOL>        cell = cells[<NUM_LIT>];<EOL>         previousCell = {<EOL>            row: <NUM_LIT>,<EOL>            width: <NUM_LIT>,<EOL>             height: <NUM_LIT>,<EOL>            top: cell.top,<EOL>            left: <NUM_LIT>,<EOL>            tmpl: -<NUM_LIT><EOL>        };<EOL>        for (let i = <NUM_LIT>; i < totalCells; i++) {<EOL>            cell = cells[i];<EOL>            if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {<EOL>                // new row<EOL>","gt":"cell.row++;"}
{"input":"<s> <EOL>export function updateDimensions(plt, nodes, cells, data, initialUpdate) {<EOL>    let node;<EOL>    let element;<EOL>    let  cell;<EOL>    let previousCell;<EOL>    const totalCells = cells.length;<EOL>    for (var i = <NUM_LIT>; i < nodes.length; i++) {<EOL>         node = nodes[i];<EOL>        cell = cells[node.cell];<EOL>        // read element dimensions if they haven't been checked enough times<EOL>         if (cell && cell.reads < REQUIRED_DOM_READS) {<EOL>            element = getElement(node);<EOL>            // ******** DOM READ ****************<EOL>            readElements(plt, cell, element);<EOL>             if (initialUpdate) {<EOL>                // update estimated dimensions with more accurate dimensions<EOL>                if (cell.tmpl === TemplateType.Header) {<EOL>                    data.hdrHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.hdrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else if (cell.tmpl === TemplateType.Footer) {<EOL>                    data.ftrHeight = cell.height;<EOL>                     if (cell.left === <NUM_LIT>) {<EOL>                        data.ftrWidth = cell.width;<EOL>                    }<EOL>                }<EOL>                else {<EOL>                    data.itmHeight = cell.height;<EOL>                    if (cell.left === <NUM_LIT>) {<EOL>                        data.itmWidth = cell. width;<EOL>                    }<EOL>                }<EOL>            }<EOL>            cell.reads++;<EOL>        }<EOL>    }<EOL>    // figure out which cells are currently viewable within the viewport<EOL>    const viewableBottom = (data.scrollTop + data.viewHeight);<EOL>    data.topViewCell =  totalCells;<EOL>    data.bottomViewCell = <NUM_LIT>;<EOL>    if (totalCells > <NUM_LIT>) {<EOL>        // completely realign position to ensure they're all accurately placed<EOL>        cell = cells[<NUM_LIT>];<EOL>         previousCell = {<EOL>            row: <NUM_LIT>,<EOL>            width: <NUM_LIT>,<EOL>             height: <NUM_LIT>,<EOL>            top: cell.top,<EOL>            left: <NUM_LIT>,<EOL>            tmpl: -<NUM_LIT><EOL>        };<EOL>        for (let i = <NUM_LIT>; i < totalCells; i++) {<EOL>            cell = cells[i];<EOL>            if (previousCell.left + previousCell.width + cell.width > data.viewWidth) {<EOL>                // new row<EOL>                 cell.row++;<EOL>                cell.top = (previousCell.top + previousCell.height);<EOL>                cell.left = <NUM_LIT>;<EOL>            }<EOL>            else {<EOL>                // same row<EOL>","gt":"cell.row = previousCell.row;"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name.","gt":"toLowerCase()) {"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function isA11yAttribute(attr) {<EOL>    // list taken from WAI-ARIA spec<EOL>    // aria-* http://www.w3.org/TR/wai-aria/states_and_properties#state_prop_def<EOL>    // role: http://www.w3.org/TR/wai-aria/host_languages#host_general_role<EOL>    switch (attr.name. toLowerCase()) {<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>         case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case  '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case '<STR_LIT>':<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> export function xyzToCIELab(x, y, z) {<EOL>    let REF_X = <NUM_LIT>;<EOL>    let REF_Y = <NUM_LIT>;<EOL>    let REF_Z = <NUM_LIT>;<EOL>","gt":"x /= REF_X;"}
{"input":"<s> export function xyzToCIELab(x, y, z) {<EOL>    let REF_X = <NUM_LIT>;<EOL>    let REF_Y = <NUM_LIT>;<EOL>    let REF_Z = <NUM_LIT>;<EOL>     x /= REF_X;<EOL>    y /= REF_Y;<EOL>    z /= REF_Z;<EOL>    x = x > <NUM_LIT> ? Math.pow(x, <NUM_LIT> / <NUM_LIT>) : <NUM_LIT> * x + <NUM_LIT> / <NUM_LIT>;<EOL>    y = y > <NUM_LIT> ? Math.pow(y, <NUM_LIT> / <NUM_LIT>) : <NUM_LIT> * y + <NUM_LIT> / <NUM_LIT>;<EOL>    z = z > <NUM_LIT> ? Math.pow(z, <NUM_LIT> / <NUM_LIT>) : <NUM_LIT> * z + <NUM_LIT> / <NUM_LIT>;<EOL>","gt":"let L = <NUM_LIT> * y - <NUM_LIT>;"}
{"input":"<s> <EOL>function wrapOnce(target, event, fn) {<EOL>    let fired = false;<EOL>    const g = (...args) => {<EOL>        if (!fired) {<EOL>","gt":"fired = true;"}
{"input":"<s> // ----------- Run -----------<EOL>function onDatabaseInitDone() {<EOL>    const port = CONFIG.LISTEN.PORT;<EOL>    installApplication()<EOL>        .then(() => {<EOL>        // ----------- Make the server listening -----------<EOL>        server.listen(port, () => {<EOL>            // Emailer initialization and then job queue initialization<EOL>            Emailer.Instance.","gt":"init();"}
{"input":"<s> // ----------- Run -----------<EOL>function onDatabaseInitDone() {<EOL>    const port = CONFIG.LISTEN.PORT;<EOL>    installApplication()<EOL>        .then(() => {<EOL>        // ----------- Make the server listening -----------<EOL>        server.listen(port, () => {<EOL>            // Emailer initialization and then job queue initialization<EOL>            Emailer.Instance. init();<EOL>            Emailer.Instance.checkConnectionOrDie()<EOL>                .then(() => JobQueue.Instance.init());<EOL>            // Caches initializations<EOL>            VideosPreviewCache.Instance.init(CONFIG.","gt":"CACHE.PREVIEWS.SIZE);"}
{"input":"<s> // ----------- Run -----------<EOL>function onDatabaseInitDone() {<EOL>    const port = CONFIG.LISTEN.PORT;<EOL>    installApplication()<EOL>        .then(() => {<EOL>        // ----------- Make the server listening -----------<EOL>        server.listen(port, () => {<EOL>            // Emailer initialization and then job queue initialization<EOL>            Emailer.Instance. init();<EOL>            Emailer.Instance.checkConnectionOrDie()<EOL>                .then(() => JobQueue.Instance.init());<EOL>            // Caches initializations<EOL>            VideosPreviewCache.Instance.init(CONFIG. CACHE.PREVIEWS.SIZE);<EOL>            // Enable Schedulers<EOL>            BadActorFollowScheduler.Instance.enable();<EOL>            RemoveOldJobsScheduler.Instance.enable();<EOL>            // Redis initialization<EOL>            Redis.Instance.","gt":"init();"}
{"input":"<s> export function platformPrettyName(platform) {<EOL>    if (platform === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    else if (","gt":"platform === '<STR_LIT>') {"}
{"input":"<s> export function platformPrettyName(platform) {<EOL>    if (platform === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    else if ( platform === '<STR_LIT>') {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>    else if (platform === '<STR_LIT>') {<EOL>        return","gt":"'<STR_LIT>';"}
{"input":"<s> export function links2md(str) {<EOL>    str =","gt":"str.replace(/((http|https):\\/\\/(\\w+:{0,1}\\w*@)?([^\\s\\*\\)`]+)(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/g, '<STR_LIT>');"}
{"input":"<s> <EOL>export function CordovaProperty(target, key) {<EOL>    Object.defineProperty(target, key, {<EOL>        enumerable: true,<EOL>        get: () => {<EOL>            if (checkAvailability(target, key) === true) {<EOL>                return","gt":"getPlugin(target.constructor.getPluginRef())[key];"}
{"input":"<s> <EOL>export function CordovaProperty(target, key) {<EOL>    Object.defineProperty(target, key, {<EOL>        enumerable: true,<EOL>        get: () => {<EOL>            if (checkAvailability(target, key) === true) {<EOL>                return  getPlugin(target.constructor.getPluginRef())[key];<EOL>            }<EOL>            else {<EOL>                return null;<EOL>            }<EOL>        },<EOL>        set: (value) => {<EOL>            if (checkAvailability(target, key) === true) {<EOL>                getPlugin(target.constructor.getPluginRef())[key] =","gt":"value;"}
{"input":"<s> function fetchJson(fileName, parentAddress) {<EOL>    return Promise.resolve(JSON.stringify({ compilerOptions: {","gt":"target: '<STR_LIT>' } }));"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =","gt":"generateHydrateResults(config, opts);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =","gt":"dom.parse(opts);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,","gt":"opts);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if (","gt":"config._isTesting) {"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =","gt":"plt;"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>","gt":"if (rootElm) {"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await","gt":"optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch (","gt":"e) {"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>             else {<EOL>                // we didn't destroy the dom<EOL>                // so let's return the root element<EOL>                hydrateResults.root = rootElm;<EOL>            }<EOL>            // cool, all good here, even if there are errors<EOL>            // we're passing back the result object<EOL>            resolve(hydrateResults);<EOL>        };<EOL>        if (opts.hydrateComponents === false) {<EOL>            plt.onAppLoad(win.document.body, []);<EOL>            return;<EOL>        }<EOL>        // patch the render function that we can add SSR ids<EOL>        // and to connect any elements it may have just appened to the DOM<EOL>        let ssrIds = <NUM_LIT>;<EOL>        const pltRender = plt.render;<EOL>        plt.render = function render(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation) {<EOL>            let ssrId;<EOL>            let existingSsrId;<EOL>            if (opts.ssrIds !== false) {<EOL>                // this may have been patched more than once<EOL>                // so reuse the ssr id if it already has one<EOL>                if (oldVNode && oldVNode.elm) {<EOL>                    existingSsrId = oldVNode.elm.getAttribute(SSR_VNODE_ID);<EOL>                }<EOL>                if (existingSsrId) {<EOL>                    ssrId =","gt":"parseInt(existingSsrId, <NUM_LIT>);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>             else {<EOL>                // we didn't destroy the dom<EOL>                // so let's return the root element<EOL>                hydrateResults.root = rootElm;<EOL>            }<EOL>            // cool, all good here, even if there are errors<EOL>            // we're passing back the result object<EOL>            resolve(hydrateResults);<EOL>        };<EOL>        if (opts.hydrateComponents === false) {<EOL>            plt.onAppLoad(win.document.body, []);<EOL>            return;<EOL>        }<EOL>        // patch the render function that we can add SSR ids<EOL>        // and to connect any elements it may have just appened to the DOM<EOL>        let ssrIds = <NUM_LIT>;<EOL>        const pltRender = plt.render;<EOL>        plt.render = function render(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation) {<EOL>            let ssrId;<EOL>            let existingSsrId;<EOL>            if (opts.ssrIds !== false) {<EOL>                // this may have been patched more than once<EOL>                // so reuse the ssr id if it already has one<EOL>                if (oldVNode && oldVNode.elm) {<EOL>                    existingSsrId = oldVNode.elm.getAttribute(SSR_VNODE_ID);<EOL>                }<EOL>                if (existingSsrId) {<EOL>                    ssrId =  parseInt(existingSsrId, <NUM_LIT>);<EOL>                }<EOL>                else {<EOL>                    ssrId =","gt":"ssrIds++;"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>             else {<EOL>                // we didn't destroy the dom<EOL>                // so let's return the root element<EOL>                hydrateResults.root = rootElm;<EOL>            }<EOL>            // cool, all good here, even if there are errors<EOL>            // we're passing back the result object<EOL>            resolve(hydrateResults);<EOL>        };<EOL>        if (opts.hydrateComponents === false) {<EOL>            plt.onAppLoad(win.document.body, []);<EOL>            return;<EOL>        }<EOL>        // patch the render function that we can add SSR ids<EOL>        // and to connect any elements it may have just appened to the DOM<EOL>        let ssrIds = <NUM_LIT>;<EOL>        const pltRender = plt.render;<EOL>        plt.render = function render(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation) {<EOL>            let ssrId;<EOL>            let existingSsrId;<EOL>            if (opts.ssrIds !== false) {<EOL>                // this may have been patched more than once<EOL>                // so reuse the ssr id if it already has one<EOL>                if (oldVNode && oldVNode.elm) {<EOL>                    existingSsrId = oldVNode.elm.getAttribute(SSR_VNODE_ID);<EOL>                }<EOL>                if (existingSsrId) {<EOL>                    ssrId =  parseInt(existingSsrId, <NUM_LIT>);<EOL>                }<EOL>                else {<EOL>                    ssrId =  ssrIds++;<EOL>                }<EOL>            }<EOL>            newVNode =","gt":"pltRender(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation, ssrId);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>             else {<EOL>                // we didn't destroy the dom<EOL>                // so let's return the root element<EOL>                hydrateResults.root = rootElm;<EOL>            }<EOL>            // cool, all good here, even if there are errors<EOL>            // we're passing back the result object<EOL>            resolve(hydrateResults);<EOL>        };<EOL>        if (opts.hydrateComponents === false) {<EOL>            plt.onAppLoad(win.document.body, []);<EOL>            return;<EOL>        }<EOL>        // patch the render function that we can add SSR ids<EOL>        // and to connect any elements it may have just appened to the DOM<EOL>        let ssrIds = <NUM_LIT>;<EOL>        const pltRender = plt.render;<EOL>        plt.render = function render(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation) {<EOL>            let ssrId;<EOL>            let existingSsrId;<EOL>            if (opts.ssrIds !== false) {<EOL>                // this may have been patched more than once<EOL>                // so reuse the ssr id if it already has one<EOL>                if (oldVNode && oldVNode.elm) {<EOL>                    existingSsrId = oldVNode.elm.getAttribute(SSR_VNODE_ID);<EOL>                }<EOL>                if (existingSsrId) {<EOL>                    ssrId =  parseInt(existingSsrId, <NUM_LIT>);<EOL>                }<EOL>                else {<EOL>                    ssrId =  ssrIds++;<EOL>                }<EOL>            }<EOL>            newVNode =  pltRender(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation, ssrId);<EOL>","gt":"connectChildElements(config, plt, hydrateResults, newVNode.elm);"}
{"input":"<s> export function hydrateHtml(config, ctx, cmpRegistry, opts) {<EOL>    return new Promise(resolve => {<EOL>        // validate the hydrate options and add any missing info<EOL>        opts = normalizeHydrateOptions(opts);<EOL>        // create the results object we're gonna return<EOL>        const hydrateResults =  generateHydrateResults(config, opts);<EOL>        // create a emulated window<EOL>        // attach data the request to the window<EOL>        const dom = config.sys.createDom();<EOL>        const win =  dom.parse(opts);<EOL>        const doc = win.document;<EOL>        // normalize dir and lang before connecting elements<EOL>        // so that the info is their incase they read it at runtime<EOL>        normalizeDirection(doc,  opts);<EOL>        normalizeLanguage(doc, opts);<EOL>        // create the platform<EOL>        const plt = createPlatformServer(config, win, doc, cmpRegistry, hydrateResults, opts.isPrerender, ctx);<EOL>        // fire off this function when the app has finished loading<EOL>        // and all components have finished hydrating<EOL>        plt.onAppLoad = async (rootElm, styles, failureDiagnostic) => {<EOL>            if ( config._isTesting) {<EOL>                hydrateResults.__testPlatform =  plt;<EOL>            }<EOL>            if (failureDiagnostic) {<EOL>                hydrateResults.html = generateFailureDiagnostic(failureDiagnostic);<EOL>                dom.destroy();<EOL>                resolve(hydrateResults);<EOL>                return;<EOL>            }<EOL>            // all synchronous operations next<EOL>             if (rootElm) {<EOL>                try {<EOL>                    // optimize this document!!<EOL>                    await  optimizeHtml(config, ctx, doc, styles, opts, hydrateResults);<EOL>                    // gather up all of the <a> tag information in the doc<EOL>                    if (opts.collectAnchors !== false && opts.hydrateComponents !== false) {<EOL>                        collectAnchors(config, doc, hydrateResults);<EOL>                    }<EOL>                    // serialize this dom back into a string<EOL>                    if (opts.serializeHtml !== false) {<EOL>                        hydrateResults.html = dom.serialize();<EOL>                    }<EOL>                }<EOL>                catch ( e) {<EOL>                    // gahh, something's up<EOL>                    hydrateResults.diagnostics.push({<EOL>                        level: '<STR_LIT>',<EOL>                        type: '<STR_LIT>',<EOL>                        header: '<STR_LIT>',<EOL>                        messageText: e<EOL>                    });<EOL>                    // idk, some error, just use the original html<EOL>                    hydrateResults.html = opts.html;<EOL>                }<EOL>            }<EOL>            if (opts.destroyDom !== false) {<EOL>                // always destroy the dom unless told otherwise<EOL>                dom.destroy();<EOL>            }<EOL>             else {<EOL>                // we didn't destroy the dom<EOL>                // so let's return the root element<EOL>                hydrateResults.root = rootElm;<EOL>            }<EOL>            // cool, all good here, even if there are errors<EOL>            // we're passing back the result object<EOL>            resolve(hydrateResults);<EOL>        };<EOL>        if (opts.hydrateComponents === false) {<EOL>            plt.onAppLoad(win.document.body, []);<EOL>            return;<EOL>        }<EOL>        // patch the render function that we can add SSR ids<EOL>        // and to connect any elements it may have just appened to the DOM<EOL>        let ssrIds = <NUM_LIT>;<EOL>        const pltRender = plt.render;<EOL>        plt.render = function render(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation) {<EOL>            let ssrId;<EOL>            let existingSsrId;<EOL>            if (opts.ssrIds !== false) {<EOL>                // this may have been patched more than once<EOL>                // so reuse the ssr id if it already has one<EOL>                if (oldVNode && oldVNode.elm) {<EOL>                    existingSsrId = oldVNode.elm.getAttribute(SSR_VNODE_ID);<EOL>                }<EOL>                if (existingSsrId) {<EOL>                    ssrId =  parseInt(existingSsrId, <NUM_LIT>);<EOL>                }<EOL>                else {<EOL>                    ssrId =  ssrIds++;<EOL>                }<EOL>            }<EOL>            newVNode =  pltRender(oldVNode, newVNode, isUpdate, defaultSlots, namedSlotsMap, encapsulation, ssrId);<EOL>             connectChildElements(config, plt, hydrateResults, newVNode.elm);<EOL>            return","gt":"newVNode;"}
{"input":"<s> export default function run() {<EOL>    ICollectionTests.","gt":"StringCollection('<STR_LIT>', new Queue());"}
{"input":"<s> function newFunction(t1a, t2a, u1a, u2a, u3a) {<EOL>    t1a.toString();<EOL>    t2a.","gt":"toString();"}
{"input":"<s> export function disposed(what) {<EOL>    const result = new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> async function fetchRemoteVideoDescription(video) {<EOL>    const host = video.VideoChannel.Account.Actor.Server.host;<EOL>    const path = video.getDescriptionPath();<EOL>","gt":"const options = {"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new","gt":"TypeError(`<STR_LIT>`);"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new  TypeError(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    return function (request, next) {<EOL>        return next()<EOL>            .then(function (","gt":"response) {"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new  TypeError(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    return function (request, next) {<EOL>        return next()<EOL>            .then(function ( response) {<EOL>            const { body } = response;<EOL>            const responseType = response.type();<EOL>            // Empty bodies are _always_ `null`.<EOL>            if (body == null || body === '<STR_LIT>') {<EOL>                response.body =","gt":"null;"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new  TypeError(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    return function (request, next) {<EOL>        return next()<EOL>            .then(function ( response) {<EOL>            const { body } = response;<EOL>            const responseType = response.type();<EOL>            // Empty bodies are _always_ `null`.<EOL>            if (body == null || body === '<STR_LIT>') {<EOL>                response.body =  null;<EOL>","gt":"return response;"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new  TypeError(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    return function (request, next) {<EOL>        return next()<EOL>            .then(function ( response) {<EOL>            const { body } = response;<EOL>            const responseType = response.type();<EOL>            // Empty bodies are _always_ `null`.<EOL>            if (body == null || body === '<STR_LIT>') {<EOL>                response.body =  null;<EOL>                 return response;<EOL>            }<EOL>            // Throw on invalid response type.<EOL>            if (responseType == null) {<EOL>                throw request.","gt":"error(`<STR_LIT>`, '<STR_LIT>');"}
{"input":"<s> <EOL>export function parse(type, strict) {<EOL>    const types = Array.isArray(type) ? type : [type];<EOL>    for (const type of types) {<EOL>        if (type !== '<STR_LIT>' && type !== '<STR_LIT>') {<EOL>            throw new  TypeError(`<STR_LIT>`);<EOL>        }<EOL>    }<EOL>    return function (request, next) {<EOL>        return next()<EOL>            .then(function ( response) {<EOL>            const { body } = response;<EOL>            const responseType = response.type();<EOL>            // Empty bodies are _always_ `null`.<EOL>            if (body == null || body === '<STR_LIT>') {<EOL>                response.body =  null;<EOL>                 return response;<EOL>            }<EOL>            // Throw on invalid response type.<EOL>            if (responseType == null) {<EOL>                throw request. error(`<STR_LIT>`, '<STR_LIT>');<EOL>            }<EOL>            // Error on non-string bodies.<EOL>            if (typeof body !== '<STR_LIT>') {<EOL>                throw request.error(`<STR_LIT>`, '<STR_LIT>');<EOL>            }<EOL>            // Attempt to parse as each type.<EOL>            for (const type of types) {<EOL>                if (type === '<STR_LIT>' && JSON_MIME_REGEXP.test(responseType)) {<EOL>                    try {<EOL>                        response.body = JSON.parse(body.replace(JSON_PROTECTION_PREFIX, '<STR_LIT>'));<EOL>                    }<EOL>                    catch (err) {<EOL>                        throw request.error(`<STR_LIT>`, '<STR_LIT>', err);<EOL>                    }<EOL>                    return","gt":"response;"}
{"input":"<s> function createStringSequence(a) {<EOL>    return {<EOL>        getLength() { return","gt":"a.length; },"}
{"input":"<s> export function isJSX(filename) {<EOL>    return","gt":"jsxRegex.test(filename);"}
{"input":"<s> function newFunction(a) {<EOL>    let","gt":"x = <NUM_LIT>;"}
{"input":"<s> export async function fsReadJsonFile(filePath, options = { encoding: '<STR_LIT>' }) {<EOL>    try {<EOL>        const f = await fsReadFile(filePath, options);<EOL>        return JSON.parse(f);<EOL>    }<EOL>    catch (e) {<EOL>        if (e.code === '<STR_LIT>') {<EOL>            throw ERROR_FILE_NOT_FOUND;<EOL>        }<EOL>        else if (e instanceof SyntaxError) {<EOL>","gt":"throw ERROR_FILE_INVALID_JSON;"}
{"input":"<s> export function metaFactory() {<EOL>    return new MetaStaticLoader({<EOL>        pageTitlePositioning: PageTitlePositioning.PrependPageTitle,<EOL>        pageTitleSeparator: '<STR_LIT>',<EOL>","gt":"applicationName: '<STR_LIT>',"}
{"input":"<s> export function metaFactory() {<EOL>    return new MetaStaticLoader({<EOL>        pageTitlePositioning: PageTitlePositioning.PrependPageTitle,<EOL>        pageTitleSeparator: '<STR_LIT>',<EOL>         applicationName: '<STR_LIT>',<EOL>        defaults: {<EOL>            title: '<STR_LIT>',<EOL>            description: '<STR_LIT>' +<EOL>","gt":"'<STR_LIT>'"}
{"input":"<s> function getAsyncData() {<EOL>    // async return mock data<EOL>    return new Promise(resolve => {<EOL>        setTimeout(() => {<EOL>","gt":"let data = [];"}
{"input":"<s> function getAsyncData() {<EOL>    // async return mock data<EOL>    return new Promise(resolve => {<EOL>        setTimeout(() => {<EOL>             let data = [];<EOL>            for (var i = <NUM_LIT>; i < <NUM_LIT>; i++) {<EOL>                data.push(getRandomData());<EOL>            }<EOL>","gt":"resolve(data);"}
{"input":"<s> function F0() {<EOL>    function F1() {<EOL>        function F2(","gt":"x =  newLocal) {"}
{"input":"<s> <EOL>export function Emit(event) {<EOL>    return function (target, key, descriptor) {<EOL>        key = hyphenate(key);<EOL>","gt":"const original = descriptor.value;"}
{"input":"<s> function removeOldSamples(property, maxNumSamples) {<EOL>    if (maxNumSamples === undefined)<EOL>        return;<EOL>    var removeCount = property._times.","gt":"length - maxNumSamples;"}
{"input":"<s> <EOL>export function remove(from, key) {<EOL>    if (!hasOwnProperty.call(from, key)) {<EOL>","gt":"return false;"}
{"input":"<s> function check(file, args, expected) {<EOL>    assert.equal(","gt":"argsToCommandLine(file, args), expected);"}
{"input":"<s> export async function formatCommandDoc(env, cmd) {<EOL>    const description = stripAnsi(cmd.description).split('<STR_LIT>').join('<STR_LIT>');<EOL>    const fullName = await generateFullName(cmd);<EOL>    return formatCommandHeader(cmd,","gt":"fullName) +"}
{"input":"<s> function updateCustomConfig(url, token, newCustomConfig, statusCodeExpected = <NUM_LIT>) {<EOL>    const path = '<STR_LIT>';<EOL>    return makePutBodyRequest({<EOL>","gt":"url,"}
{"input":"<s> function f2(obj) {<EOL>    if (obj) {<EOL>        obj.","gt":"x;"}
{"input":"<s> async function sendLikeToOrigin(byActor, video, t) {<EOL>    const url = getVideoLikeActivityPubUrl(byActor, video);<EOL>    const accountsInvolvedInVideo = await","gt":"getActorsInvolvedInVideo(video, t);"}
{"input":"<s> function hasDataCondition(config) {<EOL>    let hasData = false;<EOL>    if (!_.isEmpty(config.data)) {<EOL>        hasData = true;<EOL>    }<EOL>    if (!_.isNil(config.views)) {<EOL>        if (_.","gt":"isPlainObject(config.views) && !_.isEmpty(config.views.data)) {"}
{"input":"<s> function hasDataCondition(config) {<EOL>    let hasData = false;<EOL>    if (!_.isEmpty(config.data)) {<EOL>        hasData = true;<EOL>    }<EOL>    if (!_.isNil(config.views)) {<EOL>        if (_. isPlainObject(config.views) && !_.isEmpty(config.views.data)) {<EOL>            hasData = true;<EOL>        }<EOL>        if (_.isArray(config.views)) {<EOL>            for (let item of","gt":"config.views) {"}
{"input":"<s> export function initialize(config, securityConfig, appRoot, entityServiceInst, sqlServerInst, server) {<EOL>    // application root (where we scan the components) set priority: <EOL>    // 1. User provided <EOL>    // 2. Environment Variable <EOL>    // 3. Current working directory<EOL>    _appRoot = appRoot || process.env.APP_ROOT || process.cwd();<EOL>    //Utils.entityService(entityServiceInst);<EOL>    new Dynamic(config, securityConfig, server);<EOL>    //Utils.sqlEntityService(sqlServerInst);<EOL>    components.","gt":"forEach(x => {"}
{"input":"<s> <EOL>export function SocketFactory(config) {<EOL>    return new WrappedSocket(","gt":"config);"}
{"input":"<s> //====let<EOL>function foo0(x) {<EOL>    for (let x of []) {<EOL>        var v = x;<EOL>        (function () { return x +","gt":"v; });"}
{"input":"<s> export async function readVersionOfDependencies(context) {<EOL>    // read the package.json version from ionic, angular/core, and typescript<EOL>    const promises = [];<EOL>    promises.push(readPackageVersion(context.angularCoreDir));<EOL>    if (!getBooleanPropertyValue(Constants.ENV_SKIP_IONIC_ANGULAR_VERSION)) {<EOL>        promises.push(readPackageVersion(context.","gt":"ionicAngularDir));"}
{"input":"<s> export async function readVersionOfDependencies(context) {<EOL>    // read the package.json version from ionic, angular/core, and typescript<EOL>    const promises = [];<EOL>    promises.push(readPackageVersion(context.angularCoreDir));<EOL>    if (!getBooleanPropertyValue(Constants.ENV_SKIP_IONIC_ANGULAR_VERSION)) {<EOL>        promises.push(readPackageVersion(context. ionicAngularDir));<EOL>    }<EOL>    promises.push(readPackageVersion(context.typescriptDir));<EOL>    const versions = await Promise.all(promises);<EOL>    context.angularVersion = semverStringToObject(versions[<NUM_LIT>]);<EOL>    if (!getBooleanPropertyValue(Constants.ENV_SKIP_IONIC_ANGULAR_VERSION)) {<EOL>        context.ionicAngularVersion =","gt":"semverStringToObject(versions[<NUM_LIT>]);"}
{"input":"<s> function from(arg) {<EOL>","gt":"return undefined;"}
{"input":"<s> export function isRelationDecorator(decorator) {<EOL>    return decorator === Decorators.ONETOMANY || decorator === Decorators.MANYTOONE ||","gt":"decorator === Decorators.MANYTOMANY || decorator === Decorators.ONETOONE;"}
{"input":"<s> async function doStatement9() {<EOL>    C: do {<EOL>","gt":"if (<NUM_LIT>)"}
{"input":"<s> function dummy() {<EOL>    test(arrayResults,","gt":"nullSort);"}
{"input":"<s> export function getEmbeddedPropWithFlat(model) {<EOL>    let allReferencingEntities = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.","gt":"modelName));"}
{"input":"<s> export function GetSquare(val) {<EOL>    return (","gt":"val * val);"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence(","gt":"videoInfo.license);"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>","gt":"tags = videoInfo.tags"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t.","gt":"normalize())"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>","gt":"let thumbnailfile;"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>     let thumbnailfile;<EOL>    if (videoInfo.thumbnail) {<EOL>        thumbnailfile = join(__dirname, '<STR_LIT>');<EOL>        await doRequestAndSaveToFile({<EOL>            method: '<STR_LIT>',<EOL>            uri:","gt":"videoInfo.thumbnail"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>     let thumbnailfile;<EOL>    if (videoInfo.thumbnail) {<EOL>        thumbnailfile = join(__dirname, '<STR_LIT>');<EOL>        await doRequestAndSaveToFile({<EOL>            method: '<STR_LIT>',<EOL>            uri:  videoInfo.thumbnail<EOL>        }, thumbnailfile);<EOL>    }<EOL>    const videoAttributes = {<EOL>        name: videoInfo.title,<EOL>","gt":"category,"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>     let thumbnailfile;<EOL>    if (videoInfo.thumbnail) {<EOL>        thumbnailfile = join(__dirname, '<STR_LIT>');<EOL>        await doRequestAndSaveToFile({<EOL>            method: '<STR_LIT>',<EOL>            uri:  videoInfo.thumbnail<EOL>        }, thumbnailfile);<EOL>    }<EOL>    const videoAttributes = {<EOL>        name: videoInfo.title,<EOL>         category,<EOL>        licence,<EOL>        language,<EOL>        nsfw: isNSFW(videoInfo),<EOL>        commentsEnabled: true,<EOL>        description: videoInfo.description,<EOL>        tags,<EOL>        privacy:","gt":"VideoPrivacy.PUBLIC,"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>     let thumbnailfile;<EOL>    if (videoInfo.thumbnail) {<EOL>        thumbnailfile = join(__dirname, '<STR_LIT>');<EOL>        await doRequestAndSaveToFile({<EOL>            method: '<STR_LIT>',<EOL>            uri:  videoInfo.thumbnail<EOL>        }, thumbnailfile);<EOL>    }<EOL>    const videoAttributes = {<EOL>        name: videoInfo.title,<EOL>         category,<EOL>        licence,<EOL>        language,<EOL>        nsfw: isNSFW(videoInfo),<EOL>        commentsEnabled: true,<EOL>        description: videoInfo.description,<EOL>        tags,<EOL>        privacy:  VideoPrivacy.PUBLIC,<EOL>        fixture: videoPath,<EOL>        thumbnailfile,<EOL>        previewfile: thumbnailfile<EOL>    };<EOL>    console.log('<STR_LIT>', videoAttributes.name);<EOL>    try {<EOL>        await uploadVideo(program['<STR_LIT>'], accessToken, videoAttributes);<EOL>    }<EOL>    catch (err) {<EOL>        if (err.message.indexOf('<STR_LIT>') !== -<NUM_LIT>) {<EOL>            console.log('<STR_LIT>');<EOL>            const res = await login(","gt":"program['<STR_LIT>'], client, user);"}
{"input":"<s> async function uploadVideoOnPeerTube(videoInfo, videoPath, language) {<EOL>    const category = await getCategory(videoInfo.categories);<EOL>    const licence = getLicence( videoInfo.license);<EOL>    let tags = [];<EOL>    if (Array.isArray(videoInfo.tags)) {<EOL>         tags = videoInfo.tags<EOL>            .filter(t => t.length < CONSTRAINTS_FIELDS.VIDEOS.TAG.max && t.length > CONSTRAINTS_FIELDS.VIDEOS.TAG.min)<EOL>            .map(t => t. normalize())<EOL>            .slice(<NUM_LIT>, <NUM_LIT>);<EOL>    }<EOL>     let thumbnailfile;<EOL>    if (videoInfo.thumbnail) {<EOL>        thumbnailfile = join(__dirname, '<STR_LIT>');<EOL>        await doRequestAndSaveToFile({<EOL>            method: '<STR_LIT>',<EOL>            uri:  videoInfo.thumbnail<EOL>        }, thumbnailfile);<EOL>    }<EOL>    const videoAttributes = {<EOL>        name: videoInfo.title,<EOL>         category,<EOL>        licence,<EOL>        language,<EOL>        nsfw: isNSFW(videoInfo),<EOL>        commentsEnabled: true,<EOL>        description: videoInfo.description,<EOL>        tags,<EOL>        privacy:  VideoPrivacy.PUBLIC,<EOL>        fixture: videoPath,<EOL>        thumbnailfile,<EOL>        previewfile: thumbnailfile<EOL>    };<EOL>    console.log('<STR_LIT>', videoAttributes.name);<EOL>    try {<EOL>        await uploadVideo(program['<STR_LIT>'], accessToken, videoAttributes);<EOL>    }<EOL>    catch (err) {<EOL>        if (err.message.indexOf('<STR_LIT>') !== -<NUM_LIT>) {<EOL>            console.log('<STR_LIT>');<EOL>            const res = await login( program['<STR_LIT>'], client, user);<EOL>            accessToken = res.body.access_token;<EOL>            await uploadVideo(program['<STR_LIT>'], accessToken, videoAttributes);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function wait(milliseconds) {<EOL>    return new Promise(resolve =>","gt":"setTimeout(resolve, milliseconds));"}
{"input":"<s> export function computeGroupBounds(g) {<EOL>    g.bounds = typeof g.leaves !== \"<STR_LIT>\" ?<EOL>        g.leaves.reduce((r, c) => c.bounds.union(r), Rectangle.empty()) :<EOL>        Rectangle.","gt":"empty();"}
{"input":"<s> function comparer() {<EOL>","gt":"test(comparerResults, comparerSort);"}
{"input":"<s> export function getFunctionArgs(func) {<EOL>    return (func + '<STR_LIT>')<EOL>        .replace(/[/][/].*$/mg, '<STR_LIT>') // strip single-line comments<EOL>        .","gt":"replace(/\\s+/g, '<STR_LIT>')"}
{"input":"<s> export function CodeTemplate(tempString, nodeKind) {<EOL>    return function (target) {<EOL>        let newConstructor = function (scope, ...rest) {<EOL>            let self = this;<EOL>            let","gt":"retValue = target.apply(self, arguments);"}
{"input":"<s> export function CodeTemplate(tempString, nodeKind) {<EOL>    return function (target) {<EOL>        let newConstructor = function (scope, ...rest) {<EOL>            let self = this;<EOL>            let  retValue = target.apply(self, arguments);<EOL>            let [code, statements] = processTemplate(tempString, self);<EOL>            if (statements)<EOL>                scope.","gt":"statements.push(statements);"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\".","gt":"length;"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -","gt":"<NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice(","gt":"statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof","gt":"args === \"<STR_LIT>\")"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template.","gt":"replace(/{this}/g, () => args), statements];"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=","gt":"\"<STR_LIT>\")"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =","gt":"template.indexOf(\"<STR_LIT>\", ifPos);"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >","gt":"<NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(","gt":"posAfterIf);"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.","gt":"slice(posAfterIf);"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in","gt":"args) {"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>         else {<EOL>            let index = -<NUM_LIT>;<EOL>            while ((index = template.indexOf(\"<STR_LIT>\" + k + \"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>                let spaces = '<STR_LIT>';<EOL>                while (template.length > index && template[index - <NUM_LIT>] == '<STR_LIT>') {<EOL>                    index--;<EOL>","gt":"spaces += '<STR_LIT>';"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>         else {<EOL>            let index = -<NUM_LIT>;<EOL>            while ((index = template.indexOf(\"<STR_LIT>\" + k + \"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>                let spaces = '<STR_LIT>';<EOL>                while (template.length > index && template[index - <NUM_LIT>] == '<STR_LIT>') {<EOL>                    index--;<EOL>                     spaces += '<STR_LIT>';<EOL>                }<EOL>","gt":"let value = args[k];"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>         else {<EOL>            let index = -<NUM_LIT>;<EOL>            while ((index = template.indexOf(\"<STR_LIT>\" + k + \"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>                let spaces = '<STR_LIT>';<EOL>                while (template.length > index && template[index - <NUM_LIT>] == '<STR_LIT>') {<EOL>                    index--;<EOL>                     spaces += '<STR_LIT>';<EOL>                }<EOL>                 let value = args[k];<EOL>                if (value && value.resolve)<EOL>                    value = value.resolve();<EOL>","gt":"if (value && typeof value ==="}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>         else {<EOL>            let index = -<NUM_LIT>;<EOL>            while ((index = template.indexOf(\"<STR_LIT>\" + k + \"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>                let spaces = '<STR_LIT>';<EOL>                while (template.length > index && template[index - <NUM_LIT>] == '<STR_LIT>') {<EOL>                    index--;<EOL>                     spaces += '<STR_LIT>';<EOL>                }<EOL>                 let value = args[k];<EOL>                if (value && value.resolve)<EOL>                    value = value.resolve();<EOL>                 if (value && typeof value ===","gt":"'<STR_LIT>')"}
{"input":"<s> <EOL>function processTemplate(template, args) {<EOL>    let statements = \"<STR_LIT>\";<EOL>    if (template.indexOf(\"<STR_LIT>\") > -<NUM_LIT>) {<EOL>        let statementsStartPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsBodyStartPos = statementsStartPos + \"<STR_LIT>\". length;<EOL>        let statementsBodyEndPos = template.indexOf(\"<STR_LIT>\");<EOL>        let statementsEndPos = statementsBodyEndPos + \"<STR_LIT>\".length;<EOL>        while (statementsStartPos > <NUM_LIT> && (template[statementsStartPos -  <NUM_LIT>] == '<STR_LIT>' || template[statementsStartPos - <NUM_LIT>] == '<STR_LIT>'))<EOL>            statementsStartPos--;<EOL>        if (statementsBodyEndPos > <NUM_LIT> && template[statementsBodyEndPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            statementsBodyEndPos--;<EOL>        let templateText = template.slice( statementsBodyStartPos, statementsBodyEndPos).replace(/\\n    /g, '<STR_LIT>');<EOL>        let [c, s] = processTemplate(templateText, args);<EOL>        statements += s + c;<EOL>        template = template.slice(<NUM_LIT>, statementsStartPos) + template.slice(statementsEndPos);<EOL>    }<EOL>    if (typeof  args === \"<STR_LIT>\")<EOL>        return [template. replace(/{this}/g, () => args), statements];<EOL>    let ifPos;<EOL>    while ((ifPos = template.indexOf(\"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>        let posBeforeIf = ifPos;<EOL>        while (posBeforeIf > <NUM_LIT> && (template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>' || template[posBeforeIf - <NUM_LIT>] == '<STR_LIT>'))<EOL>            posBeforeIf--;<EOL>        ifPos += <NUM_LIT>;<EOL>        let conditionStartPos = ifPos;<EOL>        while (template[ifPos] !=  \"<STR_LIT>\")<EOL>            ifPos++;<EOL>        let endIfPos =  template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elseIfPos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let elsePos = template.indexOf(\"<STR_LIT>\", ifPos);<EOL>        let endIfBodyPos = endIfPos;<EOL>        if (elseIfPos != -<NUM_LIT> && elseIfPos < endIfBodyPos)<EOL>            endIfBodyPos = elseIfPos;<EOL>        if (elsePos != -<NUM_LIT> && elsePos < endIfBodyPos)<EOL>            endIfBodyPos = elsePos;<EOL>        if (endIfBodyPos >  <NUM_LIT> && template[endIfBodyPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfBodyPos--;<EOL>        let posAfterIf = endIfPos + <NUM_LIT>;<EOL>        if (endIfPos > <NUM_LIT> && template[endIfPos - <NUM_LIT>] == '<STR_LIT>')<EOL>            endIfPos--;<EOL>        let evalText = template.slice(conditionStartPos, ifPos);<EOL>        for (let k in args)<EOL>            evalText = evalText.replace(new RegExp(\"<STR_LIT>\" + k + \"<STR_LIT>\", \"<STR_LIT>\"), function (m) { return \"<STR_LIT>\" + m; });<EOL>        let evalResult = eval(evalText);<EOL>        if (evalResult)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(ifPos + <NUM_LIT>, endIfBodyPos).replace(/\\n    /g, '<STR_LIT>') + template.slice( posAfterIf);<EOL>        else if (elseIfPos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + \"<STR_LIT>\" + template.slice(elseIfPos + <NUM_LIT>);<EOL>        else if (elsePos > -<NUM_LIT>)<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template.slice(elsePos + <NUM_LIT>, endIfPos).replace(/\\n    /g, '<STR_LIT>') + template.slice(posAfterIf);<EOL>        else<EOL>            template = template.slice(<NUM_LIT>, posBeforeIf) + template. slice(posAfterIf);<EOL>    }<EOL>    let replaced = false;<EOL>    for (var k in  args) {<EOL>        if (k == \"<STR_LIT>\")<EOL>            continue;<EOL>        if (args[k] && args[k].push) {<EOL>            let data = { template };<EOL>            while (replaceArray(data, k, args[k], statements))<EOL>                replaced = true;<EOL>            template = data.template;<EOL>        }<EOL>         else {<EOL>            let index = -<NUM_LIT>;<EOL>            while ((index = template.indexOf(\"<STR_LIT>\" + k + \"<STR_LIT>\")) > -<NUM_LIT>) {<EOL>                let spaces = '<STR_LIT>';<EOL>                while (template.length > index && template[index - <NUM_LIT>] == '<STR_LIT>') {<EOL>                    index--;<EOL>                     spaces += '<STR_LIT>';<EOL>                }<EOL>                 let value = args[k];<EOL>                if (value && value.resolve)<EOL>                    value = value.resolve();<EOL>                 if (value && typeof value ===  '<STR_LIT>')<EOL>                    value = value.replace(/\\n/g, '<STR_LIT>' + spaces);<EOL>                template = template.replace(","gt":"\"<STR_LIT>\" + k + \"<STR_LIT>\", () => value);"}
{"input":"<s> export function average(source, ignoreNaN = false) {<EOL>    if (!source || !source.length)<EOL>        return NaN;<EOL>    let result = <NUM_LIT>, count;<EOL>    if (","gt":"ignoreNaN) {"}
{"input":"<s> export function average(source, ignoreNaN = false) {<EOL>    if (!source || !source.length)<EOL>        return NaN;<EOL>    let result = <NUM_LIT>, count;<EOL>    if ( ignoreNaN) {<EOL>        count = <NUM_LIT>;<EOL>        for (let n of source) {<EOL>            if (!isNaN(","gt":"n)) {"}
{"input":"<s> export function average(source, ignoreNaN = false) {<EOL>    if (!source || !source.length)<EOL>        return NaN;<EOL>    let result = <NUM_LIT>, count;<EOL>    if ( ignoreNaN) {<EOL>        count = <NUM_LIT>;<EOL>        for (let n of source) {<EOL>            if (!isNaN( n)) {<EOL>                result += n;<EOL>                count++;<EOL>            }<EOL>        }<EOL>    }<EOL>    else {<EOL>        count = source.length;<EOL>        for (let n of source) {<EOL>            if (","gt":"isNaN(n))"}
{"input":"<s> export function isAngularCLIJson(o) {<EOL>    const obj = o;<EOL>","gt":"return obj &&"}
{"input":"<s> <EOL>export function createComparer(selector, order = Order.Ascending, equivalentToNaN = NaN) {<EOL>    const nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);<EOL>    return (a, b) => {<EOL>        // Use an array always to ensure a single code path.<EOL>        const aValue = ensureArray(selector(a));<EOL>        const bValue = ensureArray(","gt":"selector(b));"}
{"input":"<s> <EOL>export function createComparer(selector, order = Order.Ascending, equivalentToNaN = NaN) {<EOL>    const nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);<EOL>    return (a, b) => {<EOL>        // Use an array always to ensure a single code path.<EOL>        const aValue = ensureArray(selector(a));<EOL>        const bValue = ensureArray( selector(b));<EOL>        const len = Math.min(aValue.length, bValue.length);<EOL>        const oArray = (order) instanceof (Array) ? order : null;<EOL>        for (let i = <NUM_LIT>; i <","gt":"len; i++) {"}
{"input":"<s> <EOL>export function createComparer(selector, order = Order.Ascending, equivalentToNaN = NaN) {<EOL>    const nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);<EOL>    return (a, b) => {<EOL>        // Use an array always to ensure a single code path.<EOL>        const aValue = ensureArray(selector(a));<EOL>        const bValue = ensureArray( selector(b));<EOL>        const len = Math.min(aValue.length, bValue.length);<EOL>        const oArray = (order) instanceof (Array) ? order : null;<EOL>        for (let i = <NUM_LIT>; i <  len; i++) {<EOL>            let vA = aValue[i], vB = bValue[i];<EOL>            const o = oArray<EOL>                ? (i < oArray.length ? oArray[i] : Order.Ascending)<EOL>                : order;<EOL>","gt":"if (nanHasEquivalent) {"}
{"input":"<s> <EOL>export function createComparer(selector, order = Order.Ascending, equivalentToNaN = NaN) {<EOL>    const nanHasEquivalent = !Type.isTrueNaN(equivalentToNaN);<EOL>    return (a, b) => {<EOL>        // Use an array always to ensure a single code path.<EOL>        const aValue = ensureArray(selector(a));<EOL>        const bValue = ensureArray( selector(b));<EOL>        const len = Math.min(aValue.length, bValue.length);<EOL>        const oArray = (order) instanceof (Array) ? order : null;<EOL>        for (let i = <NUM_LIT>; i <  len; i++) {<EOL>            let vA = aValue[i], vB = bValue[i];<EOL>            const o = oArray<EOL>                ? (i < oArray.length ? oArray[i] : Order.Ascending)<EOL>                : order;<EOL>             if (nanHasEquivalent) {<EOL>                if (Type.isTrueNaN(vA))<EOL>                    vA = equivalentToNaN;<EOL>                if (Type.isTrueNaN(vB))<EOL>                    vB = equivalentToNaN;<EOL>            }<EOL>            const","gt":"r = compare(vA, vB);"}
{"input":"<s> <EOL>export function fooWithParameters( a, <EOL><EOL>b) {<EOL>    var","gt":"d = a;"}
{"input":"<s> function globalfooWithOverloads(a) {<EOL>","gt":"return a;"}
{"input":"<s> <EOL>export function normalizeURL(url) {<EOL>    const ionic = window['<STR_LIT>'];<EOL>","gt":"if (ionic && ionic.normalizeURL) {"}
{"input":"<s> function getMultiRobot() {<EOL>    return","gt":"multiRobot;"}
{"input":"<s> export function getPropertiesFromObject(changedObj) {<EOL>    return Enumerable.from(changedObj).select((x) => x.key).","gt":"toArray();"}
{"input":"<s> export default function (config) {<EOL>    if (_.isNil(config) || _.isEmpty(config)) {<EOL>        return;<EOL>    }<EOL>    const hasData =","gt":"hasDataCondition(config);"}
{"input":"<s> export default function (config) {<EOL>    if (_.isNil(config) || _.isEmpty(config)) {<EOL>        return;<EOL>    }<EOL>    const hasData =  hasDataCondition(config);<EOL>    if (!hasData) {<EOL>        return;<EOL>    }<EOL>    const commonChart = new CommonChart(","gt":"config);"}
{"input":"<s> export function isIterator(instance) {<EOL>    return Type.hasMemberOfType(instance,","gt":"\"<STR_LIT>\", Type.FUNCTION);"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap.","gt":"get(plt.hostElementMap.get(this));"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>","gt":"elm = plt.hostElementMap.get(this);"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get(","gt":"elm);"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get( elm);<EOL>","gt":"if (!property.state) {"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get( elm);<EOL>         if (!property.state) {<EOL>            if (property.attr && (values[memberName] === undefined || values[memberName] === '<STR_LIT>')) {<EOL>                // check the prop value from the host element attribute<EOL>                const hostAttrValue = plt.domApi.$getAttribute(elm, property.attr);<EOL>                if (hostAttrValue != null) {<EOL>                    // looks like we've got an attribute value<EOL>                    // let's set it to our internal values<EOL>                    values[memberName] = parsePropertyValue(property.type, hostAttrValue);<EOL>                }<EOL>            }<EOL>            if (Build.clientSide) {<EOL>                // client-side<EOL>                // within the browser, the element's prototype<EOL>                // already has its getter/setter set, but on the<EOL>                // server the prototype is shared causing issues<EOL>                // so instead the server's elm has the getter/setter<EOL>                // directly on the actual element instance, not its prototype<EOL>                // so on the browser we can use \"hasOwnProperty\"<EOL>                if (elm.hasOwnProperty(memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[memberName] = elm","gt":"[memberName];"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get( elm);<EOL>         if (!property.state) {<EOL>            if (property.attr && (values[memberName] === undefined || values[memberName] === '<STR_LIT>')) {<EOL>                // check the prop value from the host element attribute<EOL>                const hostAttrValue = plt.domApi.$getAttribute(elm, property.attr);<EOL>                if (hostAttrValue != null) {<EOL>                    // looks like we've got an attribute value<EOL>                    // let's set it to our internal values<EOL>                    values[memberName] = parsePropertyValue(property.type, hostAttrValue);<EOL>                }<EOL>            }<EOL>            if (Build.clientSide) {<EOL>                // client-side<EOL>                // within the browser, the element's prototype<EOL>                // already has its getter/setter set, but on the<EOL>                // server the prototype is shared causing issues<EOL>                // so instead the server's elm has the getter/setter<EOL>                // directly on the actual element instance, not its prototype<EOL>                // so on the browser we can use \"hasOwnProperty\"<EOL>                if (elm.hasOwnProperty(memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[memberName] = elm [memberName];<EOL>                    }<EOL>                    // for the client only, let's delete its \"own\" property<EOL>                    // this way our already assigned getter/setter on the prototype kicks in<EOL>                    delete elm[memberName];<EOL>                }<EOL>            }<EOL>            else {<EOL>                // server-side<EOL>                // server-side elm has the getter/setter<EOL>                // on the actual element instance, not its prototype<EOL>                // on the server we cannot accurately use \"hasOwnProperty\"<EOL>                // instead we'll do a direct lookup to see if the<EOL>                // constructor has this property<EOL>                if (elementHasProperty(plt,","gt":"elm, memberName)) {"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get( elm);<EOL>         if (!property.state) {<EOL>            if (property.attr && (values[memberName] === undefined || values[memberName] === '<STR_LIT>')) {<EOL>                // check the prop value from the host element attribute<EOL>                const hostAttrValue = plt.domApi.$getAttribute(elm, property.attr);<EOL>                if (hostAttrValue != null) {<EOL>                    // looks like we've got an attribute value<EOL>                    // let's set it to our internal values<EOL>                    values[memberName] = parsePropertyValue(property.type, hostAttrValue);<EOL>                }<EOL>            }<EOL>            if (Build.clientSide) {<EOL>                // client-side<EOL>                // within the browser, the element's prototype<EOL>                // already has its getter/setter set, but on the<EOL>                // server the prototype is shared causing issues<EOL>                // so instead the server's elm has the getter/setter<EOL>                // directly on the actual element instance, not its prototype<EOL>                // so on the browser we can use \"hasOwnProperty\"<EOL>                if (elm.hasOwnProperty(memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[memberName] = elm [memberName];<EOL>                    }<EOL>                    // for the client only, let's delete its \"own\" property<EOL>                    // this way our already assigned getter/setter on the prototype kicks in<EOL>                    delete elm[memberName];<EOL>                }<EOL>            }<EOL>            else {<EOL>                // server-side<EOL>                // server-side elm has the getter/setter<EOL>                // on the actual element instance, not its prototype<EOL>                // on the server we cannot accurately use \"hasOwnProperty\"<EOL>                // instead we'll do a direct lookup to see if the<EOL>                // constructor has this property<EOL>                if (elementHasProperty(plt,  elm, memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[","gt":"memberName] = elm[memberName];"}
{"input":"<s> export function defineMember(plt, property, elm, instance, memberName) {<EOL>    function getComponentProp(values) {<EOL>        // component instance prop/state getter<EOL>        // get the property value directly from our internal values<EOL>        values = plt.valuesMap. get(plt.hostElementMap.get(this));<EOL>        return values && values[memberName];<EOL>    }<EOL>    function setComponentProp(newValue, elm) {<EOL>        // component instance prop/state setter (cannot be arrow fn)<EOL>         elm = plt.hostElementMap.get(this);<EOL>        if (elm) {<EOL>            if (property.state || property.mutable) {<EOL>                setValue(plt, elm, memberName, newValue);<EOL>            }<EOL>            else if (Build.verboseError) {<EOL>                console.warn(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>    }<EOL>    if (property.type || property.state) {<EOL>        const values = plt.valuesMap.get( elm);<EOL>         if (!property.state) {<EOL>            if (property.attr && (values[memberName] === undefined || values[memberName] === '<STR_LIT>')) {<EOL>                // check the prop value from the host element attribute<EOL>                const hostAttrValue = plt.domApi.$getAttribute(elm, property.attr);<EOL>                if (hostAttrValue != null) {<EOL>                    // looks like we've got an attribute value<EOL>                    // let's set it to our internal values<EOL>                    values[memberName] = parsePropertyValue(property.type, hostAttrValue);<EOL>                }<EOL>            }<EOL>            if (Build.clientSide) {<EOL>                // client-side<EOL>                // within the browser, the element's prototype<EOL>                // already has its getter/setter set, but on the<EOL>                // server the prototype is shared causing issues<EOL>                // so instead the server's elm has the getter/setter<EOL>                // directly on the actual element instance, not its prototype<EOL>                // so on the browser we can use \"hasOwnProperty\"<EOL>                if (elm.hasOwnProperty(memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[memberName] = elm [memberName];<EOL>                    }<EOL>                    // for the client only, let's delete its \"own\" property<EOL>                    // this way our already assigned getter/setter on the prototype kicks in<EOL>                    delete elm[memberName];<EOL>                }<EOL>            }<EOL>            else {<EOL>                // server-side<EOL>                // server-side elm has the getter/setter<EOL>                // on the actual element instance, not its prototype<EOL>                // on the server we cannot accurately use \"hasOwnProperty\"<EOL>                // instead we'll do a direct lookup to see if the<EOL>                // constructor has this property<EOL>                if (elementHasProperty(plt,  elm, memberName)) {<EOL>                    // @Prop or @Prop({mutable:true})<EOL>                    // property values on the host element should override<EOL>                    // any default values on the component instance<EOL>                    if (values[memberName] === undefined) {<EOL>                        values[ memberName] = elm[memberName];<EOL>                    }<EOL>                }<EOL>            }<EOL>        }<EOL>        if (instance.hasOwnProperty(memberName) && values[memberName] === undefined) {<EOL>            // @Prop() or @Prop({mutable:true}) or @State()<EOL>            // we haven't yet got a value from the above checks so let's<EOL>            // read any \"own\" property instance values already set<EOL>            // to our internal value as the source of getter data<EOL>            // we're about to define a property and it'll overwrite this \"own\" property<EOL>            values[memberName] = instance[memberName];<EOL>        }<EOL>        if (property.watchCallbacks) {<EOL>            values[WATCH_CB_PREFIX + memberName] = property.watchCallbacks.slice();<EOL>        }<EOL>        // add getter/setter to the component instance<EOL>        // these will be pointed to the internal data set from the above checks<EOL>        definePropertyGetterSetter(instance, memberName, getComponentProp, setComponentProp);<EOL>    }<EOL>    else if (Build.element && property.elementRef) {<EOL>        // @Element()<EOL>        // add a getter to the element reference using<EOL>        // the member name the component meta provided<EOL>        definePropertyValue(","gt":"instance, memberName, elm);"}
{"input":"<s> function test1(x) {<EOL>    if (x instanceof","gt":"Object) {"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =","gt":"[];"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object.","gt":"keys(membersMeta).sort();"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object. keys(membersMeta).sort();<EOL>    memberNames.forEach(memberName => {<EOL>        const memberMeta = membersMeta[memberName];<EOL>","gt":"const d = ["}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object. keys(membersMeta).sort();<EOL>    memberNames.forEach(memberName => {<EOL>        const memberMeta = membersMeta[memberName];<EOL>         const d = [<EOL>            memberName,<EOL>            memberMeta.memberType<EOL>        ];<EOL>        if (memberMeta.propType === PROP_TYPE.Boolean || memberMeta.propType === PROP_TYPE.Number || memberMeta.propType === PROP_TYPE.String || memberMeta.propType === PROP_TYPE.Any) {<EOL>            // observe the attribute<EOL>            if (memberMeta.attribName !== memberName) {<EOL>                // property name and attribute name are different<EOL>                // ariaDisabled !== aria-disabled<EOL>                d.push(memberMeta.","gt":"attribName);"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object. keys(membersMeta).sort();<EOL>    memberNames.forEach(memberName => {<EOL>        const memberMeta = membersMeta[memberName];<EOL>         const d = [<EOL>            memberName,<EOL>            memberMeta.memberType<EOL>        ];<EOL>        if (memberMeta.propType === PROP_TYPE.Boolean || memberMeta.propType === PROP_TYPE.Number || memberMeta.propType === PROP_TYPE.String || memberMeta.propType === PROP_TYPE.Any) {<EOL>            // observe the attribute<EOL>            if (memberMeta.attribName !== memberName) {<EOL>                // property name and attribute name are different<EOL>                // ariaDisabled !== aria-disabled<EOL>                d.push(memberMeta. attribName);<EOL>            }<EOL>            else {<EOL>                // property name and attribute name are the exact same<EOL>                // checked === checked<EOL>                d.","gt":"push(<NUM_LIT>);"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object. keys(membersMeta).sort();<EOL>    memberNames.forEach(memberName => {<EOL>        const memberMeta = membersMeta[memberName];<EOL>         const d = [<EOL>            memberName,<EOL>            memberMeta.memberType<EOL>        ];<EOL>        if (memberMeta.propType === PROP_TYPE.Boolean || memberMeta.propType === PROP_TYPE.Number || memberMeta.propType === PROP_TYPE.String || memberMeta.propType === PROP_TYPE.Any) {<EOL>            // observe the attribute<EOL>            if (memberMeta.attribName !== memberName) {<EOL>                // property name and attribute name are different<EOL>                // ariaDisabled !== aria-disabled<EOL>                d.push(memberMeta. attribName);<EOL>            }<EOL>            else {<EOL>                // property name and attribute name are the exact same<EOL>                // checked === checked<EOL>                d. push(<NUM_LIT>);<EOL>            }<EOL>            d.push(memberMeta.propType);<EOL>        }<EOL>        else {<EOL>            // do not observe the attribute<EOL>            d.push(<NUM_LIT>);<EOL>            d.push(PROP_TYPE.Unknown);<EOL>        }<EOL>","gt":"if (memberMeta.ctrlId) {"}
{"input":"<s> function formatMembers(membersMeta) {<EOL>    if (!membersMeta) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    const observeAttrs =  [];<EOL>    const memberNames = Object. keys(membersMeta).sort();<EOL>    memberNames.forEach(memberName => {<EOL>        const memberMeta = membersMeta[memberName];<EOL>         const d = [<EOL>            memberName,<EOL>            memberMeta.memberType<EOL>        ];<EOL>        if (memberMeta.propType === PROP_TYPE.Boolean || memberMeta.propType === PROP_TYPE.Number || memberMeta.propType === PROP_TYPE.String || memberMeta.propType === PROP_TYPE.Any) {<EOL>            // observe the attribute<EOL>            if (memberMeta.attribName !== memberName) {<EOL>                // property name and attribute name are different<EOL>                // ariaDisabled !== aria-disabled<EOL>                d.push(memberMeta. attribName);<EOL>            }<EOL>            else {<EOL>                // property name and attribute name are the exact same<EOL>                // checked === checked<EOL>                d. push(<NUM_LIT>);<EOL>            }<EOL>            d.push(memberMeta.propType);<EOL>        }<EOL>        else {<EOL>            // do not observe the attribute<EOL>            d.push(<NUM_LIT>);<EOL>            d.push(PROP_TYPE.Unknown);<EOL>        }<EOL>         if (memberMeta.ctrlId) {<EOL>            d.push(memberMeta.ctrlId);<EOL>        }<EOL>","gt":"observeAttrs.push(d);"}
{"input":"<s> async function emptyArrayLiteral() {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> <EOL>export function createTranslateLoader(httpClient) {<EOL>    return new","gt":"TranslateHttpLoader(httpClient, '<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>     else {<EOL>        configFilePath = tsImpl.findConfigFile(context, tsImpl.sys.fileExists);<EOL>    }<EOL>    let existingOptions = tsImpl.convertCompilerOptionsFromJson(query, context, '<STR_LIT>');<EOL>    if (!configFilePath || query.configFileContent) {<EOL>        return {<EOL>            configFilePath: configFilePath || path.join(context, '<STR_LIT>'),<EOL>            compilerConfig: tsImpl.parseJsonConfigFileContent(query.configFileContent || {}, tsImpl.sys, context, _.extend({}, tsImpl.getDefaultCompilerOptions(), existingOptions.","gt":"options), context),"}
{"input":"<s> export function readConfigFile(context, query, options, tsImpl) {<EOL>    let configFilePath;<EOL>    if (query.configFileName && query.configFileName.match(/\\.json$/)) {<EOL>        configFilePath = absolutize(query.configFileName, context);<EOL>    }<EOL>     else {<EOL>        configFilePath = tsImpl.findConfigFile(context, tsImpl.sys.fileExists);<EOL>    }<EOL>    let existingOptions = tsImpl.convertCompilerOptionsFromJson(query, context, '<STR_LIT>');<EOL>    if (!configFilePath || query.configFileContent) {<EOL>        return {<EOL>            configFilePath: configFilePath || path.join(context, '<STR_LIT>'),<EOL>            compilerConfig: tsImpl.parseJsonConfigFileContent(query.configFileContent || {}, tsImpl.sys, context, _.extend({}, tsImpl.getDefaultCompilerOptions(), existingOptions. options), context),<EOL>            loaderConfig: query<EOL>        };<EOL>    }<EOL>    let jsonConfigFile = tsImpl.readConfigFile(configFilePath, tsImpl.sys.readFile);<EOL>    let","gt":"compilerConfig = tsImpl.parseJsonConfigFileContent(jsonConfigFile.config, tsImpl.sys, path.dirname(configFilePath), existingOptions.options, configFilePath);"}
{"input":"<s> function drawHover() {<EOL>    if (!tangentPoint)<EOL>        return;<EOL>","gt":"drawTangentLine();"}
{"input":"<s> function drawHover() {<EOL>    if (!tangentPoint)<EOL>        return;<EOL>     drawTangentLine();<EOL>    let coord = tangentPoint.coord;<EOL>    let point = tangentPoint.point;<EOL>    let coordStyle = {<EOL>        dashed: [<NUM_LIT>,","gt":"<NUM_LIT>],"}
{"input":"<s> function drawHover() {<EOL>    if (!tangentPoint)<EOL>        return;<EOL>     drawTangentLine();<EOL>    let coord = tangentPoint.coord;<EOL>    let point = tangentPoint.point;<EOL>    let coordStyle = {<EOL>        dashed: [<NUM_LIT>,  <NUM_LIT>],<EOL>        props: {<EOL>            lineWidth: <NUM_LIT>,<EOL>            strokeStyle: '<STR_LIT>',<EOL>        },<EOL>    };<EOL>    drawLine([<NUM_LIT>, coord[<NUM_LIT>]], [size.width, coord[<NUM_LIT>]], coordStyle);<EOL>    drawLine([coord[<NUM_LIT>],","gt":"<NUM_LIT>], [coord[<NUM_LIT>], size.height], coordStyle);"}
{"input":"<s> function drawHover() {<EOL>    if (!tangentPoint)<EOL>        return;<EOL>     drawTangentLine();<EOL>    let coord = tangentPoint.coord;<EOL>    let point = tangentPoint.point;<EOL>    let coordStyle = {<EOL>        dashed: [<NUM_LIT>,  <NUM_LIT>],<EOL>        props: {<EOL>            lineWidth: <NUM_LIT>,<EOL>            strokeStyle: '<STR_LIT>',<EOL>        },<EOL>    };<EOL>    drawLine([<NUM_LIT>, coord[<NUM_LIT>]], [size.width, coord[<NUM_LIT>]], coordStyle);<EOL>    drawLine([coord[<NUM_LIT>],  <NUM_LIT>], [coord[<NUM_LIT>], size.height], coordStyle);<EOL>    let date = new Date(point.time + point.reduce);<EOL>    let pointInfo = [<EOL>        '<STR_LIT>',<EOL>        date.getMinutes(),<EOL>        '<STR_LIT>',<EOL>        date.getSeconds(),<EOL>        '<STR_LIT>',<EOL>        date.getMilliseconds(),<EOL>        '<STR_LIT>',<EOL>        notation(point[monitorOptions.data]),<EOL>        '<STR_LIT>',<EOL>    ].","gt":"join('<STR_LIT>');"}
{"input":"<s> // length :: [a] -> Num<EOL>function length2(ar) {<EOL>    return ar.","gt":"length;"}
{"input":"<s> async function revokeToken(tokenInfo) {<EOL>    const token = await OAuthTokenModel.getByRefreshTokenAndPopulateUser(tokenInfo.refreshToken);<EOL>    if (token)<EOL>","gt":"token.destroy();"}
{"input":"<s> function foo() {<EOL>    var x;<EOL>","gt":"var y;"}
{"input":"<s> export function keyboardHandler(scrollbar) {<EOL>    const addEvent = eventScope(scrollbar);<EOL>    const container = scrollbar.containerEl;<EOL>    addEvent(container, '<STR_LIT>', (evt) => {<EOL>        if (document.activeElement !== container) {<EOL>","gt":"return;"}
{"input":"<s> export function keyboardHandler(scrollbar) {<EOL>    const addEvent = eventScope(scrollbar);<EOL>    const container = scrollbar.containerEl;<EOL>    addEvent(container, '<STR_LIT>', (evt) => {<EOL>        if (document.activeElement !== container) {<EOL>             return;<EOL>        }<EOL>        const delta = getKeyDelta(scrollbar, evt.keyCode || evt.which);<EOL>","gt":"if (!delta) {"}
{"input":"<s> export function keyboardHandler(scrollbar) {<EOL>    const addEvent = eventScope(scrollbar);<EOL>    const container = scrollbar.containerEl;<EOL>    addEvent(container, '<STR_LIT>', (evt) => {<EOL>        if (document.activeElement !== container) {<EOL>             return;<EOL>        }<EOL>        const delta = getKeyDelta(scrollbar, evt.keyCode || evt.which);<EOL>         if (!delta) {<EOL>            return;<EOL>        }<EOL>        const [x, y] = delta;<EOL>        scrollbar.addTransformableMomentum(x, y, evt, (willScroll) => {<EOL>","gt":"if (willScroll) {"}
{"input":"<s> export function keyboardHandler(scrollbar) {<EOL>    const addEvent = eventScope(scrollbar);<EOL>    const container = scrollbar.containerEl;<EOL>    addEvent(container, '<STR_LIT>', (evt) => {<EOL>        if (document.activeElement !== container) {<EOL>             return;<EOL>        }<EOL>        const delta = getKeyDelta(scrollbar, evt.keyCode || evt.which);<EOL>         if (!delta) {<EOL>            return;<EOL>        }<EOL>        const [x, y] = delta;<EOL>        scrollbar.addTransformableMomentum(x, y, evt, (willScroll) => {<EOL>             if (willScroll) {<EOL>                evt.preventDefault();<EOL>            }<EOL>            else {<EOL>                scrollbar.containerEl.blur();<EOL>                if (scrollbar.","gt":"parent) {"}
{"input":"<s> export function findCompiledModule(fileName) {<EOL>    let baseFileName = fileName.replace(/(\\.ts|\\.tsx)$/, '<STR_LIT>');<EOL>    let compiledFileName = `<STR_LIT>`;<EOL>    if (fs.existsSync(compiledFileName)) {<EOL>        let mapFileName = `<STR_LIT>`;<EOL>        let isMapExists = fs.existsSync(","gt":"mapFileName);"}
{"input":"<s> export function findCompiledModule(fileName) {<EOL>    let baseFileName = fileName.replace(/(\\.ts|\\.tsx)$/, '<STR_LIT>');<EOL>    let compiledFileName = `<STR_LIT>`;<EOL>    if (fs.existsSync(compiledFileName)) {<EOL>        let mapFileName = `<STR_LIT>`;<EOL>        let isMapExists = fs.existsSync( mapFileName);<EOL>        let result = {<EOL>            fileName: compiledFileName,<EOL>            text: fs.readFileSync(compiledFileName).toString(),<EOL>            mapName:","gt":"isMapExists ? mapFileName : null,"}
{"input":"<s> function computeCost(tour) {<EOL>    \"<STR_LIT>\";<EOL>    let total = <NUM_LIT>;<EOL>    for (let i = <NUM_LIT>; i < tour.","gt":"length; ++i) {"}
{"input":"<s> <EOL>export function mixinDisabled(base) {<EOL>    return class extends base {<EOL>        _disabled = false;<EOL>        constructor(...args) {<EOL>            super(...args);<EOL>        }<EOL>","gt":"get disabled() {"}
{"input":"<s> <EOL>export function mixinDisabled(base) {<EOL>    return class extends base {<EOL>        _disabled = false;<EOL>        constructor(...args) {<EOL>            super(...args);<EOL>        }<EOL>         get disabled() {<EOL>            return this._disabled;<EOL>        }<EOL>        set disabled(value) {<EOL>            let newValue = coerceBooleanProperty(value);<EOL>            if (this.","gt":"_disabled !== newValue) {"}
{"input":"<s> function ensureUserHasRight(userRight) {<EOL>    return function (req, res, next) {<EOL>        const user = res.locals.oauth.token.user;<EOL>        if (user.hasRight(userRight) === false) {<EOL>            const message =","gt":"} does not have right ${UserRight[userRight]} to access to ${req.path}.`<STR_LIT>;"}
{"input":"<s> function ensureUserHasRight(userRight) {<EOL>    return function (req, res, next) {<EOL>        const user = res.locals.oauth.token.user;<EOL>        if (user.hasRight(userRight) === false) {<EOL>            const message = `<STR_LIT>`;<EOL>            logger.info(message);<EOL>            return res.status(<NUM_LIT>)<EOL>                .json({<EOL>                error: message<EOL>            })<EOL>                .","gt":"end();"}
{"input":"<s> function setSeriesOpacity(chart, currSeries) {<EOL>    const opacity = currSeries.opacity;<EOL>    if (_.isNumber(opacity) || _.isString(opacity)) {<EOL>        return chart.opacity(opacity);<EOL>    }<EOL>    if (_.isArray(opacity) && opacity.length >= <NUM_LIT>) {<EOL>        if (opacity[<NUM_LIT>]) {<EOL>            return chart.opacity(opacity[<NUM_LIT>], opacity[<NUM_LIT>]);<EOL>        }<EOL>        return chart.opacity(","gt":"opacity[<NUM_LIT>]);"}
{"input":"<s> async function firstAssignment() {<EOL>    \"<STR_LIT>\";<EOL>    let booleanVar;<EOL>    let intVar;<EOL>","gt":"let numberVar;"}
{"input":"<s> async function firstAssignment() {<EOL>    \"<STR_LIT>\";<EOL>    let booleanVar;<EOL>    let intVar;<EOL>     let numberVar;<EOL>    let objectVar;<EOL>    let objectOrUndefined;<EOL>    booleanVar = true;<EOL>    intVar = <NUM_LIT>;<EOL>    numberVar = <NUM_LIT>;<EOL>    objectVar =","gt":"new MyClass();"}
{"input":"<s> async function removeVideoFromBlacklistController(req, res, next) {<EOL>    const blacklistedVideo = res.locals.blacklistedVideo;<EOL>    try {<EOL>        await blacklistedVideo.destroy();<EOL>","gt":"logger.info('<STR_LIT>', res.locals.video.uuid);"}
{"input":"<s> async function removeVideoFromBlacklistController(req, res, next) {<EOL>    const blacklistedVideo = res.locals.blacklistedVideo;<EOL>    try {<EOL>        await blacklistedVideo.destroy();<EOL>         logger.info('<STR_LIT>', res.locals.video.uuid);<EOL>        return res.sendStatus(<NUM_LIT>);<EOL>    }<EOL>    catch (err) {<EOL>        logger.","gt":"error('<STR_LIT>', res.locals.video.uuid, err);"}
{"input":"<s> export function downsidetasukigap(data) {<EOL>    return new DownsideTasukiGap().hasPattern(","gt":"data);"}
{"input":"<s> function f6(x) {<EOL>    return","gt":"null;"}
{"input":"<s> export function compile(config) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const compiler = webpack(config);<EOL>        compiler.run((err, stats) => {<EOL>            if (","gt":"err) {"}
{"input":"<s> <EOL>export function instanceAvailability(pluginObj, methodName) {<EOL>    return pluginObj._objectInstance && (!methodName || typeof pluginObj.","gt":"_objectInstance[methodName] !== '<STR_LIT>');"}
{"input":"<s> // Base style for all themes<EOL>function defaultStyles() {<EOL>    let scaleFactor = Config.scaleFactor();<EOL>    return {<EOL>        font: \"<STR_LIT>\",<EOL>        fontStyle: '<STR_LIT>',<EOL>","gt":"overflow: '<STR_LIT>',"}
{"input":"<s> // Base style for all themes<EOL>function defaultStyles() {<EOL>    let scaleFactor = Config.scaleFactor();<EOL>    return {<EOL>        font: \"<STR_LIT>\",<EOL>        fontStyle: '<STR_LIT>',<EOL>         overflow: '<STR_LIT>',<EOL>        fillColor: false,<EOL>        textColor: <NUM_LIT>,<EOL>        halign: '<STR_LIT>',<EOL>        valign:","gt":"'<STR_LIT>',"}
{"input":"<s> // Base style for all themes<EOL>function defaultStyles() {<EOL>    let scaleFactor = Config.scaleFactor();<EOL>    return {<EOL>        font: \"<STR_LIT>\",<EOL>        fontStyle: '<STR_LIT>',<EOL>         overflow: '<STR_LIT>',<EOL>        fillColor: false,<EOL>        textColor: <NUM_LIT>,<EOL>        halign: '<STR_LIT>',<EOL>        valign:  '<STR_LIT>',<EOL>        fontSize: <NUM_LIT>,<EOL>        cellPadding: <NUM_LIT> / scaleFactor,<EOL>","gt":"lineColor: <NUM_LIT>,"}
{"input":"<s> <EOL>export function TdJelloAnimation(jelloOptions = {}) {<EOL>    return trigger(jelloOptions.anchor || '<STR_LIT>', [<EOL>        state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>","gt":"state('<STR_LIT>', style({"}
{"input":"<s> <EOL>export function TdJelloAnimation(jelloOptions = {}) {<EOL>    return trigger(jelloOptions.anchor || '<STR_LIT>', [<EOL>        state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>         state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>        transition(","gt":"'<STR_LIT>', ["}
{"input":"<s> <EOL>export function TdJelloAnimation(jelloOptions = {}) {<EOL>    return trigger(jelloOptions.anchor || '<STR_LIT>', [<EOL>        state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>         state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>        transition( '<STR_LIT>', [<EOL>            group([<EOL>                query('<STR_LIT>', animateChild(), { optional: true }),<EOL>                animate((jelloOptions.duration || <NUM_LIT>) + '<STR_LIT>' + (jelloOptions.delay || <NUM_LIT>) + '<STR_LIT>', keyframes([<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>',","gt":"offset: <NUM_LIT> }),"}
{"input":"<s> <EOL>export function TdJelloAnimation(jelloOptions = {}) {<EOL>    return trigger(jelloOptions.anchor || '<STR_LIT>', [<EOL>        state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>         state('<STR_LIT>', style({<EOL>            transform: '<STR_LIT>',<EOL>        })),<EOL>        transition( '<STR_LIT>', [<EOL>            group([<EOL>                query('<STR_LIT>', animateChild(), { optional: true }),<EOL>                animate((jelloOptions.duration || <NUM_LIT>) + '<STR_LIT>' + (jelloOptions.delay || <NUM_LIT>) + '<STR_LIT>', keyframes([<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>',  offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset: <NUM_LIT> }),<EOL>                    style({ transform: '<STR_LIT>', offset:","gt":"<NUM_LIT> }),"}
{"input":"<s> export function getNgModules(context, types) {<EOL>    const ngModuleSuffix = getStringPropertyValue(Constants.","gt":"ENV_NG_MODULE_FILE_NAME_SUFFIX);"}
{"input":"<s> async function broadcastToFollowers(data, byActor, toActorFollowers, t, actorsException = []) {<EOL>","gt":"const uris = await computeFollowerUris(toActorFollowers, actorsException, t);"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let","gt":"table = Config.tableInstance();"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if (","gt":"row.maxLineCount <= <NUM_LIT>) {"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>","gt":"let pageHeight = table.doc.internal.pageSize.height;"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *","gt":"FONT_ROW_RATIO;"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>","gt":"remainingLineCount = <NUM_LIT>;"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>                     remainingLineCount = <NUM_LIT>;<EOL>                }<EOL>                if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {<EOL>                    let remainingLines = cell.text.splice(remainingLineCount, cell.text.length);<EOL>                    remainingTexts[col.dataKey] = remainingLines;<EOL>                    let cellHeight = cell.text.length * fontHeight + vPadding;<EOL>                    if (cellHeight > maxCellHeight) {<EOL>","gt":"maxCellHeight = cellHeight;"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>                     remainingLineCount = <NUM_LIT>;<EOL>                }<EOL>                if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {<EOL>                    let remainingLines = cell.text.splice(remainingLineCount, cell.text.length);<EOL>                    remainingTexts[col.dataKey] = remainingLines;<EOL>                    let cellHeight = cell.text.length * fontHeight + vPadding;<EOL>                    if (cellHeight > maxCellHeight) {<EOL>                         maxCellHeight = cellHeight;<EOL>                    }<EOL>                    let rCellHeight = remainingLines.length * fontHeight + vPadding;<EOL>","gt":"if (rCellHeight > remainingRowHeight) {"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>                     remainingLineCount = <NUM_LIT>;<EOL>                }<EOL>                if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {<EOL>                    let remainingLines = cell.text.splice(remainingLineCount, cell.text.length);<EOL>                    remainingTexts[col.dataKey] = remainingLines;<EOL>                    let cellHeight = cell.text.length * fontHeight + vPadding;<EOL>                    if (cellHeight > maxCellHeight) {<EOL>                         maxCellHeight = cellHeight;<EOL>                    }<EOL>                    let rCellHeight = remainingLines.length * fontHeight + vPadding;<EOL>                     if (rCellHeight > remainingRowHeight) {<EOL>                        remainingRowHeight = rCellHeight;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // Reset row height since text are now removed<EOL>            row.height = maxCellHeight;<EOL>        }<EOL>    }<EOL>    printRow(","gt":"row, drawRowHooks, drawCellHooks);"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>                     remainingLineCount = <NUM_LIT>;<EOL>                }<EOL>                if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {<EOL>                    let remainingLines = cell.text.splice(remainingLineCount, cell.text.length);<EOL>                    remainingTexts[col.dataKey] = remainingLines;<EOL>                    let cellHeight = cell.text.length * fontHeight + vPadding;<EOL>                    if (cellHeight > maxCellHeight) {<EOL>                         maxCellHeight = cellHeight;<EOL>                    }<EOL>                    let rCellHeight = remainingLines.length * fontHeight + vPadding;<EOL>                     if (rCellHeight > remainingRowHeight) {<EOL>                        remainingRowHeight = rCellHeight;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // Reset row height since text are now removed<EOL>            row.height = maxCellHeight;<EOL>        }<EOL>    }<EOL>    printRow( row, drawRowHooks, drawCellHooks);<EOL>    // Parts of the row is now printed. Time for adding a new page, prune <EOL>    // the text and start over<EOL>    if (Object.keys(remainingTexts).length > <NUM_LIT>) {<EOL>        for (let j = <NUM_LIT>;","gt":"j < table.columns.length; j++) {"}
{"input":"<s> export function printFullRow(row, drawRowHooks, drawCellHooks) {<EOL>    let remainingRowHeight = <NUM_LIT>;<EOL>    let remainingTexts = {};<EOL>    let  table = Config.tableInstance();<EOL>    if (!canFitOnPage(row.height)) {<EOL>        if ( row.maxLineCount <= <NUM_LIT>) {<EOL>            addPage();<EOL>        }<EOL>        else {<EOL>            // Modify the row to fit the current page and calculate text and height of partial row<EOL>            row.spansMultiplePages = true;<EOL>             let pageHeight = table.doc.internal.pageSize.height;<EOL>            let maxCellHeight = <NUM_LIT>;<EOL>            for (let j = <NUM_LIT>; j < table.columns.length; j++) {<EOL>                let col = table.columns[j];<EOL>                let cell = row.cells[col.dataKey];<EOL>                let fontHeight = cell.styles.fontSize / Config.scaleFactor() *  FONT_ROW_RATIO;<EOL>                let vPadding = cell.padding('<STR_LIT>');<EOL>                let remainingPageSpace = pageHeight - table.cursor.y - table.margin('<STR_LIT>');<EOL>                let remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);<EOL>                // Splice with negative values results in unexpected results, therefore eliminate<EOL>                // scenarios where less than one line is remaining, but are shown<EOL>                if (remainingLineCount < <NUM_LIT>) {<EOL>                     remainingLineCount = <NUM_LIT>;<EOL>                }<EOL>                if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {<EOL>                    let remainingLines = cell.text.splice(remainingLineCount, cell.text.length);<EOL>                    remainingTexts[col.dataKey] = remainingLines;<EOL>                    let cellHeight = cell.text.length * fontHeight + vPadding;<EOL>                    if (cellHeight > maxCellHeight) {<EOL>                         maxCellHeight = cellHeight;<EOL>                    }<EOL>                    let rCellHeight = remainingLines.length * fontHeight + vPadding;<EOL>                     if (rCellHeight > remainingRowHeight) {<EOL>                        remainingRowHeight = rCellHeight;<EOL>                    }<EOL>                }<EOL>            }<EOL>            // Reset row height since text are now removed<EOL>            row.height = maxCellHeight;<EOL>        }<EOL>    }<EOL>    printRow( row, drawRowHooks, drawCellHooks);<EOL>    // Parts of the row is now printed. Time for adding a new page, prune <EOL>    // the text and start over<EOL>    if (Object.keys(remainingTexts).length > <NUM_LIT>) {<EOL>        for (let j = <NUM_LIT>;  j < table.columns.length; j++) {<EOL>            let col = table.columns[j];<EOL>            let cell = row.cells[col.dataKey];<EOL>            cell.text = remainingTexts[col.","gt":"dataKey] || '<STR_LIT>';"}
{"input":"<s> async function isTherePendingRequests(servers) {<EOL>    const states = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    const tasks = [];<EOL>    let pendingRequests = false;<EOL>    // Check if each server has pending request<EOL>    for (const","gt":"server of servers) {"}
{"input":"<s> async function isTherePendingRequests(servers) {<EOL>    const states = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    const tasks = [];<EOL>    let pendingRequests = false;<EOL>    // Check if each server has pending request<EOL>    for (const  server of servers) {<EOL>        for (const state of states) {<EOL>            const p = getJobsListPaginationAndSort(server.url, server.accessToken, state, <NUM_LIT>, <NUM_LIT>, '<STR_LIT>')<EOL>                .then(res => {<EOL>                if (res.body.","gt":"total > <NUM_LIT>)"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return","gt":"args;"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args.","gt":"unshift(reject);"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args. unshift(reject);<EOL>        args.unshift(resolve);<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>') {<EOL>        args.push((err,","gt":"result) => {"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args. unshift(reject);<EOL>        args.unshift(resolve);<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>') {<EOL>        args.push((err,  result) => {<EOL>            if (err) {<EOL>                reject(err);<EOL>            }<EOL>            else {<EOL>                resolve(result);<EOL>            }<EOL>        });<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>' && opts.successName && opts.errorName) {<EOL>        let obj = {};<EOL>        obj[opts.successName] = resolve;<EOL>        obj[opts.errorName] = reject;<EOL>        args.push(obj);<EOL>    }<EOL>    else if (typeof opts.successIndex !== '<STR_LIT>' || typeof opts.errorIndex !== '<STR_LIT>') {<EOL>        const setSuccessIndex = () => {<EOL>            // If we've specified a success/error index<EOL>            if (opts.successIndex > args.length) {<EOL>                args[opts.successIndex] = resolve;<EOL>            }<EOL>            else {<EOL>                args.splice(opts.successIndex, <NUM_LIT>, resolve);<EOL>            }<EOL>        };<EOL>        const","gt":"setErrorIndex = () => {"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args. unshift(reject);<EOL>        args.unshift(resolve);<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>') {<EOL>        args.push((err,  result) => {<EOL>            if (err) {<EOL>                reject(err);<EOL>            }<EOL>            else {<EOL>                resolve(result);<EOL>            }<EOL>        });<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>' && opts.successName && opts.errorName) {<EOL>        let obj = {};<EOL>        obj[opts.successName] = resolve;<EOL>        obj[opts.errorName] = reject;<EOL>        args.push(obj);<EOL>    }<EOL>    else if (typeof opts.successIndex !== '<STR_LIT>' || typeof opts.errorIndex !== '<STR_LIT>') {<EOL>        const setSuccessIndex = () => {<EOL>            // If we've specified a success/error index<EOL>            if (opts.successIndex > args.length) {<EOL>                args[opts.successIndex] = resolve;<EOL>            }<EOL>            else {<EOL>                args.splice(opts.successIndex, <NUM_LIT>, resolve);<EOL>            }<EOL>        };<EOL>        const  setErrorIndex = () => {<EOL>            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been defined and thus causing non expected behaviour.<EOL>","gt":"if (opts.errorIndex > args.length) {"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args. unshift(reject);<EOL>        args.unshift(resolve);<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>') {<EOL>        args.push((err,  result) => {<EOL>            if (err) {<EOL>                reject(err);<EOL>            }<EOL>            else {<EOL>                resolve(result);<EOL>            }<EOL>        });<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>' && opts.successName && opts.errorName) {<EOL>        let obj = {};<EOL>        obj[opts.successName] = resolve;<EOL>        obj[opts.errorName] = reject;<EOL>        args.push(obj);<EOL>    }<EOL>    else if (typeof opts.successIndex !== '<STR_LIT>' || typeof opts.errorIndex !== '<STR_LIT>') {<EOL>        const setSuccessIndex = () => {<EOL>            // If we've specified a success/error index<EOL>            if (opts.successIndex > args.length) {<EOL>                args[opts.successIndex] = resolve;<EOL>            }<EOL>            else {<EOL>                args.splice(opts.successIndex, <NUM_LIT>, resolve);<EOL>            }<EOL>        };<EOL>        const  setErrorIndex = () => {<EOL>            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been defined and thus causing non expected behaviour.<EOL>             if (opts.errorIndex > args.length) {<EOL>                args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index<EOL>            }<EOL>            else {<EOL>                args.splice(opts.errorIndex, <NUM_LIT>, reject); // otherwise just splice it into the array<EOL>            }<EOL>        };<EOL>        if (opts.","gt":"successIndex > opts.errorIndex) {"}
{"input":"<s> function setIndex(args, opts = {}, resolve, reject) {<EOL>    // ignore resolve and reject in case sync<EOL>    if (opts.sync) {<EOL>        return  args;<EOL>    }<EOL>    // If the plugin method expects myMethod(success, err, options)<EOL>    if (opts.callbackOrder === '<STR_LIT>') {<EOL>        // Get those arguments in the order [resolve, reject, ...restOfArgs]<EOL>        args. unshift(reject);<EOL>        args.unshift(resolve);<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>') {<EOL>        args.push((err,  result) => {<EOL>            if (err) {<EOL>                reject(err);<EOL>            }<EOL>            else {<EOL>                resolve(result);<EOL>            }<EOL>        });<EOL>    }<EOL>    else if (opts.callbackStyle === '<STR_LIT>' && opts.successName && opts.errorName) {<EOL>        let obj = {};<EOL>        obj[opts.successName] = resolve;<EOL>        obj[opts.errorName] = reject;<EOL>        args.push(obj);<EOL>    }<EOL>    else if (typeof opts.successIndex !== '<STR_LIT>' || typeof opts.errorIndex !== '<STR_LIT>') {<EOL>        const setSuccessIndex = () => {<EOL>            // If we've specified a success/error index<EOL>            if (opts.successIndex > args.length) {<EOL>                args[opts.successIndex] = resolve;<EOL>            }<EOL>            else {<EOL>                args.splice(opts.successIndex, <NUM_LIT>, resolve);<EOL>            }<EOL>        };<EOL>        const  setErrorIndex = () => {<EOL>            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been defined and thus causing non expected behaviour.<EOL>             if (opts.errorIndex > args.length) {<EOL>                args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index<EOL>            }<EOL>            else {<EOL>                args.splice(opts.errorIndex, <NUM_LIT>, reject); // otherwise just splice it into the array<EOL>            }<EOL>        };<EOL>        if (opts. successIndex > opts.errorIndex) {<EOL>            setErrorIndex();<EOL>            setSuccessIndex();<EOL>        }<EOL>        else {<EOL>","gt":"setSuccessIndex();"}
{"input":"<s> export function normalizeUrl(browserUrl) {<EOL>    browserUrl = browserUrl.trim();<EOL>    if (browserUrl.charAt(<NUM_LIT>) !== '<STR_LIT>') {<EOL>        // ensure first char is a /<EOL>        browserUrl =","gt":"'<STR_LIT>' + browserUrl;"}
{"input":"<s> export function normalizeUrl(browserUrl) {<EOL>    browserUrl = browserUrl.trim();<EOL>    if (browserUrl.charAt(<NUM_LIT>) !== '<STR_LIT>') {<EOL>        // ensure first char is a /<EOL>        browserUrl =  '<STR_LIT>' + browserUrl;<EOL>    }<EOL>    if (browserUrl.length > <NUM_LIT> && browserUrl.charAt(browserUrl.length - <NUM_LIT>) === '<STR_LIT>') {<EOL>        // ensure last char is not a /<EOL>        browserUrl = browserUrl.substr(<NUM_LIT>,","gt":"browserUrl.length - <NUM_LIT>);"}
{"input":"<s> function splitAndMerge(array, lower, upper, sorted) {<EOL>    \"<STR_LIT>\";<EOL>    if (upper - lower < <NUM_LIT>) {<EOL>","gt":"return;"}
{"input":"<s> function getAccount(url, accountId, statusCodeExpected = <NUM_LIT>) {<EOL>    const path = '<STR_LIT>' + accountId;<EOL>    return","gt":"makeGetRequest({"}
{"input":"<s> function isMeaningfulLine(line) {<EOL>    if (line) {<EOL>        line = line.trim();<EOL>        if (line.","gt":"length) {"}
{"input":"<s> // const demo = {<EOL>//     title: true,<EOL>//     name: {<EOL>//         type: 'object',<EOL>//         schema: {<EOL>//             first: true,<EOL>//             second: true,<EOL>//             last: true<EOL>//         }<EOL>//     }<EOL>// }<EOL>export function persistObject(target, schema) {<EOL>","gt":"const model = createModel(schema);"}
{"input":"<s> // Thanks: https://gist.github.com/ghinda/8442a57f22099bdb2e34<EOL>function objectToFormData(obj, form, namespace) {<EOL>    let fd = form || new FormData();<EOL>    let formKey;<EOL>    for (let key of Object.keys(obj)) {<EOL>        if (namespace)<EOL>            formKey = `<STR_LIT>`;<EOL>","gt":"else"}
{"input":"<s> // Thanks: https://gist.github.com/ghinda/8442a57f22099bdb2e34<EOL>function objectToFormData(obj, form, namespace) {<EOL>    let fd = form || new FormData();<EOL>    let formKey;<EOL>    for (let key of Object.keys(obj)) {<EOL>        if (namespace)<EOL>            formKey = `<STR_LIT>`;<EOL>         else<EOL>            formKey = key;<EOL>        if (obj[key] === undefined)<EOL>            continue;<EOL>        if (","gt":"typeof obj[key] === '<STR_LIT>' && !(obj[key] instanceof File)) {"}
{"input":"<s> // Thanks: https://gist.github.com/ghinda/8442a57f22099bdb2e34<EOL>function objectToFormData(obj, form, namespace) {<EOL>    let fd = form || new FormData();<EOL>    let formKey;<EOL>    for (let key of Object.keys(obj)) {<EOL>        if (namespace)<EOL>            formKey = `<STR_LIT>`;<EOL>         else<EOL>            formKey = key;<EOL>        if (obj[key] === undefined)<EOL>            continue;<EOL>        if ( typeof obj[key] === '<STR_LIT>' && !(obj[key] instanceof File)) {<EOL>            objectToFormData(obj[key], fd, key);<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> function foo3({ skills = { primary: \"<STR_LIT>\", secondary: \"<STR_LIT>\" } } = robotA) {<EOL>    console.log(","gt":"skills.primary);"}
{"input":"<s> // We get db by param to not import it in this file (import orders)<EOL>async function usersExist() {<EOL>    const totalUsers =","gt":"await UserModel.countTotal();"}
{"input":"<s> export function normalizePath(str) {<EOL>    // Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar<EOL>    // https://github.com/sindresorhus/slash MIT<EOL>    // By Sindre Sorhus<EOL>    if (typeof str !== '<STR_LIT>') {<EOL>        throw new","gt":"Error(`<STR_LIT>`);"}
{"input":"<s> export function normalizePath(str) {<EOL>    // Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar<EOL>    // https://github.com/sindresorhus/slash MIT<EOL>    // By Sindre Sorhus<EOL>    if (typeof str !== '<STR_LIT>') {<EOL>        throw new  Error(`<STR_LIT>`);<EOL>    }<EOL>    str = str.trim();<EOL>    if (EXTENDED_PATH_REGEX.test(str) ||","gt":"NON_ASCII_REGEX.test(str)) {"}
{"input":"<s> export function normalizePath(str) {<EOL>    // Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar<EOL>    // https://github.com/sindresorhus/slash MIT<EOL>    // By Sindre Sorhus<EOL>    if (typeof str !== '<STR_LIT>') {<EOL>        throw new  Error(`<STR_LIT>`);<EOL>    }<EOL>    str = str.trim();<EOL>    if (EXTENDED_PATH_REGEX.test(str) ||  NON_ASCII_REGEX.test(str)) {<EOL>        return str;<EOL>    }<EOL>    str = str.replace(","gt":"SLASH_REGEX, '<STR_LIT>');"}
{"input":"<s> export function normalizePath(str) {<EOL>    // Convert Windows backslash paths to slash paths: foo\\\\bar ➔ foo/bar<EOL>    // https://github.com/sindresorhus/slash MIT<EOL>    // By Sindre Sorhus<EOL>    if (typeof str !== '<STR_LIT>') {<EOL>        throw new  Error(`<STR_LIT>`);<EOL>    }<EOL>    str = str.trim();<EOL>    if (EXTENDED_PATH_REGEX.test(str) ||  NON_ASCII_REGEX.test(str)) {<EOL>        return str;<EOL>    }<EOL>    str = str.replace( SLASH_REGEX, '<STR_LIT>');<EOL>    // always remove the trailing /<EOL>    // this makes our file cache look ups consistent<EOL>    if (","gt":"str.charAt(str.length - <NUM_LIT>) === '<STR_LIT>') {"}
{"input":"<s> function down(options) {<EOL>    throw","gt":"new Error('<STR_LIT>');"}
{"input":"<s> function lineFeedToHtml(obj, keyToNormalize) {<EOL>    return immutableAssign(","gt":"obj, {"}
{"input":"<s> async function getUserVideoQuotaUsed(req, res, next) {<EOL>    // We did not load channels in res.locals.user<EOL>    const user = await UserModel.","gt":"loadByUsernameAndPopulateChannels(res.locals.oauth.token.user.username);"}
{"input":"<s> function getVideoViewActivityPubUrl(byActor, video) {<EOL>    return video.url + '<STR_LIT>' + byActor.uuid + '<STR_LIT>' + new","gt":"Date().toISOString();"}
{"input":"<s> function swap(array, i1, i2) {<EOL>    \"<STR_LIT>\";<EOL>    const tmp = array[","gt":"i1];"}
{"input":"<s> async function listUsers(req, res, next) {<EOL>    const resultList = await UserModel.listForApi(","gt":"req.query.start, req.query.count, req.query.sort);"}
{"input":"<s> async function searchVideos(req, res, next) {<EOL>","gt":"const resultList = await VideoModel.searchAndPopulateAccountAndServerAndTags(req.query.search, req.query.start, req.query.count, req.query.sort);"}
{"input":"<s> function getModule() {<EOL>    if (!module) {<EOL>        require([\"<STR_LIT>\"], (","gt":"m) => {"}
{"input":"<s> <EOL>export function applyCodeGenerationContextMixin(derivedCtor) {<EOL>    Object.getOwnPropertyNames(CodeGenerationContextMixin.","gt":"prototype).forEach(name => {"}
{"input":"<s> function down(options) {<EOL>    throw","gt":"new Error('<STR_LIT>');"}
{"input":"<s> async function arraySpliceWithDeleteCount(array, start, deleteCount) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function sendCreateVideoCommentToVideoFollowers(comment, t) {<EOL>    const byActor = comment.Account.Actor;<EOL>    const threadParentComments = await VideoCommentModel.listThreadParentComments(comment, t);<EOL>    const commentObject = comment.toActivityPubObject(threadParentComments);<EOL>    const actorsInvolvedInComment = await getActorsInvolvedInVideo(comment.Video, t);<EOL>","gt":"actorsInvolvedInComment.push(byActor);"}
{"input":"<s> export function formatComponentConstructorEvents(eventsMeta) {<EOL>    if (!eventsMeta || !eventsMeta.length) {<EOL>","gt":"return null;"}
{"input":"<s> async function checkUserNameOrEmailDoesNotAlreadyExist(username, email, res) {<EOL>    const user = await UserModel.loadByUsernameOrEmail(username, email);<EOL>    if (user) {<EOL>","gt":"res.status(<NUM_LIT>)"}
{"input":"<s> async function removeVideoComment(req, res) {<EOL>    const videoCommentInstance = res.locals.videoComment;<EOL>    await sequelizeTypescript.","gt":"transaction(async (t) => {"}
{"input":"<s> // ---------------------------------------------------------------------------<EOL>function processUndoLike(actorUrl, activity) {<EOL>    const options = {<EOL>        arguments: [actorUrl,","gt":"activity],"}
{"input":"<s> function checkUpdateActivity(activity) {<EOL>    return isVideoTorrentUpdateActivityValid(","gt":"activity) ||"}
{"input":"<s> function isFileValid(files, mimeTypeRegex, field, optional = false) {<EOL>    // Should have files<EOL>    if (!files)<EOL>        return optional;<EOL>    if (isArray(files))<EOL>","gt":"return optional;"}
{"input":"<s> function isFileValid(files, mimeTypeRegex, field, optional = false) {<EOL>    // Should have files<EOL>    if (!files)<EOL>        return optional;<EOL>    if (isArray(files))<EOL>         return optional;<EOL>    // Should have a file<EOL>    const fileArray = files[field];<EOL>    if (!fileArray || fileArray.length === <NUM_LIT>) {<EOL>        return","gt":"optional;"}
{"input":"<s> function isFileValid(files, mimeTypeRegex, field, optional = false) {<EOL>    // Should have files<EOL>    if (!files)<EOL>        return optional;<EOL>    if (isArray(files))<EOL>         return optional;<EOL>    // Should have a file<EOL>    const fileArray = files[field];<EOL>    if (!fileArray || fileArray.length === <NUM_LIT>) {<EOL>        return  optional;<EOL>    }<EOL>    // The file should exist<EOL>","gt":"const file = fileArray[<NUM_LIT>];"}
{"input":"<s> // ---------------------------------------------------------------------------<EOL>async function processDeleteVideo(actor, videoToDelete) {<EOL>    const options = {<EOL>        arguments: [","gt":"actor, videoToDelete],"}
{"input":"<s> function euclideanDistance(x1, y1, x2, y2) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> function getRandomInt(min, max) {<EOL>    return Math.floor(Math.","gt":"random() * (max - min)) + min;"}
{"input":"<s> function isVideoTorrentUpdateActivityValid(activity) {<EOL>    return isBaseActivityValid(","gt":"activity, '<STR_LIT>') &&"}
{"input":"<s> function isVideoImage(files, field) {<EOL>    return isFileValid(","gt":"files, videoImageTypesRegex, field, true);"}
{"input":"<s> async function processFollowActivity(activity) {<EOL>","gt":"const activityObject = activity.object;"}
{"input":"<s> async function processUpdateActivity(activity) {<EOL>    const actor = await getOrCreateActorAndServerAndModel(activity.actor);<EOL>    const objectType = activity.object.type;<EOL>","gt":"if (objectType === '<STR_LIT>') {"}
{"input":"<s> // ---------------------------------------------------------------------------<EOL>function processVideoShare(actorAnnouncer, activity) {<EOL>    const options = {<EOL>        arguments: [","gt":"actorAnnouncer, activity],"}
{"input":"<s> function isActorTypeValid(type) {<EOL>    return type ===","gt":"'<STR_LIT>' || type === '<STR_LIT>' || type === '<STR_LIT>';"}
{"input":"<s> async function up(utils) {<EOL>    {<EOL>","gt":"const query = '<STR_LIT>' +"}
{"input":"<s> function down(options) {<EOL>    throw new","gt":"Error('<STR_LIT>');"}
{"input":"<s> function test() {<EOL>    var x = () => {<EOL>        (() =>","gt":"this)();"}
{"input":"<s> <EOL>function setProperty(elm, name, value) {<EOL>    try {<EOL>        elm[name] =","gt":"value;"}
{"input":"<s> export async function docs(config, compilerCtx) {<EOL>    compilerCtx = getCompilerCtx(config, compilerCtx);<EOL>    const buildCtx = getBuildContext(config, compilerCtx, null);<EOL>    config.logger.info(config.logger.cyan(`<STR_LIT>`));<EOL>    // keep track of how long the entire build process takes<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>","gt":"try {"}
{"input":"<s> export async function docs(config, compilerCtx) {<EOL>    compilerCtx = getCompilerCtx(config, compilerCtx);<EOL>    const buildCtx = getBuildContext(config, compilerCtx, null);<EOL>    config.logger.info(config.logger.cyan(`<STR_LIT>`));<EOL>    // keep track of how long the entire build process takes<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>     try {<EOL>        // begin the build<EOL>        // async scan the src directory for ts files<EOL>        // then transpile them all in one go<EOL>        await transpileAppModules(config, compilerCtx, buildCtx);<EOL>        // generate each of the readmes<EOL>        await","gt":"generateReadmes(config, compilerCtx);"}
{"input":"<s> export async function docs(config, compilerCtx) {<EOL>    compilerCtx = getCompilerCtx(config, compilerCtx);<EOL>    const buildCtx = getBuildContext(config, compilerCtx, null);<EOL>    config.logger.info(config.logger.cyan(`<STR_LIT>`));<EOL>    // keep track of how long the entire build process takes<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>     try {<EOL>        // begin the build<EOL>        // async scan the src directory for ts files<EOL>        // then transpile them all in one go<EOL>        await transpileAppModules(config, compilerCtx, buildCtx);<EOL>        // generate each of the readmes<EOL>        await  generateReadmes(config, compilerCtx);<EOL>    }<EOL>    catch (e) {<EOL>        // catch all phase<EOL>        catchError(buildCtx.diagnostics, e);<EOL>    }<EOL>    // finalize phase<EOL>    buildCtx.diagnostics = cleanDiagnostics(buildCtx.diagnostics);<EOL>    config.logger.printDiagnostics(buildCtx.diagnostics);<EOL>    // create a nice pretty message stating what happend<EOL>    let","gt":"buildStatus = '<STR_LIT>';"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path.","gt":"isAbsolute(config.globalScript)) {"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if (","gt":"typeof config.globalStyle === '<STR_LIT>') {"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config.","gt":"globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config.","gt":"globalStyle.map(globalStyle => {"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig(","gt":"config, '<STR_LIT>', DEFAULT_WWW_DIR);"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>","gt":"config.distDir = normalizePath(path.join(config.rootDir, config.distDir));"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config.","gt":"distDir, config.collectionDir));"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config. distDir, config.collectionDir));<EOL>    }<EOL>    setStringConfig(","gt":"config, '<STR_LIT>', DEFAULT_TSCONFIG);"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config. distDir, config.collectionDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_TSCONFIG);<EOL>    if (!path.isAbsolute(config.tsconfig)) {<EOL>        config.tsconfig = normalizePath(path.join(config.rootDir, config.tsconfig));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_TYPES_DIR);<EOL>    if (!path.isAbsolute(config.typesDir)) {<EOL>        config.typesDir = normalizePath(path.join(config.distDir, config.typesDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.srcDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.srcIndexHtml)) {<EOL>        config.srcIndexHtml = normalizePath(path.","gt":"join(config.rootDir, config.srcIndexHtml));"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config. distDir, config.collectionDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_TSCONFIG);<EOL>    if (!path.isAbsolute(config.tsconfig)) {<EOL>        config.tsconfig = normalizePath(path.join(config.rootDir, config.tsconfig));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_TYPES_DIR);<EOL>    if (!path.isAbsolute(config.typesDir)) {<EOL>        config.typesDir = normalizePath(path.join(config.distDir, config.typesDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.srcDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.srcIndexHtml)) {<EOL>        config.srcIndexHtml = normalizePath(path. join(config.rootDir, config.srcIndexHtml));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.wwwDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.wwwIndexHtml)) {<EOL>        config.wwwIndexHtml = normalizePath(","gt":"path.join(config.wwwDir, config.wwwIndexHtml));"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config. distDir, config.collectionDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_TSCONFIG);<EOL>    if (!path.isAbsolute(config.tsconfig)) {<EOL>        config.tsconfig = normalizePath(path.join(config.rootDir, config.tsconfig));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_TYPES_DIR);<EOL>    if (!path.isAbsolute(config.typesDir)) {<EOL>        config.typesDir = normalizePath(path.join(config.distDir, config.typesDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.srcDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.srcIndexHtml)) {<EOL>        config.srcIndexHtml = normalizePath(path. join(config.rootDir, config.srcIndexHtml));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.wwwDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.wwwIndexHtml)) {<EOL>        config.wwwIndexHtml = normalizePath( path.join(config.wwwDir, config.wwwIndexHtml));<EOL>    }<EOL>    if (config.writeLog) {<EOL>        setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_LOG_FILE_NAME);<EOL>        if (!path.isAbsolute(config.","gt":"buildLogFilePath)) {"}
{"input":"<s> export function validatePaths(config) {<EOL>    const path = config.sys.path;<EOL>    if (typeof config.global === '<STR_LIT>') {<EOL>        // deprecated: 2017-12-12<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.globalScript = config.global;<EOL>    }<EOL>    if (typeof config.globalScript === '<STR_LIT>' && !path. isAbsolute(config.globalScript)) {<EOL>        config.globalScript = normalizePath(path.join(config.rootDir, config.globalScript));<EOL>    }<EOL>    if ( typeof config.globalStyle === '<STR_LIT>') {<EOL>        config.globalStyle = [config.globalStyle];<EOL>    }<EOL>    if (Array.isArray(config.globalStyle)) {<EOL>        config. globalStyle = config.globalStyle.filter(globalStyle => typeof globalStyle === '<STR_LIT>');<EOL>        config.globalStyle = config. globalStyle.map(globalStyle => {<EOL>            if (path.isAbsolute(globalStyle)) {<EOL>                return normalizePath(globalStyle);<EOL>            }<EOL>            return normalizePath(path.join(config.rootDir, globalStyle));<EOL>        });<EOL>    }<EOL>    if (typeof config.src === '<STR_LIT>') {<EOL>        // deprecated: 2017-08-14<EOL>        config.logger.warn(`<STR_LIT>`);<EOL>        config.srcDir = config.src;<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_SRC_DIR);<EOL>    if (!path.isAbsolute(config.srcDir)) {<EOL>        config.srcDir = normalizePath(path.join(config.rootDir, config.srcDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_WWW_DIR);<EOL>    if (!path.isAbsolute(config.wwwDir)) {<EOL>        config.wwwDir = normalizePath(path.join(config.rootDir, config.wwwDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_DIR);<EOL>    if (!path.isAbsolute(config.buildDir)) {<EOL>        config.buildDir = normalizePath(path.join(config.wwwDir, config.buildDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_DIST_DIR);<EOL>    if (!path.isAbsolute(config.distDir)) {<EOL>         config.distDir = normalizePath(path.join(config.rootDir, config.distDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_COLLECTION_DIR);<EOL>    if (!path.isAbsolute(config.collectionDir)) {<EOL>        config.collectionDir = normalizePath(path.join(config. distDir, config.collectionDir));<EOL>    }<EOL>    setStringConfig( config, '<STR_LIT>', DEFAULT_TSCONFIG);<EOL>    if (!path.isAbsolute(config.tsconfig)) {<EOL>        config.tsconfig = normalizePath(path.join(config.rootDir, config.tsconfig));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', DEFAULT_TYPES_DIR);<EOL>    if (!path.isAbsolute(config.typesDir)) {<EOL>        config.typesDir = normalizePath(path.join(config.distDir, config.typesDir));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.srcDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.srcIndexHtml)) {<EOL>        config.srcIndexHtml = normalizePath(path. join(config.rootDir, config.srcIndexHtml));<EOL>    }<EOL>    setStringConfig(config, '<STR_LIT>', normalizePath(path.join(config.wwwDir, DEFAULT_INDEX_HTML)));<EOL>    if (!path.isAbsolute(config.wwwIndexHtml)) {<EOL>        config.wwwIndexHtml = normalizePath( path.join(config.wwwDir, config.wwwIndexHtml));<EOL>    }<EOL>    if (config.writeLog) {<EOL>        setStringConfig(config, '<STR_LIT>', DEFAULT_BUILD_LOG_FILE_NAME);<EOL>        if (!path.isAbsolute(config. buildLogFilePath)) {<EOL>            config.buildLogFilePath = normalizePath(path.join(","gt":"config.rootDir, config.buildLogFilePath));"}
{"input":"<s> function Jupiter() {<EOL>    return new Body(","gt":"<NUM_LIT>, -<NUM_LIT>, -<NUM_LIT>, <NUM_LIT> * DAYS_PER_YEAR, <NUM_LIT> * DAYS_PER_YEAR, -<NUM_LIT> * DAYS_PER_YEAR, <NUM_LIT> * SOLAR_MASS);"}
{"input":"<s> export async function processCopyTasks(config, compilerCtx, allCopyTasks, copyTask) {<EOL>    if (!copyTask) {<EOL>        // possible null was set, which is fine, just skip over this one<EOL>        return;<EOL>    }<EOL>    if (!copyTask.src) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (copyTask.dest && config.sys.isGlob(copyTask.dest)) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (config.sys.isGlob(copyTask.src)) {<EOL>        const copyTasks = await processGlob(","gt":"config, copyTask);"}
{"input":"<s> export async function processCopyTasks(config, compilerCtx, allCopyTasks, copyTask) {<EOL>    if (!copyTask) {<EOL>        // possible null was set, which is fine, just skip over this one<EOL>        return;<EOL>    }<EOL>    if (!copyTask.src) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (copyTask.dest && config.sys.isGlob(copyTask.dest)) {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    if (config.sys.isGlob(copyTask.src)) {<EOL>        const copyTasks = await processGlob( config, copyTask);<EOL>        allCopyTasks.push(...copyTasks);<EOL>        return;<EOL>    }<EOL>","gt":"if (config.generateWWW) {"}
{"input":"<s> <EOL>export function generateCondition(condition, whenTrue, whenFalse, context) {<EOL>    if (condition.kind === ts.SyntaxKind.ParenthesizedExpression) {<EOL>        return generateCondition(condition.expression, whenTrue, whenFalse, context);<EOL>    }<EOL>    if (condition.kind === ts.SyntaxKind.BinaryExpression) {<EOL>        const binaryExpression = condition;<EOL>        // x && y<EOL>        if (binaryExpression.operatorToken.kind === ts.SyntaxKind.","gt":"AmpersandAmpersandToken) {"}
{"input":"<s> <EOL>export function generateCondition(condition, whenTrue, whenFalse, context) {<EOL>    if (condition.kind === ts.SyntaxKind.ParenthesizedExpression) {<EOL>        return generateCondition(condition.expression, whenTrue, whenFalse, context);<EOL>    }<EOL>    if (condition.kind === ts.SyntaxKind.BinaryExpression) {<EOL>        const binaryExpression = condition;<EOL>        // x && y<EOL>        if (binaryExpression.operatorToken.kind === ts.SyntaxKind. AmpersandAmpersandToken) {<EOL>            const rhsBlock = llvm.BasicBlock.create(context.llvmContext, \"<STR_LIT>\");<EOL>            generateCondition(binaryExpression.left, rhsBlock, whenFalse, context);<EOL>            context.scope.enclosingFunction.addBasicBlock(rhsBlock);<EOL>            context.","gt":"builder.setInsertionPoint(rhsBlock);"}
{"input":"<s> <EOL>export function generateCondition(condition, whenTrue, whenFalse, context) {<EOL>    if (condition.kind === ts.SyntaxKind.ParenthesizedExpression) {<EOL>        return generateCondition(condition.expression, whenTrue, whenFalse, context);<EOL>    }<EOL>    if (condition.kind === ts.SyntaxKind.BinaryExpression) {<EOL>        const binaryExpression = condition;<EOL>        // x && y<EOL>        if (binaryExpression.operatorToken.kind === ts.SyntaxKind. AmpersandAmpersandToken) {<EOL>            const rhsBlock = llvm.BasicBlock.create(context.llvmContext, \"<STR_LIT>\");<EOL>            generateCondition(binaryExpression.left, rhsBlock, whenFalse, context);<EOL>            context.scope.enclosingFunction.addBasicBlock(rhsBlock);<EOL>            context. builder.setInsertionPoint(rhsBlock);<EOL>            generateCondition(binaryExpression.right, whenTrue, whenFalse, context);<EOL>            return;<EOL>        }<EOL>        else if (binaryExpression.operatorToken.kind === ts.SyntaxKind.BarBarToken) {<EOL>            const rhsBlock = llvm.BasicBlock.create(context.llvmContext, \"<STR_LIT>\");<EOL>            generateCondition(binaryExpression.left, whenTrue, rhsBlock, context);<EOL>            context.scope.enclosingFunction.addBasicBlock(rhsBlock);<EOL>","gt":"context.builder.setInsertionPoint(rhsBlock);"}
{"input":"<s> <EOL>export function generateCondition(condition, whenTrue, whenFalse, context) {<EOL>    if (condition.kind === ts.SyntaxKind.ParenthesizedExpression) {<EOL>        return generateCondition(condition.expression, whenTrue, whenFalse, context);<EOL>    }<EOL>    if (condition.kind === ts.SyntaxKind.BinaryExpression) {<EOL>        const binaryExpression = condition;<EOL>        // x && y<EOL>        if (binaryExpression.operatorToken.kind === ts.SyntaxKind. AmpersandAmpersandToken) {<EOL>            const rhsBlock = llvm.BasicBlock.create(context.llvmContext, \"<STR_LIT>\");<EOL>            generateCondition(binaryExpression.left, rhsBlock, whenFalse, context);<EOL>            context.scope.enclosingFunction.addBasicBlock(rhsBlock);<EOL>            context. builder.setInsertionPoint(rhsBlock);<EOL>            generateCondition(binaryExpression.right, whenTrue, whenFalse, context);<EOL>            return;<EOL>        }<EOL>        else if (binaryExpression.operatorToken.kind === ts.SyntaxKind.BarBarToken) {<EOL>            const rhsBlock = llvm.BasicBlock.create(context.llvmContext, \"<STR_LIT>\");<EOL>            generateCondition(binaryExpression.left, whenTrue, rhsBlock, context);<EOL>            context.scope.enclosingFunction.addBasicBlock(rhsBlock);<EOL>             context.builder.setInsertionPoint(rhsBlock);<EOL>            generateCondition(binaryExpression.right, whenTrue, whenFalse, context);<EOL>            return;<EOL>        }<EOL>    }<EOL>    else if (condition.kind === ts.SyntaxKind.PrefixUnaryExpression) {<EOL>        const unaryExpression = condition;<EOL>        if (unaryExpression.","gt":"operator === ts.SyntaxKind.ExclamationToken) {"}
{"input":"<s> async function percentImplicitCast() {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function validate(input, key, validators) {<EOL>    const errors = [];<EOL>    for (const validator of validators) {<EOL>        const message = validator(input, key);<EOL>        if (message !==","gt":"true) {"}
{"input":"<s> export function validate(input, key, validators) {<EOL>    const errors = [];<EOL>    for (const validator of validators) {<EOL>        const message = validator(input, key);<EOL>        if (message !==  true) {<EOL>            errors.push({ key, message, validator });<EOL>        }<EOL>    }<EOL>    if (","gt":"errors.length > <NUM_LIT>) {"}
{"input":"<s> async function processCopyTaskDestDir(config, compilerCtx, allCopyTasks, copyTask, destAbsDir) {<EOL>    const processedCopyTask = processCopyTask(config, copyTask, destAbsDir);<EOL>    try {<EOL>        const stats = await compilerCtx.fs.stat(processedCopyTask.src);<EOL>        processedCopyTask.isDirectory =","gt":"stats.isDirectory;"}
{"input":"<s> async function processCopyTaskDestDir(config, compilerCtx, allCopyTasks, copyTask, destAbsDir) {<EOL>    const processedCopyTask = processCopyTask(config, copyTask, destAbsDir);<EOL>    try {<EOL>        const stats = await compilerCtx.fs.stat(processedCopyTask.src);<EOL>        processedCopyTask.isDirectory =  stats.isDirectory;<EOL>        config.logger.debug(`<STR_LIT>`);<EOL>        allCopyTasks.push(processedCopyTask);<EOL>    }<EOL>    catch (e) {<EOL>        if (copyTask.warn !== false) {<EOL>            config.logger.warn(","gt":"e}`<STR_LIT>;"}
{"input":"<s> export async function simjs(seed, runs) {<EOL>    \"<STR_LIT>\";<EOL>    const random = new Random(seed);<EOL>    let","gt":"sum = <NUM_LIT>;"}
{"input":"<s> export function createExportedWidget3() {<EOL>    return Widgets1.","gt":"createWidget3();"}
{"input":"<s> export function parseExpression(content) {<EOL>    let result = null;<EOL>    try {<EOL>        result = parser_pegjs.parse(content, { startRule: \"<STR_LIT>\" });<EOL>    }<EOL>    catch (e) {<EOL>        if (e.location) {<EOL>            throw new ParseError(e.message, e.location.start, e.location.end);<EOL>        }<EOL>        else {<EOL>            throw","gt":"new ParseError(e.message);"}
{"input":"<s> export function getTypeConversion(srcType, destType) {<EOL>    return typeConversions.get(","gt":"destType}`<STR_LIT>;"}
{"input":"<s> export function greaterThan(a1, a2) {<EOL>    return op(\"<STR_LIT>\", \"<STR_LIT>\", a1,","gt":"a2);"}
{"input":"<s> export async function doAdd(config, platformName) {<EOL>    await runTask(chalk `<STR_LIT>`, async () => {<EOL>        if (platformName === config.ios.name) {<EOL>","gt":"await addIOS(config);"}
{"input":"<s> function f18() {<EOL>    return","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function callExpression17() {<EOL>    (await x)[a](","gt":"y, z);"}
{"input":"<s> <EOL>export function serverTask(packagePath, livereload = true) {<EOL>    // The http-rewrite-middlware only supports relative paths as rewrite destinations.<EOL>    const relativePath = path.relative(projectDir, packagePath);<EOL>    return () => {<EOL>        gulpConnect.server({<EOL>            root: projectDir,<EOL>","gt":"livereload: livereload,"}
{"input":"<s> <EOL>export function serverTask(packagePath, livereload = true) {<EOL>    // The http-rewrite-middlware only supports relative paths as rewrite destinations.<EOL>    const relativePath = path.relative(projectDir, packagePath);<EOL>    return () => {<EOL>        gulpConnect.server({<EOL>            root: projectDir,<EOL>             livereload: livereload,<EOL>            port: <NUM_LIT>,<EOL>            fallback: path.join(packagePath, '<STR_LIT>'),<EOL>            middleware: () => {<EOL>                return [httpRewrite.","gt":"getMiddleware(["}
{"input":"<s> <EOL>export function serverTask(packagePath, livereload = true) {<EOL>    // The http-rewrite-middlware only supports relative paths as rewrite destinations.<EOL>    const relativePath = path.relative(projectDir, packagePath);<EOL>    return () => {<EOL>        gulpConnect.server({<EOL>            root: projectDir,<EOL>             livereload: livereload,<EOL>            port: <NUM_LIT>,<EOL>            fallback: path.join(packagePath, '<STR_LIT>'),<EOL>            middleware: () => {<EOL>                return [httpRewrite. getMiddleware([<EOL>                        { from: '<STR_LIT>', to: '<STR_LIT>' },<EOL>                        { from: '<STR_LIT>', to: '<STR_LIT>' },<EOL>                        { from:","gt":"'<STR_LIT>', to: `<STR_LIT>` }"}
{"input":"<s> async function breakToLabelWithReturnInNormalEnd() {<EOL>    \"<STR_LIT>\";<EOL>    let i = <NUM_LIT>;<EOL>    // tslint:disable-next-line<EOL>","gt":"outer_block: {"}
{"input":"<s> function yieldString() {<EOL>","gt":"yield '<STR_LIT>';"}
{"input":"<s> function foo1({ skills: { primary: primaryA, secondary: secondaryA } }) {<EOL>","gt":"console.log(primaryA);"}
{"input":"<s> export function rebuild(config, compilerCtx, watcher) {<EOL>    // print out a pretty message about the changed files<EOL>    printWatcherMessage(config, watcher);<EOL>    if (","gt":"watcher.configUpdated) {"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>","gt":"fs: compilerCtx.fs,"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>","gt":"diagnostics: []"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>         diagnostics: []<EOL>    };<EOL>    const resolvedId = await runPluginResolveId(pluginCtx, id);<EOL>    const sourceText =","gt":"await runPluginLoad(pluginCtx, resolvedId);"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>         diagnostics: []<EOL>    };<EOL>    const resolvedId = await runPluginResolveId(pluginCtx, id);<EOL>    const sourceText =  await runPluginLoad(pluginCtx, resolvedId);<EOL>    const transformResults = {<EOL>        code: sourceText,<EOL>        id: id<EOL>    };<EOL>    for (const plugin of pluginCtx.config.plugins) {<EOL>        if (typeof","gt":"plugin.transform === '<STR_LIT>') {"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>         diagnostics: []<EOL>    };<EOL>    const resolvedId = await runPluginResolveId(pluginCtx, id);<EOL>    const sourceText =  await runPluginLoad(pluginCtx, resolvedId);<EOL>    const transformResults = {<EOL>        code: sourceText,<EOL>        id: id<EOL>    };<EOL>    for (const plugin of pluginCtx.config.plugins) {<EOL>        if (typeof  plugin.transform === '<STR_LIT>') {<EOL>            try {<EOL>                let pluginTransformResults;<EOL>                const results = plugin.transform(transformResults.code, transformResults.id, pluginCtx);<EOL>                if (results != null) {<EOL>                    if (typeof results.then ===","gt":"'<STR_LIT>') {"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>         diagnostics: []<EOL>    };<EOL>    const resolvedId = await runPluginResolveId(pluginCtx, id);<EOL>    const sourceText =  await runPluginLoad(pluginCtx, resolvedId);<EOL>    const transformResults = {<EOL>        code: sourceText,<EOL>        id: id<EOL>    };<EOL>    for (const plugin of pluginCtx.config.plugins) {<EOL>        if (typeof  plugin.transform === '<STR_LIT>') {<EOL>            try {<EOL>                let pluginTransformResults;<EOL>                const results = plugin.transform(transformResults.code, transformResults.id, pluginCtx);<EOL>                if (results != null) {<EOL>                    if (typeof results.then ===  '<STR_LIT>') {<EOL>                        pluginTransformResults = await results;<EOL>                    }<EOL>                    else {<EOL>                        pluginTransformResults = results;<EOL>                    }<EOL>","gt":"if (pluginTransformResults != null) {"}
{"input":"<s> export async function runPluginTransforms(config, compilerCtx, buildCtx, id) {<EOL>    const pluginCtx = {<EOL>        config: config,<EOL>        sys: config.sys,<EOL>         fs: compilerCtx.fs,<EOL>        cache: compilerCtx.cache,<EOL>         diagnostics: []<EOL>    };<EOL>    const resolvedId = await runPluginResolveId(pluginCtx, id);<EOL>    const sourceText =  await runPluginLoad(pluginCtx, resolvedId);<EOL>    const transformResults = {<EOL>        code: sourceText,<EOL>        id: id<EOL>    };<EOL>    for (const plugin of pluginCtx.config.plugins) {<EOL>        if (typeof  plugin.transform === '<STR_LIT>') {<EOL>            try {<EOL>                let pluginTransformResults;<EOL>                const results = plugin.transform(transformResults.code, transformResults.id, pluginCtx);<EOL>                if (results != null) {<EOL>                    if (typeof results.then ===  '<STR_LIT>') {<EOL>                        pluginTransformResults = await results;<EOL>                    }<EOL>                    else {<EOL>                        pluginTransformResults = results;<EOL>                    }<EOL>                     if (pluginTransformResults != null) {<EOL>                        if (typeof pluginTransformResults === '<STR_LIT>') {<EOL>                            transformResults.code = pluginTransformResults;<EOL>                        }<EOL>                        else {<EOL>                            if (typeof pluginTransformResults.code === '<STR_LIT>') {<EOL>                                transformResults.code = pluginTransformResults.code;<EOL>                            }<EOL>                            if (typeof pluginTransformResults.id === '<STR_LIT>') {<EOL>                                transformResults.id = pluginTransformResults.id;<EOL>                            }<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>            catch (e) {<EOL>                const d =","gt":"catchError(buildCtx.diagnostics, e);"}
{"input":"<s> /// <reference path='fourslash.ts' /><EOL>////module M {<EOL>////    export interface I { }<EOL>////    export class C {<EOL>////        static property;<EOL>////    }<EOL>////    export enum E {<EOL>////        value = 0<EOL>////    }<EOL>////    export module N {<EOL>////        export var v;<EOL>////    }<EOL>////    export var V = 0;<EOL>////    export function F() { }<EOL>////    export import A = M;<EOL>////}<EOL>////<EOL>////import m = M;<EOL>////import c = M.C;<EOL>////import e = M.E;<EOL>////import n = M.N;<EOL>////import v = M.V;<EOL>////import f = M.F;<EOL>////import a = M.A;<EOL>////<EOL>////m./*1*/;<EOL>////var tmp: m./*1Type*/;<EOL>////c./*2*/;<EOL>////e./*3*/;<EOL>////n./*4*/;<EOL>////v./*5*/;<EOL>////f./*6*/;<EOL>////a./*7*/;<EOL>////var tmp2: a./*7Type*/;<EOL>function getVerify(isTypeLocation) {<EOL>    return {<EOL>        verifyValue: isTypeLocation ? verify.","gt":"not : verify,"}
{"input":"<s> function mockXMLParse(func) {<EOL>    return prequire(\"<STR_LIT>\", {<EOL>        \"<STR_LIT>\": {<EOL>            default: {<EOL>                parseXML: (","gt":"srcHtml) => {"}
{"input":"<s> export function readXML(path) {<EOL>    return new Promise((resolve, reject) => {<EOL>        readFile(path, '<STR_LIT>', async (err, xmlStr) => {<EOL>            if (err) {<EOL>                reject(`<STR_LIT>`);<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> export function readXML(path) {<EOL>    return new Promise((resolve, reject) => {<EOL>        readFile(path, '<STR_LIT>', async (err, xmlStr) => {<EOL>            if (err) {<EOL>                reject(`<STR_LIT>`);<EOL>            }<EOL>             else {<EOL>                const xml2js = await import('<STR_LIT>');<EOL>                xml2js.parseString(xmlStr, (err, result) => {<EOL>                    if (err) {<EOL>                        reject(","gt":"path}, ${err}`<STR_LIT>;"}
{"input":"<s> async function addInts(x, y) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> function goToMarkAndGeneralVerify(marker) {<EOL>    goTo.marker(marker);<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.","gt":"not.completionListContains('<STR_LIT>');"}
{"input":"<s> function goToMarkAndGeneralVerify(marker) {<EOL>    goTo.marker(marker);<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify. not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.not.completionListContains('<STR_LIT>');<EOL>    verify.","gt":"not.completionListContains('<STR_LIT>');"}
{"input":"<s> export function isInstanceOfObjectMap(object) {<EOL>    return (!object.hasOwnProperty('<STR_LIT>') &&<EOL>        !object.hasOwnProperty(","gt":"'<STR_LIT>') &&"}
{"input":"<s> function handleColorsChanged() {<EOL>    var UIColorType = _WinRT.Windows.UI.ViewManagement.UIColorType;<EOL>    var uiColor = UISettings.getColorValue(_WinRT.Windows.UI.ViewManagement.UIColorType.accent);<EOL>    var accent = colorToString(uiColor, <NUM_LIT>);<EOL>    if (","gt":"colors[<NUM_LIT>] === accent) {"}
{"input":"<s> function handleColorsChanged() {<EOL>    var UIColorType = _WinRT.Windows.UI.ViewManagement.UIColorType;<EOL>    var uiColor = UISettings.getColorValue(_WinRT.Windows.UI.ViewManagement.UIColorType.accent);<EOL>    var accent = colorToString(uiColor, <NUM_LIT>);<EOL>    if ( colors[<NUM_LIT>] === accent) {<EOL>        return;<EOL>    }<EOL>    // Establish colors<EOL>    // The order of the colors align with the ColorTypes enum values<EOL>","gt":"colors.length = <NUM_LIT>;"}
{"input":"<s> async function forInStatement8() {<EOL>    for (var","gt":"c in y) {"}
{"input":"<s> async function runNextPrerenderUrl(config, compilerCtx, buildCtx, prerenderQueue, indexSrcHtml, hydrateResults, resolve) {<EOL>    const p = prerenderQueue.find(p => p.status === '<STR_LIT>');<EOL>    if (!p)<EOL>        return;<EOL>    // we've got a url that's pending<EOL>    // well guess what, it's go time<EOL>    p.status = '<STR_LIT>';<EOL>    try {<EOL>        // prender this path and wait on the results<EOL>        const results =","gt":"await prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, p);"}
{"input":"<s> async function runNextPrerenderUrl(config, compilerCtx, buildCtx, prerenderQueue, indexSrcHtml, hydrateResults, resolve) {<EOL>    const p = prerenderQueue.find(p => p.status === '<STR_LIT>');<EOL>    if (!p)<EOL>        return;<EOL>    // we've got a url that's pending<EOL>    // well guess what, it's go time<EOL>    p.status = '<STR_LIT>';<EOL>    try {<EOL>        // prender this path and wait on the results<EOL>        const results =  await prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, p);<EOL>        // awesome!!<EOL>        // merge any diagnostics we just got from this<EOL>        config.logger.printDiagnostics(","gt":"results.diagnostics);"}
{"input":"<s> async function runNextPrerenderUrl(config, compilerCtx, buildCtx, prerenderQueue, indexSrcHtml, hydrateResults, resolve) {<EOL>    const p = prerenderQueue.find(p => p.status === '<STR_LIT>');<EOL>    if (!p)<EOL>        return;<EOL>    // we've got a url that's pending<EOL>    // well guess what, it's go time<EOL>    p.status = '<STR_LIT>';<EOL>    try {<EOL>        // prender this path and wait on the results<EOL>        const results =  await prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, p);<EOL>        // awesome!!<EOL>        // merge any diagnostics we just got from this<EOL>        config.logger.printDiagnostics( results.diagnostics);<EOL>        if (config.prerender.crawl !== false) {<EOL>            crawlAnchorsForNextUrls(config, prerenderQueue, results);<EOL>        }<EOL>        hydrateResults.push(results);<EOL>        await writePrerenderDest(config, compilerCtx, results);<EOL>    }<EOL>    catch (e) {<EOL>        // darn, idk, bad news<EOL>        catchError(","gt":"buildCtx.diagnostics, e);"}
{"input":"<s> async function ampersand() {<EOL>    \"<STR_LIT>\";<EOL>","gt":"<NUM_LIT> & <NUM_LIT>;"}
{"input":"<s> //<EOL>// States (each implements IOpenCloseState)<EOL>//<EOL>// WinJS animation promises always complete successfully. This<EOL>// helper allows an animation promise to complete in the canceled state<EOL>// so that the success handler can be skipped when the animation is<EOL>// interrupted.<EOL>function cancelablePromise(animationPromise) {<EOL>    return Promise._cancelBlocker(animationPromise,","gt":"function () {"}
{"input":"<s> async function writePrerenderDest(config, ctx, results) {<EOL>    const parsedUrl = config.sys.url.parse(results.url);<EOL>    // figure out the directory where this file will be saved<EOL>    const dir = config.sys.path.join(config.","gt":"prerender.prerenderDir, parsedUrl.pathname);"}
{"input":"<s> async function powEqualsNumbers(base, exponent) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function createBundleJsText(config, compilerCtx, buildCtx, entryModules, jsText, modeName, isScopedStyles, sourceTarget) {<EOL>    if (sourceTarget === '<STR_LIT>') {<EOL>        // use legacy bundling with commonjs/jsonp modules<EOL>        // and transpile the build to es5<EOL>        jsText = await transpileEs5Bundle(compilerCtx, buildCtx, jsText);<EOL>    }<EOL>    if (","gt":"config.minifyJs) {"}
{"input":"<s> async function createBundleJsText(config, compilerCtx, buildCtx, entryModules, jsText, modeName, isScopedStyles, sourceTarget) {<EOL>    if (sourceTarget === '<STR_LIT>') {<EOL>        // use legacy bundling with commonjs/jsonp modules<EOL>        // and transpile the build to es5<EOL>        jsText = await transpileEs5Bundle(compilerCtx, buildCtx, jsText);<EOL>    }<EOL>    if ( config.minifyJs) {<EOL>        // minify the bundle js text<EOL>        const minifyJsResults = await minifyJs(config, compilerCtx, jsText, sourceTarget, true);<EOL>        if (minifyJsResults.diagnostics.length) {<EOL>            minifyJsResults.","gt":"diagnostics.forEach(d => {"}
{"input":"<s> async function createBundleJsText(config, compilerCtx, buildCtx, entryModules, jsText, modeName, isScopedStyles, sourceTarget) {<EOL>    if (sourceTarget === '<STR_LIT>') {<EOL>        // use legacy bundling with commonjs/jsonp modules<EOL>        // and transpile the build to es5<EOL>        jsText = await transpileEs5Bundle(compilerCtx, buildCtx, jsText);<EOL>    }<EOL>    if ( config.minifyJs) {<EOL>        // minify the bundle js text<EOL>        const minifyJsResults = await minifyJs(config, compilerCtx, jsText, sourceTarget, true);<EOL>        if (minifyJsResults.diagnostics.length) {<EOL>            minifyJsResults. diagnostics.forEach(d => {<EOL>                buildCtx.diagnostics.push(d);<EOL>            });<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export function isIntegrationName(name) {<EOL>","gt":"const n = name;"}
{"input":"<s> async function arrayLiteral7() {<EOL>    x = [await y, z, await","gt":"a];"}
{"input":"<s> export async function prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, prerenderLocation) {<EOL>    const msg = config.prerender.hydrateComponents ? '<STR_LIT>' : '<STR_LIT>';<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>    const results = {<EOL>        diagnostics: []<EOL>    };<EOL>","gt":"try {"}
{"input":"<s> export async function prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, prerenderLocation) {<EOL>    const msg = config.prerender.hydrateComponents ? '<STR_LIT>' : '<STR_LIT>';<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>    const results = {<EOL>        diagnostics: []<EOL>    };<EOL>     try {<EOL>        // create the renderer config<EOL>        const rendererConfig = Object.assign({}, config);<EOL>        // create the hydrate options from the prerender config<EOL>        const hydrateOpts = rendererConfig.prerender;<EOL>        hydrateOpts.url = prerenderLocation.url;<EOL>        hydrateOpts.isPrerender =","gt":"true;"}
{"input":"<s> export async function prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, prerenderLocation) {<EOL>    const msg = config.prerender.hydrateComponents ? '<STR_LIT>' : '<STR_LIT>';<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>    const results = {<EOL>        diagnostics: []<EOL>    };<EOL>     try {<EOL>        // create the renderer config<EOL>        const rendererConfig = Object.assign({}, config);<EOL>        // create the hydrate options from the prerender config<EOL>        const hydrateOpts = rendererConfig.prerender;<EOL>        hydrateOpts.url = prerenderLocation.url;<EOL>        hydrateOpts.isPrerender =  true;<EOL>        // set the input html which we just read from the src index html file<EOL>        hydrateOpts.html = indexSrcHtml;<EOL>        // create a server-side renderer<EOL>        const","gt":"renderer = new Renderer(rendererConfig, null, compilerCtx);"}
{"input":"<s> export async function prerenderPath(config, compilerCtx, buildCtx, indexSrcHtml, prerenderLocation) {<EOL>    const msg = config.prerender.hydrateComponents ? '<STR_LIT>' : '<STR_LIT>';<EOL>    const timeSpan = config.logger.createTimeSpan(`<STR_LIT>`);<EOL>    const results = {<EOL>        diagnostics: []<EOL>    };<EOL>     try {<EOL>        // create the renderer config<EOL>        const rendererConfig = Object.assign({}, config);<EOL>        // create the hydrate options from the prerender config<EOL>        const hydrateOpts = rendererConfig.prerender;<EOL>        hydrateOpts.url = prerenderLocation.url;<EOL>        hydrateOpts.isPrerender =  true;<EOL>        // set the input html which we just read from the src index html file<EOL>        hydrateOpts.html = indexSrcHtml;<EOL>        // create a server-side renderer<EOL>        const  renderer = new Renderer(rendererConfig, null, compilerCtx);<EOL>        // parse the html to dom nodes, hydrate the components, then<EOL>        // serialize the hydrated dom nodes back to into html<EOL>        const hydratedResults = await renderer.hydrate(hydrateOpts);<EOL>        // hydrating to string is done!!<EOL>        // let's use this updated html for the index content now<EOL>        Object.","gt":"assign(results, hydratedResults);"}
{"input":"<s> function groupForValuePredicate(value) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function boolGreaterThanEquals(x, y) {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> export async function monteCarlo() {<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function numberAssignment(value) {<EOL>    \"<STR_LIT>\";<EOL>","gt":"let result;"}
{"input":"<s> export function logWarn(...args) {<EOL>","gt":"const chalk = require('<STR_LIT>');"}
{"input":"<s> // @strict<EOL>function f1(a, b) {<EOL>    a =","gt":"b;"}
{"input":"<s> // @allowUnreachableCode: true<EOL>function f() {<EOL>    return function (s) {<EOL>","gt":"var x = s;"}
{"input":"<s> function writeFileInMemory(config, ctx, sourceFile, distFilePath, outputText) {<EOL>    let tsFilePath = normalizePath(sourceFile.fileName);<EOL>    if (!config.sys.path.isAbsolute(tsFilePath)) {<EOL>        tsFilePath = normalizePath(config.sys.","gt":"path.join(config.rootDir, tsFilePath));"}
{"input":"<s> function writeFileInMemory(config, ctx, sourceFile, distFilePath, outputText) {<EOL>    let tsFilePath = normalizePath(sourceFile.fileName);<EOL>    if (!config.sys.path.isAbsolute(tsFilePath)) {<EOL>        tsFilePath = normalizePath(config.sys. path.join(config.rootDir, tsFilePath));<EOL>    }<EOL>    distFilePath = normalizePath(distFilePath);<EOL>    // if this build is also building a distribution then we<EOL>    // actually want to eventually write the files to disk<EOL>    // otherwise we still want to put these files in our file system but<EOL>    // only as in-memory files and never are actually written to disk<EOL>    const isInMemoryOnly = !config.generateDistribution;<EOL>    // get or create the ctx module file object<EOL>    if (!ctx.moduleFiles[tsFilePath]) {<EOL>        // we don't have this module in the ctx yet<EOL>        ctx.moduleFiles[","gt":"tsFilePath] = {};"}
{"input":"<s> function writeFileInMemory(config, ctx, sourceFile, distFilePath, outputText) {<EOL>    let tsFilePath = normalizePath(sourceFile.fileName);<EOL>    if (!config.sys.path.isAbsolute(tsFilePath)) {<EOL>        tsFilePath = normalizePath(config.sys. path.join(config.rootDir, tsFilePath));<EOL>    }<EOL>    distFilePath = normalizePath(distFilePath);<EOL>    // if this build is also building a distribution then we<EOL>    // actually want to eventually write the files to disk<EOL>    // otherwise we still want to put these files in our file system but<EOL>    // only as in-memory files and never are actually written to disk<EOL>    const isInMemoryOnly = !config.generateDistribution;<EOL>    // get or create the ctx module file object<EOL>    if (!ctx.moduleFiles[tsFilePath]) {<EOL>        // we don't have this module in the ctx yet<EOL>        ctx.moduleFiles[ tsFilePath] = {};<EOL>    }<EOL>    // figure out which file type this is<EOL>    if (isJsFile(distFilePath)) {<EOL>        // transpiled file is a js file<EOL>","gt":"ctx.moduleFiles[tsFilePath].jsFilePath = distFilePath;"}
{"input":"<s> export function validateComponentTag(tag) {<EOL>    if (typeof tag !== '<STR_LIT>') {<EOL>        throw new Error(`<STR_LIT>`);<EOL>    }<EOL>    tag = tag.trim().toLowerCase();<EOL>    if (tag.length === <NUM_LIT>) {<EOL>","gt":"throw new Error(`<STR_LIT>`);"}
{"input":"<s> <EOL>function simpleCloneInputData(input) {<EOL>    // make a simple copy of the pointers because we will get a reference if we don't<EOL>    // we only need clientXY for the calculations<EOL>    var pointers = [];<EOL>    var i = <NUM_LIT>;<EOL>    while (i < input.pointers.length) {<EOL>        pointers[","gt":"i] = {"}
{"input":"<s> <EOL>function simpleCloneInputData(input) {<EOL>    // make a simple copy of the pointers because we will get a reference if we don't<EOL>    // we only need clientXY for the calculations<EOL>    var pointers = [];<EOL>    var i = <NUM_LIT>;<EOL>    while (i < input.pointers.length) {<EOL>        pointers[ i] = {<EOL>            clientX: round(input.pointers[i].clientX),<EOL>            clientY: round(input.pointers[i].clientY)<EOL>        };<EOL>","gt":"i++;"}
{"input":"<s> <EOL>function simpleCloneInputData(input) {<EOL>    // make a simple copy of the pointers because we will get a reference if we don't<EOL>    // we only need clientXY for the calculations<EOL>    var pointers = [];<EOL>    var i = <NUM_LIT>;<EOL>    while (i < input.pointers.length) {<EOL>        pointers[ i] = {<EOL>            clientX: round(input.pointers[i].clientX),<EOL>            clientY: round(input.pointers[i].clientY)<EOL>        };<EOL>         i++;<EOL>    }<EOL>    return {<EOL>        timeStamp: now(),<EOL>        pointers:","gt":"pointers,"}
{"input":"<s> function getComponentDepsFromImports(moduleGraphs, componentRefs, importsInspected, moduleGraph, cmpMeta) {<EOL>    moduleGraph.importPaths.forEach(importPath => {<EOL>        if (importsInspected.includes(importPath)) {<EOL>            return;<EOL>        }<EOL>        importsInspected.push(importPath);<EOL>        const subModuleGraph = moduleGraphs.find(mg => {<EOL>            return (mg.filePath ===","gt":"importPath) ||"}
{"input":"<s> function getComponentDepsFromImports(moduleGraphs, componentRefs, importsInspected, moduleGraph, cmpMeta) {<EOL>    moduleGraph.importPaths.forEach(importPath => {<EOL>        if (importsInspected.includes(importPath)) {<EOL>            return;<EOL>        }<EOL>        importsInspected.push(importPath);<EOL>        const subModuleGraph = moduleGraphs.find(mg => {<EOL>            return (mg.filePath ===  importPath) ||<EOL>                (mg.filePath === importPath + '<STR_LIT>') ||<EOL>                (mg.filePath === importPath + '<STR_LIT>') ||<EOL>                (mg.filePath === importPath + '<STR_LIT>');<EOL>        });<EOL>        if (","gt":"subModuleGraph) {"}
{"input":"<s> function getComponentDepsFromImports(moduleGraphs, componentRefs, importsInspected, moduleGraph, cmpMeta) {<EOL>    moduleGraph.importPaths.forEach(importPath => {<EOL>        if (importsInspected.includes(importPath)) {<EOL>            return;<EOL>        }<EOL>        importsInspected.push(importPath);<EOL>        const subModuleGraph = moduleGraphs.find(mg => {<EOL>            return (mg.filePath ===  importPath) ||<EOL>                (mg.filePath === importPath + '<STR_LIT>') ||<EOL>                (mg.filePath === importPath + '<STR_LIT>') ||<EOL>                (mg.filePath === importPath + '<STR_LIT>');<EOL>        });<EOL>        if ( subModuleGraph) {<EOL>            const tags = componentRefs.filter(cr => cr.filePath === subModuleGraph.filePath).map(cr => cr.tag);<EOL>            tags.forEach(tag => {<EOL>                if (!cmpMeta.dependencies.includes(tag)) {<EOL>","gt":"cmpMeta.dependencies.push(tag);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics(","gt":"context, DiagnosticsType.TypeScript);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>","gt":"const tsConfig = getTsConfig(context, workerConfig.configFile);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>","gt":"tsConfig.options.sourceMap = false;"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =","gt":"buildJsSourceMaps(context);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =  buildJsSourceMaps(context);<EOL>        }<EOL>        // collect up all the files we need to transpile, tsConfig itself does all this for us<EOL>        const tsFileNames = cleanFileNames(context, tsConfig.fileNames);<EOL>        // for dev builds let's not create d.ts files<EOL>        tsConfig.options.declaration = undefined;<EOL>        // let's start a new tsFiles object to cache all the transpiled files in<EOL>        const host = getInMemoryCompilerHostInstance(","gt":"tsConfig.options);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =  buildJsSourceMaps(context);<EOL>        }<EOL>        // collect up all the files we need to transpile, tsConfig itself does all this for us<EOL>        const tsFileNames = cleanFileNames(context, tsConfig.fileNames);<EOL>        // for dev builds let's not create d.ts files<EOL>        tsConfig.options.declaration = undefined;<EOL>        // let's start a new tsFiles object to cache all the transpiled files in<EOL>        const host = getInMemoryCompilerHostInstance( tsConfig.options);<EOL>        if (workerConfig.useTransforms && getBooleanPropertyValue(Constants.ENV_PARSE_DEEPLINKS)) {<EOL>            // beforeArray.push(purgeDeepLinkDecoratorTSTransform());<EOL>            // beforeArray.push(getInjectDeepLinkConfigTypescriptTransform());<EOL>            // temporarily copy the files to a new location<EOL>            copyOriginalSourceFiles(context.fileCache);<EOL>            // okay, purge the deep link files NOT using a transform<EOL>            const deepLinkFiles = filterTypescriptFilesForDeepLinks(context.fileCache);<EOL>            deepLinkFiles.forEach(file => {<EOL>                file.content = purgeDeepLinkDecorator(file.content);<EOL>            });<EOL>            const file = context.fileCache.get(getStringPropertyValue(Constants.ENV_APP_NG_MODULE_PATH));<EOL>            const hasExisting = hasExistingDeepLinkConfig(file.path, file.content);<EOL>            if (!hasExisting) {<EOL>                const","gt":"deepLinkString = convertDeepLinkConfigEntriesToString(getParsedDeepLinkConfig());"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =  buildJsSourceMaps(context);<EOL>        }<EOL>        // collect up all the files we need to transpile, tsConfig itself does all this for us<EOL>        const tsFileNames = cleanFileNames(context, tsConfig.fileNames);<EOL>        // for dev builds let's not create d.ts files<EOL>        tsConfig.options.declaration = undefined;<EOL>        // let's start a new tsFiles object to cache all the transpiled files in<EOL>        const host = getInMemoryCompilerHostInstance( tsConfig.options);<EOL>        if (workerConfig.useTransforms && getBooleanPropertyValue(Constants.ENV_PARSE_DEEPLINKS)) {<EOL>            // beforeArray.push(purgeDeepLinkDecoratorTSTransform());<EOL>            // beforeArray.push(getInjectDeepLinkConfigTypescriptTransform());<EOL>            // temporarily copy the files to a new location<EOL>            copyOriginalSourceFiles(context.fileCache);<EOL>            // okay, purge the deep link files NOT using a transform<EOL>            const deepLinkFiles = filterTypescriptFilesForDeepLinks(context.fileCache);<EOL>            deepLinkFiles.forEach(file => {<EOL>                file.content = purgeDeepLinkDecorator(file.content);<EOL>            });<EOL>            const file = context.fileCache.get(getStringPropertyValue(Constants.ENV_APP_NG_MODULE_PATH));<EOL>            const hasExisting = hasExistingDeepLinkConfig(file.path, file.content);<EOL>            if (!hasExisting) {<EOL>                const  deepLinkString = convertDeepLinkConfigEntriesToString(getParsedDeepLinkConfig());<EOL>                file.content = getUpdatedAppNgModuleContentWithDeepLinkConfig(file.path, file.content, deepLinkString);<EOL>            }<EOL>        }<EOL>        const program = ts.createProgram(tsFileNames, tsConfig.options, host, cachedProgram);<EOL>","gt":"resetSourceFiles(context.fileCache);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =  buildJsSourceMaps(context);<EOL>        }<EOL>        // collect up all the files we need to transpile, tsConfig itself does all this for us<EOL>        const tsFileNames = cleanFileNames(context, tsConfig.fileNames);<EOL>        // for dev builds let's not create d.ts files<EOL>        tsConfig.options.declaration = undefined;<EOL>        // let's start a new tsFiles object to cache all the transpiled files in<EOL>        const host = getInMemoryCompilerHostInstance( tsConfig.options);<EOL>        if (workerConfig.useTransforms && getBooleanPropertyValue(Constants.ENV_PARSE_DEEPLINKS)) {<EOL>            // beforeArray.push(purgeDeepLinkDecoratorTSTransform());<EOL>            // beforeArray.push(getInjectDeepLinkConfigTypescriptTransform());<EOL>            // temporarily copy the files to a new location<EOL>            copyOriginalSourceFiles(context.fileCache);<EOL>            // okay, purge the deep link files NOT using a transform<EOL>            const deepLinkFiles = filterTypescriptFilesForDeepLinks(context.fileCache);<EOL>            deepLinkFiles.forEach(file => {<EOL>                file.content = purgeDeepLinkDecorator(file.content);<EOL>            });<EOL>            const file = context.fileCache.get(getStringPropertyValue(Constants.ENV_APP_NG_MODULE_PATH));<EOL>            const hasExisting = hasExistingDeepLinkConfig(file.path, file.content);<EOL>            if (!hasExisting) {<EOL>                const  deepLinkString = convertDeepLinkConfigEntriesToString(getParsedDeepLinkConfig());<EOL>                file.content = getUpdatedAppNgModuleContentWithDeepLinkConfig(file.path, file.content, deepLinkString);<EOL>            }<EOL>        }<EOL>        const program = ts.createProgram(tsFileNames, tsConfig.options, host, cachedProgram);<EOL>         resetSourceFiles(context.fileCache);<EOL>        const beforeArray = [];<EOL>        program.emit(undefined, (path, data, writeByteOrderMark, onError, sourceFiles) => {<EOL>            if (workerConfig.writeInMemory) {<EOL>                writeTranspiledFilesCallback(context.fileCache, path, data, workerConfig.inlineTemplate);<EOL>            }<EOL>        });<EOL>        // cache the typescript program for later use<EOL>        cachedProgram = program;<EOL>        const tsDiagnostics = program.getSyntacticDiagnostics()<EOL>            .concat(program.getSemanticDiagnostics())<EOL>            .concat(program.getOptionsDiagnostics());<EOL>","gt":"const diagnostics = runTypeScriptDiagnostics(context, tsDiagnostics);"}
{"input":"<s> <EOL>export function transpileWorker(context, workerConfig) {<EOL>    // let's do this<EOL>    return new Promise((resolve, reject) => {<EOL>        clearDiagnostics( context, DiagnosticsType.TypeScript);<EOL>        // get the tsconfig data<EOL>         const tsConfig = getTsConfig(context, workerConfig.configFile);<EOL>        if (workerConfig.sourceMaps === false) {<EOL>            // the worker config say, \"hey, don't ever bother making a source map, because.\"<EOL>             tsConfig.options.sourceMap = false;<EOL>        }<EOL>        else {<EOL>            // build the ts source maps if the bundler is going to use source maps<EOL>            tsConfig.options.sourceMap =  buildJsSourceMaps(context);<EOL>        }<EOL>        // collect up all the files we need to transpile, tsConfig itself does all this for us<EOL>        const tsFileNames = cleanFileNames(context, tsConfig.fileNames);<EOL>        // for dev builds let's not create d.ts files<EOL>        tsConfig.options.declaration = undefined;<EOL>        // let's start a new tsFiles object to cache all the transpiled files in<EOL>        const host = getInMemoryCompilerHostInstance( tsConfig.options);<EOL>        if (workerConfig.useTransforms && getBooleanPropertyValue(Constants.ENV_PARSE_DEEPLINKS)) {<EOL>            // beforeArray.push(purgeDeepLinkDecoratorTSTransform());<EOL>            // beforeArray.push(getInjectDeepLinkConfigTypescriptTransform());<EOL>            // temporarily copy the files to a new location<EOL>            copyOriginalSourceFiles(context.fileCache);<EOL>            // okay, purge the deep link files NOT using a transform<EOL>            const deepLinkFiles = filterTypescriptFilesForDeepLinks(context.fileCache);<EOL>            deepLinkFiles.forEach(file => {<EOL>                file.content = purgeDeepLinkDecorator(file.content);<EOL>            });<EOL>            const file = context.fileCache.get(getStringPropertyValue(Constants.ENV_APP_NG_MODULE_PATH));<EOL>            const hasExisting = hasExistingDeepLinkConfig(file.path, file.content);<EOL>            if (!hasExisting) {<EOL>                const  deepLinkString = convertDeepLinkConfigEntriesToString(getParsedDeepLinkConfig());<EOL>                file.content = getUpdatedAppNgModuleContentWithDeepLinkConfig(file.path, file.content, deepLinkString);<EOL>            }<EOL>        }<EOL>        const program = ts.createProgram(tsFileNames, tsConfig.options, host, cachedProgram);<EOL>         resetSourceFiles(context.fileCache);<EOL>        const beforeArray = [];<EOL>        program.emit(undefined, (path, data, writeByteOrderMark, onError, sourceFiles) => {<EOL>            if (workerConfig.writeInMemory) {<EOL>                writeTranspiledFilesCallback(context.fileCache, path, data, workerConfig.inlineTemplate);<EOL>            }<EOL>        });<EOL>        // cache the typescript program for later use<EOL>        cachedProgram = program;<EOL>        const tsDiagnostics = program.getSyntacticDiagnostics()<EOL>            .concat(program.getSemanticDiagnostics())<EOL>            .concat(program.getOptionsDiagnostics());<EOL>         const diagnostics = runTypeScriptDiagnostics(context, tsDiagnostics);<EOL>        if (diagnostics.length) {<EOL>            // darn, we've got some things wrong, transpile failed :(<EOL>            printDiagnostics(context,","gt":"DiagnosticsType.TypeScript, diagnostics, true, true);"}
{"input":"<s> <EOL>export function typeCheck(context, program, linterOptions) {<EOL>    if (isObject(linterOptions) && linterOptions.typeCheck) {<EOL>","gt":"return Promise.resolve(getPreEmitDiagnostics(program));"}
{"input":"<s> <EOL>function getDistance(p1, p2, props) {<EOL>    if (!props) {<EOL>        props =","gt":"PROPS_XY;"}
{"input":"<s> function RelationResolver(model) {<EOL>    let resolver = {};<EOL>    _.forEach(utils.sharedRelations(model), rel => {<EOL>","gt":"resolver[rel.name] = (obj, args) => {"}
{"input":"<s> function foo2() {<EOL>    return","gt":"asdf;"}
{"input":"<s> function ff(x, y, z) {<EOL>    var zz;<EOL>    x = x; // Ok<EOL>    x =","gt":"y;"}
{"input":"<s> <EOL>function escape(value) {<EOL>    return value.","gt":"replace(/[&<>]/gm, function (character) {"}
{"input":"<s> // function declaration paramter<EOL>function f(a) {<EOL>","gt":"defered(() => {"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const","gt":"rollupConfig = {"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:","gt":"entryModules.map(b => b.entryKey),"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>","gt":"plugins: ["}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>         plugins: [<EOL>            resolveCollections(compilerCtx),<EOL>            config.sys.rollup.plugins.nodeResolve({<EOL>                jsnext: true,<EOL>                main:","gt":"true"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>         plugins: [<EOL>            resolveCollections(compilerCtx),<EOL>            config.sys.rollup.plugins.nodeResolve({<EOL>                jsnext: true,<EOL>                main:  true<EOL>            }),<EOL>            config.sys.rollup.plugins.commonjs({<EOL>                include: '<STR_LIT>',<EOL>                sourceMap:","gt":"false"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>         plugins: [<EOL>            resolveCollections(compilerCtx),<EOL>            config.sys.rollup.plugins.nodeResolve({<EOL>                jsnext: true,<EOL>                main:  true<EOL>            }),<EOL>            config.sys.rollup.plugins.commonjs({<EOL>                include: '<STR_LIT>',<EOL>                sourceMap:  false<EOL>            }),<EOL>            bundleJson(config),<EOL>            globals(),<EOL>            builtins(),<EOL>            bundleEntryFile(config,","gt":"entryModules),"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>         plugins: [<EOL>            resolveCollections(compilerCtx),<EOL>            config.sys.rollup.plugins.nodeResolve({<EOL>                jsnext: true,<EOL>                main:  true<EOL>            }),<EOL>            config.sys.rollup.plugins.commonjs({<EOL>                include: '<STR_LIT>',<EOL>                sourceMap:  false<EOL>            }),<EOL>            bundleJson(config),<EOL>            globals(),<EOL>            builtins(),<EOL>            bundleEntryFile(config,  entryModules),<EOL>            inMemoryFsRead(config, compilerCtx),<EOL>            await pathsResolution(config, compilerCtx),<EOL>            localResolution(config, compilerCtx),<EOL>            nodeEnvVars(config),<EOL>            ...config.plugins<EOL>        ],<EOL>        onwarn: createOnWarnFn(config, buildCtx.diagnostics)<EOL>    };<EOL>    try {<EOL>        rollupBundle =","gt":"await rollup(rollupConfig);"}
{"input":"<s> export async function createBundle(config, compilerCtx, buildCtx, entryModules) {<EOL>    const builtins = require('<STR_LIT>');<EOL>    const globals = require('<STR_LIT>');<EOL>    let rollupBundle;<EOL>    const  rollupConfig = {<EOL>        input:  entryModules.map(b => b.entryKey),<EOL>        experimentalCodeSplitting: true,<EOL>        preserveSymlinks: false,<EOL>         plugins: [<EOL>            resolveCollections(compilerCtx),<EOL>            config.sys.rollup.plugins.nodeResolve({<EOL>                jsnext: true,<EOL>                main:  true<EOL>            }),<EOL>            config.sys.rollup.plugins.commonjs({<EOL>                include: '<STR_LIT>',<EOL>                sourceMap:  false<EOL>            }),<EOL>            bundleJson(config),<EOL>            globals(),<EOL>            builtins(),<EOL>            bundleEntryFile(config,  entryModules),<EOL>            inMemoryFsRead(config, compilerCtx),<EOL>            await pathsResolution(config, compilerCtx),<EOL>            localResolution(config, compilerCtx),<EOL>            nodeEnvVars(config),<EOL>            ...config.plugins<EOL>        ],<EOL>        onwarn: createOnWarnFn(config, buildCtx.diagnostics)<EOL>    };<EOL>    try {<EOL>        rollupBundle =  await rollup(rollupConfig);<EOL>    }<EOL>    catch (err) {<EOL>","gt":"console.log(err);"}
{"input":"<s> function foo() {<EOL>","gt":"new C();"}
{"input":"<s> export async function saveFile(image, filePath) {<EOL>","gt":"await fs.copy(fu.getFilePath(image), filePath);"}
{"input":"<s> function getMainDiv(rootControl) {<EOL>    return rootControl.find(","gt":"'<STR_LIT>');"}
{"input":"<s> function transpileFileContent(fileName, sourceText, options) {<EOL>    const transpileOptions = {<EOL>        compilerOptions:","gt":"options,"}
{"input":"<s> export function locateHook(baseDir, hooks, hook) {<EOL>    return conform(hooks).map(p => path.resolve(baseDir, p)).indexOf(path.resolve(","gt":"baseDir, hook));"}
{"input":"<s> <EOL>function MouseInput(_manager, _handler) {<EOL>    this.evEl = MOUSE_ELEMENT_EVENTS;<EOL>","gt":"this.evWin = MOUSE_WINDOW_EVENTS;"}
{"input":"<s> export function getBundleIds(entryModules, components) {<EOL>    const bundleIds = [];<EOL>    components.forEach(cmp => {<EOL>        entryModules.forEach(mb => {<EOL>            const moduleFile = mb.moduleFiles.find(mf => mf.cmpMeta && mf.cmpMeta.tagNameMeta === cmp.tag);<EOL>","gt":"if (!moduleFile) {"}
{"input":"<s> export function getBundleIds(entryModules, components) {<EOL>    const bundleIds = [];<EOL>    components.forEach(cmp => {<EOL>        entryModules.forEach(mb => {<EOL>            const moduleFile = mb.moduleFiles.find(mf => mf.cmpMeta && mf.cmpMeta.tagNameMeta === cmp.tag);<EOL>             if (!moduleFile) {<EOL>                return;<EOL>            }<EOL>","gt":"let bundleId;"}
{"input":"<s> export function getBundleIds(entryModules, components) {<EOL>    const bundleIds = [];<EOL>    components.forEach(cmp => {<EOL>        entryModules.forEach(mb => {<EOL>            const moduleFile = mb.moduleFiles.find(mf => mf.cmpMeta && mf.cmpMeta.tagNameMeta === cmp.tag);<EOL>             if (!moduleFile) {<EOL>                return;<EOL>            }<EOL>             let bundleId;<EOL>            if (typeof moduleFile.cmpMeta.bundleIds === '<STR_LIT>') {<EOL>                bundleId = moduleFile.cmpMeta.bundleIds;<EOL>            }<EOL>            else {<EOL>                bundleId = moduleFile.cmpMeta.bundleIds[","gt":"DEFAULT_MODE];"}
{"input":"<s> export function getBundleIds(entryModules, components) {<EOL>    const bundleIds = [];<EOL>    components.forEach(cmp => {<EOL>        entryModules.forEach(mb => {<EOL>            const moduleFile = mb.moduleFiles.find(mf => mf.cmpMeta && mf.cmpMeta.tagNameMeta === cmp.tag);<EOL>             if (!moduleFile) {<EOL>                return;<EOL>            }<EOL>             let bundleId;<EOL>            if (typeof moduleFile.cmpMeta.bundleIds === '<STR_LIT>') {<EOL>                bundleId = moduleFile.cmpMeta.bundleIds;<EOL>            }<EOL>            else {<EOL>                bundleId = moduleFile.cmpMeta.bundleIds[ DEFAULT_MODE];<EOL>                if (!bundleId) {<EOL>                    bundleId = moduleFile.cmpMeta.bundleIds[DEFAULT_STYLE_MODE];<EOL>                }<EOL>            }<EOL>            if (","gt":"bundleId && bundleIds.indexOf(bundleId) === -<NUM_LIT>) {"}
{"input":"<s> function merge(a, b) {<EOL>    const res = {};<EOL>    [a, b].forEach((obj) => {<EOL>        Object.","gt":"keys(obj).forEach(key => {"}
{"input":"<s> export function createStore() {<EOL>    const { __REDUX_DEVTOOLS_EXTENSION__ } = window;<EOL>    const store = _createStore(reducer,","gt":"__REDUX_DEVTOOLS_EXTENSION__ && __REDUX_DEVTOOLS_EXTENSION__());"}
{"input":"<s> function generateDotGraph(digraph) {<EOL>    const plain = vizLite(digraph, {<EOL>","gt":"format: '<STR_LIT>',"}
{"input":"<s> export function setNumberConfig(config, configName, defaultValue) {<EOL>    const userConfigName = getUserConfigName(config, configName);<EOL>    if (typeof config[userConfigName] === '<STR_LIT>') {<EOL>        config[userConfigName] = config[userConfigName]();<EOL>    }<EOL>    if (typeof config[userConfigName] === '<STR_LIT>') {<EOL>        config[configName] = config[userConfigName];<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>","gt":"return {"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys.","gt":"path.isAbsolute(importee)) {"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=","gt":"'<STR_LIT>';"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var","gt":"moduleFile = compilerCtx.moduleFiles[importee];"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var  moduleFile = compilerCtx.moduleFiles[importee];<EOL>            if (compilerCtx.moduleFiles[importee]) {<EOL>                return moduleFile.jsFilePath;<EOL>            }<EOL>            const tsFileNames = Object.keys(compilerCtx.moduleFiles);<EOL>            for (var i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeE<EOL>                moduleFile = compilerCtx.","gt":"moduleFiles[tsFileNames[i]];"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var  moduleFile = compilerCtx.moduleFiles[importee];<EOL>            if (compilerCtx.moduleFiles[importee]) {<EOL>                return moduleFile.jsFilePath;<EOL>            }<EOL>            const tsFileNames = Object.keys(compilerCtx.moduleFiles);<EOL>            for (var i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeE<EOL>                moduleFile = compilerCtx. moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importee) {<EOL>                    // awesome, there's a module file for this js file, we're good here<EOL>                    return importee;<EOL>                }<EOL>                if (moduleFile.jsFilePath === importee + '<STR_LIT>') {<EOL>                    return","gt":"importee}.js`<STR_LIT>;"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var  moduleFile = compilerCtx.moduleFiles[importee];<EOL>            if (compilerCtx.moduleFiles[importee]) {<EOL>                return moduleFile.jsFilePath;<EOL>            }<EOL>            const tsFileNames = Object.keys(compilerCtx.moduleFiles);<EOL>            for (var i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeE<EOL>                moduleFile = compilerCtx. moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importee) {<EOL>                    // awesome, there's a module file for this js file, we're good here<EOL>                    return importee;<EOL>                }<EOL>                if (moduleFile.jsFilePath === importee + '<STR_LIT>') {<EOL>                    return `<STR_LIT>`;<EOL>                }<EOL>            }<EOL>            // let's check all of the asset directories for this path<EOL>            // think slide's swiper dependency<EOL>            for (i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeR<EOL>                moduleFile = compilerCtx.moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importer) {<EOL>                    // awesome, there's a module file for this js file via importeR<EOL>                    // now let's check if this module has an assets directory<EOL>                    if (moduleFile.cmpMeta && moduleFile.cmpMeta.assetsDirsMeta) {<EOL>                        for (var j = <NUM_LIT>; j < moduleFile.cmpMeta.assetsDirsMeta.length; j++) {<EOL>                            const assetsAbsPath = moduleFile.cmpMeta.assetsDirsMeta[j].absolutePath;<EOL>                            const importeeFileName =","gt":"sys.path.basename(importee);"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var  moduleFile = compilerCtx.moduleFiles[importee];<EOL>            if (compilerCtx.moduleFiles[importee]) {<EOL>                return moduleFile.jsFilePath;<EOL>            }<EOL>            const tsFileNames = Object.keys(compilerCtx.moduleFiles);<EOL>            for (var i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeE<EOL>                moduleFile = compilerCtx. moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importee) {<EOL>                    // awesome, there's a module file for this js file, we're good here<EOL>                    return importee;<EOL>                }<EOL>                if (moduleFile.jsFilePath === importee + '<STR_LIT>') {<EOL>                    return `<STR_LIT>`;<EOL>                }<EOL>            }<EOL>            // let's check all of the asset directories for this path<EOL>            // think slide's swiper dependency<EOL>            for (i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeR<EOL>                moduleFile = compilerCtx.moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importer) {<EOL>                    // awesome, there's a module file for this js file via importeR<EOL>                    // now let's check if this module has an assets directory<EOL>                    if (moduleFile.cmpMeta && moduleFile.cmpMeta.assetsDirsMeta) {<EOL>                        for (var j = <NUM_LIT>; j < moduleFile.cmpMeta.assetsDirsMeta.length; j++) {<EOL>                            const assetsAbsPath = moduleFile.cmpMeta.assetsDirsMeta[j].absolutePath;<EOL>                            const importeeFileName =  sys.path.basename(importee);<EOL>                            const assetsFilePath = normalizePath(sys.path.join(assetsAbsPath, importeeFileName));<EOL>                            // ok, we've got a potential absolute path where the file \"could\" be<EOL>                            try {<EOL>                                // let's see if it actually exists, but with readFileSync :(<EOL>                                assetsCache[assetsFilePath] = compilerCtx.fs.readFileSync(assetsFilePath);<EOL>                                if (typeof assetsCache[assetsFilePath] === '<STR_LIT>') {<EOL>                                    return assetsFilePath;<EOL>                                }<EOL>                            }<EOL>                            catch (e) {<EOL>                                config.","gt":"logger.debug(`<STR_LIT>`);"}
{"input":"<s> export default function inMemoryFsRead(config, compilerCtx) {<EOL>    const sys = config.sys;<EOL>    const assetsCache = {};<EOL>     return {<EOL>        name: '<STR_LIT>',<EOL>        async resolveId(importee, importer) {<EOL>            if (!sys. path.isAbsolute(importee)) {<EOL>                importee = normalizePath(sys.path.resolve(importer ? sys.path.dirname(importer) : sys.path.resolve(), importee));<EOL>                if (importee.indexOf('<STR_LIT>') === -<NUM_LIT>) {<EOL>                    importee +=  '<STR_LIT>';<EOL>                }<EOL>            }<EOL>            // it's possible the importee is a file pointing directly to the source ts file<EOL>            // if it is a ts file path, then we're good to go<EOL>            var  moduleFile = compilerCtx.moduleFiles[importee];<EOL>            if (compilerCtx.moduleFiles[importee]) {<EOL>                return moduleFile.jsFilePath;<EOL>            }<EOL>            const tsFileNames = Object.keys(compilerCtx.moduleFiles);<EOL>            for (var i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeE<EOL>                moduleFile = compilerCtx. moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importee) {<EOL>                    // awesome, there's a module file for this js file, we're good here<EOL>                    return importee;<EOL>                }<EOL>                if (moduleFile.jsFilePath === importee + '<STR_LIT>') {<EOL>                    return `<STR_LIT>`;<EOL>                }<EOL>            }<EOL>            // let's check all of the asset directories for this path<EOL>            // think slide's swiper dependency<EOL>            for (i = <NUM_LIT>; i < tsFileNames.length; i++) {<EOL>                // see if we can find by importeR<EOL>                moduleFile = compilerCtx.moduleFiles[tsFileNames[i]];<EOL>                if (moduleFile.jsFilePath === importer) {<EOL>                    // awesome, there's a module file for this js file via importeR<EOL>                    // now let's check if this module has an assets directory<EOL>                    if (moduleFile.cmpMeta && moduleFile.cmpMeta.assetsDirsMeta) {<EOL>                        for (var j = <NUM_LIT>; j < moduleFile.cmpMeta.assetsDirsMeta.length; j++) {<EOL>                            const assetsAbsPath = moduleFile.cmpMeta.assetsDirsMeta[j].absolutePath;<EOL>                            const importeeFileName =  sys.path.basename(importee);<EOL>                            const assetsFilePath = normalizePath(sys.path.join(assetsAbsPath, importeeFileName));<EOL>                            // ok, we've got a potential absolute path where the file \"could\" be<EOL>                            try {<EOL>                                // let's see if it actually exists, but with readFileSync :(<EOL>                                assetsCache[assetsFilePath] = compilerCtx.fs.readFileSync(assetsFilePath);<EOL>                                if (typeof assetsCache[assetsFilePath] === '<STR_LIT>') {<EOL>                                    return assetsFilePath;<EOL>                                }<EOL>                            }<EOL>                            catch (e) {<EOL>                                config. logger.debug(`<STR_LIT>`);<EOL>                            }<EOL>                        }<EOL>                    }<EOL>                }<EOL>            }<EOL>            return null;<EOL>        },<EOL>        async","gt":"load(sourcePath) {"}
{"input":"<s> export async function generateBundleModules(config, compilerCtx, buildCtx, entryModules) {<EOL>    const results = {};<EOL>    try {<EOL>        // run rollup, but don't generate yet<EOL>        // returned rollup bundle can be reused for es module and legacy<EOL>        const rollupBundle = await createBundle(config, compilerCtx, buildCtx, entryModules);<EOL>        // bundle using only es modules and dynamic imports<EOL>        results.esm = await writeEsModules(","gt":"config, rollupBundle);"}
{"input":"<s> export async function generateBundleModules(config, compilerCtx, buildCtx, entryModules) {<EOL>    const results = {};<EOL>    try {<EOL>        // run rollup, but don't generate yet<EOL>        // returned rollup bundle can be reused for es module and legacy<EOL>        const rollupBundle = await createBundle(config, compilerCtx, buildCtx, entryModules);<EOL>        // bundle using only es modules and dynamic imports<EOL>        results.esm = await writeEsModules( config, rollupBundle);<EOL>        buildCtx.bundleBuildCount = Object.keys(results.esm).length;<EOL>        if (config.buildEs5) {<EOL>            // only create legacy modules when generating es5 fallbacks<EOL>            // bundle using commonjs using jsonp callback<EOL>            results.es5 = await writeLegacyModules(","gt":"config, rollupBundle, entryModules);"}
{"input":"<s> export function getWorkspaceRootPath() {<EOL>    let editor = window.activeTextEditor;<EOL>    if (editor && editor.document) {<EOL>        let fileUri = window.","gt":"activeTextEditor.document.uri;"}
{"input":"<s> export function processWrapper(process, pipeFilePath) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let buffOut = [];<EOL>        let","gt":"buffOutLen = <NUM_LIT>;"}
{"input":"<s> export function processWrapper(process, pipeFilePath) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let buffOut = [];<EOL>        let  buffOutLen = <NUM_LIT>;<EOL>        let buffErr = [];<EOL>        let buffErrLen = <NUM_LIT>;<EOL>        // let pipeFile = pipeFilePath ? fs.createWriteStream(pipeFilePath) : null;<EOL>        // if (pipeFile) process.stdout.pipe(pipeFile);<EOL>        process.stdout.on('<STR_LIT>', function (x) {<EOL>            buffOut.push(","gt":"x);"}
{"input":"<s> export function processWrapper(process, pipeFilePath) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let buffOut = [];<EOL>        let  buffOutLen = <NUM_LIT>;<EOL>        let buffErr = [];<EOL>        let buffErrLen = <NUM_LIT>;<EOL>        // let pipeFile = pipeFilePath ? fs.createWriteStream(pipeFilePath) : null;<EOL>        // if (pipeFile) process.stdout.pipe(pipeFile);<EOL>        process.stdout.on('<STR_LIT>', function (x) {<EOL>            buffOut.push( x);<EOL>            buffOutLen += x.length;<EOL>        });<EOL>        process.stderr.on(","gt":"'<STR_LIT>', function (x) {"}
{"input":"<s> export function processWrapper(process, pipeFilePath) {<EOL>    return new Promise((resolve, reject) => {<EOL>        let buffOut = [];<EOL>        let  buffOutLen = <NUM_LIT>;<EOL>        let buffErr = [];<EOL>        let buffErrLen = <NUM_LIT>;<EOL>        // let pipeFile = pipeFilePath ? fs.createWriteStream(pipeFilePath) : null;<EOL>        // if (pipeFile) process.stdout.pipe(pipeFile);<EOL>        process.stdout.on('<STR_LIT>', function (x) {<EOL>            buffOut.push( x);<EOL>            buffOutLen += x.length;<EOL>        });<EOL>        process.stderr.on( '<STR_LIT>', function (x) {<EOL>            buffErr.push(x);<EOL>            buffErrLen += x.length;<EOL>        });<EOL>        process.stdout.on('<STR_LIT>', () => {<EOL>            let stdout = Buffer.concat(buffOut, buffOutLen);<EOL>            if (pipeFilePath && stdout.length) {<EOL>                fs.writeFileSync(","gt":"pipeFilePath, stdout);"}
{"input":"<s> function filterDemosEntryPoints() {<EOL>    return getDemosEntryPoints().then((entryPoints) => {<EOL>        const folderInfo = getFolderInfo();<EOL>        if (folderInfo && folderInfo.componentName) {<EOL>            const filtered = entryPoints.","gt":"filter(entryPoint => {"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort).","gt":"forEach(memberName => {"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort). forEach(memberName => {<EOL>        const memberMeta = cmpMeta.membersMeta[memberName];<EOL>        if (memberMeta.memberType === MEMBER_TYPE.Prop || memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>            cmpData.props = cmpData.","gt":"props || [];"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort). forEach(memberName => {<EOL>        const memberMeta = cmpMeta.membersMeta[memberName];<EOL>        if (memberMeta.memberType === MEMBER_TYPE.Prop || memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>            cmpData.props = cmpData. props || [];<EOL>            const propData = {<EOL>                name: memberName<EOL>            };<EOL>            if (memberMeta.propType === PROP_TYPE.","gt":"Boolean) {"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort). forEach(memberName => {<EOL>        const memberMeta = cmpMeta.membersMeta[memberName];<EOL>        if (memberMeta.memberType === MEMBER_TYPE.Prop || memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>            cmpData.props = cmpData. props || [];<EOL>            const propData = {<EOL>                name: memberName<EOL>            };<EOL>            if (memberMeta.propType === PROP_TYPE. Boolean) {<EOL>                propData.type = BOOLEAN_KEY;<EOL>            }<EOL>            else if (memberMeta.propType ===","gt":"PROP_TYPE.Number) {"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort). forEach(memberName => {<EOL>        const memberMeta = cmpMeta.membersMeta[memberName];<EOL>        if (memberMeta.memberType === MEMBER_TYPE.Prop || memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>            cmpData.props = cmpData. props || [];<EOL>            const propData = {<EOL>                name: memberName<EOL>            };<EOL>            if (memberMeta.propType === PROP_TYPE. Boolean) {<EOL>                propData.type = BOOLEAN_KEY;<EOL>            }<EOL>            else if (memberMeta.propType ===  PROP_TYPE.Number) {<EOL>                propData.type = NUMBER_KEY;<EOL>            }<EOL>            else if (memberMeta.propType === PROP_TYPE.String) {<EOL>                propData.","gt":"type = STRING_KEY;"}
{"input":"<s> function serializeProps(cmpData, cmpMeta) {<EOL>    if (!cmpMeta.membersMeta)<EOL>        return;<EOL>    Object.keys(cmpMeta.membersMeta).sort(nameSort). forEach(memberName => {<EOL>        const memberMeta = cmpMeta.membersMeta[memberName];<EOL>        if (memberMeta.memberType === MEMBER_TYPE.Prop || memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>            cmpData.props = cmpData. props || [];<EOL>            const propData = {<EOL>                name: memberName<EOL>            };<EOL>            if (memberMeta.propType === PROP_TYPE. Boolean) {<EOL>                propData.type = BOOLEAN_KEY;<EOL>            }<EOL>            else if (memberMeta.propType ===  PROP_TYPE.Number) {<EOL>                propData.type = NUMBER_KEY;<EOL>            }<EOL>            else if (memberMeta.propType === PROP_TYPE.String) {<EOL>                propData. type = STRING_KEY;<EOL>            }<EOL>            else if (memberMeta.propType === PROP_TYPE.Any) {<EOL>                propData.type = ANY_KEY;<EOL>            }<EOL>            if (memberMeta.memberType === MEMBER_TYPE.PropMutable) {<EOL>","gt":"propData.mutable = true;"}
{"input":"<s> export function disconnectedCallback(plt, elm, instance) {<EOL>    // only disconnect if we're not temporarily disconnected<EOL>    // tmpDisconnected will happen when slot nodes are being relocated<EOL>    if (!plt.tmpDisconnected && isDisconnected(plt.domApi, elm)) {<EOL>        // ok, let's officially destroy this thing<EOL>        // set this to true so that any of our pending async stuff<EOL>        // doesn't continue since we already decided to destroy this node<EOL>        // elm._hasDestroyed = true;<EOL>        plt.isDisconnectedMap.set(elm, true);<EOL>        // double check that we've informed the ancestor host elements<EOL>        // that they're good to go and loaded (cuz this one is on its way out)<EOL>        propagateComponentLoaded(plt, elm);<EOL>        // since we're disconnecting, call all of the JSX ref's with null<EOL>        callNodeRefs(plt.vnodeMap.get(elm), true);<EOL>        // detatch any event listeners that may have been added<EOL>        // because we're not passing an exact event name it'll<EOL>        // remove all of this element's event, which is good<EOL>        plt.domApi.$removeEventListener(elm);<EOL>        plt.hasListenersMap.delete(elm);<EOL>        if (Build.cmpDidUnload) {<EOL>            // call instance componentDidUnload<EOL>            // if we've created an instance for this<EOL>            instance = plt.instanceMap.get(","gt":"elm);"}
{"input":"<s> function getDisabledMessageScript() {<EOL>    const html = `<STR_LIT>`;<EOL>    const script =","gt":"/\\r\\n|\\r|\\n/g, '<STR_LIT>').replace(/\\'/g, `<STR_LIT>`).trim()}'<STR_LIT>;"}
{"input":"<s> function isObject(item) {<EOL>    return (typeof","gt":"item === \"<STR_LIT>\" && !Array.isArray(item));"}
{"input":"<s> function chunkArrayInGroups(arr, size) {<EOL>    const result = [];<EOL>    for (let i = <NUM_LIT>; i < arr.length; i++) {<EOL>        if (!Array.isArray(result[i %","gt":"size])) {"}
{"input":"<s> function checkForPlatformDynamicBrowser(filePath, fileContent) {<EOL>    const sourceFile = getTypescriptSourceFile(filePath, fileContent, ScriptTarget.Latest, false);<EOL>    const allCalls = findNodes(sourceFile, sourceFile, SyntaxKind.CallExpression, true);<EOL>    const bootstraps = getBootstrapNodes(allCalls);<EOL>    const","gt":"calls = bootstraps.reduce((previous, access) => {"}
{"input":"<s> function checkForPlatformDynamicBrowser(filePath, fileContent) {<EOL>    const sourceFile = getTypescriptSourceFile(filePath, fileContent, ScriptTarget.Latest, false);<EOL>    const allCalls = findNodes(sourceFile, sourceFile, SyntaxKind.CallExpression, true);<EOL>    const bootstraps = getBootstrapNodes(allCalls);<EOL>    const  calls = bootstraps.reduce((previous, access) => {<EOL>        const expressions = findNodes(sourceFile, access, SyntaxKind.CallExpression, true);<EOL>        return previous.concat(expressions);<EOL>    }, [])<EOL>        .filter((call) => {<EOL>        return call.expression.kind === SyntaxKind.Identifier<EOL>            && call.expression.","gt":"text === '<STR_LIT>';"}
{"input":"<s> export function getTsFilePaths(context) {<EOL>    const tsFileGlobString = join(context.srcDir, '<STR_LIT>', '<STR_LIT>');<EOL>","gt":"return globAll([tsFileGlobString]).then((results) => {"}
{"input":"<s> function isset(value) {<EOL>    return","gt":"typeof value != '<STR_LIT>';"}
{"input":"<s> export function OverArgs(...transforms) {<EOL>    return","gt":"decorator(...transforms);"}
{"input":"<s> <EOL>export function Defer(...args) {<EOL>    return","gt":"decorator(...args);"}
{"input":"<s> function upgradeChild(child) {<EOL>    if (ts.isCallExpression(child) && child.expression.text === '<STR_LIT>') {<EOL>        return child.arguments[","gt":"<NUM_LIT>];"}
{"input":"<s> function importAndEnableProdMode(filePath, fileContent) {<EOL>    let modifiedFileContent = fileContent;<EOL>    modifiedFileContent = insertNamedImportIfNeeded(filePath, modifiedFileContent, '<STR_LIT>', '<STR_LIT>');<EOL>","gt":"const isCalled = checkIfFunctionIsCalled(filePath, modifiedFileContent, '<STR_LIT>');"}
{"input":"<s> <EOL>export function getNewRemoteElectronMenu() {<EOL>    let","gt":"electron = getElectron();"}
{"input":"<s> <EOL>export function registerIconAlias(iconName, mappedToName) {<EOL>    _iconSettings.__remapped[","gt":"iconName.toLowerCase()] = mappedToName.toLowerCase();"}
{"input":"<s> async function printExistingProjectMessage(config) {<EOL>    log('<STR_LIT>');<EOL>    log(`<STR_LIT>`);<EOL>","gt":"log(`<STR_LIT>`);"}
{"input":"<s> <EOL>export function getChildDebugElementAll(parent, tagName) {<EOL>    return parent.queryAll(","gt":"By.css(tagName));"}
{"input":"<s> export function mockViews(nav, views) {<EOL>    nav._views = views;<EOL>    views.","gt":"forEach(v => {"}
{"input":"<s> export function copy(context, configFile) {<EOL>    configFile = getUserConfigFile(context, taskInfo, configFile);<EOL>    const logger = new Logger('<STR_LIT>');<EOL>    return","gt":"copyWorker(context, configFile)"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>","gt":"style: {"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:","gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>","gt":"fontFamily: `<STR_LIT>`,"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>","gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>","gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>","gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>': '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {gt":"'<STR_LIT>':"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>         style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle:  '<STR_LIT>',<EOL>            fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>':  '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>            '<STR_LIT>': '<STR_LIT>',<EOL>             '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> function proxyConfigToMiddlewareConfig(proxy) {<EOL>    const config = {<EOL>        pathRewrite: { [proxy.path]: '<STR_LIT>' },<EOL>        target: proxy.proxyUrl,<EOL>    };<EOL>    if (proxy.proxyNoAgent) {<EOL>        config.agent = false; // TODO: type issue<EOL>    }<EOL>    if (proxy.rejectUnauthorized === false) {<EOL>","gt":"config.secure = false;"}
{"input":"<s> <EOL>function triggerDomEvent(event, data) {<EOL>    var gestureEvent = doc.createEvent('<STR_LIT>');<EOL>","gt":"gestureEvent.initEvent(event, true, true);"}
{"input":"<s> <EOL>export function configurePollingScheduler(pollPeriod) {<EOL>    let scheduler = InstaceCache.getInstance('<STR_LIT>');<EOL>    <EOL>    scheduler.clearAllJobs();<EOL>    <EOL>    let name = scheduler.scheduleJob(getCronPeriodByName(pollPeriod), {<EOL>","gt":"accountIds: getAccountIds()"}
{"input":"<s> <EOL>export function configurePollingScheduler(pollPeriod) {<EOL>    let scheduler = InstaceCache.getInstance('<STR_LIT>');<EOL>    <EOL>    scheduler.clearAllJobs();<EOL>    <EOL>    let name = scheduler.scheduleJob(getCronPeriodByName(pollPeriod), {<EOL>         accountIds: getAccountIds()<EOL>    }, () => {<EOL>        if (isPolling()) {<EOL>            return;<EOL>        }<EOL>        <EOL>        let params = scheduler.getJobParameters(name);<EOL>        if (typeof params.accountIds ===","gt":"'<STR_LIT>') {"}
{"input":"<s> function stringifyPattern(value) {<EOL>    if (value === undefined)<EOL>        return '<STR_LIT>';<EOL>    if (value ===","gt":"null)"}
{"input":"<s> export function mockTabs(app) {<EOL>    let platform = mockPlatform();<EOL>    let config = mockConfig(null, '<STR_LIT>', platform);<EOL>    app =","gt":"app || mockApp(config, platform);"}
{"input":"<s> async function fGenericIndexedTypeForStringProp(obj) {<EOL>    return obj.","gt":"stringProp;"}
{"input":"<s> export async function generateAppGlobalContents(config, compilerCtx, buildCtx, sourceTarget) {<EOL>    let globalJsContents = [];<EOL>    const results = await Promise.all([<EOL>        loadDependentGlobalJsContents(config, compilerCtx, buildCtx, sourceTarget),<EOL>","gt":"bundleProjectGlobal(config, compilerCtx, buildCtx, sourceTarget, config.namespace, config.globalScript)"}
{"input":"<s> export async function generateAppGlobalContents(config, compilerCtx, buildCtx, sourceTarget) {<EOL>    let globalJsContents = [];<EOL>    const results = await Promise.all([<EOL>        loadDependentGlobalJsContents(config, compilerCtx, buildCtx, sourceTarget),<EOL>         bundleProjectGlobal(config, compilerCtx, buildCtx, sourceTarget, config.namespace, config.globalScript)<EOL>    ]);<EOL>    const dependentGlobalJsContents = results[<NUM_LIT>];<EOL>    const projectGlobalJsContent = results[<NUM_LIT>];<EOL>    globalJsContents = globalJsContents.concat(dependentGlobalJsContents);<EOL>    if (projectGlobalJsContent) {<EOL>        globalJsContents.push(","gt":"projectGlobalJsContent);"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>        style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle: '<STR_LIT>',<EOL>","gt":"fontWeight: '<STR_LIT>',"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>        style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle: '<STR_LIT>',<EOL>             fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>","gt":"fontFamily: `<STR_LIT>`,"}
{"input":"<s> export function initializeIcons(baseUrl = '<STR_LIT>', options) {<EOL>    const subset = {<EOL>        style: {<EOL>            MozOsxFontSmoothing: '<STR_LIT>',<EOL>            WebkitFontSmoothing: '<STR_LIT>',<EOL>            fontStyle: '<STR_LIT>',<EOL>             fontWeight: '<STR_LIT>',<EOL>            speak: '<STR_LIT>'<EOL>        },<EOL>        fontFace: {<EOL>             fontFamily: `<STR_LIT>`,<EOL>            src: `<STR_LIT>`,<EOL>        },<EOL>        icons: {<EOL>            '<STR_LIT>':","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>function getRepositoryState(accountState, repoId) {<EOL>    return accountState[repoId] ||","gt":"defaultRepositoryMuteFilter;"}
{"input":"<s> <EOL>export function pollBeforeNotifications(accountId, token, before, all = false) {<EOL>    let service = InstanceCache.getInstance('<STR_LIT>');<EOL>    return dispatch => {<EOL>        dispatch(","gt":"setIsPolling(true));"}
{"input":"<s> export function mockNgModuleLoader() {<EOL>    return","gt":"new NgModuleLoader(null);"}
{"input":"<s> export function uglifyjs(context, configFile) {<EOL>    configFile = getUserConfigFile(context, taskInfo, configFile);<EOL>    const logger = new Logger('<STR_LIT>');<EOL>    return","gt":"runWorker('<STR_LIT>', '<STR_LIT>', context, configFile)"}
{"input":"<s> export function getEventDecoratorMeta(checker, classNode) {<EOL>    return classNode.members<EOL>        .filter(isPropertyWithDecorators)<EOL>        .reduce((membersMeta, member) => {<EOL>        const elementDecorator = member.decorators.find(isDecoratorNamed('<STR_LIT>'));<EOL>        if (elementDecorator ==","gt":"null) {"}
{"input":"<s> export function getEventDecoratorMeta(checker, classNode) {<EOL>    return classNode.members<EOL>        .filter(isPropertyWithDecorators)<EOL>        .reduce((membersMeta, member) => {<EOL>        const elementDecorator = member.decorators.find(isDecoratorNamed('<STR_LIT>'));<EOL>        if (elementDecorator ==  null) {<EOL>            return membersMeta;<EOL>        }<EOL>        const [eventOptions] = getDeclarationParameters(elementDecorator);<EOL>        const metadata = convertOptionsToMeta(","gt":"eventOptions, member.name.getText());"}
{"input":"<s> export function getEventDecoratorMeta(checker, classNode) {<EOL>    return classNode.members<EOL>        .filter(isPropertyWithDecorators)<EOL>        .reduce((membersMeta, member) => {<EOL>        const elementDecorator = member.decorators.find(isDecoratorNamed('<STR_LIT>'));<EOL>        if (elementDecorator ==  null) {<EOL>            return membersMeta;<EOL>        }<EOL>        const [eventOptions] = getDeclarationParameters(elementDecorator);<EOL>        const metadata = convertOptionsToMeta( eventOptions, member.name.getText());<EOL>        if (metadata) {<EOL>            const symbol = checker.getSymbolAtLocation(member.name);<EOL>            metadata.jsdoc = serializeSymbol(checker, symbol);<EOL>","gt":"membersMeta.push(metadata);"}
{"input":"<s> <EOL>export function addAppAlert(appAlert) {<EOL>    return {<EOL>        type:","gt":"ActionConstants.appAlerts.ADD_APP_ALERT,"}
{"input":"<s> <EOL>export function rendererExists(rendererName) {<EOL>    return typeof renderers[rendererName.toUpperCase()] !==","gt":"'<STR_LIT>';"}
{"input":"<s> function compareStrings(a, b) {<EOL>    return (a < b ? -<NUM_LIT> : (a >","gt":"b ? <NUM_LIT> : <NUM_LIT>));"}
{"input":"<s> export function getGlobalProxy() {<EOL>    const envvars = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    for (const envvar of envvars) {<EOL>","gt":"if (process.env[envvar]) {"}
{"input":"<s> export function formatAPISuccess(req, r) {<EOL>","gt":"return `<STR_LIT>`"}
{"input":"<s> <EOL>export function memoize(target, key, descriptor) {<EOL>    // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",<EOL>    // rather than passing them in as input values which can be memoized.<EOL>    let fn = memoizeFunction(descriptor.value &&","gt":"descriptor.value.bind(null));"}
{"input":"<s> export async function getIOSPlugins(config, allPlugins) {<EOL>    const resolved = await Promise.all(allPlugins.","gt":"map(p => resolvePlugin(config, p)));"}
{"input":"<s> export function setLastPoll(lastPoll) {<EOL>    return {<EOL>","gt":"type: ActionConstants.app.SET_APP_LAST_POLL,"}
{"input":"<s> <EOL>export function appSetupFlow() {<EOL>    return dispatch => {<EOL>        <EOL>        dispatch(setSetupRenderApp(true));<EOL>        wait(<NUM_LIT>)<EOL>            .then(() => {<EOL>            <EOL>            dispatch(updateAccounts(() => {<EOL>                pollingMethod(getAccountIds());<EOL>                <EOL>                configurePollingScheduler(","gt":"getCurrentPollPeriod());"}
{"input":"<s> <EOL>export function appSetupFlow() {<EOL>    return dispatch => {<EOL>        <EOL>        dispatch(setSetupRenderApp(true));<EOL>        wait(<NUM_LIT>)<EOL>            .then(() => {<EOL>            <EOL>            dispatch(updateAccounts(() => {<EOL>                pollingMethod(getAccountIds());<EOL>                <EOL>                configurePollingScheduler( getCurrentPollPeriod());<EOL>                <EOL>                dispatch(setSetupShowLoading(false));<EOL>","gt":"wait(<NUM_LIT>)"}
{"input":"<s> <EOL>export function setNotificationDoubleClickAction(action) {<EOL>    return {<EOL>        type: ActionConstants.","gt":"settings.SET_NOTIFICATIONS_DOUBLE_CLICK_ACTION,"}
{"input":"<s> export function foo() {<EOL>    return","gt":"null;"}
{"input":"<s> function expectNameOnAllInputs(element, name) {<EOL>    const inputs = element.querySelectorAll('<STR_LIT>');<EOL>    for (let","gt":"i = <NUM_LIT>; i < inputs.length; i++) {"}
{"input":"<s> export function format(fileName, text, options = createDefaultFormatCodeSettings()) {<EOL>    const host = new LanguageServiceHost();<EOL>    host.addFile(fileName, text);<EOL>    const languageService = ts.createLanguageService(host);<EOL>    const","gt":"edits = languageService.getFormattingEditsForDocument(fileName, options);"}
{"input":"<s> export function format(fileName, text, options = createDefaultFormatCodeSettings()) {<EOL>    const host = new LanguageServiceHost();<EOL>    host.addFile(fileName, text);<EOL>    const languageService = ts.createLanguageService(host);<EOL>    const  edits = languageService.getFormattingEditsForDocument(fileName, options);<EOL>    edits<EOL>        .sort((a, b) => a.span.start - b.span.start)<EOL>        .reverse()<EOL>        .forEach(edit => {<EOL>        const head = text.slice(<NUM_LIT>, edit.span.start);<EOL>        const tail = text.slice(edit.span.start + edit.span.","gt":"length);"}
{"input":"<s> function twoDigit(val) {<EOL>    return ('<STR_LIT>' + (","gt":"isPresent(val) ? Math.abs(val) : '<STR_LIT>')).slice(-<NUM_LIT>);"}
{"input":"<s> async function formatUsage(env, ns) {<EOL>    const metadata = await ns.getMetadata();<EOL>    let name = metadata.name;<EOL>    if (ns.parent) {<EOL>        name =","gt":"name}`<STR_LIT>n"}
{"input":"<s> async function formatUsage(env, ns) {<EOL>    const metadata = await ns.getMetadata();<EOL>    let name = metadata.name;<EOL>    if (ns.parent) {<EOL>        name = `<STR_LIT>`; // TODO: recurse back ns chain<EOL>    }<EOL>    const options = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    const usageLines = [<EOL>","gt":"chalk.dim('<STR_LIT>')}`<STR_LIT>,"}
{"input":"<s> export function getComponentsDtsDistTypesFilePath(config) {<EOL>    return pathJoin(config, config.typesDir,","gt":"COMPONENTS_DTS);"}
{"input":"<s> function getRobots() {<EOL>    return","gt":"robots;"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let","gt":"rgb = [];"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let  rgb = [];<EOL>    const c = v * s;<EOL>    const hh = h / <NUM_LIT>;<EOL>    const x = c * (","gt":"<NUM_LIT> - Math.abs(hh % <NUM_LIT> - <NUM_LIT>));"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let  rgb = [];<EOL>    const c = v * s;<EOL>    const hh = h / <NUM_LIT>;<EOL>    const x = c * ( <NUM_LIT> - Math.abs(hh % <NUM_LIT> - <NUM_LIT>));<EOL>    const m = v - c;<EOL>    switch (Math.floor(hh)) {<EOL>        case <NUM_LIT>:<EOL>            rgb = [","gt":"c, x, <NUM_LIT>];"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let  rgb = [];<EOL>    const c = v * s;<EOL>    const hh = h / <NUM_LIT>;<EOL>    const x = c * ( <NUM_LIT> - Math.abs(hh % <NUM_LIT> - <NUM_LIT>));<EOL>    const m = v - c;<EOL>    switch (Math.floor(hh)) {<EOL>        case <NUM_LIT>:<EOL>            rgb = [ c, x, <NUM_LIT>];<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [x, c, <NUM_LIT>];<EOL>","gt":"break;"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let  rgb = [];<EOL>    const c = v * s;<EOL>    const hh = h / <NUM_LIT>;<EOL>    const x = c * ( <NUM_LIT> - Math.abs(hh % <NUM_LIT> - <NUM_LIT>));<EOL>    const m = v - c;<EOL>    switch (Math.floor(hh)) {<EOL>        case <NUM_LIT>:<EOL>            rgb = [ c, x, <NUM_LIT>];<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [x, c, <NUM_LIT>];<EOL>             break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [<NUM_LIT>, c, x];<EOL>            break;<EOL>","gt":"case <NUM_LIT>:"}
{"input":"<s> export function hsv2rgb(h, s, v) {<EOL>    s = s / <NUM_LIT>;<EOL>    v = v / <NUM_LIT>;<EOL>    let  rgb = [];<EOL>    const c = v * s;<EOL>    const hh = h / <NUM_LIT>;<EOL>    const x = c * ( <NUM_LIT> - Math.abs(hh % <NUM_LIT> - <NUM_LIT>));<EOL>    const m = v - c;<EOL>    switch (Math.floor(hh)) {<EOL>        case <NUM_LIT>:<EOL>            rgb = [ c, x, <NUM_LIT>];<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [x, c, <NUM_LIT>];<EOL>             break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [<NUM_LIT>, c, x];<EOL>            break;<EOL>         case <NUM_LIT>:<EOL>            rgb = [<NUM_LIT>, x, c];<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>            rgb = [x, <NUM_LIT>, c];<EOL>            break;<EOL>        case <NUM_LIT>:<EOL>","gt":"rgb = [c, <NUM_LIT>, x];"}
{"input":"<s> function assertEqual(a, b, message) {<EOL>    if (!equal(a,","gt":"b)) {"}
{"input":"<s> <EOL>export function find(array, cb) {<EOL>    let index = findIndex(array, cb);<EOL>    if (","gt":"index < <NUM_LIT>) {"}
{"input":"<s> <EOL>export function createArray(size, getItem) {<EOL>    let array = [];<EOL>    for (let","gt":"i = <NUM_LIT>; i < size; i++) {"}
{"input":"<s> <EOL>function configure(user_options) {<EOL>    options = inherit(options,","gt":"user_options);"}
{"input":"<s> function createKeyDownEvent(key) {<EOL>    const event = { which: key, preventDefault: () => { }, stopPropagation: () => { } };<EOL>    spyOn(","gt":"event, '<STR_LIT>');"}
{"input":"<s> function exec() {<EOL>    var canv = document.createElement(\"<STR_LIT>\");<EOL>    canv.width = <NUM_LIT>;<EOL>    canv.height =","gt":"<NUM_LIT>;"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new","gt":"DataStore();"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new","gt":"RealFileSystem()), autorestArgs);"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error(","gt":"color(\"<STR_LIT>\"));"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>","gt":"\"<STR_LIT>\"));"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][","gt":"<NUM_LIT>])).info.title;"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(","gt":"value}`<STR_LIT>;"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return","gt":"<NUM_LIT>;"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    config[\"<STR_LIT>\"] = currentDirUri;<EOL>","gt":"const api = new AutoRest(new RealFileSystem());"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    config[\"<STR_LIT>\"] = currentDirUri;<EOL>     const api = new AutoRest(new RealFileSystem());<EOL>    api.AddConfiguration(config);<EOL>    const view = await api.view;<EOL>    let outstanding = Promise.resolve();<EOL>    api.GeneratedFile.Subscribe((_, file) => outstanding = outstanding.then(() => WriteString(file.uri, file.content)));<EOL>    api.ClearFolder.Subscribe((_, folder) => outstanding = outstanding.then(async () => {<EOL>        try {<EOL>            await ClearFolder(folder);<EOL>        }<EOL>        catch (e) { }<EOL>    }));<EOL>    subscribeMessages(","gt":"api, () => { });"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    config[\"<STR_LIT>\"] = currentDirUri;<EOL>     const api = new AutoRest(new RealFileSystem());<EOL>    api.AddConfiguration(config);<EOL>    const view = await api.view;<EOL>    let outstanding = Promise.resolve();<EOL>    api.GeneratedFile.Subscribe((_, file) => outstanding = outstanding.then(() => WriteString(file.uri, file.content)));<EOL>    api.ClearFolder.Subscribe((_, folder) => outstanding = outstanding.then(async () => {<EOL>        try {<EOL>            await ClearFolder(folder);<EOL>        }<EOL>        catch (e) { }<EOL>    }));<EOL>    subscribeMessages( api, () => { });<EOL>    // warn about `--` arguments<EOL>    for (var arg of autorestArgs) {<EOL>        if (arg.startsWith(\"<STR_LIT>\")) {<EOL>","gt":"view."}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    config[\"<STR_LIT>\"] = currentDirUri;<EOL>     const api = new AutoRest(new RealFileSystem());<EOL>    api.AddConfiguration(config);<EOL>    const view = await api.view;<EOL>    let outstanding = Promise.resolve();<EOL>    api.GeneratedFile.Subscribe((_, file) => outstanding = outstanding.then(() => WriteString(file.uri, file.content)));<EOL>    api.ClearFolder.Subscribe((_, folder) => outstanding = outstanding.then(async () => {<EOL>        try {<EOL>            await ClearFolder(folder);<EOL>        }<EOL>        catch (e) { }<EOL>    }));<EOL>    subscribeMessages( api, () => { });<EOL>    // warn about `--` arguments<EOL>    for (var arg of autorestArgs) {<EOL>        if (arg.startsWith(\"<STR_LIT>\")) {<EOL>             view.","gt":"Message({"}
{"input":"<s> async function legacyMain(autorestArgs) {<EOL>    // generate virtual config file<EOL>    const currentDirUri = CreateFolderUri(currentDirectory());<EOL>    const dataStore = new  DataStore();<EOL>    let config = {};<EOL>    try {<EOL>        config = await CreateConfiguration(currentDirUri, dataStore.GetReadThroughScope(new  RealFileSystem()), autorestArgs);<EOL>    }<EOL>    catch (e) {<EOL>        console.error( color(\"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>            \"<STR_LIT>\" +<EOL>             \"<STR_LIT>\"));<EOL>        console.error(\"<STR_LIT>\");<EOL>        console.error(color(\"<STR_LIT>\" + e));<EOL>        await showHelp();<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const clientNameGuess = (config[\"<STR_LIT>\"] || {}).title || Parse(await ReadUri(config[\"<STR_LIT>\"][ <NUM_LIT>])).info.title;<EOL>        await autorestInit(clientNameGuess, Array.isArray(config[\"<STR_LIT>\"]) ? config[\"<STR_LIT>\"] : []);<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    // autorest init-min<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        console.log(`<STR_LIT>`.replace(/~/g, \"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    // autorest init-cli<EOL>    if (autorestArgs[<NUM_LIT>] === \"<STR_LIT>\") {<EOL>        const args = [];<EOL>        for (const node of nodes(config, \"<STR_LIT>\")) {<EOL>            const path = node.path.join(\"<STR_LIT>\");<EOL>            const values = node.value instanceof Array ? node.value : (typeof node.value === \"<STR_LIT>\" ? [] : [node.value]);<EOL>            for (const value of values) {<EOL>                args.push(`<STR_LIT>`);<EOL>            }<EOL>        }<EOL>        console.log(args.join(\"<STR_LIT>\"));<EOL>        return  <NUM_LIT>;<EOL>    }<EOL>    config[\"<STR_LIT>\"] = currentDirUri;<EOL>     const api = new AutoRest(new RealFileSystem());<EOL>    api.AddConfiguration(config);<EOL>    const view = await api.view;<EOL>    let outstanding = Promise.resolve();<EOL>    api.GeneratedFile.Subscribe((_, file) => outstanding = outstanding.then(() => WriteString(file.uri, file.content)));<EOL>    api.ClearFolder.Subscribe((_, folder) => outstanding = outstanding.then(async () => {<EOL>        try {<EOL>            await ClearFolder(folder);<EOL>        }<EOL>        catch (e) { }<EOL>    }));<EOL>    subscribeMessages( api, () => { });<EOL>    // warn about `--` arguments<EOL>    for (var arg of autorestArgs) {<EOL>        if (arg.startsWith(\"<STR_LIT>\")) {<EOL>             view. Message({<EOL>                Channel: Channel.Warning,<EOL>                Text: `<STR_LIT>` +<EOL>                    \"<STR_LIT>\" +<EOL>","gt":"\"<STR_LIT>\""}
{"input":"<s> export function injectCoreHtml(indexHtml, inject) {<EOL>    // see if we can find an existing ionic script tag and replace it entirely<EOL>    const existingTag = indexHtml.match(/<script data-ionic=\"inject\">[\\s\\S]*?<\\/script>/gi);<EOL>    if (existingTag) {<EOL>        return indexHtml.replace(existingTag[<NUM_LIT>], inject.trim());<EOL>    }<EOL>    // see if we can find the head tag and inject it immediate below it<EOL>    const headTag = indexHtml.match(/<head[^>]*>/gi);<EOL>    if (headTag) {<EOL>        return indexHtml.replace(","gt":"headTag[<NUM_LIT>], `<STR_LIT>`);"}
{"input":"<s> export function injectCoreHtml(indexHtml, inject) {<EOL>    // see if we can find an existing ionic script tag and replace it entirely<EOL>    const existingTag = indexHtml.match(/<script data-ionic=\"inject\">[\\s\\S]*?<\\/script>/gi);<EOL>    if (existingTag) {<EOL>        return indexHtml.replace(existingTag[<NUM_LIT>], inject.trim());<EOL>    }<EOL>    // see if we can find the head tag and inject it immediate below it<EOL>    const headTag = indexHtml.match(/<head[^>]*>/gi);<EOL>    if (headTag) {<EOL>        return indexHtml.replace( headTag[<NUM_LIT>], `<STR_LIT>`);<EOL>    }<EOL>    // see if we can find the html tag and inject it immediate below it<EOL>    const htmlTag = indexHtml.match(/<html[^>]*>/gi);<EOL>","gt":"if (htmlTag) {"}
{"input":"<s> <EOL>function daysInMonth(month, year) {<EOL>    return new","gt":"Date(year, month, <NUM_LIT>).getDate();"}
{"input":"<s> export function main() {<EOL>    describe('<STR_LIT>', () => {<EOL>        beforeEach(() => {<EOL>            TestBed.configureTestingModule({<EOL>                declarations: [Infragistics.IgSparklineComponent, TestComponent]<EOL>            });<EOL>        });<EOL>","gt":"it('<STR_LIT>', (done) => {"}
{"input":"<s> export function main() {<EOL>    describe('<STR_LIT>', () => {<EOL>        beforeEach(() => {<EOL>            TestBed.configureTestingModule({<EOL>                declarations: [Infragistics.IgSparklineComponent, TestComponent]<EOL>            });<EOL>        });<EOL>         it('<STR_LIT>', (done) => {<EOL>            var template = '<STR_LIT>';<EOL>            TestBed.overrideComponent(TestComponent, {<EOL>                set: {<EOL>                    template: template<EOL>                }<EOL>            });<EOL>            TestBed.compileComponents().then(() => {<EOL>                let fixture = TestBed.createComponent(TestComponent);<EOL>                fixture.detectChanges();<EOL>                expect(fixture.debugElement.componentInstance.","gt":"viewChild instanceof Infragistics.IgSparklineComponent)"}
{"input":"<s> export function main() {<EOL>    describe('<STR_LIT>', () => {<EOL>        beforeEach(() => {<EOL>            TestBed.configureTestingModule({<EOL>                declarations: [Infragistics.IgSplitButtonComponent, TestComponent]<EOL>            });<EOL>        });<EOL>        it(","gt":"'<STR_LIT>', (done) => {"}
{"input":"<s> export function main() {<EOL>    describe('<STR_LIT>', () => {<EOL>        beforeEach(() => {<EOL>            TestBed.configureTestingModule({<EOL>                declarations: [Infragistics.IgSplitButtonComponent, TestComponent]<EOL>            });<EOL>        });<EOL>        it( '<STR_LIT>', (done) => {<EOL>            var template = '<STR_LIT>';<EOL>            TestBed.overrideComponent(TestComponent, {<EOL>                set: {<EOL>                    template: template<EOL>                }<EOL>            });<EOL>            TestBed.compileComponents().then(() => {<EOL>                let fixture = TestBed.createComponent(TestComponent);<EOL>                fixture.detectChanges();<EOL>                expect(fixture.debugElement.componentInstance.","gt":"viewChild instanceof Infragistics.IgSplitButtonComponent)"}
{"input":"<s> // @allowUnreachableCode: false<EOL>// @noImplicitReturns: true<EOL>function f0(x) {<EOL>    while (","gt":"true)"}
{"input":"<s> function f11(x) {<EOL>    test: try {<EOL>        do {<EOL>            do {<EOL>","gt":"break test;"}
{"input":"<s> function f11(x) {<EOL>    test: try {<EOL>        do {<EOL>            do {<EOL>                 break test;<EOL>            } while (true);<EOL>            x++;<EOL>        } while (true);<EOL>    }<EOL>    catch (","gt":"e) {"}
{"input":"<s> export function createDefaultFormatCodeSettings() {<EOL>    return {<EOL>        baseIndentSize: <NUM_LIT>,<EOL>        indentSize: <NUM_LIT>,<EOL>        tabSize: <NUM_LIT>,<EOL>        indentStyle: ts.IndentStyle.","gt":"Smart,"}
{"input":"<s> export function createDefaultFormatCodeSettings() {<EOL>    return {<EOL>        baseIndentSize: <NUM_LIT>,<EOL>        indentSize: <NUM_LIT>,<EOL>        tabSize: <NUM_LIT>,<EOL>        indentStyle: ts.IndentStyle. Smart,<EOL>        newLineCharacter: \"<STR_LIT>\",<EOL>        convertTabsToSpaces: true,<EOL>","gt":"insertSpaceAfterCommaDelimiter: true,"}
{"input":"<s> export function createDefaultFormatCodeSettings() {<EOL>    return {<EOL>        baseIndentSize: <NUM_LIT>,<EOL>        indentSize: <NUM_LIT>,<EOL>        tabSize: <NUM_LIT>,<EOL>        indentStyle: ts.IndentStyle. Smart,<EOL>        newLineCharacter: \"<STR_LIT>\",<EOL>        convertTabsToSpaces: true,<EOL>         insertSpaceAfterCommaDelimiter: true,<EOL>        insertSpaceAfterSemicolonInForStatements: true,<EOL>        insertSpaceBeforeAndAfterBinaryOperators: true,<EOL>        insertSpaceAfterConstructor: false,<EOL>        insertSpaceAfterKeywordsInControlFlowStatements: true,<EOL>        insertSpaceAfterFunctionKeywordForAnonymousFunctions:","gt":"false,"}
{"input":"<s> export function createDefaultFormatCodeSettings() {<EOL>    return {<EOL>        baseIndentSize: <NUM_LIT>,<EOL>        indentSize: <NUM_LIT>,<EOL>        tabSize: <NUM_LIT>,<EOL>        indentStyle: ts.IndentStyle. Smart,<EOL>        newLineCharacter: \"<STR_LIT>\",<EOL>        convertTabsToSpaces: true,<EOL>         insertSpaceAfterCommaDelimiter: true,<EOL>        insertSpaceAfterSemicolonInForStatements: true,<EOL>        insertSpaceBeforeAndAfterBinaryOperators: true,<EOL>        insertSpaceAfterConstructor: false,<EOL>        insertSpaceAfterKeywordsInControlFlowStatements: true,<EOL>        insertSpaceAfterFunctionKeywordForAnonymousFunctions:  false,<EOL>        insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,<EOL>        insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,<EOL>        insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true,<EOL>        insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,<EOL>        insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: false,<EOL>","gt":"insertSpaceAfterTypeAssertion: false,"}
{"input":"<s> export function getConfigFileName(baseDir, configFileName) {<EOL>    let configFilePath = path.resolve(baseDir, configFileName);<EOL>    if (fs.existsSync(configFilePath)) {<EOL>        return","gt":"configFilePath;"}
{"input":"<s> export function readFilesFromTsconfig(configPath) {<EOL>    return readTsconfig(configPath).","gt":"fileNames;"}
{"input":"<s> function render(context, sassConfig) {<EOL>    return new Promise((resolve, reject) => {<EOL>        sassConfig.omitSourceMapUrl = false;<EOL>        if (sassConfig.sourceMap) {<EOL>            sassConfig.sourceMapContents = true;<EOL>        }<EOL>        nodeSassRender(sassConfig, (sassError, sassResult) => {<EOL>            const diagnostics = runSassDiagnostics(context,","gt":"sassError);"}
{"input":"<s> function render(context, sassConfig) {<EOL>    return new Promise((resolve, reject) => {<EOL>        sassConfig.omitSourceMapUrl = false;<EOL>        if (sassConfig.sourceMap) {<EOL>            sassConfig.sourceMapContents = true;<EOL>        }<EOL>        nodeSassRender(sassConfig, (sassError, sassResult) => {<EOL>            const diagnostics = runSassDiagnostics(context,  sassError);<EOL>            if (diagnostics.length) {<EOL>                printDiagnostics(context, DiagnosticsType.Sass, diagnostics, true, true);<EOL>                // sass render error :(<EOL>                reject(new BuildError('<STR_LIT>'));<EOL>            }<EOL>            else {<EOL>                // sass render success :)<EOL>                renderSassSuccess(context, sassResult, sassConfig).then(outFile => {<EOL>                    resolve(outFile);<EOL>                }).","gt":"catch(err => {"}
{"input":"<s> <EOL>function _getStyleForLabelBasedOnPosition(labelPosition, styles) {<EOL>    switch (labelPosition) {<EOL>        case Position.start:<EOL>            return styles.labelWrapperStart;<EOL>","gt":"case Position.end:"}
{"input":"<s> <EOL>function _getStyleForLabelBasedOnPosition(labelPosition, styles) {<EOL>    switch (labelPosition) {<EOL>        case Position.start:<EOL>            return styles.labelWrapperStart;<EOL>         case Position.end:<EOL>            return styles.labelWrapperEnd;<EOL>        case Position.top:<EOL>            return styles.labelWrapperTop;<EOL>","gt":"case Position.bottom:"}
{"input":"<s> export function View_IgTreeGridComponent_0(l) {<EOL>    return import0.ɵvid(<NUM_LIT>, [import0.ɵncd(null, <NUM_LIT>)],","gt":"null, null);"}
{"input":"<s> export function copyUpdate(event, filePath, context) {<EOL>    const changedFile = {<EOL>        event: event,<EOL>        filePath: filePath,<EOL>        ext: extname(filePath).toLowerCase()<EOL>    };<EOL>    // do not allow duplicates<EOL>    if (!queuedCopyChanges.some(f => f.filePath ===","gt":"filePath)) {"}
{"input":"<s> export function copyUpdate(event, filePath, context) {<EOL>    const changedFile = {<EOL>        event: event,<EOL>        filePath: filePath,<EOL>        ext: extname(filePath).toLowerCase()<EOL>    };<EOL>    // do not allow duplicates<EOL>    if (!queuedCopyChanges.some(f => f.filePath ===  filePath)) {<EOL>        queuedCopyChanges.push(changedFile);<EOL>        // debounce our build update incase there are multiple files<EOL>        clearTimeout(queuedCopyTimerId);<EOL>        // run this code in a few milliseconds if another hasn't come in behind it<EOL>","gt":"queuedCopyTimerId = setTimeout(() => {"}
{"input":"<s> export function updateTemplate(componentDir, match) {<EOL>    const htmlFilePath = join(componentDir, match.templateUrl);<EOL>    try {<EOL>","gt":"const templateContent = readFileSync(htmlFilePath, '<STR_LIT>');"}
{"input":"<s> export function setBundledFiles(context) {<EOL>    const bundledFilesToWrite = context.fileCache.getAll().filter(file => {<EOL>        return dirname(file.path).","gt":"indexOf(context.buildDir) >= <NUM_LIT> && (file.path.endsWith('<STR_LIT>') || file.path.endsWith('<STR_LIT>'));"}
{"input":"<s> <EOL>export function decoratorSchemaFactory(fn) {<EOL>    return (...parameters) => {<EOL>        let schema;<EOL>        switch (getDecoratorType(parameters)) {<EOL>            case \"<STR_LIT>\":<EOL>","gt":"schema = PropertyRegistry.get(parameters[<NUM_LIT>], parameters[<NUM_LIT>]).schema;"}
{"input":"<s> <EOL>export function decoratorSchemaFactory(fn) {<EOL>    return (...parameters) => {<EOL>        let schema;<EOL>        switch (getDecoratorType(parameters)) {<EOL>            case \"<STR_LIT>\":<EOL>                 schema = PropertyRegistry.get(parameters[<NUM_LIT>], parameters[<NUM_LIT>]).schema;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                schema = JsonSchemesRegistry.createIfNotExists(parameters[<NUM_LIT>]);<EOL>","gt":"break;"}
{"input":"<s> <EOL>export function decoratorSchemaFactory(fn) {<EOL>    return (...parameters) => {<EOL>        let schema;<EOL>        switch (getDecoratorType(parameters)) {<EOL>            case \"<STR_LIT>\":<EOL>                 schema = PropertyRegistry.get(parameters[<NUM_LIT>], parameters[<NUM_LIT>]).schema;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                schema = JsonSchemesRegistry.createIfNotExists(parameters[<NUM_LIT>]);<EOL>                 break;<EOL>        }<EOL>        const result = fn(schema, parameters);<EOL>        if (typeof result === \"<STR_LIT>\") {<EOL>","gt":"result(...parameters);"}
{"input":"<s> function getUserPackageJson(userRootDir) {<EOL>    try {<EOL>        return readJsonSync(join(","gt":"userRootDir, '<STR_LIT>'));"}
{"input":"<s> export function getSystemData(userRootDir) {<EOL>    const d = {<EOL>        ionicAppScripts: getAppScriptsVersion(),<EOL>        ionicFramework: '<STR_LIT>',<EOL>        ionicNative: '<STR_LIT>',<EOL>        angularCore:","gt":"'<STR_LIT>',"}
{"input":"<s> export function getSystemData(userRootDir) {<EOL>    const d = {<EOL>        ionicAppScripts: getAppScriptsVersion(),<EOL>        ionicFramework: '<STR_LIT>',<EOL>        ionicNative: '<STR_LIT>',<EOL>        angularCore:  '<STR_LIT>',<EOL>        angularCompilerCli: '<STR_LIT>',<EOL>        node: process.version.replace('<STR_LIT>', '<STR_LIT>'),<EOL>","gt":"osName: osName()"}
{"input":"<s> export function getSystemData(userRootDir) {<EOL>    const d = {<EOL>        ionicAppScripts: getAppScriptsVersion(),<EOL>        ionicFramework: '<STR_LIT>',<EOL>        ionicNative: '<STR_LIT>',<EOL>        angularCore:  '<STR_LIT>',<EOL>        angularCompilerCli: '<STR_LIT>',<EOL>        node: process.version.replace('<STR_LIT>', '<STR_LIT>'),<EOL>         osName: osName()<EOL>    };<EOL>    try {<EOL>        const userPackageJson = getUserPackageJson(userRootDir);<EOL>        if (userPackageJson) {<EOL>            const userDependencies =","gt":"userPackageJson.dependencies;"}
{"input":"<s> export function getSystemData(userRootDir) {<EOL>    const d = {<EOL>        ionicAppScripts: getAppScriptsVersion(),<EOL>        ionicFramework: '<STR_LIT>',<EOL>        ionicNative: '<STR_LIT>',<EOL>        angularCore:  '<STR_LIT>',<EOL>        angularCompilerCli: '<STR_LIT>',<EOL>        node: process.version.replace('<STR_LIT>', '<STR_LIT>'),<EOL>         osName: osName()<EOL>    };<EOL>    try {<EOL>        const userPackageJson = getUserPackageJson(userRootDir);<EOL>        if (userPackageJson) {<EOL>            const userDependencies =  userPackageJson.dependencies;<EOL>            if (userDependencies) {<EOL>                d.ionicFramework = userDependencies['<STR_LIT>'];<EOL>                d.ionicNative = userDependencies['<STR_LIT>'];<EOL>                d.angularCore = userDependencies['<STR_LIT>'];<EOL>                d.angularCompilerCli =","gt":"userDependencies['<STR_LIT>'];"}
{"input":"<s> export function stringSplice(source, startIndex, numToDelete, newContent) {<EOL>","gt":"return source.slice(<NUM_LIT>, startIndex) + newContent + source.slice(startIndex + Math.abs(numToDelete));"}
{"input":"<s> export function getIntPropertyValue(propertyName) {<EOL>    const result =","gt":"process.env[propertyName];"}
{"input":"<s> export function semverStringToObject(semverString) {<EOL>    const versionArray = semverString.split('<STR_LIT>');<EOL>","gt":"return {"}
{"input":"<s> export function getNodeBinExecutable(context, cmd) {<EOL>    let cmdPath = join(context.rootDir, '<STR_LIT>', '<STR_LIT>', cmd);<EOL>    try {<EOL>","gt":"accessSync(cmdPath);"}
{"input":"<s> function isNegatedGlob(pattern) {<EOL>    var glob = { negated: false, pattern: pattern, original: pattern };<EOL>    if (pattern.","gt":"charAt(<NUM_LIT>) === '<STR_LIT>' && pattern.charAt(<NUM_LIT>) !== '<STR_LIT>') {"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>","gt":"beforeEach(async(() => {"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =","gt":"dataGenerator.data;"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>","gt":"describe(\"<STR_LIT>\", () => {"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection.","gt":"Desc,"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection. Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual(dataGenerator.generateArray(<NUM_LIT>, <NUM_LIT>));<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>","gt":"const se = {"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection. Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual(dataGenerator.generateArray(<NUM_LIT>, <NUM_LIT>));<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>             const se = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([","gt":"false, false, false, true, true]);"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection. Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual(dataGenerator.generateArray(<NUM_LIT>, <NUM_LIT>));<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>             const se = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([ false, false, false, true, true]);<EOL>        });<EOL>        // test multiple sorting<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se0 = {<EOL>                dir: SortingDirection.Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const","gt":"se1 = {"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection. Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual(dataGenerator.generateArray(<NUM_LIT>, <NUM_LIT>));<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>             const se = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([ false, false, false, true, true]);<EOL>        });<EOL>        // test multiple sorting<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se0 = {<EOL>                dir: SortingDirection.Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const  se1 = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se0, se1] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>]);<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>            data[<NUM_LIT>].string = data[<NUM_LIT>].string.toUpperCase();<EOL>            const se0 = {<EOL>                dir:","gt":"SortingDirection.Desc,"}
{"input":"<s> <EOL>function testSort() {<EOL>    let data = [];<EOL>    let dataGenerator;<EOL>     beforeEach(async(() => {<EOL>        dataGenerator = new DataGenerator();<EOL>        data =  dataGenerator.data;<EOL>    }));<EOL>     describe(\"<STR_LIT>\", () => {<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se = {<EOL>                dir: SortingDirection. Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual(dataGenerator.generateArray(<NUM_LIT>, <NUM_LIT>));<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>             const se = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([ false, false, false, true, true]);<EOL>        });<EOL>        // test multiple sorting<EOL>        it(\"<STR_LIT>\", () => {<EOL>            const se0 = {<EOL>                dir: SortingDirection.Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const  se1 = {<EOL>                dir: SortingDirection.Asc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            const res = DataUtil.sort(data, { expressions: [se0, se1] });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>]);<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>            data[<NUM_LIT>].string = data[<NUM_LIT>].string.toUpperCase();<EOL>            const se0 = {<EOL>                dir:  SortingDirection.Desc,<EOL>                fieldName: \"<STR_LIT>\"<EOL>            };<EOL>            let res = DataUtil.sort(data, {<EOL>                expressions: [se0]<EOL>            });<EOL>            expect(dataGenerator.getValuesForColumn(res, \"<STR_LIT>\"))<EOL>                .toEqual([<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>], \"<STR_LIT>\");<EOL>","gt":"se0.ignoreCase = true;"}
{"input":"<s> function customizeConfig(config) {<EOL>    config.meridian = true;<EOL>    config.spinners = false;<EOL>","gt":"config.seconds = true;"}
{"input":"<s> function* ParseCodeblocks(markdown) {<EOL>    const parsed = ParseCommonmark(markdown);<EOL>    const walker = parsed.walker();<EOL>    let","gt":"event;"}
{"input":"<s> export function findObjectLiteralElementByName(properties, identifierToLookFor) {<EOL>    return properties.filter((","gt":"propertyNode) => {"}
{"input":"<s> export function appendNgModuleExports(filePath, fileContent, declaration) {<EOL>    const sourceFile = getTypescriptSourceFile(filePath, fileContent, ScriptTarget.Latest, false);<EOL>    const decorator = getNgModuleDecorator(path.basename(filePath), sourceFile);<EOL>    const obj = getNgModuleObjectLiteralArg(decorator);<EOL>    const properties = findObjectLiteralElementByName(obj.properties,","gt":"'<STR_LIT>');"}
{"input":"<s> export function appendNgModuleExports(filePath, fileContent, declaration) {<EOL>    const sourceFile = getTypescriptSourceFile(filePath, fileContent, ScriptTarget.Latest, false);<EOL>    const decorator = getNgModuleDecorator(path.basename(filePath), sourceFile);<EOL>    const obj = getNgModuleObjectLiteralArg(decorator);<EOL>    const properties = findObjectLiteralElementByName(obj.properties,  '<STR_LIT>');<EOL>    const exportsProp = properties.initializer.elements;<EOL>    if (exportsProp.length === <NUM_LIT>) {<EOL>        return appendEmpty(fileContent, exportsProp['<STR_LIT>'], declaration);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> export async function copySourcemaps(context, shouldPurge) {<EOL>    const copyBeforePurge = getBooleanPropertyValue(Constants.ENV_VAR_MOVE_SOURCE_MAPS);<EOL>    if (copyBeforePurge) {<EOL>        await mkDirpAsync(context.sourcemapDir);<EOL>    }<EOL>    const fileNames =","gt":"await readDirAsync(context.buildDir);"}
{"input":"<s> export async function copySourcemaps(context, shouldPurge) {<EOL>    const copyBeforePurge = getBooleanPropertyValue(Constants.ENV_VAR_MOVE_SOURCE_MAPS);<EOL>    if (copyBeforePurge) {<EOL>        await mkDirpAsync(context.sourcemapDir);<EOL>    }<EOL>    const fileNames =  await readDirAsync(context.buildDir);<EOL>    // only include js source maps<EOL>    const sourceMaps = fileNames.filter(fileName => fileName.endsWith('<STR_LIT>'));<EOL>    const toCopy = sourceMaps.filter(fileName => fileName.","gt":"indexOf('<STR_LIT>') < <NUM_LIT> && fileName.endsWith('<STR_LIT>'));"}
{"input":"<s> export async function copySourcemaps(context, shouldPurge) {<EOL>    const copyBeforePurge = getBooleanPropertyValue(Constants.ENV_VAR_MOVE_SOURCE_MAPS);<EOL>    if (copyBeforePurge) {<EOL>        await mkDirpAsync(context.sourcemapDir);<EOL>    }<EOL>    const fileNames =  await readDirAsync(context.buildDir);<EOL>    // only include js source maps<EOL>    const sourceMaps = fileNames.filter(fileName => fileName.endsWith('<STR_LIT>'));<EOL>    const toCopy = sourceMaps.filter(fileName => fileName. indexOf('<STR_LIT>') < <NUM_LIT> && fileName.endsWith('<STR_LIT>'));<EOL>    const toCopyFullPaths = toCopy.map(fileName => join(context.buildDir, fileName));<EOL>    const toPurge = sourceMaps.map(sourceMap => join(context.buildDir, sourceMap));<EOL>    const","gt":"copyFilePromises = [];"}
{"input":"<s> export async function copySourcemaps(context, shouldPurge) {<EOL>    const copyBeforePurge = getBooleanPropertyValue(Constants.ENV_VAR_MOVE_SOURCE_MAPS);<EOL>    if (copyBeforePurge) {<EOL>        await mkDirpAsync(context.sourcemapDir);<EOL>    }<EOL>    const fileNames =  await readDirAsync(context.buildDir);<EOL>    // only include js source maps<EOL>    const sourceMaps = fileNames.filter(fileName => fileName.endsWith('<STR_LIT>'));<EOL>    const toCopy = sourceMaps.filter(fileName => fileName. indexOf('<STR_LIT>') < <NUM_LIT> && fileName.endsWith('<STR_LIT>'));<EOL>    const toCopyFullPaths = toCopy.map(fileName => join(context.buildDir, fileName));<EOL>    const toPurge = sourceMaps.map(sourceMap => join(context.buildDir, sourceMap));<EOL>    const  copyFilePromises = [];<EOL>    if (copyBeforePurge) {<EOL>        for (const fullPath of toCopyFullPaths) {<EOL>            const fileName = basename(","gt":"fullPath);"}
{"input":"<s> export async function copySourcemaps(context, shouldPurge) {<EOL>    const copyBeforePurge = getBooleanPropertyValue(Constants.ENV_VAR_MOVE_SOURCE_MAPS);<EOL>    if (copyBeforePurge) {<EOL>        await mkDirpAsync(context.sourcemapDir);<EOL>    }<EOL>    const fileNames =  await readDirAsync(context.buildDir);<EOL>    // only include js source maps<EOL>    const sourceMaps = fileNames.filter(fileName => fileName.endsWith('<STR_LIT>'));<EOL>    const toCopy = sourceMaps.filter(fileName => fileName. indexOf('<STR_LIT>') < <NUM_LIT> && fileName.endsWith('<STR_LIT>'));<EOL>    const toCopyFullPaths = toCopy.map(fileName => join(context.buildDir, fileName));<EOL>    const toPurge = sourceMaps.map(sourceMap => join(context.buildDir, sourceMap));<EOL>    const  copyFilePromises = [];<EOL>    if (copyBeforePurge) {<EOL>        for (const fullPath of toCopyFullPaths) {<EOL>            const fileName = basename( fullPath);<EOL>            copyFilePromises.push(copyFileAsync(fullPath, join(context.sourcemapDir, fileName)));<EOL>        }<EOL>    }<EOL>    await Promise.all(copyFilePromises);<EOL>    // okay cool, all of the files have been copied over, so go ahead and blow them all away<EOL>","gt":"const purgeFilePromises = [];"}
{"input":"<s> function getWeekNumbers(element) {<EOL>    return Array.from(element.querySelectorAll(","gt":"'<STR_LIT>'));"}
{"input":"<s> <EOL>export function isArray(target) {<EOL>    return Array.isArray(","gt":"target);"}
{"input":"<s> function CommonmarkParentHeading(startNode) {<EOL>    const currentLevel = startNode.type === commonmarkHeadingNodeType<EOL>        ? startNode.level<EOL>        :","gt":"commonmarkHeadingMaxLevel;"}
{"input":"<s> function f7() {<EOL>    let x = []; // x has evolving array value<EOL>    x.push(","gt":"<NUM_LIT>);"}
{"input":"<s> <EOL>export function compareTimes(date1, date2) {<EOL>    return (<NUM_LIT> * (date1.getHours() - date2.getHours()) +<EOL>        <NUM_LIT> * (date1.","gt":"getMinutes() - date2.getMinutes()) +"}
{"input":"<s> <EOL>export function isCollection(target) {<EOL>    return isArrayOrArrayClass(target)<EOL>        || target === Map<EOL>        || target","gt":"instanceof Map"}
{"input":"<s> <EOL>export function extendsRequest(obj, value) {<EOL>    if (typeof obj === \"<STR_LIT>\") {<EOL>        Object.keys(obj).forEach((key) => {<EOL>            extendsRequest(key, obj[","gt":"key]);"}
{"input":"<s> function foo() {<EOL>    function f1(_i, ...restParameters) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f1NoError(","gt":"_i) {"}
{"input":"<s> function foo() {<EOL>    function f1(_i, ...restParameters) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f1NoError( _i) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f3(...","gt":"restParameters) {"}
{"input":"<s> function foo() {<EOL>    function f1(_i, ...restParameters) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f1NoError( _i) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f3(... restParameters) {<EOL>        var _i = <NUM_LIT>; // no error<EOL>    }<EOL>    function f3NoError() {<EOL>        var","gt":"_i = <NUM_LIT>;"}
{"input":"<s> export function View_IgCheckboxEditorComponent_0(l) {<EOL>    return import0.ɵvid(<NUM_LIT>, [import0.ɵncd(null,","gt":"<NUM_LIT>)], null, null);"}
{"input":"<s> <EOL>export function isEmpty(value) {<EOL>    return value === \"<STR_LIT>\" ||","gt":"value === null || value === undefined;"}
{"input":"<s> function foo7(x) {<EOL>    do {<EOL>        let","gt":"x, y;"}
{"input":"<s> <EOL>export function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones) {<EOL>    return getPreviousElement(rootElement,","gt":"currentElement, true, false, true, includeElementsInFocusZones, false, true);"}
{"input":"<s> <EOL>export function shouldWrapFocus(element, noWrapDataAttribute) {<EOL>    return elementContainsAttribute(element, noWrapDataAttribute) === '<STR_LIT>' ?","gt":"false : true;"}
{"input":"<s> function compare(x, y) {<EOL>    if (x == null)<EOL>        return y == null ?","gt":"<NUM_LIT> : -<NUM_LIT>;"}
{"input":"<s> <EOL>export function Args(mapIndex) {<EOL>    return SocketFilter(","gt":"SocketFilters.ARGS, mapIndex);"}
{"input":"<s> function View_IgPivotDataSelectorComponent_Host_0(l) {<EOL>    return import0.ɵvid(<NUM_LIT>, [<EOL>        (l()(), import0.ɵeld(<NUM_LIT>, null, null, <NUM_LIT>, '<STR_LIT>', [], null, null, null, View_IgPivotDataSelectorComponent_0, RenderType_IgPivotDataSelectorComponent)),<EOL>        import0.ɵdid(<NUM_LIT>, null, <NUM_LIT>, import1.IgPivotDataSelectorComponent, [<EOL>            import0.","gt":"ElementRef,"}
{"input":"<s> function View_IgPivotDataSelectorComponent_Host_0(l) {<EOL>    return import0.ɵvid(<NUM_LIT>, [<EOL>        (l()(), import0.ɵeld(<NUM_LIT>, null, null, <NUM_LIT>, '<STR_LIT>', [], null, null, null, View_IgPivotDataSelectorComponent_0, RenderType_IgPivotDataSelectorComponent)),<EOL>        import0.ɵdid(<NUM_LIT>, null, <NUM_LIT>, import1.IgPivotDataSelectorComponent, [<EOL>            import0. ElementRef,<EOL>            import0.Renderer,<EOL>            import0.IterableDiffers<EOL>        ], null, null)<EOL>    ], (ck,","gt":"v) => {"}
{"input":"<s> <EOL>export function Minimum(minimum, exclusive = false) {<EOL>    return decoratorSchemaFactory((schema) => {<EOL>        if (exclusive) {<EOL>","gt":"schema.mapper.exclusiveMinimum = minimum;"}
{"input":"<s> export function View_IgUploadComponent_0(l) {<EOL>    return import0.ɵvid(<NUM_LIT>, [import0.","gt":"ɵncd(null, <NUM_LIT>)], null, null);"}
{"input":"<s> <EOL>export function Use(...args) {<EOL>    return (target, targetKey, descriptor) => {<EOL>        if (getDecoratorType([target, targetKey, descriptor]) === \"<STR_LIT>\") {<EOL>            EndpointRegistry.use(target, targetKey, args);<EOL>            return","gt":"descriptor;"}
{"input":"<s> <EOL>export function MaxProperties(maxProperties) {<EOL>    if (maxProperties < <NUM_LIT>) {<EOL>","gt":"throw new Error(\"<STR_LIT>\");"}
{"input":"<s> export function hasChrome() {<EOL>    return typeof","gt":"chrome !== '<STR_LIT>';"}
{"input":"<s> export function assign(source, assignments) {<EOL>    return Object.assign({},","gt":"source, assignments);"}
{"input":"<s> export function changeCoverImgUrl(arr, width = <NUM_LIT>) {<EOL>    return arr.map((item) => ({<EOL>        ...","gt":"item,"}
{"input":"<s> function IsFoo(value) {<EOL>    return","gt":"value instanceof Bar.Foo;"}
{"input":"<s> export function* toCreatePlaylistPage() {<EOL>    while (true ) {<EOL>        const { payload } = yield take('<STR_LIT>');<EOL>        if (payload) {<EOL>","gt":"yield put({"}
{"input":"<s> export function* toCreatePlaylistPage() {<EOL>    while (true ) {<EOL>        const { payload } = yield take('<STR_LIT>');<EOL>        if (payload) {<EOL>             yield put({<EOL>                type: '<STR_LIT>'<EOL>            });<EOL>            yield call(InteractionManager.runAfterInteractions);<EOL>        }<EOL>        yield fork(Router.toCreatePlaylist, {","gt":"route: { trackId: payload } });"}
{"input":"<s> function toFavoriteArtists(passProps) {<EOL>","gt":"navigator['<STR_LIT>'](passProps);"}
{"input":"<s> <EOL>export function ConvertJsonx2Yaml(ast) {<EOL>    ast = CloneAst(ast);<EOL>    for (const nodeWithPath of Descendants(ast)) {<EOL>        const node = nodeWithPath.node;<EOL>        if (node.kind === Kind.MAP) {<EOL>            const yamlNodeMapping =","gt":"node;"}
{"input":"<s> <EOL>export function ConvertJsonx2Yaml(ast) {<EOL>    ast = CloneAst(ast);<EOL>    for (const nodeWithPath of Descendants(ast)) {<EOL>        const node = nodeWithPath.node;<EOL>        if (node.kind === Kind.MAP) {<EOL>            const yamlNodeMapping =  node;<EOL>            const propId = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            let","gt":"propRef = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");"}
{"input":"<s> <EOL>export function ConvertJsonx2Yaml(ast) {<EOL>    ast = CloneAst(ast);<EOL>    for (const nodeWithPath of Descendants(ast)) {<EOL>        const node = nodeWithPath.node;<EOL>        if (node.kind === Kind.MAP) {<EOL>            const yamlNodeMapping =  node;<EOL>            const propId = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            let  propRef = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            const propReff = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            if (propRef && isNaN(parseInt(ParseNode(propRef.value) + \"<STR_LIT>\"))) {<EOL>                propRef = null;<EOL>            }<EOL>","gt":"propRef = propRef || propReff;"}
{"input":"<s> <EOL>export function ConvertJsonx2Yaml(ast) {<EOL>    ast = CloneAst(ast);<EOL>    for (const nodeWithPath of Descendants(ast)) {<EOL>        const node = nodeWithPath.node;<EOL>        if (node.kind === Kind.MAP) {<EOL>            const yamlNodeMapping =  node;<EOL>            const propId = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            let  propRef = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            const propReff = ResolveMapProperty(yamlNodeMapping, \"<STR_LIT>\");<EOL>            if (propRef && isNaN(parseInt(ParseNode(propRef.value) + \"<STR_LIT>\"))) {<EOL>                propRef = null;<EOL>            }<EOL>             propRef = propRef || propReff;<EOL>            if (propId) {<EOL>                yamlNodeMapping.anchorId = ParseNode(propId.value) + \"<STR_LIT>\";<EOL>                ReplaceNode(ast, propId, undefined);<EOL>            }<EOL>","gt":"else if (propRef) {"}
{"input":"<s> function needLogin() {<EOL>    return getUserId() ?","gt":"null : {"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>","gt":"const resourceKey = reducerType + '<STR_LIT>';"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>             const resourceKey = reducerType + '<STR_LIT>';<EOL>            const searchState = yield","gt":"select(searchSelector);"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>             const resourceKey = reducerType + '<STR_LIT>';<EOL>            const searchState = yield  select(searchSelector);<EOL>            const { query = '<STR_LIT>' } = searchState;<EOL>            const state =","gt":"searchState[reducerType];"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>             const resourceKey = reducerType + '<STR_LIT>';<EOL>            const searchState = yield  select(searchSelector);<EOL>            const { query = '<STR_LIT>' } = searchState;<EOL>            const state =  searchState[reducerType];<EOL>            const counterKey = `<STR_LIT>`;<EOL>            if (state && state.more && query) {<EOL>                yield put({<EOL>                    type:","gt":"reducerType}/start`"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>             const resourceKey = reducerType + '<STR_LIT>';<EOL>            const searchState = yield  select(searchSelector);<EOL>            const { query = '<STR_LIT>' } = searchState;<EOL>            const state =  searchState[reducerType];<EOL>            const counterKey = `<STR_LIT>`;<EOL>            if (state && state.more && query) {<EOL>                yield put({<EOL>                    type: `<STR_LIT>`<EOL>                });<EOL>                const offsetState = state.offset + <NUM_LIT>;<EOL>                const response = yield* ajaxCall(api.search, query, type.toString(), '<STR_LIT>', state.offset);<EOL>                if (response.code === <NUM_LIT>) {<EOL>","gt":"const result = response.result;"}
{"input":"<s> export function syncSearchResource(type, reducerType, picSize = <NUM_LIT>) {<EOL>    return function* () {<EOL>        while (true ) {<EOL>            yield take(`<STR_LIT>`);<EOL>             const resourceKey = reducerType + '<STR_LIT>';<EOL>            const searchState = yield  select(searchSelector);<EOL>            const { query = '<STR_LIT>' } = searchState;<EOL>            const state =  searchState[reducerType];<EOL>            const counterKey = `<STR_LIT>`;<EOL>            if (state && state.more && query) {<EOL>                yield put({<EOL>                    type: `<STR_LIT>`<EOL>                });<EOL>                const offsetState = state.offset + <NUM_LIT>;<EOL>                const response = yield* ajaxCall(api.search, query, type.toString(), '<STR_LIT>', state.offset);<EOL>                if (response.code === <NUM_LIT>) {<EOL>                     const result = response.result;<EOL>                    const resource = result[resourceKey];<EOL>                    if (resource) {<EOL>                        yield put({<EOL>","gt":"type: `<STR_LIT>`,"}
{"input":"<s> function toCamelCase(text) {<EOL>    return text[","gt":"<NUM_LIT>].toLowerCase() + text.substring(<NUM_LIT>);"}
{"input":"<s> function printError(error) {<EOL>    if (!error) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>export function IsUri(uri) {<EOL>    return /^([a-z0-9+.-]+):(?:\\/\\/(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(\\/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$/i.","gt":"test(uri);"}
{"input":"<s> function foo(a) {<EOL>    if (a === <NUM_LIT>) {<EOL>        function foo() { }<EOL>        foo();<EOL>","gt":"foo(<NUM_LIT>);"}
{"input":"<s> function f5_private() {<EOL>    return","gt":"new C6_public();"}
{"input":"<s> function f9_private() {<EOL>    return","gt":"new C6_public();"}
{"input":"<s> async function StripExternalReferences(swagger, sink) {<EOL>    const ast = CloneAst(swagger.ReadYamlAst());<EOL>    const mapping = IdentitySourceMapping(swagger.key, ast);<EOL>    for (const node of Descendants(ast)) {<EOL>","gt":"if (isReferenceNode(node)) {"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const","gt":"mappings = [];"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >","gt":"<NUM_LIT>) {"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>","gt":"throw \"<STR_LIT>\";"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>","gt":"let node = x.node."}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node.","gt":"firstChild;"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node. firstChild;<EOL>        while (node) {<EOL>            if ((node.literal || \"<STR_LIT>\").endsWith(\"<STR_LIT>\")<EOL>                && (((node.next || {}).next || {}).literal || \"<STR_LIT>\").startsWith(\"<STR_LIT>\")<EOL>                && node.next<EOL>                && node.next.type === \"<STR_LIT>\") {<EOL>                clue = node.next.","gt":"literal;"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node. firstChild;<EOL>        while (node) {<EOL>            if ((node.literal || \"<STR_LIT>\").endsWith(\"<STR_LIT>\")<EOL>                && (((node.next || {}).next || {}).literal || \"<STR_LIT>\").startsWith(\"<STR_LIT>\")<EOL>                && node.next<EOL>                && node.next.type === \"<STR_LIT>\") {<EOL>                clue = node.next. literal;<EOL>                break;<EOL>            }<EOL>            node = node.next;<EOL>        }<EOL>        // process clue<EOL>        if (clue) {<EOL>            // be explicit about relativity<EOL>","gt":"if (!clue.startsWith(\"<STR_LIT>\") && !clue.startsWith(\"<STR_LIT>\")) {"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node. firstChild;<EOL>        while (node) {<EOL>            if ((node.literal || \"<STR_LIT>\").endsWith(\"<STR_LIT>\")<EOL>                && (((node.next || {}).next || {}).literal || \"<STR_LIT>\").startsWith(\"<STR_LIT>\")<EOL>                && node.next<EOL>                && node.next.type === \"<STR_LIT>\") {<EOL>                clue = node.next. literal;<EOL>                break;<EOL>            }<EOL>            node = node.next;<EOL>        }<EOL>        // process clue<EOL>        if (clue) {<EOL>            // be explicit about relativity<EOL>             if (!clue.startsWith(\"<STR_LIT>\") && !clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = \"<STR_LIT>\" + clue;<EOL>            }<EOL>            // make absolute<EOL>            if (clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = x.query + clue.slice(<NUM_LIT>);<EOL>            }<EOL>            // replace queries<EOL>            const candidProperties = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            clue = clue.replace(/\\.\\#(.+?)\\b/g, (_, match) => `<STR_LIT>`);<EOL>            // console.log(clue);<EOL>            // target field<EOL>            const allowedTargetFields = [\"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            const targetField =","gt":"allowedTargetFields.filter(f => (clue || \"<STR_LIT>\").endsWith(\"<STR_LIT>\" + f))[<NUM_LIT>] || \"<STR_LIT>\";"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node. firstChild;<EOL>        while (node) {<EOL>            if ((node.literal || \"<STR_LIT>\").endsWith(\"<STR_LIT>\")<EOL>                && (((node.next || {}).next || {}).literal || \"<STR_LIT>\").startsWith(\"<STR_LIT>\")<EOL>                && node.next<EOL>                && node.next.type === \"<STR_LIT>\") {<EOL>                clue = node.next. literal;<EOL>                break;<EOL>            }<EOL>            node = node.next;<EOL>        }<EOL>        // process clue<EOL>        if (clue) {<EOL>            // be explicit about relativity<EOL>             if (!clue.startsWith(\"<STR_LIT>\") && !clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = \"<STR_LIT>\" + clue;<EOL>            }<EOL>            // make absolute<EOL>            if (clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = x.query + clue.slice(<NUM_LIT>);<EOL>            }<EOL>            // replace queries<EOL>            const candidProperties = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            clue = clue.replace(/\\.\\#(.+?)\\b/g, (_, match) => `<STR_LIT>`);<EOL>            // console.log(clue);<EOL>            // target field<EOL>            const allowedTargetFields = [\"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            const targetField =  allowedTargetFields.filter(f => (clue || \"<STR_LIT>\").endsWith(\"<STR_LIT>\" + f))[<NUM_LIT>] || \"<STR_LIT>\";<EOL>            const targetPath = clue.endsWith(\"<STR_LIT>\" + targetField) ? clue.slice(<NUM_LIT>, clue.length - targetField.length - <NUM_LIT>) : clue;<EOL>            if (targetPath !== \"<STR_LIT>\" && targetPath !== \"<STR_LIT>\") {<EOL>                // add directive<EOL>                const headingTextRange = CommonmarkHeadingFollowingText(","gt":"x.node);"}
{"input":"<s> export async function LoadLiterateSwaggerOverride(config, inputScope, inputFileUri, sink) {<EOL>    const commonmark = await inputScope.ReadStrict(inputFileUri);<EOL>    const rawCommonmark = commonmark.ReadData();<EOL>    const commonmarkNode = await ParseCommonmark(rawCommonmark);<EOL>    const directives = [];<EOL>    const  mappings = [];<EOL>    let transformer = [];<EOL>    const state = [...CommonmarkSubHeadings(commonmarkNode.firstChild)].map(x => { return { node: x, query: \"<STR_LIT>\" }; });<EOL>    while (state.length >  <NUM_LIT>) {<EOL>        const x = state.pop();<EOL>        if (x === undefined)<EOL>             throw \"<STR_LIT>\";<EOL>        // extract heading clue<EOL>        // Syntax: <regular heading> (`<query>`)<EOL>        // query syntax:<EOL>        // - implicit prefix: \"@.\" (omitted if starts with \"$.\" or \"@.\")<EOL>        // - \"#<asd>\" to obtain the object containing a string property containing \"<asd>\"<EOL>        let clue = null;<EOL>         let node = x.node. firstChild;<EOL>        while (node) {<EOL>            if ((node.literal || \"<STR_LIT>\").endsWith(\"<STR_LIT>\")<EOL>                && (((node.next || {}).next || {}).literal || \"<STR_LIT>\").startsWith(\"<STR_LIT>\")<EOL>                && node.next<EOL>                && node.next.type === \"<STR_LIT>\") {<EOL>                clue = node.next. literal;<EOL>                break;<EOL>            }<EOL>            node = node.next;<EOL>        }<EOL>        // process clue<EOL>        if (clue) {<EOL>            // be explicit about relativity<EOL>             if (!clue.startsWith(\"<STR_LIT>\") && !clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = \"<STR_LIT>\" + clue;<EOL>            }<EOL>            // make absolute<EOL>            if (clue.startsWith(\"<STR_LIT>\")) {<EOL>                clue = x.query + clue.slice(<NUM_LIT>);<EOL>            }<EOL>            // replace queries<EOL>            const candidProperties = [\"<STR_LIT>\", \"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            clue = clue.replace(/\\.\\#(.+?)\\b/g, (_, match) => `<STR_LIT>`);<EOL>            // console.log(clue);<EOL>            // target field<EOL>            const allowedTargetFields = [\"<STR_LIT>\", \"<STR_LIT>\"];<EOL>            const targetField =  allowedTargetFields.filter(f => (clue || \"<STR_LIT>\").endsWith(\"<STR_LIT>\" + f))[<NUM_LIT>] || \"<STR_LIT>\";<EOL>            const targetPath = clue.endsWith(\"<STR_LIT>\" + targetField) ? clue.slice(<NUM_LIT>, clue.length - targetField.length - <NUM_LIT>) : clue;<EOL>            if (targetPath !== \"<STR_LIT>\" && targetPath !== \"<STR_LIT>\") {<EOL>                // add directive<EOL>                const headingTextRange = CommonmarkHeadingFollowingText( x.node);<EOL>                const documentation = Lines(rawCommonmark).slice(headingTextRange[<NUM_LIT>] - <NUM_LIT>, headingTextRange[<NUM_LIT>]).join(\"<STR_LIT>\");<EOL>                directives.push({<EOL>                    where:","gt":"targetPath,"}
{"input":"<s> export async function LoadLiterateSwaggerOverrides(config, inputScope, inputFileUris, sink) {<EOL>    const rawSwaggers = [];<EOL>    let i = <NUM_LIT>;<EOL>","gt":"for (const inputFileUri of inputFileUris) {"}
{"input":"<s> export function foo() {<EOL>    use(","gt":"TopLevelConstEnum.X);"}
{"input":"<s> export function not(cond, message) {<EOL>    return fns.ok(!cond,","gt":"message);"}
{"input":"<s> export function not(cond, message) {<EOL>    return fns.","gt":"ok(!cond, message);"}
{"input":"<s> function foo() {<EOL>    if (","gt":"true)"}
{"input":"<s> export function applyCheck(genFA, genAtoB, genBtoC, genFAtoB, genFBtoC, check, F, lawsRef, includeSuperTypes = true) {<EOL>    const laws = lawsRef || new ApplyLaws(F);<EOL>","gt":"if (includeSuperTypes) {"}
{"input":"<s> <EOL>function futureCancelAll(list, ec, skip = -<NUM_LIT>) {<EOL>    const errors = [];<EOL>    for (let i = <NUM_LIT>; i < list.length; i++) {<EOL>        if (i !== skip)<EOL>            try {<EOL>","gt":"list[i].cancel();"}
{"input":"<s> <EOL>function futureCancelAll(list, ec, skip = -<NUM_LIT>) {<EOL>    const errors = [];<EOL>    for (let i = <NUM_LIT>; i < list.length; i++) {<EOL>        if (i !== skip)<EOL>            try {<EOL>                 list[i].cancel();<EOL>            }<EOL>            catch (e) {<EOL>                errors.push(e);<EOL>            }<EOL>    }<EOL>    if (errors.","gt":"length > <NUM_LIT>) {"}
{"input":"<s> function config($stateProvider) {<EOL>    '<STR_LIT>';<EOL>","gt":"$stateProvider"}
{"input":"<s> function func6({ a: { b, c } = { b: <NUM_LIT>, c: <NUM_LIT> }, d } = { a: { b: <NUM_LIT>, c: <NUM_LIT> }, d: <NUM_LIT> }) {<EOL>","gt":"f(b, c);"}
{"input":"<s> async function whileStatement15() {<EOL>","gt":"E: while (x) {"}
{"input":"<s> function convertDVD(dvdPath) {<EOL>    dvdPath = dvdPath.split(path.sep);<EOL>    // We remove the trailing /.<EOL>    var part = dvdPath.pop();<EOL>","gt":"if (part !== '<STR_LIT>') {"}
{"input":"<s> function convertDVD(dvdPath) {<EOL>    dvdPath = dvdPath.split(path.sep);<EOL>    // We remove the trailing /.<EOL>    var part = dvdPath.pop();<EOL>     if (part !== '<STR_LIT>') {<EOL>","gt":"dvdPath.push(part);"}
{"input":"<s> function convertDVD(dvdPath) {<EOL>    dvdPath = dvdPath.split(path.sep);<EOL>    // We remove the trailing /.<EOL>    var part = dvdPath.pop();<EOL>     if (part !== '<STR_LIT>') {<EOL>         dvdPath.push(part);<EOL>    }<EOL>    dvdPath = dvdPath.","gt":"join(path.sep);"}
{"input":"<s> function convertDVD(dvdPath) {<EOL>    dvdPath = dvdPath.split(path.sep);<EOL>    // We remove the trailing /.<EOL>    var part = dvdPath.pop();<EOL>     if (part !== '<STR_LIT>') {<EOL>         dvdPath.push(part);<EOL>    }<EOL>    dvdPath = dvdPath. join(path.sep);<EOL>    // Create an empty directory if not already there.<EOL>    createDir(dvdPath, function () {<EOL>        // Convert IFO files.<EOL>        convertIfo(dvdPath, function () {<EOL>            // Generate WebVTT files with video chapters.<EOL>            generateChapters(dvdPath, function () {<EOL>                // Extract NAV packets.<EOL>                extractNavPackets(dvdPath, function () {<EOL>                    // Generate JavaScript from VM instructions.<EOL>                    generateJavaScript(dvdPath, function () {<EOL>                        // Extract menu still frames.<EOL>                        extractMenu(dvdPath, function () {<EOL>                            // Generate menu cell table.<EOL>                            generateMenuCellTable(dvdPath,","gt":"function () {"}
{"input":"<s> function convertDVD(dvdPath) {<EOL>    dvdPath = dvdPath.split(path.sep);<EOL>    // We remove the trailing /.<EOL>    var part = dvdPath.pop();<EOL>     if (part !== '<STR_LIT>') {<EOL>         dvdPath.push(part);<EOL>    }<EOL>    dvdPath = dvdPath. join(path.sep);<EOL>    // Create an empty directory if not already there.<EOL>    createDir(dvdPath, function () {<EOL>        // Convert IFO files.<EOL>        convertIfo(dvdPath, function () {<EOL>            // Generate WebVTT files with video chapters.<EOL>            generateChapters(dvdPath, function () {<EOL>                // Extract NAV packets.<EOL>                extractNavPackets(dvdPath, function () {<EOL>                    // Generate JavaScript from VM instructions.<EOL>                    generateJavaScript(dvdPath, function () {<EOL>                        // Extract menu still frames.<EOL>                        extractMenu(dvdPath, function () {<EOL>                            // Generate menu cell table.<EOL>                            generateMenuCellTable(dvdPath,  function () {<EOL>                                // Generate buttons for menu UI.<EOL>                                generateButtons(dvdPath, function () {<EOL>                                    // Convert video.<EOL>                                    encodeVideo(dvdPath, function () {<EOL>                                        // Regenerate the list of DVD.<EOL>                                        generateCatalogue(function () {<EOL>                                            console.log(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function printf(str, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) {<EOL>    console.","gt":"log(sprintf.apply(undefined, arguments));"}
{"input":"<s> // @target: esnext<EOL>// @lib: esnext<EOL>async function f(source) {<EOL>    for await (const x of","gt":"source) {"}
{"input":"<s> <EOL>export function formatTitle(title) {<EOL>    return title<EOL>        .replace(/_/g, '<STR_LIT>')<EOL>        .","gt":"split('<STR_LIT>')"}
{"input":"<s> <EOL>export function CHECK_ZERO(arg) {<EOL>    if (!DEBUG)<EOL>","gt":"return;"}
{"input":"<s> <EOL>export function concatBuffer(buffers) {<EOL>    var byteLength = buffers<EOL>        .map(function (buffer) {<EOL>        return buffer.byteLength;<EOL>    })<EOL>        .reduce(function (bufferA,","gt":"bufferB) {"}
{"input":"<s> <EOL>export function concatBuffer(buffers) {<EOL>    var byteLength = buffers<EOL>        .map(function (buffer) {<EOL>        return buffer.byteLength;<EOL>    })<EOL>        .reduce(function (bufferA,  bufferB) {<EOL>        return bufferA + bufferB;<EOL>    }, <NUM_LIT>);<EOL>    var tmp = new Uint8Array(byteLength);<EOL>    var prevByteLength = <NUM_LIT>;<EOL>    buffers.forEach(function (buffer) {<EOL>        tmp.set(","gt":"new Uint8Array(buffer), prevByteLength);"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===","gt":"<NUM_LIT>) {"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===  <NUM_LIT>) { // optional(?)<EOL>        console.error('<STR_LIT>');<EOL>        ifofile.vts_tmapt = null;<EOL>","gt":"return ifofile;"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===  <NUM_LIT>) { // optional(?)<EOL>        console.error('<STR_LIT>');<EOL>        ifofile.vts_tmapt = null;<EOL>         return ifofile;<EOL>    }<EOL>    ifofile.file.view.seek(ifofile.vtsi_mat.vts_tmapt * DVD_BLOCK_LEN);<EOL>    //<EOL>    var","gt":"i, j;"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===  <NUM_LIT>) { // optional(?)<EOL>        console.error('<STR_LIT>');<EOL>        ifofile.vts_tmapt = null;<EOL>         return ifofile;<EOL>    }<EOL>    ifofile.file.view.seek(ifofile.vtsi_mat.vts_tmapt * DVD_BLOCK_LEN);<EOL>    //<EOL>    var  i, j;<EOL>    var vts_tmapt = new BinaryParser(ifofile.file.view, ifoTypes.vts_tmapt_t()).parse('<STR_LIT>');<EOL>    <EOL>    CHECK_ZERO(vts_tmapt.","gt":"zero_1);"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===  <NUM_LIT>) { // optional(?)<EOL>        console.error('<STR_LIT>');<EOL>        ifofile.vts_tmapt = null;<EOL>         return ifofile;<EOL>    }<EOL>    ifofile.file.view.seek(ifofile.vtsi_mat.vts_tmapt * DVD_BLOCK_LEN);<EOL>    //<EOL>    var  i, j;<EOL>    var vts_tmapt = new BinaryParser(ifofile.file.view, ifoTypes.vts_tmapt_t()).parse('<STR_LIT>');<EOL>    <EOL>    CHECK_ZERO(vts_tmapt. zero_1);<EOL>    vts_tmapt.tmap = ifoTypes.vts_tmap_t();<EOL>    if (!vts_tmapt.tmap) {<EOL>        ifofile.vts_tmapt =","gt":"null;"}
{"input":"<s> <EOL>function ifoRead_VTS_TMAPT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>        return null;<EOL>    if (ifofile.vtsi_mat.vts_tmapt ===  <NUM_LIT>) { // optional(?)<EOL>        console.error('<STR_LIT>');<EOL>        ifofile.vts_tmapt = null;<EOL>         return ifofile;<EOL>    }<EOL>    ifofile.file.view.seek(ifofile.vtsi_mat.vts_tmapt * DVD_BLOCK_LEN);<EOL>    //<EOL>    var  i, j;<EOL>    var vts_tmapt = new BinaryParser(ifofile.file.view, ifoTypes.vts_tmapt_t()).parse('<STR_LIT>');<EOL>    <EOL>    CHECK_ZERO(vts_tmapt. zero_1);<EOL>    vts_tmapt.tmap = ifoTypes.vts_tmap_t();<EOL>    if (!vts_tmapt.tmap) {<EOL>        ifofile.vts_tmapt =  null;<EOL>        return null;<EOL>    }<EOL>    for (i = <NUM_LIT>; i < vts_tmapt.nr_of_tmaps; i++) {<EOL>        ifofile.file.view.seek(ifofile.vtsi_mat.vts_tmapt * DVD_BLOCK_LEN +<EOL>            vts_tmapt.tmap_offset[i]);<EOL>        //try {<EOL>        vts_tmapt.tmap[i] = new BinaryParser(ifofile.file.view, ifoTypes.vts_tmap_t()).parse(","gt":"'<STR_LIT>');"}
{"input":"<s> function dvdnav_vobu_t() {<EOL>    this.vobu_start = <NUM_LIT>; // Logical Absolute. MAX needed is 0x300000<EOL>    this.vobu_length = <NUM_LIT>;<EOL>","gt":"this.blockN = <NUM_LIT>;"}
{"input":"<s> <EOL>export function ifoRead_PGCIT(ifofile) {<EOL>    if (!ifofile || !ifofile.vtsi_mat)<EOL>","gt":"return null;"}
{"input":"<s> async function hoistingWithAwait() {<EOL>    var a0, a1 = <NUM_LIT>;<EOL>    function z() {<EOL>        var b0, b1 = <NUM_LIT>;<EOL>    }<EOL>","gt":"await <NUM_LIT>;"}
{"input":"<s> async function hoistingWithAwait() {<EOL>    var a0, a1 = <NUM_LIT>;<EOL>    function z() {<EOL>        var b0, b1 = <NUM_LIT>;<EOL>    }<EOL>     await <NUM_LIT>;<EOL>    if (true) {<EOL>        var c0, c1 = <NUM_LIT>;<EOL>    }<EOL>    for (var a = <NUM_LIT>; y;) {<EOL>    }<EOL>","gt":"for (var b in y) {"}
{"input":"<s> <EOL>export function dvdnav_cell_change_event_t() {<EOL>    this.cellN = <NUM_LIT>; // The new cell number<EOL>    this.pgN = <NUM_LIT>; // The current program number<EOL>","gt":"this.cell_length = <NUM_LIT>;"}
{"input":"<s> function foo(so) {<EOL>","gt":"const val = so;"}
{"input":"<s> <EOL>function sml_agl_data_t() {<EOL>    return {<EOL>        address:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>function vobu_sri_t() {<EOL>    return {<EOL>        next_video: '<STR_LIT>',<EOL>","gt":"fwda: ['<STR_LIT>', '<STR_LIT>', <NUM_LIT>],"}
{"input":"<s> <EOL><EOL>export function dvd_time_t() {<EOL>    return {<EOL>        hour:","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export function ptl_mait_t() {<EOL>    return {<EOL>        '<STR_LIT>': ptl_mait_country_t(),<EOL>        //'pf_level_t': pf_level_t(),<EOL>","gt":"'<STR_LIT>': {"}
{"input":"<s> function expectSubscriptions() {<EOL>    if (!global.rxTestScheduler) {<EOL>","gt":"throw '<STR_LIT>';"}
{"input":"<s> function foo1(x) {<EOL>    if (x instanceof C1) {<EOL>        return x.item;<EOL>    }<EOL>    else if (x","gt":"instanceof C2) {"}
{"input":"<s> function foo1(x) {<EOL>    if (x instanceof C1) {<EOL>        return x.item;<EOL>    }<EOL>    else if (x  instanceof C2) {<EOL>        return x.item[<NUM_LIT>];<EOL>    }<EOL>    else if (x instanceof C3) {<EOL>        return x.","gt":"item;"}
{"input":"<s> <EOL>export function getValuePreview(type, object, value) {<EOL>    if (type === '<STR_LIT>' || type === '<STR_LIT>') {<EOL>        return type;<EOL>    }<EOL>    if (type ===","gt":"'<STR_LIT>' || type === '<STR_LIT>') {"}
{"input":"<s> <EOL>export function getValuePreview(type, object, value) {<EOL>    if (type === '<STR_LIT>' || type === '<STR_LIT>') {<EOL>        return type;<EOL>    }<EOL>    if (type ===  '<STR_LIT>' || type === '<STR_LIT>') {<EOL>        value = '<STR_LIT>' + escapeString(value) + '<STR_LIT>';<EOL>    }<EOL>    if (type === '<STR_LIT>') {<EOL>        // Remove content of the function<EOL>        return object.toString()<EOL>            .replace(/[\\r\\n]/g,","gt":"'<STR_LIT>')"}
{"input":"<s> <EOL>function repeatString(string, times) {<EOL>    if (times === <NUM_LIT>) {<EOL>        return string;<EOL>    }<EOL>    if (times < <NUM_LIT>) {<EOL>        throw","gt":"new Error();"}
{"input":"<s> <EOL>function repeatString(string, times) {<EOL>    if (times === <NUM_LIT>) {<EOL>        return string;<EOL>    }<EOL>    if (times < <NUM_LIT>) {<EOL>        throw  new Error();<EOL>    }<EOL>    var repeated = '<STR_LIT>';<EOL>    while (times) {<EOL>        if (times &","gt":"<NUM_LIT>) {"}
{"input":"<s> <EOL>function repeatString(string, times) {<EOL>    if (times === <NUM_LIT>) {<EOL>        return string;<EOL>    }<EOL>    if (times < <NUM_LIT>) {<EOL>        throw  new Error();<EOL>    }<EOL>    var repeated = '<STR_LIT>';<EOL>    while (times) {<EOL>        if (times &  <NUM_LIT>) {<EOL>            repeated += string;<EOL>        }<EOL>        if (times >>= <NUM_LIT>) {<EOL>","gt":"string += string;"}
{"input":"<s> function isA(x) {<EOL>    return x","gt":"instanceof A;"}
{"input":"<s> function B() {<EOL>    var someLocal =","gt":"{};"}
{"input":"<s> // modern module syntax<EOL>export async function hello(event, context, callback) {<EOL>    // dependencies work as expected<EOL>    console.log(_.VERSION);<EOL>    // async/await also works out of the box<EOL>    await new Promise((","gt":"resolve, reject) => setTimeout(resolve, <NUM_LIT>));"}
{"input":"<s> <EOL>async function beforeNavigate(options, client) {<EOL>    const { Network, Page, Runtime } = client;<EOL>    await throwIfCanceledOrFailed(options);<EOL>    if (","gt":"options.clearCache) {"}
{"input":"<s> <EOL>async function beforeNavigate(options, client) {<EOL>    const { Network, Page, Runtime } = client;<EOL>    await throwIfCanceledOrFailed(options);<EOL>    if ( options.clearCache) {<EOL>        await Network.clearBrowserCache();<EOL>    }<EOL>    // Enable events to be used here, in generate(), or in afterNavigate().<EOL>    await Promise.all([<EOL>        Network.enable(),<EOL>        Page.enable(),<EOL>        Runtime.","gt":"enable(),"}
{"input":"<s> <EOL>async function beforeNavigate(options, client) {<EOL>    const { Network, Page, Runtime } = client;<EOL>    await throwIfCanceledOrFailed(options);<EOL>    if ( options.clearCache) {<EOL>        await Network.clearBrowserCache();<EOL>    }<EOL>    // Enable events to be used here, in generate(), or in afterNavigate().<EOL>    await Promise.all([<EOL>        Network.enable(),<EOL>        Page.enable(),<EOL>        Runtime. enable(),<EOL>    ]);<EOL>    if (options.runtimeConsoleHandler) {<EOL>","gt":"Runtime.consoleAPICalled(options.runtimeConsoleHandler);"}
{"input":"<s> <EOL>async function beforeNavigate(options, client) {<EOL>    const { Network, Page, Runtime } = client;<EOL>    await throwIfCanceledOrFailed(options);<EOL>    if ( options.clearCache) {<EOL>        await Network.clearBrowserCache();<EOL>    }<EOL>    // Enable events to be used here, in generate(), or in afterNavigate().<EOL>    await Promise.all([<EOL>        Network.enable(),<EOL>        Page.enable(),<EOL>        Runtime. enable(),<EOL>    ]);<EOL>    if (options.runtimeConsoleHandler) {<EOL>         Runtime.consoleAPICalled(options.runtimeConsoleHandler);<EOL>    }<EOL>    if (options.runtimeExceptionHandler) {<EOL>        Runtime.exceptionThrown(options.runtimeExceptionHandler);<EOL>    }<EOL>    Network.requestWillBeSent((e) => {<EOL>        options._mainRequestId = options._mainRequestId || e.requestId;<EOL>    });<EOL>    Network.loadingFailed((e) => {<EOL>        if (e.requestId === options._mainRequestId) {<EOL>","gt":"options._navigateFailed = true;"}
{"input":"<s> function isImplementedViaMixins(node) {<EOL>    switch (node.getName()) {<EOL>        case \"<STR_LIT>\":<EOL>","gt":"case \"<STR_LIT>\":"}
{"input":"<s> <EOL>export function replaceSourceFileTextForRename(opts) {<EOL>    const { sourceFile, renameLocations,","gt":"newName } = opts;"}
{"input":"<s> function updateNotifications() {<EOL>    const notificationContainer = $(\"<STR_LIT>\");<EOL>    if (appState.notifications.length > <NUM_LIT>) {<EOL>        notificationContainer.classList.remove(\"<STR_LIT>\");<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function updateNotifications() {<EOL>    const notificationContainer = $(\"<STR_LIT>\");<EOL>    if (appState.notifications.length > <NUM_LIT>) {<EOL>        notificationContainer.classList.remove(\"<STR_LIT>\");<EOL>    }<EOL>     else {<EOL>        notificationContainer.classList.add(\"<STR_LIT>\");<EOL>    }<EOL>    while (notificationContainer.hasChildNodes()) {<EOL>        notificationContainer.removeChild(notificationContainer.lastChild);<EOL>    }<EOL>    for (","gt":"const notificationData of appState.notifications) {"}
{"input":"<s> function showSiteProperties(e) {<EOL>    const value = document.getElementById(\"<STR_LIT>\");<EOL>    value.value = document.getElementById(\"<STR_LIT>\").value;<EOL>    validateSitePropertiesValue();<EOL>    let radio = Array.from(document.querySelectorAll(\"<STR_LIT>\"));<EOL>    const checkedTarget = specificSite ?","gt":"specificSite.target : \"<STR_LIT>\";"}
{"input":"<s> function showSiteProperties(e) {<EOL>    const value = document.getElementById(\"<STR_LIT>\");<EOL>    value.value = document.getElementById(\"<STR_LIT>\").value;<EOL>    validateSitePropertiesValue();<EOL>    let radio = Array.from(document.querySelectorAll(\"<STR_LIT>\"));<EOL>    const checkedTarget = specificSite ?  specificSite.target : \"<STR_LIT>\";<EOL>    radio.forEach((r) => {<EOL>        if (r.value === checkedTarget)<EOL>","gt":"r.checked = true;"}
{"input":"<s> function showSiteProperties(e) {<EOL>    const value = document.getElementById(\"<STR_LIT>\");<EOL>    value.value = document.getElementById(\"<STR_LIT>\").value;<EOL>    validateSitePropertiesValue();<EOL>    let radio = Array.from(document.querySelectorAll(\"<STR_LIT>\"));<EOL>    const checkedTarget = specificSite ?  specificSite.target : \"<STR_LIT>\";<EOL>    radio.forEach((r) => {<EOL>        if (r.value === checkedTarget)<EOL>             r.checked = true;<EOL>        else<EOL>            r.checked = null;<EOL>    });<EOL>    radio = Array.from(document.querySelectorAll(\"<STR_LIT>\"));<EOL>    const checkedMethod = specificSite ? specificSite.method :","gt":"\"<STR_LIT>\";"}
{"input":"<s> export default function stubImport(data) {<EOL>    const imported = {<EOL>        start: <NUM_LIT>,<EOL>        end: <NUM_LIT>,<EOL>        type: data.","gt":"type || \"<STR_LIT>\","}
{"input":"<s> export default function stubImport(data) {<EOL>    const imported = {<EOL>        start: <NUM_LIT>,<EOL>        end: <NUM_LIT>,<EOL>        type: data. type || \"<STR_LIT>\",<EOL>        moduleName: data.moduleName || \"<STR_LIT>\",<EOL>        defaultMember: data.defaultMember,<EOL>        namespaceMember: data.namespaceMember,<EOL>        namedMembers:","gt":"data.namedMembers || [],"}
{"input":"<s> function handleFilePathError(filePath, e) {<EOL>    console.error(","gt":"filePath}:`<STR_LIT>;"}
{"input":"<s> <EOL>export default function run(context, method, args) {<EOL>    if (!Array.isArray(args)) {<EOL>        args = [args];<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        method.apply(","gt":"context, args.concat(["}
{"input":"<s> <EOL>export default function run(context, method, args) {<EOL>    if (!Array.isArray(args)) {<EOL>        args = [args];<EOL>    }<EOL>    return new Promise((resolve, reject) => {<EOL>        method.apply( context, args.concat([<EOL>            (err, ...rest) => {<EOL>                if (err) {<EOL>                    reject(err);<EOL>                    return;<EOL>                }<EOL>                resolve.","gt":"apply(null, rest);"}
{"input":"<s> export default function reborm(ActorClass, snap, events) {<EOL>    const actor = ActorClass.parse(snap.","gt":"data);"}
{"input":"<s> <EOL>function getLongRoomID(roomID) {<EOL>    return longRoomID.","gt":"get(roomID) || roomID;"}
{"input":"<s> function copyStringToClipboard(value) {<EOL>    const copyFrom = document.createElement(\"<STR_LIT>\");<EOL>    copyFrom.textContent = value;<EOL>","gt":"const body = document.getElementsByTagName(\"<STR_LIT>\")[<NUM_LIT>];"}
{"input":"<s> function always() {<EOL>    return","gt":"true;"}
{"input":"<s> export function getTypescriptConfig(cwd, logger) {<EOL>    const configFilePath = path.join(cwd, '<STR_LIT>');<EOL>    if (fs.existsSync(configFilePath)) {<EOL>        const configFileText = fs.readFileSync(configFilePath).toString();<EOL>        const result = ts.parseConfigFileTextToJson(configFilePath, configFileText);<EOL>        if (result.","gt":"error) {"}
{"input":"<s> export function getTypescriptConfig(cwd, logger) {<EOL>    const configFilePath = path.join(cwd, '<STR_LIT>');<EOL>    if (fs.existsSync(configFilePath)) {<EOL>        const configFileText = fs.readFileSync(configFilePath).toString();<EOL>        const result = ts.parseConfigFileTextToJson(configFilePath, configFileText);<EOL>        if (result. error) {<EOL>            throw new Error(JSON.stringify(result.error));<EOL>        }<EOL>        const configParseResult = ts.parseJsonConfigFileContent(result.config, ts.sys, path.dirname(configFilePath));<EOL>        if (configParseResult.errors.length > <NUM_LIT>) {<EOL>            throw new Error(JSON.stringify(configParseResult.errors));<EOL>        }<EOL>","gt":"if (logger) {"}
{"input":"<s> export function getTypescriptConfig(cwd, logger) {<EOL>    const configFilePath = path.join(cwd, '<STR_LIT>');<EOL>    if (fs.existsSync(configFilePath)) {<EOL>        const configFileText = fs.readFileSync(configFilePath).toString();<EOL>        const result = ts.parseConfigFileTextToJson(configFilePath, configFileText);<EOL>        if (result. error) {<EOL>            throw new Error(JSON.stringify(result.error));<EOL>        }<EOL>        const configParseResult = ts.parseJsonConfigFileContent(result.config, ts.sys, path.dirname(configFilePath));<EOL>        if (configParseResult.errors.length > <NUM_LIT>) {<EOL>            throw new Error(JSON.stringify(configParseResult.errors));<EOL>        }<EOL>         if (logger) {<EOL>            logger.log(`<STR_LIT>`);<EOL>        }<EOL>        // disallow overrriding rootDir<EOL>        if (configParseResult.options.rootDir && path.resolve(configParseResult.options.rootDir) !== path.resolve(cwd) && logger) {<EOL>","gt":"logger.log('<STR_LIT>');"}
{"input":"<s> function startsWithUpperCase(text) {<EOL>    let","gt":"start = text.charAt(<NUM_LIT>);"}
{"input":"<s> function execCopy(data) {<EOL>    var tracker = new FallbackTracker();<EOL>    var listener = copyListener.bind(this, tracker, data);<EOL>    document.addEventListener(\"<STR_LIT>\", listener);<EOL>","gt":"try {"}
{"input":"<s> function execCopy(data) {<EOL>    var tracker = new FallbackTracker();<EOL>    var listener = copyListener.bind(this, tracker, data);<EOL>    document.addEventListener(\"<STR_LIT>\", listener);<EOL>     try {<EOL>        // We ignore the return value, since FallbackTracker tells us whether the<EOL>        // listener was called. It seems that checking the return value here gives<EOL>        // us no extra information in any browser.<EOL>        document.execCommand(\"<STR_LIT>\");<EOL>    }<EOL>","gt":"finally {"}
{"input":"<s> <EOL>function ErrorLog(...message) {<EOL>    console.error(","gt":"new Date().toString().slice(<NUM_LIT>, <NUM_LIT>)} :`<STR_LIT>;"}
{"input":"<s> function track(category, action) {<EOL>    if (isProduction() && typeof","gt":"ga === '<STR_LIT>') {"}
{"input":"<s> function invoke(item) {<EOL>    if (item.kind === \"<STR_LIT>\") {<EOL>","gt":"item.method(\"<STR_LIT>\");"}
{"input":"<s> function f4(x) {<EOL>    if (x && typeof x === \"<STR_LIT>\") {<EOL>","gt":"switch (x.kind) {"}
{"input":"<s> export function initStandalone(app, url, version) {<EOL>    <EOL>    CONSTANTS.NODE_ADMIN = true;<EOL>    if (version) {<EOL>        firebase.SDK_VERSION = version;<EOL>    }<EOL>","gt":"return {"}
{"input":"<s> export function initStandalone(app, url, version) {<EOL>    <EOL>    CONSTANTS.NODE_ADMIN = true;<EOL>    if (version) {<EOL>        firebase.SDK_VERSION = version;<EOL>    }<EOL>     return {<EOL>        instance: RepoManager.getInstance().databaseFromApp(app, url),<EOL>        namespace: {<EOL>            Reference,<EOL>","gt":"Query,"}
{"input":"<s> export function initStandalone(app, url, version) {<EOL>    <EOL>    CONSTANTS.NODE_ADMIN = true;<EOL>    if (version) {<EOL>        firebase.SDK_VERSION = version;<EOL>    }<EOL>     return {<EOL>        instance: RepoManager.getInstance().databaseFromApp(app, url),<EOL>        namespace: {<EOL>            Reference,<EOL>             Query,<EOL>            Database,<EOL>            enableLogging,<EOL>","gt":"INTERNAL,"}
{"input":"<s> function switchToSpecificSitesMode(e) {<EOL>    e.preventDefault();<EOL>    if (e.target.checked) {<EOL>        siteModeAll = false;<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        // only show settings when we have a known site to configure<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        document.getElementById(\"<STR_LIT>\").style.display = \"<STR_LIT>\";<EOL>        [].forEach.","gt":"call($$(\"<STR_LIT>\"), node => node.style.display = null);"}
{"input":"<s> function getTransitionCandidates(transition) {<EOL>    if (typeof transition === '<STR_LIT>') {<EOL>        return [<EOL>            {<EOL>                target: transition<EOL>            }<EOL>        ];<EOL>    }<EOL>    if (Array.isArray(transition)) {<EOL>        return transition;<EOL>    }<EOL>    return","gt":"Object.keys(transition).map(target => ({"}
{"input":"<s> function foo2() {<EOL>    return","gt":"\"<STR_LIT>\";"}
{"input":"<s> function logError(err) {<EOL>    console.log(chalk.bgBlack.red('<STR_LIT>'), err.message);<EOL>    if (err.stack && !err.","gt":"pretty) {"}
{"input":"<s> function handleUncaughtException(error) {<EOL>    if (mainWindow) {<EOL>        mainWindow.","gt":"destroy();"}
{"input":"<s> export function assert_can_read(who, where, expected, test, cb) {<EOL>    firebase_io.loginAs(who, false, function (err) {<EOL>        if (err) {<EOL>            test.ok(false, \"<STR_LIT>\");<EOL>            cb(\"<STR_LIT>\");<EOL>        }<EOL>        else {<EOL>            firebase_io.sandbox.child(where).once(\"<STR_LIT>\", function (data) {<EOL>                test.deepEqual(data.val(), expected);<EOL>","gt":"cb(null);"}
{"input":"<s> export function assert_can_read(who, where, expected, test, cb) {<EOL>    firebase_io.loginAs(who, false, function (err) {<EOL>        if (err) {<EOL>            test.ok(false, \"<STR_LIT>\");<EOL>            cb(\"<STR_LIT>\");<EOL>        }<EOL>        else {<EOL>            firebase_io.sandbox.child(where).once(\"<STR_LIT>\", function (data) {<EOL>                test.deepEqual(data.val(), expected);<EOL>                 cb(null);<EOL>            }, function (error) {<EOL>                test.ok(error == null, \"<STR_LIT>\" +<EOL>                    JSON.stringify({ function: \"<STR_LIT>\", who: who, where: where, expected: expected }));<EOL>","gt":"cb(error);"}
{"input":"<s> export function toTrie(stateValue) {<EOL>    if (stateValue instanceof State) {<EOL>        return stateValue.value;<EOL>    }<EOL>    if (typeof stateValue === '<STR_LIT>' && !(stateValue instanceof State)) {<EOL>        return","gt":"stateValue;"}
{"input":"<s> export function toTrie(stateValue) {<EOL>    if (stateValue instanceof State) {<EOL>        return stateValue.value;<EOL>    }<EOL>    if (typeof stateValue === '<STR_LIT>' && !(stateValue instanceof State)) {<EOL>        return  stateValue;<EOL>    }<EOL>    const statePath = toStatePath(stateValue","gt":");"}
{"input":"<s> export function toTrie(stateValue) {<EOL>    if (stateValue instanceof State) {<EOL>        return stateValue.value;<EOL>    }<EOL>    if (typeof stateValue === '<STR_LIT>' && !(stateValue instanceof State)) {<EOL>        return  stateValue;<EOL>    }<EOL>    const statePath = toStatePath(stateValue );<EOL>    if (statePath.length === <NUM_LIT>) {<EOL>        return statePath[<NUM_LIT>];<EOL>    }<EOL>    const value = {};<EOL>    let marker =","gt":"value;"}
{"input":"<s> export function toTrie(stateValue) {<EOL>    if (stateValue instanceof State) {<EOL>        return stateValue.value;<EOL>    }<EOL>    if (typeof stateValue === '<STR_LIT>' && !(stateValue instanceof State)) {<EOL>        return  stateValue;<EOL>    }<EOL>    const statePath = toStatePath(stateValue );<EOL>    if (statePath.length === <NUM_LIT>) {<EOL>        return statePath[<NUM_LIT>];<EOL>    }<EOL>    const value = {};<EOL>    let marker =  value;<EOL>    for (let i = <NUM_LIT>; i < statePath.length - <NUM_LIT>; i++) {<EOL>        if (i === statePath.length - <NUM_LIT>) {<EOL>            marker[statePath[i]] = statePath[i + <NUM_LIT>];<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export function getRandomItem(array) {<EOL>    return array[getRandomInt(<NUM_LIT>,","gt":"array.length - <NUM_LIT>)];"}
{"input":"<s> function edgesTo(id) {<EOL>    return _.toArray(document.","gt":"querySelectorAll(`<STR_LIT>`));"}
{"input":"<s> <EOL>export function parsePorcelainStatus(output) {<EOL>    const entries = new Array();<EOL>    // See https://git-scm.com/docs/git-status<EOL>    //<EOL>    // In the short-format, the status of each path is shown as<EOL>    // XY PATH1 -> PATH2<EOL>    //<EOL>    // There is also an alternate -z format recommended for machine parsing. In that<EOL>    // format, the status field is the same, but some other things change. First,<EOL>    // the -> is omitted from rename entries and the field order is reversed (e.g<EOL>    // from -> to becomes to from). Second, a NUL (ASCII 0) follows each filename,<EOL>    // replacing space as a field separator and the terminating newline (but a space<EOL>    // still separates the status field from the first filename). Third, filenames<EOL>    // containing special characters are not specially formatted; no quoting or<EOL>    // backslash-escaping is performed.<EOL>    const fields = output.split('<STR_LIT>');<EOL>    let field;<EOL>","gt":"while ((field = fields.shift())) {"}
{"input":"<s> <EOL>export function parsePorcelainStatus(output) {<EOL>    const entries = new Array();<EOL>    // See https://git-scm.com/docs/git-status<EOL>    //<EOL>    // In the short-format, the status of each path is shown as<EOL>    // XY PATH1 -> PATH2<EOL>    //<EOL>    // There is also an alternate -z format recommended for machine parsing. In that<EOL>    // format, the status field is the same, but some other things change. First,<EOL>    // the -> is omitted from rename entries and the field order is reversed (e.g<EOL>    // from -> to becomes to from). Second, a NUL (ASCII 0) follows each filename,<EOL>    // replacing space as a field separator and the terminating newline (but a space<EOL>    // still separates the status field from the first filename). Third, filenames<EOL>    // containing special characters are not specially formatted; no quoting or<EOL>    // backslash-escaping is performed.<EOL>    const fields = output.split('<STR_LIT>');<EOL>    let field;<EOL>     while ((field = fields.shift())) {<EOL>        if (field.startsWith('<STR_LIT>') && field.length > <NUM_LIT>) {<EOL>            entries.push({ kind: '<STR_LIT>', value: field.substr(<NUM_LIT>) });<EOL>            continue;<EOL>        }<EOL>        const entryKind = field.substr(<NUM_LIT>, <NUM_LIT>);<EOL>        if (entryKind === ChangedEntryType) {<EOL>            entries.push(parseChangedEntry(field));<EOL>        }<EOL>        else if (entryKind === RenamedOrCopiedEntryType) {<EOL>            entries.push(parsedRenamedOrCopiedEntry(field, fields.shift()));<EOL>        }<EOL>        else if (entryKind === UnmergedEntryType) {<EOL>            entries.push(parseUnmergedEntry(","gt":"field));"}
{"input":"<s> export function changeNaDisplayOptions(options) {<EOL>    return {<EOL>","gt":"type: CHANGE_NOT_APPLIED_DISPLAY_OPTIONS,"}
{"input":"<s> function foo4() {<EOL>    return","gt":"new m.c();"}
{"input":"<s> function snd(a) {<EOL>    return","gt":"a[<NUM_LIT>];"}
{"input":"<s> <EOL>function clickHandler(ev) {<EOL>    var windowId = listState[focusIndex].returnValue;<EOL>    if (windowId === -<NUM_LIT>) {<EOL>        returnMessage({ newWindow:","gt":"true });"}
{"input":"<s> <EOL>export default function drawIcon(text) {<EOL>    text = text.toString();<EOL>    // Clear the inner part of the icon, without ever redrawing the border<EOL>    ctx.clearRect(BORDER_WIDTH, BORDER_WIDTH, INNER_SIZE, INNER_SIZE);<EOL>    // Draw the text<EOL>    if (text.length >= <NUM_LIT>) {<EOL>        ctx.font = SMALL_FONT;<EOL>        ctx.fillText(text, SIZE / <NUM_LIT>, TEXT_POSITION, INNER_SIZE);<EOL>    }<EOL>    else {<EOL>        ctx.","gt":"font = BIG_FONT;"}
{"input":"<s> <EOL>function roundedRect(ctx, x, y, width, height, radius) {<EOL>    ctx.beginPath();<EOL>    ctx.moveTo(x + radius, y);<EOL>    ctx.lineTo(x + width - radius, y);<EOL>    ctx.quadraticCurveTo(x +","gt":"width, y, x + width, y + radius);"}
{"input":"<s> <EOL>function roundedRect(ctx, x, y, width, height, radius) {<EOL>    ctx.beginPath();<EOL>    ctx.moveTo(x + radius, y);<EOL>    ctx.lineTo(x + width - radius, y);<EOL>    ctx.quadraticCurveTo(x +  width, y, x + width, y + radius);<EOL>    ctx.lineTo(x + width, y + height - radius);<EOL>    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);<EOL>    ctx.lineTo(x + radius, y + height);<EOL>    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);<EOL>    ctx.lineTo(x,","gt":"y + radius);"}
{"input":"<s> function send(channel, arg) {<EOL>    const window = BrowserWindow.getAllWindows()[<NUM_LIT>];<EOL>    if (window) {<EOL>        log.info('<STR_LIT>',","gt":"channel, arg);"}
{"input":"<s> function generate_class(schema, output) {<EOL>    if (DEBUG)<EOL>","gt":"console.log(\"<STR_LIT>\", schema);"}
{"input":"<s> <EOL>export function getActive() {<EOL>    return browser.tabs.","gt":"query({ lastFocusedWindow: true, active: true }).then(results => results[<NUM_LIT>]);"}
{"input":"<s> <EOL>function valuesBackwards() {<EOL>    let i = this.length;<EOL>    return {<EOL>        [Symbol.iterator]() { return this; },<EOL>","gt":"next: () => {"}
{"input":"<s> function isDefined(x) {<EOL>","gt":"return x != null;"}
{"input":"<s> <EOL>export function onCommand(command, listener) {<EOL>    if (listeners.size === <NUM_LIT>) {<EOL>        browser.","gt":"commands.onCommand.addListener(globalListener);"}
{"input":"<s> export async function scrollTo(client, x, y) {<EOL>    const { Runtime } = client;<EOL>    const","gt":"browserCode = `<STR_LIT>{"}
{"input":"<s> function capitalized(str) {<EOL>    return str.charAt(<NUM_LIT>).toUpperCase() +","gt":"str.slice(<NUM_LIT>);"}
{"input":"<s> // Predicate for errors/data can be removed after typescript 2.7.<EOL>// See: https://github.com/Microsoft/TypeScript/pull/19513<EOL>export function introspectionToSchema(introspection) {<EOL>    if (introspection.errors != null) {<EOL>        throw new","gt":"Error('<STR_LIT>');"}
{"input":"<s> function a0() {<EOL>    {<EOL>        let x = <NUM_LIT>;<EOL>        () =>","gt":"x;"}
{"input":"<s> // Serialize field<EOL>export function serialize(schema, field) {<EOL>    const obj = {<EOL>        fields: [],<EOL>","gt":"interfaces: [],"}
{"input":"<s> // Serialize field<EOL>export function serialize(schema, field) {<EOL>    const obj = {<EOL>        fields: [],<EOL>         interfaces: [],<EOL>        args: [],<EOL>        implementations: [],<EOL>    };<EOL>    let type = field.type || field;<EOL>    const isVarType = isType(type);<EOL>    if (type.ofType) {<EOL>","gt":"type = getDeeperType(type.ofType);"}
{"input":"<s> // Serialize field<EOL>export function serialize(schema, field) {<EOL>    const obj = {<EOL>        fields: [],<EOL>         interfaces: [],<EOL>        args: [],<EOL>        implementations: [],<EOL>    };<EOL>    let type = field.type || field;<EOL>    const isVarType = isType(type);<EOL>    if (type.ofType) {<EOL>         type = getDeeperType(type.ofType);<EOL>    }<EOL>    // Get fields<EOL>    if (type.getFields) {<EOL>        const fieldMap = type.","gt":"getFields();"}
{"input":"<s> // Serialize field<EOL>export function serialize(schema, field) {<EOL>    const obj = {<EOL>        fields: [],<EOL>         interfaces: [],<EOL>        args: [],<EOL>        implementations: [],<EOL>    };<EOL>    let type = field.type || field;<EOL>    const isVarType = isType(type);<EOL>    if (type.ofType) {<EOL>         type = getDeeperType(type.ofType);<EOL>    }<EOL>    // Get fields<EOL>    if (type.getFields) {<EOL>        const fieldMap = type. getFields();<EOL>        obj.fields = Object.keys(fieldMap).map(name => {<EOL>            const f = fieldMap[name];<EOL>            f.parent = field;<EOL>            f.path =","gt":"field.path + `<STR_LIT>`;"}
{"input":"<s> function message(action, user) {<EOL>    if (user) {<EOL>        return {<EOL>            name: user,<EOL>","gt":"topic: TOPIC.PRESENCE,"}
{"input":"<s> function message(action, user) {<EOL>    if (user) {<EOL>        return {<EOL>            name: user,<EOL>             topic: TOPIC.PRESENCE,<EOL>            action<EOL>        };<EOL>    }<EOL>    else {<EOL>        return {<EOL>            topic:","gt":"TOPIC.PRESENCE,"}
{"input":"<s> function foo2() {<EOL>    {<EOL>        let x = <NUM_LIT>;<EOL>","gt":"use(x);"}
{"input":"<s> async function initRepository(repository) {<EOL>    // 模块<EOL>    for (let BO_MODULE_INDEX = <NUM_LIT>; BO_MODULE_INDEX < BO_MODULE_COUNT; BO_MODULE_INDEX++) {<EOL>        let mod = await Module.create(BO_MODULE_FN({ creatorId: repository.creatorId, repositoryId: repository.id }));<EOL>        await repository.addModule(mod);<EOL>        // 接口<EOL>        for (let BO_INTERFACE_INDEX = <NUM_LIT>; BO_INTERFACE_INDEX < BO_INTERFACE_COUNT; BO_INTERFACE_INDEX++) {<EOL>            let itf = await Interface.create(BO_INTERFACE_FN({ creatorId: mod.creatorId, repositoryId: repository.id, moduleId: mod.id }));<EOL>            await mod.$add('<STR_LIT>', itf);<EOL>            // 属性<EOL>            for (let BO_PROPERTY_INDEX = <NUM_LIT>; BO_PROPERTY_INDEX < BO_PROPERTY_COUNT; BO_PROPERTY_INDEX++) {<EOL>                let prop = await Property.create(BO_PROPERTY_FN({ creatorId: itf.creatorId, repositoryId: repository.id, moduleId: mod.id, interfaceId: itf.id }));<EOL>                await","gt":"itf.$add('<STR_LIT>', prop);"}
{"input":"<s> function parseRef(rawRef) {<EOL>    const [type, ref] =","gt":"rawRef.split(/\\s*:\\s*/);"}
{"input":"<s> export function validateCallback(fnName, argumentNumber, callback, optional) {<EOL>    if (optional && !callback)<EOL>","gt":"return;"}
{"input":"<s> export function getTsConfigParseResult(opts) {<EOL>    const { encoding, fileSystemWrapper } = opts;<EOL>    const tsConfigFilePath = fileSystemWrapper.getStandardizedAbsolutePath(opts.tsConfigFilePath);<EOL>    errors.throwIfFileNotExists(fileSystemWrapper,","gt":"tsConfigFilePath);"}
{"input":"<s> function getReplacementText(node) {<EOL>    const childSyntaxList = node.getChildSyntaxListOrThrow();<EOL>    const indentationText = node.getIndentationText();<EOL>    const childIndentationText = node.getChildIndentationText();<EOL>    const indentationDifference = childIndentationText.replace(indentationText, \"<STR_LIT>\");<EOL>    const replaceRegex = new RegExp(\"<STR_LIT>\" + indentationDifference);<EOL>    const originalText = childSyntaxList.","gt":"getFullText();"}
{"input":"<s> function getReplacementText(node) {<EOL>    const childSyntaxList = node.getChildSyntaxListOrThrow();<EOL>    const indentationText = node.getIndentationText();<EOL>    const childIndentationText = node.getChildIndentationText();<EOL>    const indentationDifference = childIndentationText.replace(indentationText, \"<STR_LIT>\");<EOL>    const replaceRegex = new RegExp(\"<STR_LIT>\" + indentationDifference);<EOL>    const originalText = childSyntaxList. getFullText();<EOL>    const sourceFile = node.sourceFile;<EOL>    const lines = originalText.split(\"<STR_LIT>\");<EOL>    let pos = childSyntaxList.getPos();<EOL>","gt":"const newLines = [];"}
{"input":"<s> function getCachedGitIgnores() {<EOL>    if (cachedGitIgnores) {<EOL>        return Promise.resolve(cachedGitIgnores);<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> function getCachedGitIgnores() {<EOL>    if (cachedGitIgnores) {<EOL>        return Promise.resolve(cachedGitIgnores);<EOL>    }<EOL>     else {<EOL>        return new Promise((resolve, reject) => {<EOL>            Fs.readdir(root, (err, files) => {<EOL>","gt":"if (err) {"}
{"input":"<s> function getCachedGitIgnores() {<EOL>    if (cachedGitIgnores) {<EOL>        return Promise.resolve(cachedGitIgnores);<EOL>    }<EOL>     else {<EOL>        return new Promise((resolve, reject) => {<EOL>            Fs.readdir(root, (err, files) => {<EOL>                 if (err) {<EOL>                    reject(err);<EOL>                }<EOL>                else {<EOL>                    const ignoreFiles = files.filter(file => file.","gt":"endsWith(GitIgnoreExtension));"}
{"input":"<s> function getCachedGitIgnores() {<EOL>    if (cachedGitIgnores) {<EOL>        return Promise.resolve(cachedGitIgnores);<EOL>    }<EOL>     else {<EOL>        return new Promise((resolve, reject) => {<EOL>            Fs.readdir(root, (err, files) => {<EOL>                 if (err) {<EOL>                    reject(err);<EOL>                }<EOL>                else {<EOL>                    const ignoreFiles = files.filter(file => file. endsWith(GitIgnoreExtension));<EOL>                    cachedGitIgnores = new Map();<EOL>                    for (const file of ignoreFiles) {<EOL>                        cachedGitIgnores.set(Path.basename(file, GitIgnoreExtension), Path.join(root, file));<EOL>                    }<EOL>","gt":"resolve(cachedGitIgnores);"}
{"input":"<s> function f2() {<EOL>    let x = [];<EOL>    x.","gt":"push(<NUM_LIT>);"}
{"input":"<s> function f8() {<EOL>    let x = [];<EOL>    x.push(<NUM_LIT>);<EOL>","gt":"if (cond())"}
{"input":"<s> export async function getLogLines(previousVersion) {<EOL>    const log = await spawn('<STR_LIT>', [<EOL>        '<STR_LIT>',<EOL>        `<STR_LIT>`,<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> export async function getLogLines(previousVersion) {<EOL>    const log = await spawn('<STR_LIT>', [<EOL>        '<STR_LIT>',<EOL>        `<STR_LIT>`,<EOL>         '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>function requestAccessToken(transit, options, data) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const req = transit.request(options, (res) => {<EOL>","gt":"const buffers = [];"}
{"input":"<s> <EOL>function requestAccessToken(transit, options, data) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const req = transit.request(options, (res) => {<EOL>             const buffers = [];<EOL>            res.on('<STR_LIT>', (buffer) => buffers.push(buffer));<EOL>            res.on('<STR_LIT>', () => {<EOL>","gt":"try {"}
{"input":"<s> <EOL>function requestAccessToken(transit, options, data) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const req = transit.request(options, (res) => {<EOL>             const buffers = [];<EOL>            res.on('<STR_LIT>', (buffer) => buffers.push(buffer));<EOL>            res.on('<STR_LIT>', () => {<EOL>                 try {<EOL>                    const json = JSON.parse(Buffer.concat(buffers).toString());<EOL>                    if (json.error) {<EOL>                        let errorMessage = '<STR_LIT>' + json.error;<EOL>                        if (json.","gt":"error_description) {"}
{"input":"<s> <EOL>function requestAccessToken(transit, options, data) {<EOL>    return new Promise((resolve, reject) => {<EOL>        const req = transit.request(options, (res) => {<EOL>             const buffers = [];<EOL>            res.on('<STR_LIT>', (buffer) => buffers.push(buffer));<EOL>            res.on('<STR_LIT>', () => {<EOL>                 try {<EOL>                    const json = JSON.parse(Buffer.concat(buffers).toString());<EOL>                    if (json.error) {<EOL>                        let errorMessage = '<STR_LIT>' + json.error;<EOL>                        if (json. error_description) {<EOL>                            errorMessage += '<STR_LIT>' + json.error_description + '<STR_LIT>';<EOL>                        }<EOL>                        reject(new FirebaseAppError(AppErrorCodes.INVALID_CREDENTIAL, errorMessage));<EOL>                    }<EOL>                    else if (!json.access_token || !json.expires_in) {<EOL>                        reject(new FirebaseAppError(AppErrorCodes.INVALID_CREDENTIAL, `<STR_LIT>`));<EOL>                    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function generateRandomString(length) {<EOL>    const alphabet = '<STR_LIT>';<EOL>","gt":"let text = '<STR_LIT>';"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code.","gt":"OK;"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code. OK;<EOL>        case RpcCode.CANCELLED:<EOL>            return Code.CANCELLED;<EOL>        case RpcCode.UNKNOWN:<EOL>            return Code.UNKNOWN;<EOL>        case","gt":"RpcCode.DEADLINE_EXCEEDED:"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code. OK;<EOL>        case RpcCode.CANCELLED:<EOL>            return Code.CANCELLED;<EOL>        case RpcCode.UNKNOWN:<EOL>            return Code.UNKNOWN;<EOL>        case  RpcCode.DEADLINE_EXCEEDED:<EOL>            return Code.DEADLINE_EXCEEDED;<EOL>        case RpcCode.RESOURCE_EXHAUSTED:<EOL>            return Code.RESOURCE_EXHAUSTED;<EOL>        case RpcCode.INTERNAL:<EOL>            return","gt":"Code.INTERNAL;"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code. OK;<EOL>        case RpcCode.CANCELLED:<EOL>            return Code.CANCELLED;<EOL>        case RpcCode.UNKNOWN:<EOL>            return Code.UNKNOWN;<EOL>        case  RpcCode.DEADLINE_EXCEEDED:<EOL>            return Code.DEADLINE_EXCEEDED;<EOL>        case RpcCode.RESOURCE_EXHAUSTED:<EOL>            return Code.RESOURCE_EXHAUSTED;<EOL>        case RpcCode.INTERNAL:<EOL>            return  Code.INTERNAL;<EOL>        case RpcCode.UNAVAILABLE:<EOL>            return Code.UNAVAILABLE;<EOL>        case RpcCode.UNAUTHENTICATED:<EOL>            return Code.UNAUTHENTICATED;<EOL>","gt":"case RpcCode.INVALID_ARGUMENT:"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code. OK;<EOL>        case RpcCode.CANCELLED:<EOL>            return Code.CANCELLED;<EOL>        case RpcCode.UNKNOWN:<EOL>            return Code.UNKNOWN;<EOL>        case  RpcCode.DEADLINE_EXCEEDED:<EOL>            return Code.DEADLINE_EXCEEDED;<EOL>        case RpcCode.RESOURCE_EXHAUSTED:<EOL>            return Code.RESOURCE_EXHAUSTED;<EOL>        case RpcCode.INTERNAL:<EOL>            return  Code.INTERNAL;<EOL>        case RpcCode.UNAVAILABLE:<EOL>            return Code.UNAVAILABLE;<EOL>        case RpcCode.UNAUTHENTICATED:<EOL>            return Code.UNAUTHENTICATED;<EOL>         case RpcCode.INVALID_ARGUMENT:<EOL>            return Code.INVALID_ARGUMENT;<EOL>        case RpcCode.NOT_FOUND:<EOL>            return Code.NOT_FOUND;<EOL>        case RpcCode.ALREADY_EXISTS:<EOL>            return Code.ALREADY_EXISTS;<EOL>        case RpcCode.PERMISSION_DENIED:<EOL>            return Code.PERMISSION_DENIED;<EOL>        case RpcCode.FAILED_PRECONDITION:<EOL>            return Code.","gt":"FAILED_PRECONDITION;"}
{"input":"<s> <EOL>export function mapCodeFromRpcCode(code) {<EOL>    if (code === undefined) {<EOL>        // This shouldn't normally happen, but in certain error cases (like trying<EOL>        // to send invalid proto messages) we may get an error with no GRPC code.<EOL>        log.error( '<STR_LIT>');<EOL>        return Code.UNKNOWN;<EOL>    }<EOL>    switch (code) {<EOL>        case RpcCode.OK:<EOL>            return Code. OK;<EOL>        case RpcCode.CANCELLED:<EOL>            return Code.CANCELLED;<EOL>        case RpcCode.UNKNOWN:<EOL>            return Code.UNKNOWN;<EOL>        case  RpcCode.DEADLINE_EXCEEDED:<EOL>            return Code.DEADLINE_EXCEEDED;<EOL>        case RpcCode.RESOURCE_EXHAUSTED:<EOL>            return Code.RESOURCE_EXHAUSTED;<EOL>        case RpcCode.INTERNAL:<EOL>            return  Code.INTERNAL;<EOL>        case RpcCode.UNAVAILABLE:<EOL>            return Code.UNAVAILABLE;<EOL>        case RpcCode.UNAUTHENTICATED:<EOL>            return Code.UNAUTHENTICATED;<EOL>         case RpcCode.INVALID_ARGUMENT:<EOL>            return Code.INVALID_ARGUMENT;<EOL>        case RpcCode.NOT_FOUND:<EOL>            return Code.NOT_FOUND;<EOL>        case RpcCode.ALREADY_EXISTS:<EOL>            return Code.ALREADY_EXISTS;<EOL>        case RpcCode.PERMISSION_DENIED:<EOL>            return Code.PERMISSION_DENIED;<EOL>        case RpcCode.FAILED_PRECONDITION:<EOL>            return Code. FAILED_PRECONDITION;<EOL>        case RpcCode.ABORTED:<EOL>            return Code.ABORTED;<EOL>        case RpcCode.OUT_OF_RANGE:<EOL>","gt":"return Code.OUT_OF_RANGE;"}
{"input":"<s> export function list(c, list, optional1) {<EOL>    const last = arguments[arguments.length - <NUM_LIT>];<EOL>    const getKey = typeof last === \"<STR_LIT>\" ?","gt":"last : id;"}
{"input":"<s> export function getDomain(values, scaleType, autoScale, minVal, maxVal) {<EOL>    let domain = [];<EOL>    if (scaleType === '<STR_LIT>') {<EOL>        values = values.map(v => Number(v));<EOL>        if (!autoScale) {<EOL>            values.push(","gt":"<NUM_LIT>);"}
{"input":"<s> export function getDomain(values, scaleType, autoScale, minVal, maxVal) {<EOL>    let domain = [];<EOL>    if (scaleType === '<STR_LIT>') {<EOL>        values = values.map(v => Number(v));<EOL>        if (!autoScale) {<EOL>            values.push( <NUM_LIT>);<EOL>        }<EOL>    }<EOL>    if (scaleType === '<STR_LIT>' || scaleType === '<STR_LIT>') {<EOL>        const min = minVal ? minVal : Math.","gt":"min(...values);"}
{"input":"<s> export function getDomain(values, scaleType, autoScale, minVal, maxVal) {<EOL>    let domain = [];<EOL>    if (scaleType === '<STR_LIT>') {<EOL>        values = values.map(v => Number(v));<EOL>        if (!autoScale) {<EOL>            values.push( <NUM_LIT>);<EOL>        }<EOL>    }<EOL>    if (scaleType === '<STR_LIT>' || scaleType === '<STR_LIT>') {<EOL>        const min = minVal ? minVal : Math. min(...values);<EOL>        const max = maxVal ? maxVal : Math.max(...values);<EOL>        domain = [min, max];<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>export function resolveOAuthRequest(account) {<EOL>    if (!oauthState) {<EOL>","gt":"fatalError('<STR_LIT>');"}
{"input":"<s> <EOL>export function getGenericHostname(remoteURL) {<EOL>    const parsed = parseRemote(remoteURL);<EOL>    if (parsed) {<EOL>        return parsed.","gt":"hostname;"}
{"input":"<s> // CFA for 'let' with no type annotation and initializer<EOL>function f1() {<EOL>    let x;<EOL>    if (cond) {<EOL>","gt":"x = <NUM_LIT>;"}
{"input":"<s> // CFA for 'var' with no type annotation and 'undefined' initializer<EOL>function f6() {<EOL>    var x = undefined;<EOL>    if (cond) {<EOL>        x =","gt":"<NUM_LIT>;"}
{"input":"<s> function handleClass(desc, elm) {<EOL>    if (isBehavior(desc)) {<EOL>        let previousClasses;<EOL>        viewObserve((value) => {<EOL>            if (previousClasses !== undefined) {<EOL>","gt":"elm.classList.remove(...previousClasses);"}
{"input":"<s> function handleClass(desc, elm) {<EOL>    if (isBehavior(desc)) {<EOL>        let previousClasses;<EOL>        viewObserve((value) => {<EOL>            if (previousClasses !== undefined) {<EOL>                 elm.classList.remove(...previousClasses);<EOL>            }<EOL>            previousClasses = value.split(","gt":"\"<STR_LIT>\");"}
{"input":"<s> function handleClass(desc, elm) {<EOL>    if (isBehavior(desc)) {<EOL>        let previousClasses;<EOL>        viewObserve((value) => {<EOL>            if (previousClasses !== undefined) {<EOL>                 elm.classList.remove(...previousClasses);<EOL>            }<EOL>            previousClasses = value.split( \"<STR_LIT>\");<EOL>            elm.classList.add(...previousClasses);<EOL>        }, desc);<EOL>    }<EOL>    else if (Array.isArray(desc)) {<EOL>","gt":"for (const d of desc) {"}
{"input":"<s> function handleClass(desc, elm) {<EOL>    if (isBehavior(desc)) {<EOL>        let previousClasses;<EOL>        viewObserve((value) => {<EOL>            if (previousClasses !== undefined) {<EOL>                 elm.classList.remove(...previousClasses);<EOL>            }<EOL>            previousClasses = value.split( \"<STR_LIT>\");<EOL>            elm.classList.add(...previousClasses);<EOL>        }, desc);<EOL>    }<EOL>    else if (Array.isArray(desc)) {<EOL>         for (const d of desc) {<EOL>            handleClass(d, elm);<EOL>        }<EOL>    }<EOL>    else if (typeof desc === \"<STR_LIT>\") {<EOL>        const classes = desc.","gt":"split(\"<STR_LIT>\");"}
{"input":"<s> async function I() {<EOL>    try {<EOL>        const a = await p;<EOL>        return","gt":"a;"}
{"input":"<s> <EOL>export function sleep(ms) {<EOL>    return","gt":"new Promise(resolve => setTimeout(resolve, ms));"}
{"input":"<s> function square(n) {<EOL>    return","gt":"n * n;"}
{"input":"<s> export function list(...elements) {<EOL>    let l = empty();<EOL>    for (const element of","gt":"elements) {"}
{"input":"<s> function someCb(value, state) {<EOL>    return !(state.","gt":"result = state.predicate(value));"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>","gt":"if (getPrefixSize(l) === <NUM_LIT>) {"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>         if (getPrefixSize(l) === <NUM_LIT>) {<EOL>            l.bits = setPrefix(node.array.length, l.bits);<EOL>            l.prefix = reverseArray(node.array);<EOL>        }<EOL>        else {<EOL>            l.root = node;<EOL>        }<EOL>        return l;<EOL>    }<EOL>    const depth = getDepth(l);<EOL>    let index =","gt":"l.length - <NUM_LIT> - getPrefixSize(l);"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>         if (getPrefixSize(l) === <NUM_LIT>) {<EOL>            l.bits = setPrefix(node.array.length, l.bits);<EOL>            l.prefix = reverseArray(node.array);<EOL>        }<EOL>        else {<EOL>            l.root = node;<EOL>        }<EOL>        return l;<EOL>    }<EOL>    const depth = getDepth(l);<EOL>    let index =  l.length - <NUM_LIT> - getPrefixSize(l);<EOL>    let","gt":"nodesToCopy = <NUM_LIT>;"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>         if (getPrefixSize(l) === <NUM_LIT>) {<EOL>            l.bits = setPrefix(node.array.length, l.bits);<EOL>            l.prefix = reverseArray(node.array);<EOL>        }<EOL>        else {<EOL>            l.root = node;<EOL>        }<EOL>        return l;<EOL>    }<EOL>    const depth = getDepth(l);<EOL>    let index =  l.length - <NUM_LIT> - getPrefixSize(l);<EOL>    let  nodesToCopy = <NUM_LIT>;<EOL>    let nodesVisited = <NUM_LIT>;<EOL>    let shift = depth * <NUM_LIT>;<EOL>    let currentNode = l.root;<EOL>    if (<NUM_LIT> ** (depth + <NUM_LIT>) < index) {<EOL>        shift = <NUM_LIT>; // there is no room<EOL>        nodesVisited =","gt":"depth;"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>         if (getPrefixSize(l) === <NUM_LIT>) {<EOL>            l.bits = setPrefix(node.array.length, l.bits);<EOL>            l.prefix = reverseArray(node.array);<EOL>        }<EOL>        else {<EOL>            l.root = node;<EOL>        }<EOL>        return l;<EOL>    }<EOL>    const depth = getDepth(l);<EOL>    let index =  l.length - <NUM_LIT> - getPrefixSize(l);<EOL>    let  nodesToCopy = <NUM_LIT>;<EOL>    let nodesVisited = <NUM_LIT>;<EOL>    let shift = depth * <NUM_LIT>;<EOL>    let currentNode = l.root;<EOL>    if (<NUM_LIT> ** (depth + <NUM_LIT>) < index) {<EOL>        shift = <NUM_LIT>; // there is no room<EOL>        nodesVisited =  depth;<EOL>    }<EOL>    while (shift > <NUM_LIT>) {<EOL>        let childIndex;<EOL>        if (currentNode.sizes === undefined) {<EOL>            // does not have size table<EOL>            childIndex = (index >> shift) & mask;<EOL>            index &= ~(mask << shift); // wipe just used bits<EOL>        }<EOL>        else {<EOL>            childIndex = currentNode.array.length - <NUM_LIT>;<EOL>            index -= currentNode.sizes[childIndex - <NUM_LIT>];<EOL>        }<EOL>        nodesVisited++;<EOL>        if (childIndex < mask) {<EOL>            // we are not going down the far right path, this implies that<EOL>            // there is still room in the current node<EOL>            nodesToCopy = nodesVisited;<EOL>        }<EOL>        currentNode = currentNode.array[childIndex];<EOL>","gt":"if (currentNode === undefined) {"}
{"input":"<s> <EOL>function appendNodeToTree(l, node) {<EOL>    if (l.root === undefined) {<EOL>        // The old list has no content in tree, all content is in affixes<EOL>         if (getPrefixSize(l) === <NUM_LIT>) {<EOL>            l.bits = setPrefix(node.array.length, l.bits);<EOL>            l.prefix = reverseArray(node.array);<EOL>        }<EOL>        else {<EOL>            l.root = node;<EOL>        }<EOL>        return l;<EOL>    }<EOL>    const depth = getDepth(l);<EOL>    let index =  l.length - <NUM_LIT> - getPrefixSize(l);<EOL>    let  nodesToCopy = <NUM_LIT>;<EOL>    let nodesVisited = <NUM_LIT>;<EOL>    let shift = depth * <NUM_LIT>;<EOL>    let currentNode = l.root;<EOL>    if (<NUM_LIT> ** (depth + <NUM_LIT>) < index) {<EOL>        shift = <NUM_LIT>; // there is no room<EOL>        nodesVisited =  depth;<EOL>    }<EOL>    while (shift > <NUM_LIT>) {<EOL>        let childIndex;<EOL>        if (currentNode.sizes === undefined) {<EOL>            // does not have size table<EOL>            childIndex = (index >> shift) & mask;<EOL>            index &= ~(mask << shift); // wipe just used bits<EOL>        }<EOL>        else {<EOL>            childIndex = currentNode.array.length - <NUM_LIT>;<EOL>            index -= currentNode.sizes[childIndex - <NUM_LIT>];<EOL>        }<EOL>        nodesVisited++;<EOL>        if (childIndex < mask) {<EOL>            // we are not going down the far right path, this implies that<EOL>            // there is still room in the current node<EOL>            nodesToCopy = nodesVisited;<EOL>        }<EOL>        currentNode = currentNode.array[childIndex];<EOL>         if (currentNode === undefined) {<EOL>            // This will only happened in a pvec subtree. The index does not<EOL>            // exist so we'll have to create a new path from here on.<EOL>            nodesToCopy = nodesVisited;<EOL>            shift = <NUM_LIT>; // Set shift to break out of the while-loop<EOL>        }<EOL>        shift -= <NUM_LIT>;<EOL>    }<EOL>    if (shift !== <NUM_LIT>) {<EOL>        nodesVisited++;<EOL>        if (currentNode.array.length < branchingFactor) {<EOL>            // there is room in the found node<EOL>            nodesToCopy = nodesVisited;<EOL>        }<EOL>    }<EOL>    if (nodesToCopy === <NUM_LIT>) {<EOL>        // there was no room in the found node<EOL>        const newPath = nodesVisited === <NUM_LIT> ? node : createPath(nodesVisited, node);<EOL>        const newRoot = new Node(undefined, [l.root, newPath]);<EOL>        l.","gt":"root = newRoot;"}
{"input":"<s> export function update(index, a, l) {<EOL>    const prefixSize = getPrefixSize(l);<EOL>    const suffixSize = getSuffixSize(l);<EOL>    const newList = cloneList(l);<EOL>    if (index < prefixSize) {<EOL>        const newPrefix = copyArray(newList.prefix);<EOL>        newPrefix[newPrefix.","gt":"length - index - <NUM_LIT>] = a;"}
{"input":"<s> export function update(index, a, l) {<EOL>    const prefixSize = getPrefixSize(l);<EOL>    const suffixSize = getSuffixSize(l);<EOL>    const newList = cloneList(l);<EOL>    if (index < prefixSize) {<EOL>        const newPrefix = copyArray(newList.prefix);<EOL>        newPrefix[newPrefix. length - index - <NUM_LIT>] = a;<EOL>        newList.prefix = newPrefix;<EOL>    }<EOL>    else if (index >= l.length - suffixSize) {<EOL>        const newSuffix = copyArray(","gt":"newList.suffix);"}
{"input":"<s> export function insert(index, element, l) {<EOL>    return concat(append(element, slice(<NUM_LIT>, index, l)), slice(index,","gt":"l.length, l));"}
{"input":"<s> function asEditorError(error) {<EOL>    if (error instanceof ExternalEditorError) {<EOL>","gt":"return error;"}
{"input":"<s> <EOL>export async function getPartialBlobContents(repository, commitish, path, length) {<EOL>    const successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>    const","gt":"args = ['<STR_LIT>', `<STR_LIT>`];"}
{"input":"<s> function setupTest() {<EOL>    return TestBed.configureTestingModule({<EOL>        declarations: [TestFixtureComponent],<EOL>","gt":"imports: [NgxDatatableModule]"}
{"input":"<s> <EOL>function createCuesFromArray(cuesArray) {<EOL>    const nativeCues = [];<EOL>    for (let i = <NUM_LIT>; i < cuesArray.length; i++) {<EOL>        const { start, end, text } = cuesArray[i];<EOL>        if (text &&","gt":"end != null) {"}
{"input":"<s> function injectable() {<EOL>    return function (target) {<EOL>        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {<EOL>            throw new","gt":"Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);"}
{"input":"<s> function getCachedKeySystemAccess(keySystems, instanceInfos) {<EOL>    const { $keySystem, $mediaKeys, $mediaKeySystemConfiguration, } = instanceInfos;<EOL>    // NOTE(pierre): alwaysRenew flag is used for IE11 which require the<EOL>    // creation of a new MediaKeys instance for each session creation<EOL>    if (!$keySystem || !$mediaKeys || shouldRenewMediaKeys()) {<EOL>        return null;<EOL>    }<EOL>    if ($mediaKeySystemConfiguration) {<EOL>        const configuration = $mediaKeySystemConfiguration;<EOL>        const foundKeySystem = keySystems.filter((ks) => {<EOL>            if (ks.type !==","gt":"$keySystem.type) {"}
{"input":"<s> function getCachedKeySystemAccess(keySystems, instanceInfos) {<EOL>    const { $keySystem, $mediaKeys, $mediaKeySystemConfiguration, } = instanceInfos;<EOL>    // NOTE(pierre): alwaysRenew flag is used for IE11 which require the<EOL>    // creation of a new MediaKeys instance for each session creation<EOL>    if (!$keySystem || !$mediaKeys || shouldRenewMediaKeys()) {<EOL>        return null;<EOL>    }<EOL>    if ($mediaKeySystemConfiguration) {<EOL>        const configuration = $mediaKeySystemConfiguration;<EOL>        const foundKeySystem = keySystems.filter((ks) => {<EOL>            if (ks.type !==  $keySystem.type) {<EOL>                return false;<EOL>            }<EOL>            if (ks.persistentLicense &&<EOL>","gt":"configuration.persistentState !== \"<STR_LIT>\") {"}
{"input":"<s> function getCachedKeySystemAccess(keySystems, instanceInfos) {<EOL>    const { $keySystem, $mediaKeys, $mediaKeySystemConfiguration, } = instanceInfos;<EOL>    // NOTE(pierre): alwaysRenew flag is used for IE11 which require the<EOL>    // creation of a new MediaKeys instance for each session creation<EOL>    if (!$keySystem || !$mediaKeys || shouldRenewMediaKeys()) {<EOL>        return null;<EOL>    }<EOL>    if ($mediaKeySystemConfiguration) {<EOL>        const configuration = $mediaKeySystemConfiguration;<EOL>        const foundKeySystem = keySystems.filter((ks) => {<EOL>            if (ks.type !==  $keySystem.type) {<EOL>                return false;<EOL>            }<EOL>            if (ks.persistentLicense &&<EOL>                 configuration.persistentState !== \"<STR_LIT>\") {<EOL>                return false;<EOL>            }<EOL>            if (ks.distinctiveIdentifierRequired &&<EOL>","gt":"configuration.distinctiveIdentifier !== \"<STR_LIT>\") {"}
{"input":"<s> function getCachedKeySystemAccess(keySystems, instanceInfos) {<EOL>    const { $keySystem, $mediaKeys, $mediaKeySystemConfiguration, } = instanceInfos;<EOL>    // NOTE(pierre): alwaysRenew flag is used for IE11 which require the<EOL>    // creation of a new MediaKeys instance for each session creation<EOL>    if (!$keySystem || !$mediaKeys || shouldRenewMediaKeys()) {<EOL>        return null;<EOL>    }<EOL>    if ($mediaKeySystemConfiguration) {<EOL>        const configuration = $mediaKeySystemConfiguration;<EOL>        const foundKeySystem = keySystems.filter((ks) => {<EOL>            if (ks.type !==  $keySystem.type) {<EOL>                return false;<EOL>            }<EOL>            if (ks.persistentLicense &&<EOL>                 configuration.persistentState !== \"<STR_LIT>\") {<EOL>                return false;<EOL>            }<EOL>            if (ks.distinctiveIdentifierRequired &&<EOL>                 configuration.distinctiveIdentifier !== \"<STR_LIT>\") {<EOL>                return false;<EOL>            }<EOL>            return true;<EOL>        })[<NUM_LIT>];<EOL>        if (foundKeySystem) {<EOL>            return {<EOL>","gt":"keySystem: foundKeySystem,"}
{"input":"<s> export function cloneEnums(node, cloningEnums) {<EOL>    node.addEnums(cloningEnums.map(cloningEnum => ({<EOL>        name: cloningEnum.getName(),<EOL>","gt":"isExported: true,"}
{"input":"<s> <EOL>export default function parseSRTStringToVTTCues(srtStr, timeOffset) {<EOL>    // Even if srt only authorize CRLF, we will also take LF or CR as line<EOL>    // terminators for resilience<EOL>    const lines = srtStr.split(/\\r\\n|\\n|\\r/);<EOL>    const cueBlocks = [];<EOL>    for (let i = <NUM_LIT>; i <","gt":"lines.length; i++) {"}
{"input":"<s> <EOL>export default function parseSRTStringToVTTCues(srtStr, timeOffset) {<EOL>    // Even if srt only authorize CRLF, we will also take LF or CR as line<EOL>    // terminators for resilience<EOL>    const lines = srtStr.split(/\\r\\n|\\n|\\r/);<EOL>    const cueBlocks = [];<EOL>    for (let i = <NUM_LIT>; i <  lines.length; i++) {<EOL>        if (lines[i]) {<EOL>            const startingI =","gt":"i;"}
{"input":"<s> <EOL>export default function parseSRTStringToVTTCues(srtStr, timeOffset) {<EOL>    // Even if srt only authorize CRLF, we will also take LF or CR as line<EOL>    // terminators for resilience<EOL>    const lines = srtStr.split(/\\r\\n|\\n|\\r/);<EOL>    const cueBlocks = [];<EOL>    for (let i = <NUM_LIT>; i <  lines.length; i++) {<EOL>        if (lines[i]) {<EOL>            const startingI =  i;<EOL>            i++;<EOL>            while (lines[i]) {<EOL>                i++;<EOL>            }<EOL>","gt":"cueBlocks.push(lines.slice(startingI, i));"}
{"input":"<s> <EOL>export default function parseSRTStringToVTTCues(srtStr, timeOffset) {<EOL>    // Even if srt only authorize CRLF, we will also take LF or CR as line<EOL>    // terminators for resilience<EOL>    const lines = srtStr.split(/\\r\\n|\\n|\\r/);<EOL>    const cueBlocks = [];<EOL>    for (let i = <NUM_LIT>; i <  lines.length; i++) {<EOL>        if (lines[i]) {<EOL>            const startingI =  i;<EOL>            i++;<EOL>            while (lines[i]) {<EOL>                i++;<EOL>            }<EOL>             cueBlocks.push(lines.slice(startingI, i));<EOL>        }<EOL>    }<EOL>    const cues = [];<EOL>    for (let i = <NUM_LIT>; i < cueBlocks.length; i++) {<EOL>        const","gt":"cue = parseCue(cueBlocks[i], timeOffset);"}
{"input":"<s> <EOL>export function caseInsensitiveCompare(x, y) {<EOL>    return compare(x.toLowerCase(),","gt":"y.toLocaleLowerCase());"}
{"input":"<s> <EOL>export async function addRemote(repository, name, url) {<EOL>    await git(['<STR_LIT>', '<STR_LIT>', name, url],","gt":"repository.path, '<STR_LIT>');"}
{"input":"<s> <EOL>export async function removeRemote(repository, name) {<EOL>    const options = {<EOL>        successExitCodes: new Set([","gt":"<NUM_LIT>, <NUM_LIT>]),"}
{"input":"<s> <EOL>function validateApsAlert(alert) {<EOL>    if (typeof alert === '<STR_LIT>' || validator.isString(alert)) {<EOL>        return;<EOL>    }<EOL>    else if (!validator.isNonNullObject(alert)) {<EOL>        throw","gt":"new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');"}
{"input":"<s> <EOL>function validateApsAlert(alert) {<EOL>    if (typeof alert === '<STR_LIT>' || validator.isString(alert)) {<EOL>        return;<EOL>    }<EOL>    else if (!validator.isNonNullObject(alert)) {<EOL>        throw  new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    const apsAlert = alert;<EOL>    if (","gt":"validator.isNonEmptyArray(apsAlert.locArgs) &&"}
{"input":"<s> <EOL>function validateApsAlert(alert) {<EOL>    if (typeof alert === '<STR_LIT>' || validator.isString(alert)) {<EOL>        return;<EOL>    }<EOL>    else if (!validator.isNonNullObject(alert)) {<EOL>        throw  new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    const apsAlert = alert;<EOL>    if ( validator.isNonEmptyArray(apsAlert.locArgs) &&<EOL>        !validator.isNonEmptyString(apsAlert.locKey)) {<EOL>        throw new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&<EOL>        !validator.isNonEmptyString(","gt":"apsAlert.titleLocKey)) {"}
{"input":"<s> <EOL>function validateApsAlert(alert) {<EOL>    if (typeof alert === '<STR_LIT>' || validator.isString(alert)) {<EOL>        return;<EOL>    }<EOL>    else if (!validator.isNonNullObject(alert)) {<EOL>        throw  new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    const apsAlert = alert;<EOL>    if ( validator.isNonEmptyArray(apsAlert.locArgs) &&<EOL>        !validator.isNonEmptyString(apsAlert.locKey)) {<EOL>        throw new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&<EOL>        !validator.isNonEmptyString( apsAlert.titleLocKey)) {<EOL>        throw new FirebaseMessagingError(MessagingClientErrorCode.INVALID_PAYLOAD, '<STR_LIT>');<EOL>    }<EOL>    const propertyMappings = {<EOL>        locKey: '<STR_LIT>',<EOL>        locArgs: '<STR_LIT>',<EOL>","gt":"titleLocKey: '<STR_LIT>',"}
{"input":"<s> function videoSizeChange() {<EOL>    return","gt":"onEvent(window, \"<STR_LIT>\");"}
{"input":"<s> function parseSortSpecifier(sortSpecifier) {<EOL>    if (isObject(sortSpecifier)) {<EOL>        let s = sortSpecifier;<EOL>        s.kind = s.kind || '<STR_LIT>';<EOL>        s.order = s.","gt":"order || '<STR_LIT>';"}
{"input":"<s> function parseSortSpecifier(sortSpecifier) {<EOL>    if (isObject(sortSpecifier)) {<EOL>        let s = sortSpecifier;<EOL>        s.kind = s.kind || '<STR_LIT>';<EOL>        s.order = s. order || '<STR_LIT>';<EOL>        return s;<EOL>    }<EOL>    else if (typeof sortSpecifier === '<STR_LIT>') {<EOL>        return parseSortSpecifierString(","gt":"sortSpecifier);"}
{"input":"<s> <EOL>function handleConnectionEndpoints(config, services) {<EOL>    // delete any endpoints that have been set to `null`<EOL>    for (const type in config.connectionEndpoints) {<EOL>        if (!config.connectionEndpoints[type]) {<EOL>            delete config.connectionEndpoints[type];<EOL>        }<EOL>    }<EOL>    if (!config.connectionEndpoints || Object.keys(config.connectionEndpoints).length === <NUM_LIT>) {<EOL>        throw new Error(","gt":"'<STR_LIT>');"}
{"input":"<s> <EOL>function handleConnectionEndpoints(config, services) {<EOL>    // delete any endpoints that have been set to `null`<EOL>    for (const type in config.connectionEndpoints) {<EOL>        if (!config.connectionEndpoints[type]) {<EOL>            delete config.connectionEndpoints[type];<EOL>        }<EOL>    }<EOL>    if (!config.connectionEndpoints || Object.keys(config.connectionEndpoints).length === <NUM_LIT>) {<EOL>        throw new Error( '<STR_LIT>');<EOL>    }<EOL>    const connectionEndpoints = [];<EOL>","gt":"for (const connectionType in config.connectionEndpoints) {"}
{"input":"<s> <EOL>function handleConnectionEndpoints(config, services) {<EOL>    // delete any endpoints that have been set to `null`<EOL>    for (const type in config.connectionEndpoints) {<EOL>        if (!config.connectionEndpoints[type]) {<EOL>            delete config.connectionEndpoints[type];<EOL>        }<EOL>    }<EOL>    if (!config.connectionEndpoints || Object.keys(config.connectionEndpoints).length === <NUM_LIT>) {<EOL>        throw new Error( '<STR_LIT>');<EOL>    }<EOL>    const connectionEndpoints = [];<EOL>     for (const connectionType in config.connectionEndpoints) {<EOL>        const plugin = config.connectionEndpoints[connectionType];<EOL>        plugin.options = plugin.options || {};<EOL>        let","gt":"PluginConstructor;"}
{"input":"<s> <EOL>function resolvePluginClass(plugin, type) {<EOL>    if (customPlugins.has(plugin.name)) {<EOL>        return customPlugins.get(plugin.name);<EOL>    }<EOL>    // nexe needs *global.require* for __dynamic__ modules<EOL>    // but browserify and proxyquire can't handle *global.require*<EOL>    const req = global && global.require ? global.require : require;<EOL>","gt":"let requirePath;"}
{"input":"<s> <EOL>function resolvePluginClass(plugin, type) {<EOL>    if (customPlugins.has(plugin.name)) {<EOL>        return customPlugins.get(plugin.name);<EOL>    }<EOL>    // nexe needs *global.require* for __dynamic__ modules<EOL>    // but browserify and proxyquire can't handle *global.require*<EOL>    const req = global && global.require ? global.require : require;<EOL>     let requirePath;<EOL>    let pluginConstructor;<EOL>    let es6Adaptor;<EOL>    if (plugin.path != null) {<EOL>        requirePath =","gt":"fileUtils.lookupLibRequirePath(plugin.path);"}
{"input":"<s> <EOL>function resolvePluginClass(plugin, type) {<EOL>    if (customPlugins.has(plugin.name)) {<EOL>        return customPlugins.get(plugin.name);<EOL>    }<EOL>    // nexe needs *global.require* for __dynamic__ modules<EOL>    // but browserify and proxyquire can't handle *global.require*<EOL>    const req = global && global.require ? global.require : require;<EOL>     let requirePath;<EOL>    let pluginConstructor;<EOL>    let es6Adaptor;<EOL>    if (plugin.path != null) {<EOL>        requirePath =  fileUtils.lookupLibRequirePath(plugin.path);<EOL>        es6Adaptor = req(requirePath);<EOL>        pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;<EOL>    }<EOL>    else if (plugin.name != null &&","gt":"type) {"}
{"input":"<s> <EOL>function resolvePluginClass(plugin, type) {<EOL>    if (customPlugins.has(plugin.name)) {<EOL>        return customPlugins.get(plugin.name);<EOL>    }<EOL>    // nexe needs *global.require* for __dynamic__ modules<EOL>    // but browserify and proxyquire can't handle *global.require*<EOL>    const req = global && global.require ? global.require : require;<EOL>     let requirePath;<EOL>    let pluginConstructor;<EOL>    let es6Adaptor;<EOL>    if (plugin.path != null) {<EOL>        requirePath =  fileUtils.lookupLibRequirePath(plugin.path);<EOL>        es6Adaptor = req(requirePath);<EOL>        pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;<EOL>    }<EOL>    else if (plugin.name != null &&  type) {<EOL>        requirePath = `<STR_LIT>`;<EOL>        requirePath = fileUtils.lookupLibRequirePath(requirePath);<EOL>        es6Adaptor = req(requirePath);<EOL>","gt":"pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;"}
{"input":"<s> <EOL>function resolvePluginClass(plugin, type) {<EOL>    if (customPlugins.has(plugin.name)) {<EOL>        return customPlugins.get(plugin.name);<EOL>    }<EOL>    // nexe needs *global.require* for __dynamic__ modules<EOL>    // but browserify and proxyquire can't handle *global.require*<EOL>    const req = global && global.require ? global.require : require;<EOL>     let requirePath;<EOL>    let pluginConstructor;<EOL>    let es6Adaptor;<EOL>    if (plugin.path != null) {<EOL>        requirePath =  fileUtils.lookupLibRequirePath(plugin.path);<EOL>        es6Adaptor = req(requirePath);<EOL>        pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;<EOL>    }<EOL>    else if (plugin.name != null &&  type) {<EOL>        requirePath = `<STR_LIT>`;<EOL>        requirePath = fileUtils.lookupLibRequirePath(requirePath);<EOL>        es6Adaptor = req(requirePath);<EOL>         pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;<EOL>    }<EOL>    else if (plugin.name != null) {<EOL>        requirePath = fileUtils.lookupLibRequirePath(plugin.name);<EOL>        es6Adaptor = req(requirePath);<EOL>        pluginConstructor = es6Adaptor.default ? es6Adaptor.default : es6Adaptor;<EOL>    }<EOL>    else if (plugin.type === '<STR_LIT>' && type === '<STR_LIT>') {<EOL>","gt":"pluginConstructor = DefaultCache;"}
{"input":"<s> function getIndexStatus(status) {<EOL>    switch (status[<NUM_LIT>]) {<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Added;<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> function getIndexStatus(status) {<EOL>    switch (status[<NUM_LIT>]) {<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Added;<EOL>         case '<STR_LIT>':<EOL>            return IndexStatus.Copied;<EOL>        case '<STR_LIT>':<EOL>","gt":"return IndexStatus.Deleted;"}
{"input":"<s> function getIndexStatus(status) {<EOL>    switch (status[<NUM_LIT>]) {<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Added;<EOL>         case '<STR_LIT>':<EOL>            return IndexStatus.Copied;<EOL>        case '<STR_LIT>':<EOL>             return IndexStatus.Deleted;<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Modified;<EOL>        case '<STR_LIT>':<EOL>","gt":"return IndexStatus.Renamed;"}
{"input":"<s> function getIndexStatus(status) {<EOL>    switch (status[<NUM_LIT>]) {<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Added;<EOL>         case '<STR_LIT>':<EOL>            return IndexStatus.Copied;<EOL>        case '<STR_LIT>':<EOL>             return IndexStatus.Deleted;<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Modified;<EOL>        case '<STR_LIT>':<EOL>             return IndexStatus.Renamed;<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.TypeChanged;<EOL>        case '<STR_LIT>':<EOL>            return IndexStatus.Unmerged;<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> <EOL>function getPCSSRules(str) {<EOL>    const pRuleRegex = /p\\s*{([^}]*)}/gi;<EOL>    const rule =","gt":"pRuleRegex.exec(str);"}
{"input":"<s> function toWallClockTime(position, manifest) {<EOL>    return new","gt":"Date((position + (manifest.availabilityStartTime || <NUM_LIT>)) * <NUM_LIT>);"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const","gt":"ERROR_TYPES = {"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const  ERROR_TYPES = {<EOL>        NONE: <NUM_LIT>,<EOL>        REGULAR: <NUM_LIT>,<EOL>        OFFLINE:","gt":"<NUM_LIT>,"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const  ERROR_TYPES = {<EOL>        NONE: <NUM_LIT>,<EOL>        REGULAR: <NUM_LIT>,<EOL>        OFFLINE:  <NUM_LIT>,<EOL>    };<EOL>    let lastError = ERROR_TYPES.NONE;<EOL>    return obs$.catch((error, source) => {<EOL>        if (!shouldRetry(","gt":"error)) {"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const  ERROR_TYPES = {<EOL>        NONE: <NUM_LIT>,<EOL>        REGULAR: <NUM_LIT>,<EOL>        OFFLINE:  <NUM_LIT>,<EOL>    };<EOL>    let lastError = ERROR_TYPES.NONE;<EOL>    return obs$.catch((error, source) => {<EOL>        if (!shouldRetry( error)) {<EOL>            throw error;<EOL>        }<EOL>        const currentError = error instanceof","gt":"RequestError &&"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const  ERROR_TYPES = {<EOL>        NONE: <NUM_LIT>,<EOL>        REGULAR: <NUM_LIT>,<EOL>        OFFLINE:  <NUM_LIT>,<EOL>    };<EOL>    let lastError = ERROR_TYPES.NONE;<EOL>    return obs$.catch((error, source) => {<EOL>        if (!shouldRetry( error)) {<EOL>            throw error;<EOL>        }<EOL>        const currentError = error instanceof  RequestError &&<EOL>            isOfflineRequestError(error) ? ERROR_TYPES.OFFLINE : ERROR_TYPES.REGULAR;<EOL>        const maxRetry = currentError === ERROR_TYPES.OFFLINE ?<EOL>            maxRetryOffline :","gt":"maxRetryRegular;"}
{"input":"<s> <EOL>function downloadingBackoff(obs$, options) {<EOL>    const { baseDelay, maxDelay, maxRetryRegular, maxRetryOffline, onRetry, } = options;<EOL>    let retryCount = <NUM_LIT>;<EOL>    const  ERROR_TYPES = {<EOL>        NONE: <NUM_LIT>,<EOL>        REGULAR: <NUM_LIT>,<EOL>        OFFLINE:  <NUM_LIT>,<EOL>    };<EOL>    let lastError = ERROR_TYPES.NONE;<EOL>    return obs$.catch((error, source) => {<EOL>        if (!shouldRetry( error)) {<EOL>            throw error;<EOL>        }<EOL>        const currentError = error instanceof  RequestError &&<EOL>            isOfflineRequestError(error) ? ERROR_TYPES.OFFLINE : ERROR_TYPES.REGULAR;<EOL>        const maxRetry = currentError === ERROR_TYPES.OFFLINE ?<EOL>            maxRetryOffline :  maxRetryRegular;<EOL>        if (currentError !== lastError) {<EOL>            retryCount = <NUM_LIT>;<EOL>            lastError = currentError;<EOL>        }<EOL>        if (++retryCount > maxRetry) {<EOL>            throw error;<EOL>        }<EOL>","gt":"if (onRetry) {"}
{"input":"<s> <EOL>export async function installLFSHooks(repository, force) {<EOL>    const args = ['<STR_LIT>', '<STR_LIT>'];<EOL>","gt":"if (force) {"}
{"input":"<s> <EOL>export function getHTMLURL(endpoint) {<EOL>    // In the case of GitHub.com, the HTML site lives on the parent domain.<EOL>    //  E.g., https://api.github.com -> https://github.com<EOL>    //<EOL>    // Whereas with Enterprise, it lives on the same domain but without the<EOL>    // API path:<EOL>    //  E.g., https://github.mycompany.com/api/v3 -> https://github.mycompany.com<EOL>    //<EOL>    // We need to normalize them.<EOL>","gt":"if (endpoint === getDotComAPIEndpoint()) {"}
{"input":"<s> <EOL>export function getHTMLURL(endpoint) {<EOL>    // In the case of GitHub.com, the HTML site lives on the parent domain.<EOL>    //  E.g., https://api.github.com -> https://github.com<EOL>    //<EOL>    // Whereas with Enterprise, it lives on the same domain but without the<EOL>    // API path:<EOL>    //  E.g., https://github.mycompany.com/api/v3 -> https://github.mycompany.com<EOL>    //<EOL>    // We need to normalize them.<EOL>     if (endpoint === getDotComAPIEndpoint()) {<EOL>        return '<STR_LIT>';<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>function removeCuesInfosBetween(cuesInfos, start, end) {<EOL>    const cuesInfos1 = {<EOL>        start: cuesInfos.start,<EOL>        end: start,<EOL>        cues: getCuesBefore(cuesInfos.","gt":"cues, start),"}
{"input":"<s> <EOL>function removeCuesInfosBetween(cuesInfos, start, end) {<EOL>    const cuesInfos1 = {<EOL>        start: cuesInfos.start,<EOL>        end: start,<EOL>        cues: getCuesBefore(cuesInfos. cues, start),<EOL>    };<EOL>    const cuesInfos2 = {<EOL>        start: end,<EOL>        end: cuesInfos.end,<EOL>        cues: getCuesAfter(","gt":"cuesInfos.cues, end),"}
{"input":"<s> export function getTextForError(newText, pos, length = <NUM_LIT>) {<EOL>    const startPos = Math.max(<NUM_LIT>, newText.lastIndexOf(\"<STR_LIT>\", pos) - <NUM_LIT>);<EOL>    let endPos = Math.min(newText.length, newText.indexOf(\"<STR_LIT>\", pos + length));<EOL>    endPos = endPos === -<NUM_LIT> ? newText.length : Math.min(newText.length, endPos + <NUM_LIT>);<EOL>    let text =","gt":"\"<STR_LIT>\";"}
{"input":"<s> export function getTextForError(newText, pos, length = <NUM_LIT>) {<EOL>    const startPos = Math.max(<NUM_LIT>, newText.lastIndexOf(\"<STR_LIT>\", pos) - <NUM_LIT>);<EOL>    let endPos = Math.min(newText.length, newText.indexOf(\"<STR_LIT>\", pos + length));<EOL>    endPos = endPos === -<NUM_LIT> ? newText.length : Math.min(newText.length, endPos + <NUM_LIT>);<EOL>    let text =  \"<STR_LIT>\";<EOL>    text += newText.substring(startPos, endPos);<EOL>    if (startPos !== <NUM_LIT>)<EOL>        text = \"<STR_LIT>\" + text;<EOL>    if (endPos !== newText.","gt":"length)"}
{"input":"<s> <EOL>function refreshManifest(manifestPipeline, currentManifest) {<EOL>    const refreshURL = currentManifest.getUrl();<EOL>    if (!refreshURL) {<EOL>        log.warn(\"<STR_LIT>\");<EOL>        return","gt":"Observable.empty();"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(sketchPath, repository, kactusFiles, file, previousCommitish) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(sketchPath, repository, kactusFiles, file, previousCommitish) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(sketchPath, repository, kactusFiles, file, previousCommitish) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(sketchPath, repository, kactusFiles, file, previousCommitish) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else {<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    const { output, error } =","gt":"await spawnAndComplete(args, repository.path, '<STR_LIT>', successExitCodes);"}
{"input":"<s> export function getClausedNodeChildFormatting(parent, member) {<EOL>","gt":"return FormattingKind.Newline;"}
{"input":"<s> function getExpression(text) {<EOL>    return","gt":"getInfoFromTextWithDescendant(text, SyntaxKind.TaggedTemplateExpression).descendant;"}
{"input":"<s> export async function createCommit(repository, kactusFiles, message, files) {<EOL>    // Clear the staging area, our diffs reflect the difference between the<EOL>    // working directory and the last commit (if any) so our commits should<EOL>    // do the same thing.<EOL>    await unstageAll(repository);<EOL>    await stageFiles(repository, kactusFiles, files);<EOL>","gt":"try {"}
{"input":"<s> export async function createCommit(repository, kactusFiles, message, files) {<EOL>    // Clear the staging area, our diffs reflect the difference between the<EOL>    // working directory and the last commit (if any) so our commits should<EOL>    // do the same thing.<EOL>    await unstageAll(repository);<EOL>    await stageFiles(repository, kactusFiles, files);<EOL>     try {<EOL>        await git(['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], repository.path, '<STR_LIT>', {<EOL>            stdin: message,<EOL>        });<EOL>        return true;<EOL>    }<EOL>    catch (","gt":"e) {"}
{"input":"<s> export async function createCommit(repository, kactusFiles, message, files) {<EOL>    // Clear the staging area, our diffs reflect the difference between the<EOL>    // working directory and the last commit (if any) so our commits should<EOL>    // do the same thing.<EOL>    await unstageAll(repository);<EOL>    await stageFiles(repository, kactusFiles, files);<EOL>     try {<EOL>        await git(['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], repository.path, '<STR_LIT>', {<EOL>            stdin: message,<EOL>        });<EOL>        return true;<EOL>    }<EOL>    catch ( e) {<EOL>        // Commit failures could come from a pre-commit hook rejection. So display<EOL>        // a bit more context than we otherwise would.<EOL>        if (e instanceof GitError) {<EOL>","gt":"const output = e.result.stderr.trim();"}
{"input":"<s> export async function createCommit(repository, kactusFiles, message, files) {<EOL>    // Clear the staging area, our diffs reflect the difference between the<EOL>    // working directory and the last commit (if any) so our commits should<EOL>    // do the same thing.<EOL>    await unstageAll(repository);<EOL>    await stageFiles(repository, kactusFiles, files);<EOL>     try {<EOL>        await git(['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'], repository.path, '<STR_LIT>', {<EOL>            stdin: message,<EOL>        });<EOL>        return true;<EOL>    }<EOL>    catch ( e) {<EOL>        // Commit failures could come from a pre-commit hook rejection. So display<EOL>        // a bit more context than we otherwise would.<EOL>        if (e instanceof GitError) {<EOL>             const output = e.result.stderr.trim();<EOL>            let standardError = '<STR_LIT>';<EOL>            if (output.length > <NUM_LIT>) {<EOL>                standardError = `<STR_LIT>`;<EOL>            }<EOL>            const exitCode = e.result.","gt":"exitCode;"}
{"input":"<s> export function fromAmbientableNode(node) {<EOL>","gt":"return {"}
{"input":"<s> export function match(query, items, getKey) {<EOL>    // matching `query` against itself is a perfect match.<EOL>    const maxScore = score(query, query, <NUM_LIT>);<EOL>    const result = items<EOL>        .map((item) => {<EOL>        const key = typeof getKey ===","gt":"'<STR_LIT>'"}
{"input":"<s> export function match(query, items, getKey) {<EOL>    // matching `query` against itself is a perfect match.<EOL>    const maxScore = score(query, query, <NUM_LIT>);<EOL>    const result = items<EOL>        .map((item) => {<EOL>        const key = typeof getKey ===  '<STR_LIT>'<EOL>            ? getKey(item)<EOL>            : String(item[getKey]);<EOL>        return {<EOL>            score: score(key,","gt":"query, maxScore),"}
{"input":"<s> export function generateGraph(nodeCount) {<EOL>    const nodes = [];<EOL>    const links = [];<EOL>    for (let i = <NUM_LIT>; i < nodeCount; i++) {<EOL>        const country = countries[Math.floor(Math.random() * countries.length)];<EOL>        nodes.push({<EOL>            id:","gt":"id(),"}
{"input":"<s> export function generateGraph(nodeCount) {<EOL>    const nodes = [];<EOL>    const links = [];<EOL>    for (let i = <NUM_LIT>; i < nodeCount; i++) {<EOL>        const country = countries[Math.floor(Math.random() * countries.length)];<EOL>        nodes.push({<EOL>            id:  id(),<EOL>            value: country,<EOL>        });<EOL>        for (let j = <NUM_LIT>; j < nodes.length - <NUM_LIT>; j++) {<EOL>            if (","gt":"Math.random() < <NUM_LIT>) {"}
{"input":"<s> <EOL>export function writeFile(path, data, options = {}) {<EOL>    return new Promise((resolve, reject) => {<EOL>        Fs.writeFile(path, data, options, err => {<EOL>            if (err) {<EOL>","gt":"reject(err);"}
{"input":"<s> <EOL>export function tailByLine(path, cb) {<EOL>    const tailer = new Tailer(path);<EOL>    const disposable = tailer.onDataAvailable(stream => {<EOL>        byline(stream).on('<STR_LIT>', (buffer) => {<EOL>            if (disposable.disposed) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>export function tailByLine(path, cb) {<EOL>    const tailer = new Tailer(path);<EOL>    const disposable = tailer.onDataAvailable(stream => {<EOL>        byline(stream).on('<STR_LIT>', (buffer) => {<EOL>            if (disposable.disposed) {<EOL>                 return;<EOL>            }<EOL>            const line = buffer.toString();<EOL>            cb(line);<EOL>        });<EOL>    });<EOL>    tailer.start();<EOL>","gt":"return new Disposable(() => {"}
{"input":"<s> <EOL>function addTextTrack(video, hidden) {<EOL>    let track;<EOL>    let trackElement;<EOL>    const kind = \"<STR_LIT>\";<EOL>    if (isIE) {<EOL>        const tracksLength = video.textTracks.length;<EOL>        track = tracksLength >","gt":"<NUM_LIT> ?"}
{"input":"<s> <EOL>function addTextTrack(video, hidden) {<EOL>    let track;<EOL>    let trackElement;<EOL>    const kind = \"<STR_LIT>\";<EOL>    if (isIE) {<EOL>        const tracksLength = video.textTracks.length;<EOL>        track = tracksLength >  <NUM_LIT> ?<EOL>            video.textTracks[tracksLength - <NUM_LIT>] : video.addTextTrack(kind);<EOL>        track.mode = hidden ? track.HIDDEN : track.SHOWING;<EOL>    }<EOL>    else {<EOL>        // there is no removeTextTrack method... so we need to reuse old<EOL>        // text-tracks objects and clean all its pending cues<EOL>        trackElement = document.createElement(\"<STR_LIT>\");<EOL>        video.appendChild(trackElement);<EOL>        track =","gt":"trackElement.track;"}
{"input":"<s> function _decorate(decorators, target) {<EOL>","gt":"Reflect.decorate(decorators, target);"}
{"input":"<s> function targetName(name) {<EOL>    return function (target, targetKey, index) {<EOL>","gt":"const metadata = new Metadata(METADATA_KEY.NAME_TAG, name);"}
{"input":"<s> <EOL>function moovChildren(mvhd, mvex, trak, pssList) {<EOL>    const moov = [mvhd, mvex, trak];<EOL>","gt":"pssList.forEach((pss) => {"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>","gt":"switch (attribute.name) {"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute.","gt":"value;"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =","gt":"attribute.value;"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =  attribute.value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.type = attribute.value;<EOL>                break;<EOL>            case","gt":"\"<STR_LIT>\":"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =  attribute.value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.type = attribute.value;<EOL>                break;<EOL>            case  \"<STR_LIT>\":<EOL>","gt":"res.availabilityStartTime = +parseDateTime(attribute.value);"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =  attribute.value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.type = attribute.value;<EOL>                break;<EOL>            case  \"<STR_LIT>\":<EOL>                 res.availabilityStartTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.availabilityEndTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.publishTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.duration = parseDuration(attribute.","gt":"value);"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =  attribute.value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.type = attribute.value;<EOL>                break;<EOL>            case  \"<STR_LIT>\":<EOL>                 res.availabilityStartTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.availabilityEndTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.publishTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.duration = parseDuration(attribute. value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.minimumUpdatePeriod = parseDuration(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.minBufferTime = parseDuration(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.timeShiftBufferDepth = parseDuration(attribute.value);<EOL>","gt":"break;"}
{"input":"<s> <EOL>function parseMPDAttributes(root) {<EOL>    const res = {};<EOL>    for (let i = <NUM_LIT>; i < root.attributes.length; i++) {<EOL>        const attribute = root.attributes[i];<EOL>         switch (attribute.name) {<EOL>            case \"<STR_LIT>\":<EOL>                res.id = attribute. value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.profiles =  attribute.value;<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.type = attribute.value;<EOL>                break;<EOL>            case  \"<STR_LIT>\":<EOL>                 res.availabilityStartTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.availabilityEndTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.publishTime = +parseDateTime(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.duration = parseDuration(attribute. value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.minimumUpdatePeriod = parseDuration(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.minBufferTime = parseDuration(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.timeShiftBufferDepth = parseDuration(attribute.value);<EOL>                 break;<EOL>            case \"<STR_LIT>\":<EOL>                res.suggestedPresentationDelay = parseDuration(attribute.value);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                res.maxSegmentDuration =","gt":"parseDuration(attribute.value);"}
{"input":"<s> function compareChangeType(c1, c2) {<EOL>    const order = (change) => {<EOL>        switch (change) {<EOL>            case ChangeType.Added:<EOL>                return <NUM_LIT>;<EOL>            case ChangeType.Modified:<EOL>","gt":"return <NUM_LIT>;"}
{"input":"<s> function compareChangeType(c1, c2) {<EOL>    const order = (change) => {<EOL>        switch (change) {<EOL>            case ChangeType.Added:<EOL>                return <NUM_LIT>;<EOL>            case ChangeType.Modified:<EOL>                 return <NUM_LIT>;<EOL>            case ChangeType.Metadata:<EOL>                // A metadata change is converted to a modified change at the public<EOL>                // api layer.  Since we sort by document key and then change type,<EOL>                // metadata and modified changes must be sorted equivalently.<EOL>                return <NUM_LIT>;<EOL>            case ChangeType.Removed:<EOL>                return <NUM_LIT>;<EOL>","gt":"default:"}
{"input":"<s> <EOL>export async function getCommit(repository, ref) {<EOL>    const commits = await getCommits(repository, ref, <NUM_LIT>);<EOL>","gt":"if (commits.length < <NUM_LIT>) {"}
{"input":"<s> export function isFunction(p) {<EOL>    return typeof p ===","gt":"'<STR_LIT>';"}
{"input":"<s> function getInWelcomeFlowBuilder(inWelcomeFlow) {<EOL>    const welcomeScopedIds = [<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> function getInWelcomeFlowBuilder(inWelcomeFlow) {<EOL>    const welcomeScopedIds = [<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>         '<STR_LIT>',<EOL>    ];<EOL>    const menuStateBuilder = new MenuStateBuilder();<EOL>    if (inWelcomeFlow) {<EOL>        for (const id of welcomeScopedIds) {<EOL>            menuStateBuilder.disable(","gt":"id);"}
{"input":"<s> function getInWelcomeFlowBuilder(inWelcomeFlow) {<EOL>    const welcomeScopedIds = [<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>         '<STR_LIT>',<EOL>    ];<EOL>    const menuStateBuilder = new MenuStateBuilder();<EOL>    if (inWelcomeFlow) {<EOL>        for (const id of welcomeScopedIds) {<EOL>            menuStateBuilder.disable( id);<EOL>        }<EOL>    }<EOL>    else {<EOL>        for (const","gt":"id of welcomeScopedIds) {"}
{"input":"<s> export function generateGraph(nodeCount) {<EOL>    const nodes = [];<EOL>    const links = [];<EOL>    for (let i = <NUM_LIT>; i < nodeCount; i++) {<EOL>        const country = countries[Math.floor(Math.random() * countries.length)];<EOL>        nodes.push({<EOL>            value: country.","gt":"name,"}
{"input":"<s> export function generateGraph(nodeCount) {<EOL>    const nodes = [];<EOL>    const links = [];<EOL>    for (let i = <NUM_LIT>; i < nodeCount; i++) {<EOL>        const country = countries[Math.floor(Math.random() * countries.length)];<EOL>        nodes.push({<EOL>            value: country. name,<EOL>        });<EOL>        for (let j = <NUM_LIT>; j < nodes.length - <NUM_LIT>; j++) {<EOL>            if (Math.random() < <NUM_LIT>) {<EOL>                links.","gt":"push({"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const","gt":"parsedTickRate = tt.getAttribute(\"<STR_LIT>\");"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>","gt":"const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>     const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");<EOL>    if (parsedSpaceStyle && parsedSpaceStyle !== \"<STR_LIT>\" &&<EOL>","gt":"parsedSpaceStyle !== \"<STR_LIT>\") {"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>     const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");<EOL>    if (parsedSpaceStyle && parsedSpaceStyle !== \"<STR_LIT>\" &&<EOL>         parsedSpaceStyle !== \"<STR_LIT>\") {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    const nbFrameRate = Number(parsedFrameRate) || <NUM_LIT>;<EOL>","gt":"const nbSubFrameRate = Number(parsedSubFrameRate) || <NUM_LIT>;"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>     const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");<EOL>    if (parsedSpaceStyle && parsedSpaceStyle !== \"<STR_LIT>\" &&<EOL>         parsedSpaceStyle !== \"<STR_LIT>\") {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    const nbFrameRate = Number(parsedFrameRate) || <NUM_LIT>;<EOL>     const nbSubFrameRate = Number(parsedSubFrameRate) || <NUM_LIT>;<EOL>    const nbTickRate = Number(parsedTickRate) || <NUM_LIT>;<EOL>    let tickRate = nbTickRate;<EOL>    let frameRate = nbFrameRate;<EOL>    const subFrameRate = nbSubFrameRate != null ?","gt":"nbSubFrameRate : <NUM_LIT>;"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>     const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");<EOL>    if (parsedSpaceStyle && parsedSpaceStyle !== \"<STR_LIT>\" &&<EOL>         parsedSpaceStyle !== \"<STR_LIT>\") {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    const nbFrameRate = Number(parsedFrameRate) || <NUM_LIT>;<EOL>     const nbSubFrameRate = Number(parsedSubFrameRate) || <NUM_LIT>;<EOL>    const nbTickRate = Number(parsedTickRate) || <NUM_LIT>;<EOL>    let tickRate = nbTickRate;<EOL>    let frameRate = nbFrameRate;<EOL>    const subFrameRate = nbSubFrameRate != null ?  nbSubFrameRate : <NUM_LIT>;<EOL>    // TypeScript too dumdum here :/<EOL>    const spaceStyle = (parsedSpaceStyle || \"<STR_LIT>\");<EOL>    if (nbTickRate === <NUM_LIT>) {<EOL>        tickRate =","gt":"parsedFrameRate ? nbFrameRate * nbSubFrameRate : <NUM_LIT>;"}
{"input":"<s> <EOL>export default function getParameters(tt) {<EOL>    const parsedFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedSubFrameRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const  parsedTickRate = tt.getAttribute(\"<STR_LIT>\");<EOL>    const parsedFrameRateMultiplier = tt.getAttribute(\"<STR_LIT>\");<EOL>     const parsedSpaceStyle = tt.getAttribute(\"<STR_LIT>\");<EOL>    if (parsedSpaceStyle && parsedSpaceStyle !== \"<STR_LIT>\" &&<EOL>         parsedSpaceStyle !== \"<STR_LIT>\") {<EOL>        throw new Error(\"<STR_LIT>\");<EOL>    }<EOL>    const nbFrameRate = Number(parsedFrameRate) || <NUM_LIT>;<EOL>     const nbSubFrameRate = Number(parsedSubFrameRate) || <NUM_LIT>;<EOL>    const nbTickRate = Number(parsedTickRate) || <NUM_LIT>;<EOL>    let tickRate = nbTickRate;<EOL>    let frameRate = nbFrameRate;<EOL>    const subFrameRate = nbSubFrameRate != null ?  nbSubFrameRate : <NUM_LIT>;<EOL>    // TypeScript too dumdum here :/<EOL>    const spaceStyle = (parsedSpaceStyle || \"<STR_LIT>\");<EOL>    if (nbTickRate === <NUM_LIT>) {<EOL>        tickRate =  parsedFrameRate ? nbFrameRate * nbSubFrameRate : <NUM_LIT>;<EOL>    }<EOL>    if (parsedFrameRateMultiplier) {<EOL>        const multiplierResults = /^(\\d+) (\\d+)$/g.exec(parsedFrameRateMultiplier);<EOL>        if (multiplierResults) {<EOL>            const numerator = Number(multiplierResults[<NUM_LIT>]);<EOL>            const denominator = Number(multiplierResults[<NUM_LIT>]);<EOL>            const multiplierNum = numerator /","gt":"denominator;"}
{"input":"<s> <EOL>function getTimelineRangeEnd({ ts, d, r }) {<EOL>    return (d == null ||","gt":"d === -<NUM_LIT>) ? ts : ts + (r + <NUM_LIT>) * d;"}
{"input":"<s> function verify(payload, done) {<EOL>    const id =","gt":"payload.sub;"}
{"input":"<s> export function mockCreateToken(token = { access_token: '<STR_LIT>', expires_in: <NUM_LIT> }) {<EOL>","gt":"let mock = nock('<STR_LIT>').post('<STR_LIT>');"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const","gt":"currentNode = adaptationSetChildren[i];"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const  currentNode = adaptationSetChildren[i];<EOL>        switch (currentNode.nodeName) {<EOL>            case \"<STR_LIT>\":<EOL>                children.accessibility = parseScheme(","gt":"currentNode);"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const  currentNode = adaptationSetChildren[i];<EOL>        switch (currentNode.nodeName) {<EOL>            case \"<STR_LIT>\":<EOL>                children.accessibility = parseScheme( currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.baseURL = currentNode.textContent || \"<STR_LIT>\";<EOL>                break;<EOL>","gt":"case \"<STR_LIT>\":"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const  currentNode = adaptationSetChildren[i];<EOL>        switch (currentNode.nodeName) {<EOL>            case \"<STR_LIT>\":<EOL>                children.accessibility = parseScheme( currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.baseURL = currentNode.textContent || \"<STR_LIT>\";<EOL>                break;<EOL>             case \"<STR_LIT>\":<EOL>                children.contentComponent = parseContentComponent(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                const representation = createRepresentationIntermediateRepresentation(currentNode);<EOL>                children.representations.push(","gt":"representation);"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const  currentNode = adaptationSetChildren[i];<EOL>        switch (currentNode.nodeName) {<EOL>            case \"<STR_LIT>\":<EOL>                children.accessibility = parseScheme( currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.baseURL = currentNode.textContent || \"<STR_LIT>\";<EOL>                break;<EOL>             case \"<STR_LIT>\":<EOL>                children.contentComponent = parseContentComponent(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                const representation = createRepresentationIntermediateRepresentation(currentNode);<EOL>                children.representations.push( representation);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.role = parseScheme(currentNode);<EOL>                break;<EOL>","gt":"case \"<STR_LIT>\":"}
{"input":"<s> function parseAdaptationSetChildren(adaptationSetChildren) {<EOL>    const children = {<EOL>        baseURL: \"<STR_LIT>\",<EOL>        representations: [],<EOL>    };<EOL>    for (let i = <NUM_LIT>; i < adaptationSetChildren.length; i++) {<EOL>        const  currentNode = adaptationSetChildren[i];<EOL>        switch (currentNode.nodeName) {<EOL>            case \"<STR_LIT>\":<EOL>                children.accessibility = parseScheme( currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.baseURL = currentNode.textContent || \"<STR_LIT>\";<EOL>                break;<EOL>             case \"<STR_LIT>\":<EOL>                children.contentComponent = parseContentComponent(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                const representation = createRepresentationIntermediateRepresentation(currentNode);<EOL>                children.representations.push( representation);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.role = parseScheme(currentNode);<EOL>                break;<EOL>             case \"<STR_LIT>\":<EOL>                children.segmentBase = parseSegmentBase(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.segmentList = parseSegmentList(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>                children.segmentTemplate = parseSegmentTemplate(currentNode);<EOL>                break;<EOL>            case \"<STR_LIT>\":<EOL>","gt":"children.contentProtection = parseContentProtection(currentNode);"}
{"input":"<s> <EOL>function generateCSSTextOutline(color, thickness) {<EOL>    return `<STR_LIT>` +<EOL>","gt":"} ${color},`<STR_LIT>+"}
{"input":"<s> function activePeriodChanged(period) {<EOL>    return {<EOL>        type:","gt":"\"<STR_LIT>\","}
{"input":"<s> export function selectRows(selected, row, comparefn) {<EOL>    const selectedIndex = comparefn(row, selected);<EOL>    if (selectedIndex > -<NUM_LIT>) {<EOL>","gt":"selected.splice(selectedIndex, <NUM_LIT>);"}
{"input":"<s> function warning(value) {<EOL>    return {<EOL>","gt":"type: \"<STR_LIT>\","}
{"input":"<s> function getOverloadsAndImplementation(node) {<EOL>    const parentSyntaxList = node.getParentSyntaxListOrThrow();<EOL>    const name = getNameIfNamedNode(node);<EOL>    const kind =","gt":"node.getKind();"}
{"input":"<s> function setItem(key, login, value) {<EOL>    return keytar.setPassword(","gt":"key, login, value);"}
{"input":"<s> <EOL>export function columnsByPin(cols) {<EOL>    const ret = {<EOL>        left: [],<EOL>        center: [],<EOL>","gt":"right: []"}
{"input":"<s> <EOL>export function columnsByPin(cols) {<EOL>    const ret = {<EOL>        left: [],<EOL>        center: [],<EOL>         right: []<EOL>    };<EOL>    if (cols) {<EOL>        for (const col of cols) {<EOL>            if (col.frozenLeft) {<EOL>                ret.left.","gt":"push(col);"}
{"input":"<s> <EOL>export function columnsByPin(cols) {<EOL>    const ret = {<EOL>        left: [],<EOL>        center: [],<EOL>         right: []<EOL>    };<EOL>    if (cols) {<EOL>        for (const col of cols) {<EOL>            if (col.frozenLeft) {<EOL>                ret.left. push(col);<EOL>            }<EOL>            else if (col.frozenRight) {<EOL>                ret.right.push(col);<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> <EOL>function endMutation(map) {<EOL>    map._editable = map._editable && map.","gt":"_editable - <NUM_LIT>;"}
{"input":"<s> <EOL>export default function pullable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPullable(proto)) {<EOL>        return;<EOL>    }<EOL>    assert(","gt":"'<STR_LIT>', proto instanceof Source);"}
{"input":"<s> <EOL>export default function pullable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPullable(proto)) {<EOL>        return;<EOL>    }<EOL>    assert( '<STR_LIT>', proto instanceof Source);<EOL>    proto[PULLABLE] = true;<EOL>    proto.pull = function (queryOrExpression, options, id) {<EOL>        const query = buildQuery(queryOrExpression, options, id, this.","gt":"queryBuilder);"}
{"input":"<s> <EOL>export default function pullable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPullable(proto)) {<EOL>        return;<EOL>    }<EOL>    assert( '<STR_LIT>', proto instanceof Source);<EOL>    proto[PULLABLE] = true;<EOL>    proto.pull = function (queryOrExpression, options, id) {<EOL>        const query = buildQuery(queryOrExpression, options, id, this. queryBuilder);<EOL>        return this._enqueueRequest('<STR_LIT>', query);<EOL>    };<EOL>    proto.__pull__ = function (query) {<EOL>        return fulfillInSeries(this, '<STR_LIT>', query)<EOL>            .then(() =>","gt":"this._pull(query))"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>","gt":"return;"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>         return;<EOL>    }<EOL>    assert('<STR_LIT>', proto instanceof Source);<EOL>    proto[PUSHABLE] = true;<EOL>","gt":"proto.push = function (transformOrOperations, options, id) {"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>         return;<EOL>    }<EOL>    assert('<STR_LIT>', proto instanceof Source);<EOL>    proto[PUSHABLE] = true;<EOL>     proto.push = function (transformOrOperations, options, id) {<EOL>        const transform = buildTransform(transformOrOperations, options, id, this.transformBuilder);<EOL>        if (this.transformLog.contains(transform.id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return this._enqueueRequest(","gt":"'<STR_LIT>', transform);"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>         return;<EOL>    }<EOL>    assert('<STR_LIT>', proto instanceof Source);<EOL>    proto[PUSHABLE] = true;<EOL>     proto.push = function (transformOrOperations, options, id) {<EOL>        const transform = buildTransform(transformOrOperations, options, id, this.transformBuilder);<EOL>        if (this.transformLog.contains(transform.id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return this._enqueueRequest( '<STR_LIT>', transform);<EOL>    };<EOL>    proto.__push__ = function (transform) {<EOL>        if (this.transformLog.contains(transform.","gt":"id)) {"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>         return;<EOL>    }<EOL>    assert('<STR_LIT>', proto instanceof Source);<EOL>    proto[PUSHABLE] = true;<EOL>     proto.push = function (transformOrOperations, options, id) {<EOL>        const transform = buildTransform(transformOrOperations, options, id, this.transformBuilder);<EOL>        if (this.transformLog.contains(transform.id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return this._enqueueRequest( '<STR_LIT>', transform);<EOL>    };<EOL>    proto.__push__ = function (transform) {<EOL>        if (this.transformLog.contains(transform. id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return fulfillInSeries(this, '<STR_LIT>', transform)<EOL>            .then(() => {<EOL>","gt":"if (this.transformLog.contains(transform.id)) {"}
{"input":"<s> <EOL>export default function pushable(Klass) {<EOL>    let proto = Klass.prototype;<EOL>    if (isPushable(proto)) {<EOL>         return;<EOL>    }<EOL>    assert('<STR_LIT>', proto instanceof Source);<EOL>    proto[PUSHABLE] = true;<EOL>     proto.push = function (transformOrOperations, options, id) {<EOL>        const transform = buildTransform(transformOrOperations, options, id, this.transformBuilder);<EOL>        if (this.transformLog.contains(transform.id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return this._enqueueRequest( '<STR_LIT>', transform);<EOL>    };<EOL>    proto.__push__ = function (transform) {<EOL>        if (this.transformLog.contains(transform. id)) {<EOL>            return Orbit.Promise.resolve([]);<EOL>        }<EOL>        return fulfillInSeries(this, '<STR_LIT>', transform)<EOL>            .then(() => {<EOL>             if (this.transformLog.contains(transform.id)) {<EOL>                return Orbit.Promise.resolve([]);<EOL>            }<EOL>            else {<EOL>                return this._push(transform)<EOL>                    .then(result => {<EOL>                    return this._transformed(result)<EOL>                        .then(() => settleInSeries(this, '<STR_LIT>', transform,","gt":"result))"}
{"input":"<s> <EOL>function numericComparator(left, right) {<EOL>    if (left < right) {<EOL>        return -<NUM_LIT>;<EOL>    }<EOL>    else if (left > right) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>    else if (left === right) {<EOL>        return <NUM_LIT>;<EOL>    }<EOL>","gt":"else {"}
{"input":"<s> <EOL>function doInitialSeek(videoElement, startTime) {<EOL>    return hasLoadedMetadata(videoElement)<EOL>        .do(() => {<EOL>        log.info(\"<STR_LIT>\",","gt":"startTime);"}
{"input":"<s> <EOL>function le4toi(bytes, offset) {<EOL>    return ((bytes[offset + <NUM_LIT>]) +<EOL>        (bytes[offset + <NUM_LIT>] *","gt":"<NUM_LIT>) +"}
{"input":"<s> export function trimLabel(s, max = <NUM_LIT>) {<EOL>    if (typeof s !== '<STR_LIT>') {<EOL>        if (typeof s === '<STR_LIT>') {<EOL>            return s + '<STR_LIT>';<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export function trimLabel(s, max = <NUM_LIT>) {<EOL>    if (typeof s !== '<STR_LIT>') {<EOL>        if (typeof s === '<STR_LIT>') {<EOL>            return s + '<STR_LIT>';<EOL>        }<EOL>         else {<EOL>            return '<STR_LIT>';<EOL>        }<EOL>    }<EOL>    s =","gt":"s.trim();"}
{"input":"<s> <EOL>function getInnerAndOuterTimeRanges(timeRanges, time) {<EOL>    let innerRange = null;<EOL>    const outerRanges = [];<EOL>    for (let i = <NUM_LIT>; i < timeRanges.length; i++) {<EOL>        const start =","gt":"timeRanges.start(i);"}
{"input":"<s> <EOL>function getInnerAndOuterTimeRanges(timeRanges, time) {<EOL>    let innerRange = null;<EOL>    const outerRanges = [];<EOL>    for (let i = <NUM_LIT>; i < timeRanges.length; i++) {<EOL>        const start =  timeRanges.start(i);<EOL>        const end = timeRanges.end(i);<EOL>        if (time < start || time >= end) {<EOL>            outerRanges.push({ start, end });<EOL>        }<EOL>        else {<EOL>","gt":"innerRange = { start, end };"}
{"input":"<s> <EOL>function insertInto(ranges, rangeToAddArg) {<EOL>    if (rangeToAddArg.start === rangeToAddArg.end) {<EOL>        return ranges;<EOL>    }<EOL>    let","gt":"rangeToAdd = rangeToAddArg;"}
{"input":"<s> <EOL>function insertInto(ranges, rangeToAddArg) {<EOL>    if (rangeToAddArg.start === rangeToAddArg.end) {<EOL>        return ranges;<EOL>    }<EOL>    let  rangeToAdd = rangeToAddArg;<EOL>    // For each present range check if we need to:<EOL>    // - In case we are overlapping or contiguous:<EOL>    //   - if added range has the same bitrate as the overlapped or<EOL>    //     contiguous one, we can merge themcurrentRange<EOL>    //   - if added range has a different bitrate we need to insert it<EOL>    //     in place<EOL>    // - Need to insert in place, we we are completely, not overlapping<EOL>    //   and not contiguous in between two ranges.<EOL>    let index = <NUM_LIT>;<EOL>    for (; index < ranges.length; index++) {<EOL>        const range =","gt":"ranges[index];"}
{"input":"<s> <EOL>function insertInto(ranges, rangeToAddArg) {<EOL>    if (rangeToAddArg.start === rangeToAddArg.end) {<EOL>        return ranges;<EOL>    }<EOL>    let  rangeToAdd = rangeToAddArg;<EOL>    // For each present range check if we need to:<EOL>    // - In case we are overlapping or contiguous:<EOL>    //   - if added range has the same bitrate as the overlapped or<EOL>    //     contiguous one, we can merge themcurrentRange<EOL>    //   - if added range has a different bitrate we need to insert it<EOL>    //     in place<EOL>    // - Need to insert in place, we we are completely, not overlapping<EOL>    //   and not contiguous in between two ranges.<EOL>    let index = <NUM_LIT>;<EOL>    for (; index < ranges.length; index++) {<EOL>        const range =  ranges[index];<EOL>        const overlapping = areRangesOverlapping(rangeToAdd, range);<EOL>        const contiguous = areRangesNearlyContiguous(rangeToAdd, range);<EOL>        // We assume ranges are ordered and two ranges can not be<EOL>        // completely overlapping.<EOL>        if (overlapping ||","gt":"contiguous) {"}
{"input":"<s> <EOL>function insertInto(ranges, rangeToAddArg) {<EOL>    if (rangeToAddArg.start === rangeToAddArg.end) {<EOL>        return ranges;<EOL>    }<EOL>    let  rangeToAdd = rangeToAddArg;<EOL>    // For each present range check if we need to:<EOL>    // - In case we are overlapping or contiguous:<EOL>    //   - if added range has the same bitrate as the overlapped or<EOL>    //     contiguous one, we can merge themcurrentRange<EOL>    //   - if added range has a different bitrate we need to insert it<EOL>    //     in place<EOL>    // - Need to insert in place, we we are completely, not overlapping<EOL>    //   and not contiguous in between two ranges.<EOL>    let index = <NUM_LIT>;<EOL>    for (; index < ranges.length; index++) {<EOL>        const range =  ranges[index];<EOL>        const overlapping = areRangesOverlapping(rangeToAdd, range);<EOL>        const contiguous = areRangesNearlyContiguous(rangeToAdd, range);<EOL>        // We assume ranges are ordered and two ranges can not be<EOL>        // completely overlapping.<EOL>        if (overlapping ||  contiguous) {<EOL>            rangeToAdd = createRangeUnion(rangeToAdd, range);<EOL>            ranges.splice(index--, <NUM_LIT>);<EOL>        }<EOL>        else {<EOL>            // Check the case for which there is no more to do<EOL>            if (","gt":"index === <NUM_LIT>) {"}
{"input":"<s> <EOL>function insertInto(ranges, rangeToAddArg) {<EOL>    if (rangeToAddArg.start === rangeToAddArg.end) {<EOL>        return ranges;<EOL>    }<EOL>    let  rangeToAdd = rangeToAddArg;<EOL>    // For each present range check if we need to:<EOL>    // - In case we are overlapping or contiguous:<EOL>    //   - if added range has the same bitrate as the overlapped or<EOL>    //     contiguous one, we can merge themcurrentRange<EOL>    //   - if added range has a different bitrate we need to insert it<EOL>    //     in place<EOL>    // - Need to insert in place, we we are completely, not overlapping<EOL>    //   and not contiguous in between two ranges.<EOL>    let index = <NUM_LIT>;<EOL>    for (; index < ranges.length; index++) {<EOL>        const range =  ranges[index];<EOL>        const overlapping = areRangesOverlapping(rangeToAdd, range);<EOL>        const contiguous = areRangesNearlyContiguous(rangeToAdd, range);<EOL>        // We assume ranges are ordered and two ranges can not be<EOL>        // completely overlapping.<EOL>        if (overlapping ||  contiguous) {<EOL>            rangeToAdd = createRangeUnion(rangeToAdd, range);<EOL>            ranges.splice(index--, <NUM_LIT>);<EOL>        }<EOL>        else {<EOL>            // Check the case for which there is no more to do<EOL>            if ( index === <NUM_LIT>) {<EOL>                if (isBefore(rangeToAdd, ranges[<NUM_LIT>])) {<EOL>                    // First index, and we are completely before that range (and<EOL>                    // not contiguous, nor overlapping). We just need to be<EOL>                    // inserted here.<EOL>                    break;<EOL>                }<EOL>            }<EOL>            else {<EOL>                if (isBefore(ranges[index - <NUM_LIT>], rangeToAdd)<EOL>                    && isBefore(rangeToAdd,","gt":"range)) {"}
{"input":"<s> export function removeClausedNodeChildren(nodes) {<EOL>    removeChildrenWithFormatting({<EOL>","gt":"getSiblingFormatting: getClausedNodeChildFormatting,"}
{"input":"<s> function getInfo(text) {<EOL>    return","gt":"getInfoFromTextWithDescendant(text, SyntaxKind.JsxClosingElement, { isJsx: true });"}
{"input":"<s> function mockSendToTopicRequest() {<EOL>    return nock(`<STR_LIT>`)<EOL>        .","gt":"post(FCM_SEND_PATH)"}
{"input":"<s> <EOL>export function getTotalFlexGrow(columns) {<EOL>    let totalFlexGrow = <NUM_LIT>;<EOL>    for (","gt":"const c of columns) {"}
{"input":"<s> <EOL>export function camelCase(str) {<EOL>    // Replace special characters with a space<EOL>    str = str.replace(/[^a-zA-Z0-9 ]/g, '<STR_LIT>');<EOL>    // put a space before an uppercase letter<EOL>    str =","gt":"str.replace(/([a-z](?=[A-Z]))/g, '<STR_LIT>');"}
{"input":"<s> <EOL>export function camelCase(str) {<EOL>    // Replace special characters with a space<EOL>    str = str.replace(/[^a-zA-Z0-9 ]/g, '<STR_LIT>');<EOL>    // put a space before an uppercase letter<EOL>    str =  str.replace(/([a-z](?=[A-Z]))/g, '<STR_LIT>');<EOL>    // Lower case first character and some other stuff<EOL>    str = str.replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '<STR_LIT>').trim().toLowerCase();<EOL>    // uppercase characters preceded by a space or number<EOL>    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {<EOL>        return b.","gt":"trim() + c.toUpperCase();"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>","gt":"const listeners_ = [];"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[","gt":"'<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[ '<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {<EOL>        if (forceRefresh && hasNextToken_) {<EOL>","gt":"token_ = nextToken_;"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[ '<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {<EOL>        if (forceRefresh && hasNextToken_) {<EOL>             token_ = nextToken_;<EOL>            hasNextToken_ = false;<EOL>        }<EOL>        return Promise.resolve({ accessToken: token_ });<EOL>    };<EOL>    app['<STR_LIT>'][","gt":"'<STR_LIT>'] = function (listener) {"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[ '<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {<EOL>        if (forceRefresh && hasNextToken_) {<EOL>             token_ = nextToken_;<EOL>            hasNextToken_ = false;<EOL>        }<EOL>        return Promise.resolve({ accessToken: token_ });<EOL>    };<EOL>    app['<STR_LIT>'][ '<STR_LIT>'] = function (listener) {<EOL>        const token = token_;<EOL>        listeners_.push(listener);<EOL>        const async = Promise.resolve();<EOL>        async.then(function () {<EOL>            listener(","gt":"token);"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[ '<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {<EOL>        if (forceRefresh && hasNextToken_) {<EOL>             token_ = nextToken_;<EOL>            hasNextToken_ = false;<EOL>        }<EOL>        return Promise.resolve({ accessToken: token_ });<EOL>    };<EOL>    app['<STR_LIT>'][ '<STR_LIT>'] = function (listener) {<EOL>        const token = token_;<EOL>        listeners_.push(listener);<EOL>        const async = Promise.resolve();<EOL>        async.then(function () {<EOL>            listener( token);<EOL>        });<EOL>    };<EOL>    app['<STR_LIT>']['<STR_LIT>'] = function (listener) {<EOL>        throw Error(","gt":"'<STR_LIT>');"}
{"input":"<s> export function testAuthTokenProvider(app) {<EOL>    let token_ = null;<EOL>    let nextToken_ = null;<EOL>    let hasNextToken_ = false;<EOL>     const listeners_ = [];<EOL>    app['<STR_LIT>'] = app['<STR_LIT>'] || {};<EOL>    app[ '<STR_LIT>']['<STR_LIT>'] = function (forceRefresh) {<EOL>        if (forceRefresh && hasNextToken_) {<EOL>             token_ = nextToken_;<EOL>            hasNextToken_ = false;<EOL>        }<EOL>        return Promise.resolve({ accessToken: token_ });<EOL>    };<EOL>    app['<STR_LIT>'][ '<STR_LIT>'] = function (listener) {<EOL>        const token = token_;<EOL>        listeners_.push(listener);<EOL>        const async = Promise.resolve();<EOL>        async.then(function () {<EOL>            listener( token);<EOL>        });<EOL>    };<EOL>    app['<STR_LIT>']['<STR_LIT>'] = function (listener) {<EOL>        throw Error( '<STR_LIT>');<EOL>    };<EOL>    return {<EOL>        setToken: function (token) {<EOL>            token_ = token;<EOL>            const async = Promise.resolve();<EOL>            for (let i = <NUM_LIT>; i < listeners_.length; i++) {<EOL>                async.then((function (idx) {<EOL>                    return function () {<EOL>                        listeners_[idx](","gt":"token);"}
{"input":"<s> function pieceHash(piece) {<EOL>    return [piece.","gt":"color, piece.role, piece.scale].filter(x => x).join('<STR_LIT>');"}
{"input":"<s> export function setPieces(state, pieces) {<EOL>    for (let key in pieces) {<EOL>        const piece = pieces[key];<EOL>        if (","gt":"piece)"}
{"input":"<s> function baseUserMove(state, orig, dest) {<EOL>    const result = baseMove(state, orig, dest);<EOL>    if (result) {<EOL>        state.","gt":"movable.dests = undefined;"}
{"input":"<s> export default function premove(pieces, key, canCastle) {<EOL>    const piece = pieces[key], pos = util.key2pos(key);<EOL>    let mobility;<EOL>    switch (piece.role) {<EOL>        case '<STR_LIT>':<EOL>            mobility = pawn(","gt":"piece.color);"}
{"input":"<s> export default function premove(pieces, key, canCastle) {<EOL>    const piece = pieces[key], pos = util.key2pos(key);<EOL>    let mobility;<EOL>    switch (piece.role) {<EOL>        case '<STR_LIT>':<EOL>            mobility = pawn( piece.color);<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>            mobility =","gt":"knight;"}
{"input":"<s> export default function premove(pieces, key, canCastle) {<EOL>    const piece = pieces[key], pos = util.key2pos(key);<EOL>    let mobility;<EOL>    switch (piece.role) {<EOL>        case '<STR_LIT>':<EOL>            mobility = pawn( piece.color);<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>            mobility =  knight;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>","gt":"mobility = bishop;"}
{"input":"<s> export default function premove(pieces, key, canCastle) {<EOL>    const piece = pieces[key], pos = util.key2pos(key);<EOL>    let mobility;<EOL>    switch (piece.role) {<EOL>        case '<STR_LIT>':<EOL>            mobility = pawn( piece.color);<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>            mobility =  knight;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>             mobility = bishop;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>","gt":"mobility = rook;"}
{"input":"<s> export default function premove(pieces, key, canCastle) {<EOL>    const piece = pieces[key], pos = util.key2pos(key);<EOL>    let mobility;<EOL>    switch (piece.role) {<EOL>        case '<STR_LIT>':<EOL>            mobility = pawn( piece.color);<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>            mobility =  knight;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>             mobility = bishop;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>             mobility = rook;<EOL>            break;<EOL>        case '<STR_LIT>':<EOL>            mobility = queen;<EOL>            break;<EOL>","gt":"case '<STR_LIT>':"}
{"input":"<s> export function exec(s, opts = { silent: !DEBUG }, cb) {<EOL>    debug(s);<EOL>    let result = shell.exec(s, opts, cb);<EOL>    if (result.code !== <NUM_LIT>) {<EOL>        console.error(","gt":"result.stdout);"}
{"input":"<s> function posZIndex(pos, asWhite) {<EOL>    let z = <NUM_LIT> + (pos[<NUM_LIT>] - <NUM_LIT>) * <NUM_LIT> + (<NUM_LIT> - pos[<NUM_LIT>]);<EOL>","gt":"if (asWhite)"}
{"input":"<s> export function end(s, e) {<EOL>    const cur = s.draggable.current;<EOL>    if (!cur)<EOL>        return;<EOL>    // comparing with the origin target is an easy way to test that the end event<EOL>    // has the same touch origin<EOL>    if (e.type === '<STR_LIT>' && cur && cur.originTarget !== e.target && !cur.newPiece) {<EOL>        s.draggable.current =","gt":"undefined;"}
{"input":"<s> export function end(s, e) {<EOL>    const cur = s.draggable.current;<EOL>    if (!cur)<EOL>        return;<EOL>    // comparing with the origin target is an easy way to test that the end event<EOL>    // has the same touch origin<EOL>    if (e.type === '<STR_LIT>' && cur && cur.originTarget !== e.target && !cur.newPiece) {<EOL>        s.draggable.current =  undefined;<EOL>        return;<EOL>    }<EOL>    board.unsetPremove(s);<EOL>    board.unsetPredrop(s);<EOL>    // touchend has no position; so use the last touchmove position instead<EOL>    const eventPos = util.eventPosition(e) || cur.epos;<EOL>    const dest = board.getKeyAtDomPos(eventPos, s.orientation === '<STR_LIT>', s.dom.bounds());<EOL>    if (dest && cur.started) {<EOL>        if (","gt":"cur.newPiece)"}
{"input":"<s> export function end(s, e) {<EOL>    const cur = s.draggable.current;<EOL>    if (!cur)<EOL>        return;<EOL>    // comparing with the origin target is an easy way to test that the end event<EOL>    // has the same touch origin<EOL>    if (e.type === '<STR_LIT>' && cur && cur.originTarget !== e.target && !cur.newPiece) {<EOL>        s.draggable.current =  undefined;<EOL>        return;<EOL>    }<EOL>    board.unsetPremove(s);<EOL>    board.unsetPredrop(s);<EOL>    // touchend has no position; so use the last touchmove position instead<EOL>    const eventPos = util.eventPosition(e) || cur.epos;<EOL>    const dest = board.getKeyAtDomPos(eventPos, s.orientation === '<STR_LIT>', s.dom.bounds());<EOL>    if (dest && cur.started) {<EOL>        if ( cur.newPiece)<EOL>            board.dropNewPiece(s, cur.orig, dest, cur.force);<EOL>        else {<EOL>            s.stats.ctrlKey = e.ctrlKey;<EOL>","gt":"if (board.userMove(s, cur.orig, dest))"}
{"input":"<s> export function end(s, e) {<EOL>    const cur = s.draggable.current;<EOL>    if (!cur)<EOL>        return;<EOL>    // comparing with the origin target is an easy way to test that the end event<EOL>    // has the same touch origin<EOL>    if (e.type === '<STR_LIT>' && cur && cur.originTarget !== e.target && !cur.newPiece) {<EOL>        s.draggable.current =  undefined;<EOL>        return;<EOL>    }<EOL>    board.unsetPremove(s);<EOL>    board.unsetPredrop(s);<EOL>    // touchend has no position; so use the last touchmove position instead<EOL>    const eventPos = util.eventPosition(e) || cur.epos;<EOL>    const dest = board.getKeyAtDomPos(eventPos, s.orientation === '<STR_LIT>', s.dom.bounds());<EOL>    if (dest && cur.started) {<EOL>        if ( cur.newPiece)<EOL>            board.dropNewPiece(s, cur.orig, dest, cur.force);<EOL>        else {<EOL>            s.stats.ctrlKey = e.ctrlKey;<EOL>             if (board.userMove(s, cur.orig, dest))<EOL>                s.stats.dragged = true;<EOL>        }<EOL>    }<EOL>    else if (cur.newPiece) {<EOL>        delete s.pieces[cur.orig];<EOL>    }<EOL>    else if (s.draggable.deleteOnDropOff) {<EOL>        delete s.","gt":"pieces[cur.orig];"}
{"input":"<s> export function annotated(annotation, sl) {<EOL>    return {<EOL>","gt":"kind: \"<STR_LIT>\","}
{"input":"<s> function replaceUnion(u, builder, forwardingRef) {<EOL>    const stringMembers = defined(unionNeedsReplacing(u));<EOL>    const types = [];<EOL>    u.members.forEach(t => {<EOL>        if (stringMembers.has(","gt":"t))"}
{"input":"<s> function replaceUnion(u, builder, forwardingRef) {<EOL>    const stringMembers = defined(unionNeedsReplacing(u));<EOL>    const types = [];<EOL>    u.members.forEach(t => {<EOL>        if (stringMembers.has( t))<EOL>            return;<EOL>        types.push(builder.reconstituteType(t));<EOL>    });<EOL>    // FIXME: add names to string type<EOL>    if (types.length === <NUM_LIT>) {<EOL>","gt":"return builder.getStringType(undefined, undefined, forwardingRef);"}
{"input":"<s> export function legalizeCharacters(isLegal) {<EOL>    return utf32ConcatMap(u => (u <= <NUM_LIT> && isLegal(u) ? String.fromCharCode(u) :","gt":"\"<STR_LIT>\"));"}
{"input":"<s> export function isLetter(codePoint) {<EOL>    const category = unicode.getCategory(","gt":"codePoint);"}
{"input":"<s> function randomInt(lower, upper) {<EOL>    const","gt":"range = upper - lower;"}
{"input":"<s> function unionMembersRecursively(...unions) {<EOL>    let processedUnions = Set();<EOL>    let members = OrderedSet();<EOL>    function addMembers(u) {<EOL>        if (processedUnions.has(u))<EOL>            return;<EOL>        processedUnions = processedUnions.add(","gt":"u);"}
{"input":"<s> function unionMembersRecursively(...unions) {<EOL>    let processedUnions = Set();<EOL>    let members = OrderedSet();<EOL>    function addMembers(u) {<EOL>        if (processedUnions.has(u))<EOL>            return;<EOL>        processedUnions = processedUnions.add( u);<EOL>        u.members.forEach(t => {<EOL>            if (t instanceof UnionType) {<EOL>                addMembers(t);<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> function rustStyle(original, isSnakeCase) {<EOL>    const words = splitIntoWords(original);<EOL>    const wordStyle = isSnakeCase ?","gt":"allLowerWordStyle : firstUpperWordStyle;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", () => {<EOL>        let buttonInGroupService;<EOL>        beforeEach(() => {<EOL>            buttonInGroupService = new ButtonInGroupService();<EOL>        });<EOL>        it(","gt":"\"<STR_LIT>\", () => {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", () => {<EOL>        let buttonInGroupService;<EOL>        beforeEach(() => {<EOL>            buttonInGroupService = new ButtonInGroupService();<EOL>        });<EOL>        it( \"<STR_LIT>\", () => {<EOL>            let testButton;<EOL>            buttonInGroupService.changes.subscribe((button) => {<EOL>                testButton = button;<EOL>            });<EOL>            const mockButton = new ClrButton(null);<EOL>            mockButton.inMenu = true;<EOL>            buttonInGroupService.updateButtonGroup(","gt":"mockButton);"}
{"input":"<s> <EOL>function verifyToken(token, publicKey) {<EOL>    return new Promise((resolve, reject) => {<EOL>        jwt.verify(token, publicKey, {<EOL>            algorithms: [ALGORITHM],<EOL>        }, (","gt":"err, res) => {"}
{"input":"<s> function isPartCharacter(utf16Unit) {<EOL>    const category =","gt":"unicode.getCategory(utf16Unit);"}
{"input":"<s> <EOL>export function vNodeDetach(vnode) {<EOL>    if (\"<STR_LIT>\" !== \"<STR_LIT>\") {<EOL>        if ((vnode._debugFlags & VNodeDebugFlags.Detached) !== <NUM_LIT>) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>        vnode._debugFlags |= VNodeDebugFlags.Detached;<EOL>        vnode._debugFlags &= ~VNodeDebugFlags.","gt":"Attached;"}
{"input":"<s> <EOL>export function vNodeDetach(vnode) {<EOL>    if (\"<STR_LIT>\" !== \"<STR_LIT>\") {<EOL>        if ((vnode._debugFlags & VNodeDebugFlags.Detached) !== <NUM_LIT>) {<EOL>            throw new Error(\"<STR_LIT>\");<EOL>        }<EOL>        vnode._debugFlags |= VNodeDebugFlags.Detached;<EOL>        vnode._debugFlags &= ~VNodeDebugFlags. Attached;<EOL>    }<EOL>    if ((vnode._flags & VNodeFlags.Component) === <NUM_LIT>) {<EOL>        const children = vnode._children;<EOL>        if (","gt":"children !== null && typeof children !== \"<STR_LIT>\") {"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -","gt":"<NUM_LIT>;"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let","gt":"bNode;"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let","gt":"next;"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let  next;<EOL>    // Sync similar nodes at the beginning.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart];<EOL>","gt":"bNode = b[bStart];"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let  next;<EOL>    // Sync similar nodes at the beginning.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart];<EOL>         bNode = b[bStart];<EOL>        if (!_canSyncVNodes(","gt":"aNode, bNode) || aNode._key !== bNode._key) {"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let  next;<EOL>    // Sync similar nodes at the beginning.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart];<EOL>         bNode = b[bStart];<EOL>        if (!_canSyncVNodes( aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aStart++;<EOL>        bStart++;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    // Sync similar nodes at the end.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aEnd];<EOL>        bNode = b[bEnd];<EOL>        if (!_canSyncVNodes(aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aEnd--;<EOL>        bEnd--;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    if (\"<STR_LIT>\" !== \"<STR_LIT>\") {<EOL>        if ((aStart <= aEnd || bStart <= bEnd) &&<EOL>            ((parent._debugFlags & VNodeDebugFlags.DisabledChildrenShapeError) === <NUM_LIT>)) {<EOL>            printError(","gt":"\"<STR_LIT>\" +"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let  next;<EOL>    // Sync similar nodes at the beginning.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart];<EOL>         bNode = b[bStart];<EOL>        if (!_canSyncVNodes( aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aStart++;<EOL>        bStart++;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    // Sync similar nodes at the end.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aEnd];<EOL>        bNode = b[bEnd];<EOL>        if (!_canSyncVNodes(aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aEnd--;<EOL>        bEnd--;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    if (\"<STR_LIT>\" !== \"<STR_LIT>\") {<EOL>        if ((aStart <= aEnd || bStart <= bEnd) &&<EOL>            ((parent._debugFlags & VNodeDebugFlags.DisabledChildrenShapeError) === <NUM_LIT>)) {<EOL>            printError( \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>    }<EOL>    // Iterate over the remaining nodes and if they have the same type, then sync, otherwise just<EOL>    // remove the old node and insert the new one.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart++];<EOL>        bNode = b[bStart++];<EOL>        if (_canSyncVNodes(aNode, bNode) && aNode._key === bNode._key) {<EOL>            syncVNodes(aNode, bNode, owner);<EOL>        }<EOL>        else {<EOL>            vNodeReplaceChild(parent,","gt":"bNode, aNode, owner);"}
{"input":"<s> <EOL>function _syncChildrenNaive(parent, a, b, owner) {<EOL>    let aStart = <NUM_LIT>;<EOL>    let bStart = <NUM_LIT>;<EOL>    let aEnd = a.length -  <NUM_LIT>;<EOL>    let bEnd = b.length - <NUM_LIT>;<EOL>    let aNode;<EOL>    let  bNode;<EOL>    let nextPos;<EOL>    let  next;<EOL>    // Sync similar nodes at the beginning.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart];<EOL>         bNode = b[bStart];<EOL>        if (!_canSyncVNodes( aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aStart++;<EOL>        bStart++;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    // Sync similar nodes at the end.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aEnd];<EOL>        bNode = b[bEnd];<EOL>        if (!_canSyncVNodes(aNode, bNode) || aNode._key !== bNode._key) {<EOL>            break;<EOL>        }<EOL>        aEnd--;<EOL>        bEnd--;<EOL>        syncVNodes(aNode, bNode, owner);<EOL>    }<EOL>    if (\"<STR_LIT>\" !== \"<STR_LIT>\") {<EOL>        if ((aStart <= aEnd || bStart <= bEnd) &&<EOL>            ((parent._debugFlags & VNodeDebugFlags.DisabledChildrenShapeError) === <NUM_LIT>)) {<EOL>            printError( \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\" +<EOL>                \"<STR_LIT>\");<EOL>        }<EOL>    }<EOL>    // Iterate over the remaining nodes and if they have the same type, then sync, otherwise just<EOL>    // remove the old node and insert the new one.<EOL>    while (aStart <= aEnd && bStart <= bEnd) {<EOL>        aNode = a[aStart++];<EOL>        bNode = b[bStart++];<EOL>        if (_canSyncVNodes(aNode, bNode) && aNode._key === bNode._key) {<EOL>            syncVNodes(aNode, bNode, owner);<EOL>        }<EOL>        else {<EOL>            vNodeReplaceChild(parent,  bNode, aNode, owner);<EOL>        }<EOL>    }<EOL>    if (aStart <= aEnd) {<EOL>        // All nodes from a are synced, remove the rest.<EOL>","gt":"do {"}
{"input":"<s> <EOL>export function safeIsNaN(value) {<EOL>    if (NumberAsAny.IsNaN) {<EOL>        return","gt":"NumberAsAny.IsNaN(value);"}
{"input":"<s> <EOL>export function finishMounting() {<EOL>    scheduler.","gt":"flags &= ~SchedulerFlags.EnabledMounting;"}
{"input":"<s> function mutateMsgWithLiveExtras(api) {<EOL>    return (msg) => {<EOL>        if (isMsg(msg)) {<EOL>            const likes = api.message.obs.likes[<NUM_LIT>](msg.key);<EOL>            const name = api.about.obs.name[","gt":"<NUM_LIT>](msg.value.author);"}
{"input":"<s> <EOL>export function compareDetails(input, saved, now) {<EOL>    const subscriptionKeys = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    const subscriptionValues = {<EOL>        endpoint: input.subscription.endpoint,<EOL>        auth: arrayBufferToBase64(input.subscription.getKey('<STR_LIT>')),<EOL>        p256dh: arrayBufferToBase64(input.subscription.","gt":"getKey('<STR_LIT>'))"}
{"input":"<s> <EOL>export function compareDetails(input, saved, now) {<EOL>    const subscriptionKeys = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    const subscriptionValues = {<EOL>        endpoint: input.subscription.endpoint,<EOL>        auth: arrayBufferToBase64(input.subscription.getKey('<STR_LIT>')),<EOL>        p256dh: arrayBufferToBase64(input.subscription. getKey('<STR_LIT>'))<EOL>    };<EOL>    subscriptionKeys.forEach(keyName => {<EOL>        assert.equal(saved[keyName],","gt":"subscriptionValues[keyName]);"}
{"input":"<s> export default function App(sources) {<EOL>    const calculatorSinks = Calculator(sources);<EOL>    const vdom$ = view(calculatorSinks.DOM);<EOL>","gt":"const reducer$ = calculatorSinks.onion;"}
{"input":"<s> <EOL>function flush(callback) {<EOL>    // Ideally, this function would be a call to Polymer.dom.flush, but that<EOL>    // doesn't support a callback yet<EOL>    // (https://github.com/Polymer/polymer-dev/issues/851),<EOL>    // ...and there's cross-browser flakiness to deal with.<EOL>    // Make sure that we're invoking the callback with no arguments so that the<EOL>    // caller can pass Mocha callbacks, etc.<EOL>    let","gt":"done = function done() {"}
{"input":"<s> <EOL>function flush(callback) {<EOL>    // Ideally, this function would be a call to Polymer.dom.flush, but that<EOL>    // doesn't support a callback yet<EOL>    // (https://github.com/Polymer/polymer-dev/issues/851),<EOL>    // ...and there's cross-browser flakiness to deal with.<EOL>    // Make sure that we're invoking the callback with no arguments so that the<EOL>    // caller can pass Mocha callbacks, etc.<EOL>    let  done = function done() {<EOL>        callback();<EOL>    };<EOL>    // Because endOfMicrotask is flaky for IE, we perform microtask checkpoints<EOL>    // ourselves (https://github.com/Polymer/polymer-dev/issues/114):<EOL>","gt":"const isIE = navigator.appName === '<STR_LIT>';"}
{"input":"<s> <EOL>function flush(callback) {<EOL>    // Ideally, this function would be a call to Polymer.dom.flush, but that<EOL>    // doesn't support a callback yet<EOL>    // (https://github.com/Polymer/polymer-dev/issues/851),<EOL>    // ...and there's cross-browser flakiness to deal with.<EOL>    // Make sure that we're invoking the callback with no arguments so that the<EOL>    // caller can pass Mocha callbacks, etc.<EOL>    let  done = function done() {<EOL>        callback();<EOL>    };<EOL>    // Because endOfMicrotask is flaky for IE, we perform microtask checkpoints<EOL>    // ourselves (https://github.com/Polymer/polymer-dev/issues/114):<EOL>     const isIE = navigator.appName === '<STR_LIT>';<EOL>    if (isIE && window.Platform && window.Platform.performMicrotaskCheckpoint) {<EOL>        const reallyDone = done;<EOL>        done =","gt":"function doneIE() {"}
{"input":"<s> <EOL>function flush(callback) {<EOL>    // Ideally, this function would be a call to Polymer.dom.flush, but that<EOL>    // doesn't support a callback yet<EOL>    // (https://github.com/Polymer/polymer-dev/issues/851),<EOL>    // ...and there's cross-browser flakiness to deal with.<EOL>    // Make sure that we're invoking the callback with no arguments so that the<EOL>    // caller can pass Mocha callbacks, etc.<EOL>    let  done = function done() {<EOL>        callback();<EOL>    };<EOL>    // Because endOfMicrotask is flaky for IE, we perform microtask checkpoints<EOL>    // ourselves (https://github.com/Polymer/polymer-dev/issues/114):<EOL>     const isIE = navigator.appName === '<STR_LIT>';<EOL>    if (isIE && window.Platform && window.Platform.performMicrotaskCheckpoint) {<EOL>        const reallyDone = done;<EOL>        done =  function doneIE() {<EOL>            Platform.performMicrotaskCheckpoint();<EOL>            nativeSetTimeout(reallyDone, <NUM_LIT>);<EOL>        };<EOL>    }<EOL>    // Everyone else gets a regular flush.<EOL>    let scope;<EOL>    if (window.Polymer && window.Polymer.dom && window.Polymer.dom.flush) {<EOL>        scope = window.Polymer.dom;<EOL>    }<EOL>    else if (window.Polymer && window.Polymer.flush) {<EOL>        scope = window.Polymer;<EOL>    }<EOL>    else if (","gt":"window.WebComponents && window.WebComponents.flush) {"}
{"input":"<s> function makeKeysOpinion(keys) {<EOL>    const keysOpinion = {<EOL>        needs: nest('<STR_LIT>', '<STR_LIT>'),<EOL>        gives: nest({<EOL>            '<STR_LIT>': ['<STR_LIT>', '<STR_LIT>'],<EOL>        }),<EOL>","gt":"create: (api) => {"}
{"input":"<s> function makeKeysOpinion(keys) {<EOL>    const keysOpinion = {<EOL>        needs: nest('<STR_LIT>', '<STR_LIT>'),<EOL>        gives: nest({<EOL>            '<STR_LIT>': ['<STR_LIT>', '<STR_LIT>'],<EOL>        }),<EOL>         create: (api) => {<EOL>            return nest({<EOL>                '<STR_LIT>': { load, id },<EOL>            });<EOL>","gt":"function id() {"}
{"input":"<s> function makeKeysOpinion(keys) {<EOL>    const keysOpinion = {<EOL>        needs: nest('<STR_LIT>', '<STR_LIT>'),<EOL>        gives: nest({<EOL>            '<STR_LIT>': ['<STR_LIT>', '<STR_LIT>'],<EOL>        }),<EOL>         create: (api) => {<EOL>            return nest({<EOL>                '<STR_LIT>': { load, id },<EOL>            });<EOL>             function id() {<EOL>                return load().id;<EOL>            }<EOL>            function load() {<EOL>                return","gt":"keys;"}
{"input":"<s> export function isMsg(msg) {<EOL>","gt":"return msg && msg.key && msg.value && typeof msg.value === '<STR_LIT>';"}
{"input":"<s> function makeGetter(scope) {<EOL>    if (typeof scope === '<STR_LIT>' || typeof scope === '<STR_LIT>') {<EOL>        return function lensGet(state) {<EOL>            if (typeof state === '<STR_LIT>') {<EOL>                return","gt":"void <NUM_LIT>;"}
{"input":"<s> <EOL>export async function runScanner(analyzer, scanner, url) {<EOL>    const context = await analyzer['<STR_LIT>'];<EOL>    const resolvedUrl = analyzer.resolveUrl(","gt":"url);"}
{"input":"<s> <EOL>async function makeHolesInBatches(holes, batches) {<EOL>    const removed = [];<EOL>    for (let i = <NUM_LIT>; i < holes.length; i++) {<EOL>        const index =","gt":"holes[i] - i;"}
{"input":"<s> <EOL><EOL>export function resourceToInstanceAndPath(resource) {<EOL>    let resourceRegex = `<STR_LIT>`;<EOL>    let match = resource.match(new RegExp(resourceRegex));<EOL>    if (!match) {<EOL>        throw","gt":"new Error(`<STR_LIT>` +"}
{"input":"<s> export function IpValidator(control) {<EOL>    return /(\\d{1,3}\\.){3}\\d{1,3}/.","gt":"test(control.value) ? null : { '<STR_LIT>': true };"}
{"input":"<s> function requestInvite$(invitationUrl) {<EOL>    const request = superagent(","gt":"invitationUrl);"}
{"input":"<s> export function startListening(el, eventName, listener) {<EOL>    el.addEventListener(","gt":"eventName, listener);"}
{"input":"<s> export function minValidationMessage(err, field) {<EOL>    return","gt":"min}`<STR_LIT>;"}
{"input":"<s> function serializeElementLike(elementOrMixin, urlResolver) {<EOL>    const class_ = serializeClass(elementOrMixin, urlResolver);<EOL>    let path;<EOL>    if (elementOrMixin.sourceRange) {<EOL>        path = elementOrMixin.sourceRange.file;<EOL>    }<EOL>    class_.attributes =<EOL>        Array.from(elementOrMixin.attributes.values())<EOL>            .","gt":"map((a) => serializeAttribute(elementOrMixin, path, urlResolver, a));"}
{"input":"<s> function serializeElementLike(elementOrMixin, urlResolver) {<EOL>    const class_ = serializeClass(elementOrMixin, urlResolver);<EOL>    let path;<EOL>    if (elementOrMixin.sourceRange) {<EOL>        path = elementOrMixin.sourceRange.file;<EOL>    }<EOL>    class_.attributes =<EOL>        Array.from(elementOrMixin.attributes.values())<EOL>            . map((a) => serializeAttribute(elementOrMixin, path, urlResolver, a));<EOL>    class_.events = Array.from(elementOrMixin.events.values())<EOL>        .map((e) => serializeEvent(elementOrMixin, path, e));<EOL>    Object.assign(class_, {<EOL>        styling: {<EOL>","gt":"cssVariables: [],"}
{"input":"<s> function serializeElementLike(elementOrMixin, urlResolver) {<EOL>    const class_ = serializeClass(elementOrMixin, urlResolver);<EOL>    let path;<EOL>    if (elementOrMixin.sourceRange) {<EOL>        path = elementOrMixin.sourceRange.file;<EOL>    }<EOL>    class_.attributes =<EOL>        Array.from(elementOrMixin.attributes.values())<EOL>            . map((a) => serializeAttribute(elementOrMixin, path, urlResolver, a));<EOL>    class_.events = Array.from(elementOrMixin.events.values())<EOL>        .map((e) => serializeEvent(elementOrMixin, path, e));<EOL>    Object.assign(class_, {<EOL>        styling: {<EOL>             cssVariables: [],<EOL>            selectors: [],<EOL>        },<EOL>        slots: elementOrMixin.slots.map((s) => {<EOL>            return {<EOL>                description: '<STR_LIT>',<EOL>                name: s.","gt":"name,"}
{"input":"<s> function defaultItemScope(key) {<EOL>","gt":"return { '<STR_LIT>': null };"}
{"input":"<s> function Function(dec, expr) {<EOL>    return new expressions.Function(","gt":"dec, new Json.JString(expr, <NUM_LIT>, <NUM_LIT>));"}
{"input":"<s> export function testFunctionParsing1(test) {<EOL>    var","gt":"predicate = Function(\"<STR_LIT>\", \"<STR_LIT>\");"}
{"input":"<s> export function authorName(name, msg) {<EOL>    return name || msg.value.","gt":"author.slice(<NUM_LIT>, <NUM_LIT>);"}
{"input":"<s> function createOwnerStore(db) {<EOL>    db.createObjectStore(","gt":"DbOwner.store);"}
{"input":"<s> export function testSanitizeQuotes1(test) {<EOL>    translationTestCase(\"<STR_LIT>\", \"<STR_LIT>\", new expressions.","gt":"Functions(), test);"}
{"input":"<s> <EOL>export function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {<EOL>    const expectedDescription = [];<EOL>    for (const val of expected) {<EOL>        if (val ===","gt":"input) {"}
{"input":"<s> export default function model(actions) {<EOL>    const setVisibleReducer$ = actions.willAppear$.mapTo(function setVisibleReducer(prev) {<EOL>        if (!prev) {<EOL>            return { selfFeedId: '<STR_LIT>', visible: true };<EOL>        }<EOL>        else if (","gt":"prev.visible) {"}
{"input":"<s> export default function model(actions) {<EOL>    const setVisibleReducer$ = actions.willAppear$.mapTo(function setVisibleReducer(prev) {<EOL>        if (!prev) {<EOL>            return { selfFeedId: '<STR_LIT>', visible: true };<EOL>        }<EOL>        else if ( prev.visible) {<EOL>            return prev;<EOL>        }<EOL>","gt":"else {"}
{"input":"<s> export default function model(actions) {<EOL>    const setVisibleReducer$ = actions.willAppear$.mapTo(function setVisibleReducer(prev) {<EOL>        if (!prev) {<EOL>            return { selfFeedId: '<STR_LIT>', visible: true };<EOL>        }<EOL>        else if ( prev.visible) {<EOL>            return prev;<EOL>        }<EOL>         else {<EOL>            return { ...prev, visible: true };<EOL>        }<EOL>    });<EOL>    const setInvisibleReducer$ = actions.willDisappear$.mapTo(function setInvisibleReducer(prev) {<EOL>","gt":"if (!prev) {"}
{"input":"<s> export function assertSetValidationRules(rules_str, test, cb) {<EOL>    setValidationRules(rules_str, function (err) {<EOL>        if (err) {<EOL>            test.ok(","gt":"false);"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>","gt":"if (debug) {"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if (","gt":"content) {"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var","gt":"req = https.request(options, function (res) {"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var  req = https.request(options, function (res) {<EOL>","gt":"var chunks = [];"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var  req = https.request(options, function (res) {<EOL>             var chunks = [];<EOL>            res.on('<STR_LIT>', function (body) {<EOL>                chunks.push(body);<EOL>            });<EOL>","gt":"res.on('<STR_LIT>', function () {"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var  req = https.request(options, function (res) {<EOL>             var chunks = [];<EOL>            res.on('<STR_LIT>', function (body) {<EOL>                chunks.push(body);<EOL>            });<EOL>             res.on('<STR_LIT>', function () {<EOL>                var result = chunks.join('<STR_LIT>');<EOL>                log('<STR_LIT>' + res.statusCode + '<STR_LIT>' + result + '<STR_LIT>');<EOL>                let message = '<STR_LIT>' + res.statusCode + '<STR_LIT>' + result;<EOL>                // Dump debug information if present for both successful and failed<EOL>                // requests.<EOL>                if (res.headers[","gt":"DEBUG_HEADER]) {"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var  req = https.request(options, function (res) {<EOL>             var chunks = [];<EOL>            res.on('<STR_LIT>', function (body) {<EOL>                chunks.push(body);<EOL>            });<EOL>             res.on('<STR_LIT>', function () {<EOL>                var result = chunks.join('<STR_LIT>');<EOL>                log('<STR_LIT>' + res.statusCode + '<STR_LIT>' + result + '<STR_LIT>');<EOL>                let message = '<STR_LIT>' + res.statusCode + '<STR_LIT>' + result;<EOL>                // Dump debug information if present for both successful and failed<EOL>                // requests.<EOL>                if (res.headers[ DEBUG_HEADER]) {<EOL>                    let formattedHeader = res.headers[DEBUG_HEADER].split('<STR_LIT>').join('<STR_LIT>');<EOL>                    log(formattedHeader);<EOL>                    message += '<STR_LIT>' + formattedHeader;<EOL>                }<EOL>                if (res.statusCode && Math.floor(res.statusCode / <NUM_LIT>) !== <NUM_LIT>) {<EOL>                    reject(new Error(message));<EOL>                }<EOL>                else {<EOL>                    resolve(","gt":"result);"}
{"input":"<s> function request(options, content, debug) {<EOL>    ridNext += <NUM_LIT>;<EOL>    var rid = ridNext;<EOL>    function log(s) {<EOL>         if (debug) {<EOL>            console.error('<STR_LIT>' + rid + '<STR_LIT>' + s);<EOL>        }<EOL>    }<EOL>    log('<STR_LIT>' + util.prettyJSON(options));<EOL>    if ( content) {<EOL>        log('<STR_LIT>' + content + '<STR_LIT>');<EOL>    }<EOL>    return new Promise(function (resolve, reject) {<EOL>        // TODO: Why isn't this argument typed as per https.request?<EOL>        var  req = https.request(options, function (res) {<EOL>             var chunks = [];<EOL>            res.on('<STR_LIT>', function (body) {<EOL>                chunks.push(body);<EOL>            });<EOL>             res.on('<STR_LIT>', function () {<EOL>                var result = chunks.join('<STR_LIT>');<EOL>                log('<STR_LIT>' + res.statusCode + '<STR_LIT>' + result + '<STR_LIT>');<EOL>                let message = '<STR_LIT>' + res.statusCode + '<STR_LIT>' + result;<EOL>                // Dump debug information if present for both successful and failed<EOL>                // requests.<EOL>                if (res.headers[ DEBUG_HEADER]) {<EOL>                    let formattedHeader = res.headers[DEBUG_HEADER].split('<STR_LIT>').join('<STR_LIT>');<EOL>                    log(formattedHeader);<EOL>                    message += '<STR_LIT>' + formattedHeader;<EOL>                }<EOL>                if (res.statusCode && Math.floor(res.statusCode / <NUM_LIT>) !== <NUM_LIT>) {<EOL>                    reject(new Error(message));<EOL>                }<EOL>                else {<EOL>                    resolve( result);<EOL>                }<EOL>            });<EOL>        });<EOL>        if (content) {<EOL>            req.write(content,","gt":"'<STR_LIT>');"}
{"input":"<s> export function scanDatabindingTemplateForExpressions(document, template) {<EOL>    return extractDataBindingsFromTemplates(document, [template].concat([...","gt":"getAllDataBindingTemplates(template.content)]));"}
{"input":"<s> function _expandOptionPaths(options) {<EOL>    const result = {};<EOL>    _.each(options, function (value, key) {<EOL>        let target = result;<EOL>        const","gt":"parts = key.split('<STR_LIT>');"}
{"input":"<s> function _expandOptionPaths(options) {<EOL>    const result = {};<EOL>    _.each(options, function (value, key) {<EOL>        let target = result;<EOL>        const  parts = key.split('<STR_LIT>');<EOL>        for (const part of parts.slice(<NUM_LIT>, -<NUM_LIT>)) {<EOL>            target = target[part] = target[part] || {};<EOL>        }<EOL>        target[_.","gt":"last(parts)] = value;"}
{"input":"<s> function createRenderTarget(id = null) {<EOL>    const element = document.createElement('<STR_LIT>');<EOL>    element.className = '<STR_LIT>';<EOL>","gt":"if (id) {"}
{"input":"<s> export default function model(actions) {<EOL>    const initReducer$ = xs.of(function initReducer(prev) {<EOL>        return prev || { apps: {}, backendReady: false };<EOL>    });<EOL>    const updateReducer$ = actions.updateFromBackend$.map(backendState => function updateAppsReducer(prev) {<EOL>        let next = undefined;<EOL>        const apps =","gt":"backendState.apps;"}
{"input":"<s> export default function model(actions) {<EOL>    const initReducer$ = xs.of(function initReducer(prev) {<EOL>        return prev || { apps: {}, backendReady: false };<EOL>    });<EOL>    const updateReducer$ = actions.updateFromBackend$.map(backendState => function updateAppsReducer(prev) {<EOL>        let next = undefined;<EOL>        const apps =  backendState.apps;<EOL>        if (prev.backendReady !== backendState.backendReady) {<EOL>            next = next || { ...prev };<EOL>            next.backendReady = backendState.backendReady;<EOL>        }<EOL>        Object.keys(apps).forEach(key => {<EOL>            if (!prev.apps[key]) {<EOL>","gt":"next = next || { ...prev };"}
{"input":"<s> export default function model(actions) {<EOL>    const initReducer$ = xs.of(function initReducer(prev) {<EOL>        return prev || { apps: {}, backendReady: false };<EOL>    });<EOL>    const updateReducer$ = actions.updateFromBackend$.map(backendState => function updateAppsReducer(prev) {<EOL>        let next = undefined;<EOL>        const apps =  backendState.apps;<EOL>        if (prev.backendReady !== backendState.backendReady) {<EOL>            next = next || { ...prev };<EOL>            next.backendReady = backendState.backendReady;<EOL>        }<EOL>        Object.keys(apps).forEach(key => {<EOL>            if (!prev.apps[key]) {<EOL>                 next = next || { ...prev };<EOL>                next.apps[key] = apps[key];<EOL>            }<EOL>            else if (prev.apps[key].apkFullPath !== apps[key].apkFullPath) {<EOL>","gt":"next = next || { ...prev };"}
{"input":"<s> export default function model(actions) {<EOL>    const initReducer$ = xs.of(function initReducer(prev) {<EOL>        return prev || { apps: {}, backendReady: false };<EOL>    });<EOL>    const updateReducer$ = actions.updateFromBackend$.map(backendState => function updateAppsReducer(prev) {<EOL>        let next = undefined;<EOL>        const apps =  backendState.apps;<EOL>        if (prev.backendReady !== backendState.backendReady) {<EOL>            next = next || { ...prev };<EOL>            next.backendReady = backendState.backendReady;<EOL>        }<EOL>        Object.keys(apps).forEach(key => {<EOL>            if (!prev.apps[key]) {<EOL>                 next = next || { ...prev };<EOL>                next.apps[key] = apps[key];<EOL>            }<EOL>            else if (prev.apps[key].apkFullPath !== apps[key].apkFullPath) {<EOL>                 next = next || { ...prev };<EOL>                next.apps[key].apkFullPath = apps[key].apkFullPath;<EOL>            }<EOL>            else if (prev.apps[key].readme !== apps[key].readme) {<EOL>                next = next || { ...prev };<EOL>                next.apps[key].readme = apps[key].readme;<EOL>            }<EOL>","gt":"else if (prev.apps[key].peers !== apps[key].peers) {"}
{"input":"<s> export function renderMatrixA(matrixA, state) {<EOL>    const showResizers = state.step === <NUM_LIT>;<EOL>    return table(`<STR_LIT>`, [<EOL>        tr([<EOL>            td(showResizers ? [renderRowsResizer(","gt":"'<STR_LIT>')] : []),"}
{"input":"<s> export function renderMatrixA(matrixA, state) {<EOL>    const showResizers = state.step === <NUM_LIT>;<EOL>    return table(`<STR_LIT>`, [<EOL>        tr([<EOL>            td(showResizers ? [renderRowsResizer( '<STR_LIT>')] : []),<EOL>            td(`<STR_LIT>`, {<EOL>                hook: { update: mutateCellStyles(state) }<EOL>            }, [matrixA, renderOperatorGrid(state)]),<EOL>        ]),<EOL>        tr([<EOL>","gt":"td(),"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>","gt":"let waitSeconds = <NUM_LIT>;"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let","gt":"cancelState = <NUM_LIT>;"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,","gt":"arguments);"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler(","gt":"success, ...var_args) {"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>","gt":"if (mustStop) {"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>","gt":"if (cancelState === <NUM_LIT>) {"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +","gt":"Math.random()) * <NUM_LIT>;"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +  Math.random()) * <NUM_LIT>;<EOL>        }<EOL>","gt":"callWithDelay(waitMillis);"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +  Math.random()) * <NUM_LIT>;<EOL>        }<EOL>         callWithDelay(waitMillis);<EOL>    }<EOL>    let stopped = false;<EOL>    function stop(wasTimeout) {<EOL>        if (stopped) {<EOL>            return;<EOL>        }<EOL>        stopped = true;<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (timeoutId !== null) {<EOL>            if (!wasTimeout) {<EOL>                cancelState = <NUM_LIT>;<EOL>            }<EOL>            clearTimeout(","gt":"timeoutId);"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +  Math.random()) * <NUM_LIT>;<EOL>        }<EOL>         callWithDelay(waitMillis);<EOL>    }<EOL>    let stopped = false;<EOL>    function stop(wasTimeout) {<EOL>        if (stopped) {<EOL>            return;<EOL>        }<EOL>        stopped = true;<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (timeoutId !== null) {<EOL>            if (!wasTimeout) {<EOL>                cancelState = <NUM_LIT>;<EOL>            }<EOL>            clearTimeout( timeoutId);<EOL>","gt":"callWithDelay(<NUM_LIT>);"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +  Math.random()) * <NUM_LIT>;<EOL>        }<EOL>         callWithDelay(waitMillis);<EOL>    }<EOL>    let stopped = false;<EOL>    function stop(wasTimeout) {<EOL>        if (stopped) {<EOL>            return;<EOL>        }<EOL>        stopped = true;<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (timeoutId !== null) {<EOL>            if (!wasTimeout) {<EOL>                cancelState = <NUM_LIT>;<EOL>            }<EOL>            clearTimeout( timeoutId);<EOL>             callWithDelay(<NUM_LIT>);<EOL>        }<EOL>        else {<EOL>","gt":"if (!wasTimeout) {"}
{"input":"<s> <EOL>export function start(f, callback, timeout) {<EOL>    // TODO(andysoto): make this code cleaner (probably refactor into an actual<EOL>    // type instead of a bunch of functions with state shared in the closure)<EOL>     let waitSeconds = <NUM_LIT>;<EOL>    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯<EOL>    let timeoutId = null;<EOL>    let hitTimeout = false;<EOL>    let  cancelState = <NUM_LIT>;<EOL>    function canceled() {<EOL>        return cancelState === <NUM_LIT>;<EOL>    }<EOL>    let triggeredCallback = false;<EOL>    function triggerCallback() {<EOL>        if (!triggeredCallback) {<EOL>            triggeredCallback = true;<EOL>            callback.apply(null,  arguments);<EOL>        }<EOL>    }<EOL>    function callWithDelay(millis) {<EOL>        timeoutId = setTimeout(function () {<EOL>            timeoutId = null;<EOL>            f(handler, canceled());<EOL>        }, millis);<EOL>    }<EOL>    function handler( success, ...var_args) {<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (success) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        let mustStop = canceled() || hitTimeout;<EOL>         if (mustStop) {<EOL>            triggerCallback.apply(null, arguments);<EOL>            return;<EOL>        }<EOL>        if (waitSeconds < <NUM_LIT>) {<EOL>            <EOL>            waitSeconds *= <NUM_LIT>;<EOL>        }<EOL>        let waitMillis;<EOL>         if (cancelState === <NUM_LIT>) {<EOL>            cancelState = <NUM_LIT>;<EOL>            waitMillis = <NUM_LIT>;<EOL>        }<EOL>        else {<EOL>            waitMillis = (waitSeconds +  Math.random()) * <NUM_LIT>;<EOL>        }<EOL>         callWithDelay(waitMillis);<EOL>    }<EOL>    let stopped = false;<EOL>    function stop(wasTimeout) {<EOL>        if (stopped) {<EOL>            return;<EOL>        }<EOL>        stopped = true;<EOL>        if (triggeredCallback) {<EOL>            return;<EOL>        }<EOL>        if (timeoutId !== null) {<EOL>            if (!wasTimeout) {<EOL>                cancelState = <NUM_LIT>;<EOL>            }<EOL>            clearTimeout( timeoutId);<EOL>             callWithDelay(<NUM_LIT>);<EOL>        }<EOL>        else {<EOL>             if (!wasTimeout) {<EOL>","gt":"cancelState = <NUM_LIT>;"}
{"input":"<s> export function makeNormalUrl(urlPart) {<EOL>","gt":"return constants.domainBase + constants.apiBaseUrl + urlPart;"}
{"input":"<s> function findDatabindingInString(str) {<EOL>    const expressions = [];<EOL>    const openers = /{{|\\[\\[/g;<EOL>    let match;<EOL>    while (match = openers.exec(str)) {<EOL>        const matchedOpeners = match[<NUM_LIT>];<EOL>","gt":"const startIndex = match.index + <NUM_LIT>;"}
{"input":"<s> function findDatabindingInString(str) {<EOL>    const expressions = [];<EOL>    const openers = /{{|\\[\\[/g;<EOL>    let match;<EOL>    while (match = openers.exec(str)) {<EOL>        const matchedOpeners = match[<NUM_LIT>];<EOL>         const startIndex = match.index + <NUM_LIT>;<EOL>        const direction = matchedOpeners === '<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';<EOL>        const closers = matchedOpeners === '<STR_LIT>' ? '<STR_LIT>' : '<STR_LIT>';<EOL>        const endIndex = str.indexOf(closers, startIndex);<EOL>        if (endIndex === -<NUM_LIT>) {<EOL>            // No closers, this wasn't an expression after all.<EOL>            break;<EOL>        }<EOL>        const expressionText = str.slice(startIndex, endIndex);<EOL>        expressions.push({ startIndex,","gt":"endIndex, expressionText, direction });"}
{"input":"<s> <EOL>export function handlerCheck(cndn) {<EOL>","gt":"if (!cndn) {"}
{"input":"<s> <EOL>function assertGraphIsSettled(graph) {<EOL>    for (const record of graph['<STR_LIT>'].values()) {<EOL>        if (!(record.","gt":"dependenciesDeferred.resolved ||"}
{"input":"<s> function resetMockPages() {<EOL>","gt":"return [new MockPage(<NUM_LIT>), new MockPage(<NUM_LIT>), new MockPage(<NUM_LIT>)];"}
{"input":"<s> function getTypeFromAnnotation(jsdocAnn) {<EOL>    const typeTag = jsdoc.getTag(jsdocAnn, '<STR_LIT>');<EOL>    let type =","gt":"undefined;"}
{"input":"<s> export function getBehaviorReference(argNode, document, scope) {<EOL>    const behaviorName = astValue.getIdentifierName(argNode);<EOL>    if (!behaviorName) {<EOL>        return {<EOL>            successful: false,<EOL>            error: new Warning({<EOL>                code:","gt":"'<STR_LIT>',"}
{"input":"<s> export function getBehaviorReference(argNode, document, scope) {<EOL>    const behaviorName = astValue.getIdentifierName(argNode);<EOL>    if (!behaviorName) {<EOL>        return {<EOL>            successful: false,<EOL>            error: new Warning({<EOL>                code:  '<STR_LIT>',<EOL>                message: `<STR_LIT>` +<EOL>                    `<STR_LIT>`,<EOL>                severity: Severity.WARNING,<EOL>                sourceRange:","gt":"document.sourceRangeForNode(argNode),"}
{"input":"<s> export function cancelTests(context) {<EOL>    if (!context._testRunners) {<EOL>","gt":"return;"}
{"input":"<s> export function adapt(stream) {<EOL>    return getGlobal().","gt":"adaptStream(stream);"}
{"input":"<s> <EOL>export function mergeMatchingBundles(bundles, predicate) {<EOL>    const newBundles = Array.from(bundles);<EOL>    const bundlesToMerge = newBundles.filter(predicate);<EOL>    if (bundlesToMerge.length >","gt":"<NUM_LIT>) {"}
{"input":"<s> export default function () {<EOL>    describe((\"<STR_LIT>\"), function () {<EOL>        let vertNavService;<EOL>        beforeEach(() => {<EOL>            vertNavService = new","gt":"VerticalNavIconService();"}
{"input":"<s> export default function () {<EOL>    describe((\"<STR_LIT>\"), function () {<EOL>        let vertNavService;<EOL>        beforeEach(() => {<EOL>            vertNavService = new  VerticalNavIconService();<EOL>        });<EOL>        afterEach(() => {<EOL>            vertNavService =","gt":"null;"}
{"input":"<s> export default function () {<EOL>    describe((\"<STR_LIT>\"), function () {<EOL>        let vertNavService;<EOL>        beforeEach(() => {<EOL>            vertNavService = new  VerticalNavIconService();<EOL>        });<EOL>        afterEach(() => {<EOL>            vertNavService =  null;<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>            expect(vertNavService.hasIcons).toBe(false);<EOL>            vertNavService.registerIcon();<EOL>","gt":"expect(vertNavService.hasIcons).toBe(true);"}
{"input":"<s> export default function () {<EOL>    describe((\"<STR_LIT>\"), function () {<EOL>        let vertNavService;<EOL>        beforeEach(() => {<EOL>            vertNavService = new  VerticalNavIconService();<EOL>        });<EOL>        afterEach(() => {<EOL>            vertNavService =  null;<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>            expect(vertNavService.hasIcons).toBe(false);<EOL>            vertNavService.registerIcon();<EOL>             expect(vertNavService.hasIcons).toBe(true);<EOL>        });<EOL>        it(\"<STR_LIT>\", () => {<EOL>            expect(vertNavService.hasIcons).toBe(false);<EOL>            vertNavService.","gt":"registerIcon();"}
{"input":"<s> function raiseError(err) {<EOL>","gt":"if (err) {"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let","gt":"done;"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let  done;<EOL>    const scheduler = makeScheduler();<EOL>","gt":"function addAssert(assert) {"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let  done;<EOL>    const scheduler = makeScheduler();<EOL>     function addAssert(assert) {<EOL>        asserts.push(assert);<EOL>    }<EOL>    function currentTime() {<EOL>        return time;<EOL>    }<EOL>    function setTime(newTime) {<EOL>","gt":"time = newTime;"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let  done;<EOL>    const scheduler = makeScheduler();<EOL>     function addAssert(assert) {<EOL>        asserts.push(assert);<EOL>    }<EOL>    function currentTime() {<EOL>        return time;<EOL>    }<EOL>    function setTime(newTime) {<EOL>         time = newTime;<EOL>    }<EOL>    function setMaxTime(newTime) {<EOL>        maxTime = Math.max(newTime, maxTime);<EOL>    }<EOL>","gt":"function createOperator() {"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let  done;<EOL>    const scheduler = makeScheduler();<EOL>     function addAssert(assert) {<EOL>        asserts.push(assert);<EOL>    }<EOL>    function currentTime() {<EOL>        return time;<EOL>    }<EOL>    function setTime(newTime) {<EOL>         time = newTime;<EOL>    }<EOL>    function setMaxTime(newTime) {<EOL>        maxTime = Math.max(newTime, maxTime);<EOL>    }<EOL>     function createOperator() {<EOL>        return { schedule: scheduler.add, currentTime };<EOL>    }<EOL>    const timeSource = {<EOL>        diagram: makeDiagram(scheduler.add, currentTime, interval, setMaxTime),<EOL>        record: makeRecord(scheduler.add,","gt":"currentTime, interval),"}
{"input":"<s> function mockTimeSource({ interval = <NUM_LIT> } = {}) {<EOL>    let time = <NUM_LIT>;<EOL>    let maxTime = <NUM_LIT>;<EOL>    const asserts = [];<EOL>    let  done;<EOL>    const scheduler = makeScheduler();<EOL>     function addAssert(assert) {<EOL>        asserts.push(assert);<EOL>    }<EOL>    function currentTime() {<EOL>        return time;<EOL>    }<EOL>    function setTime(newTime) {<EOL>         time = newTime;<EOL>    }<EOL>    function setMaxTime(newTime) {<EOL>        maxTime = Math.max(newTime, maxTime);<EOL>    }<EOL>     function createOperator() {<EOL>        return { schedule: scheduler.add, currentTime };<EOL>    }<EOL>    const timeSource = {<EOL>        diagram: makeDiagram(scheduler.add, currentTime, interval, setMaxTime),<EOL>        record: makeRecord(scheduler.add,  currentTime, interval),<EOL>        assertEqual: makeAssertEqual(() => timeSource, scheduler.add, currentTime, interval, addAssert),<EOL>        delay: makeDelay(createOperator),<EOL>        debounce: makeDebounce(createOperator),<EOL>        periodic: makePeriodic(createOperator),<EOL>        throttle: makeThrottle(createOperator),<EOL>        animationFrames: () => timeSource.periodic(<NUM_LIT>).map(frame),<EOL>        throttleAnimation: makeThrottleAnimation(() => timeSource, scheduler.add, currentTime),<EOL>        run(doneCallback = raiseError, timeToRunTo = <NUM_LIT>) {<EOL>","gt":"done = doneCallback;"}
{"input":"<s> function displayUnexpectedErrors(errors) {<EOL>    if (errors.length === <NUM_LIT>) {<EOL>","gt":"return `<STR_LIT>`;"}
{"input":"<s> export async function startControlServer(options, mainlineInfo, variantInfos) {<EOL>    options = applyDefaultServerOptions(options);<EOL>    const app = express();<EOL>    app.get('<STR_LIT>', (_req, res) => {<EOL>        res.contentType('<STR_LIT>');<EOL>        res.send(JSON.stringify({<EOL>            packageName: options.","gt":"packageName,"}
{"input":"<s> export async function startControlServer(options, mainlineInfo, variantInfos) {<EOL>    options = applyDefaultServerOptions(options);<EOL>    const app = express();<EOL>    app.get('<STR_LIT>', (_req, res) => {<EOL>        res.contentType('<STR_LIT>');<EOL>        res.send(JSON.stringify({<EOL>            packageName: options. packageName,<EOL>            mainlineServer: {<EOL>                port: mainlineInfo.server.address().port,<EOL>            },<EOL>            variants: variantInfos.map(info => {<EOL>                return { name: info.variantName, port: info.server.address().port };<EOL>            })<EOL>        }));<EOL>        res.end();<EOL>    });<EOL>","gt":"const indexPath = path.join(__dirname, '<STR_LIT>', '<STR_LIT>', '<STR_LIT>');"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        let context;<EOL>        let headerActionService;<EOL>        let wizardNavigationService;<EOL>        beforeEach(","gt":"function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        let context;<EOL>        let headerActionService;<EOL>        let wizardNavigationService;<EOL>        beforeEach( function () {<EOL>            context = this.create(ClrWizard, HeaderActionsTestComponent);<EOL>            headerActionService = context.getClarityProvider(HeaderActionService);<EOL>","gt":"wizardNavigationService = context.getClarityProvider(WizardNavigationService);"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        let context;<EOL>        let headerActionService;<EOL>        let wizardNavigationService;<EOL>        beforeEach( function () {<EOL>            context = this.create(ClrWizard, HeaderActionsTestComponent);<EOL>            headerActionService = context.getClarityProvider(HeaderActionService);<EOL>             wizardNavigationService = context.getClarityProvider(WizardNavigationService);<EOL>            context.detectChanges();<EOL>        });<EOL>","gt":"it(\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        let context;<EOL>        let headerActionService;<EOL>        let wizardNavigationService;<EOL>        beforeEach( function () {<EOL>            context = this.create(ClrWizard, HeaderActionsTestComponent);<EOL>            headerActionService = context.getClarityProvider(HeaderActionService);<EOL>             wizardNavigationService = context.getClarityProvider(WizardNavigationService);<EOL>            context.detectChanges();<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            expect(headerActionService.wizardHasHeaderActions).toBe(true);<EOL>        });<EOL>        it(\"<STR_LIT>\",","gt":"function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        let context;<EOL>        let headerActionService;<EOL>        let wizardNavigationService;<EOL>        beforeEach( function () {<EOL>            context = this.create(ClrWizard, HeaderActionsTestComponent);<EOL>            headerActionService = context.getClarityProvider(HeaderActionService);<EOL>             wizardNavigationService = context.getClarityProvider(WizardNavigationService);<EOL>            context.detectChanges();<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            expect(headerActionService.wizardHasHeaderActions).toBe(true);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            const lastPage = wizardNavigationService.pageCollection.lastPage;<EOL>            expect(headerActionService.currentPageHasHeaderActions).toBe(true);<EOL>            wizardNavigationService.currentPage = lastPage;<EOL>            expect(headerActionService.currentPageHasHeaderActions).toBe(false);<EOL>        });<EOL>        it(","gt":"\"<STR_LIT>\", function () {"}
{"input":"<s> <EOL>export function isBlankTextNode(node) {<EOL>    return","gt":"node && dom5.isTextNode(node) &&"}
{"input":"<s> function formatRequest(req) {<EOL>    const headers = {};<EOL>    for (const key in req.headers) {<EOL>        headers[capWords(key)] = req.headers[key];<EOL>    }<EOL>","gt":"const formatted = {"}
{"input":"<s> function formatRequest(req) {<EOL>    const headers = {};<EOL>    for (const key in req.headers) {<EOL>        headers[capWords(key)] = req.headers[key];<EOL>    }<EOL>     const formatted = {<EOL>        headers: headers,<EOL>        url: req.","gt":"originalUrl,"}
{"input":"<s> function formatRequest(req) {<EOL>    const headers = {};<EOL>    for (const key in req.headers) {<EOL>        headers[capWords(key)] = req.headers[key];<EOL>    }<EOL>     const formatted = {<EOL>        headers: headers,<EOL>        url: req. originalUrl,<EOL>        data: req.body,<EOL>        files: req.files,<EOL>        form: {},<EOL>        json: {},<EOL>    };<EOL>    const contentType = (headers['<STR_LIT>'] || '<STR_LIT>').toLowerCase().split('<STR_LIT>')[<NUM_LIT>];<EOL>    const field = {<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>        '<STR_LIT>': '<STR_LIT>',<EOL>","gt":"'<STR_LIT>': '<STR_LIT>'"}
{"input":"<s> <EOL>export function loadSuites(files) {<EOL>    files.forEach(function (file) {<EOL>        if (/\\.js(\\?.*)?$/.test(file)) {<EOL>            jsSuites.push(file);<EOL>        }<EOL>        else if (/\\.html(\\?.*)?$/.test(file)) {<EOL>            htmlSuites.push(file);<EOL>        }<EOL>        else {<EOL>            throw","gt":"new Error('<STR_LIT>' + file);"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.","gt":"organizer = new DatagridRenderOrganizer();"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this. organizer = new DatagridRenderOrganizer();<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            let","gt":"clearedWidths = false;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this. organizer = new DatagridRenderOrganizer();<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            let  clearedWidths = false;<EOL>            this.organizer.clearWidths.subscribe(() => clearedWidths = true);<EOL>            this.organizer.resize();<EOL>            expect(clearedWidths).toBe(false);<EOL>            this.","gt":"organizer.resize();"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this. organizer = new DatagridRenderOrganizer();<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            let  clearedWidths = false;<EOL>            this.organizer.clearWidths.subscribe(() => clearedWidths = true);<EOL>            this.organizer.resize();<EOL>            expect(clearedWidths).toBe(false);<EOL>            this. organizer.resize();<EOL>            expect(clearedWidths).toBe(true);<EOL>        });<EOL>        it(","gt":"\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this. organizer = new DatagridRenderOrganizer();<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            let  clearedWidths = false;<EOL>            this.organizer.clearWidths.subscribe(() => clearedWidths = true);<EOL>            this.organizer.resize();<EOL>            expect(clearedWidths).toBe(false);<EOL>            this. organizer.resize();<EOL>            expect(clearedWidths).toBe(true);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            // Initial sizing to make sure clearWidths is included in the next one.<EOL>            this.organizer.resize();<EOL>            let step = <NUM_LIT>;<EOL>            this.organizer.noLayout.subscribe(on => expect(step++).","gt":"toBe(on ? <NUM_LIT> : <NUM_LIT>));"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this. organizer = new DatagridRenderOrganizer();<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            let  clearedWidths = false;<EOL>            this.organizer.clearWidths.subscribe(() => clearedWidths = true);<EOL>            this.organizer.resize();<EOL>            expect(clearedWidths).toBe(false);<EOL>            this. organizer.resize();<EOL>            expect(clearedWidths).toBe(true);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            // Initial sizing to make sure clearWidths is included in the next one.<EOL>            this.organizer.resize();<EOL>            let step = <NUM_LIT>;<EOL>            this.organizer.noLayout.subscribe(on => expect(step++). toBe(on ? <NUM_LIT> : <NUM_LIT>));<EOL>            this.organizer.clearWidths.subscribe(() => expect(step++).toBe(<NUM_LIT>));<EOL>            this.organizer.detectStrictWidths.subscribe(() => expect(step++).toBe(<NUM_LIT>));<EOL>            this.organizer.tableMode.subscribe(on => expect(step++).toBe(on ? <NUM_LIT> : <NUM_LIT>));<EOL>            this.organizer.computeWidths.subscribe(() => expect(step++).toBe(<NUM_LIT>));<EOL>            this.organizer.alignColumns.subscribe(() => expect(step++).toBe(<NUM_LIT>));<EOL>            this.organizer.scrollbar.subscribe(() => expect(step++).toBe(<NUM_LIT>));<EOL>","gt":"this.organizer.resize();"}
{"input":"<s> <EOL><EOL>export function find(items, predicate) {<EOL>    for (const item of items) {<EOL>        if (","gt":"predicate(item)) {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(","gt":"\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",","gt":"function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>","gt":"it(\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.","gt":"pageInstance.size = <NUM_LIT>;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>","gt":"expect(this.pageInstance.current).toBe(<NUM_LIT>);"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",","gt":"function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>","gt":"this.pageInstance.size = <NUM_LIT>;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =","gt":"<NUM_LIT>;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>","gt":"it(\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).","gt":"toBe(<NUM_LIT>);"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).","gt":"toBe(<NUM_LIT>);"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(","gt":"\"<STR_LIT>\", function () {"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            let nbChanges =","gt":"<NUM_LIT>;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            let nbChanges =  <NUM_LIT>;<EOL>            let currentPage;<EOL>            this.pageInstance.change.subscribe((page) => {<EOL>                nbChanges++;<EOL>","gt":"currentPage ="}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            let nbChanges =  <NUM_LIT>;<EOL>            let currentPage;<EOL>            this.pageInstance.change.subscribe((page) => {<EOL>                nbChanges++;<EOL>                 currentPage =","gt":"page;"}
{"input":"<s> export default function () {<EOL>    describe(\"<STR_LIT>\", function () {<EOL>        beforeEach(function () {<EOL>            this.pageInstance = new Page(new StateDebouncer());<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.size).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.last).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this. pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.firstItem).toBe(<NUM_LIT>);<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.next();<EOL>             expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\",  function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>             this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size =  <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.lastItem).toBe(<NUM_LIT>);<EOL>        });<EOL>         it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.next();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it(\"<STR_LIT>\", function () {<EOL>            this.pageInstance.size = <NUM_LIT>;<EOL>            this.pageInstance.totalItems = <NUM_LIT>;<EOL>            this.pageInstance.current = <NUM_LIT>;<EOL>            expect(this.pageInstance.current). toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>            this.pageInstance.previous();<EOL>            expect(this.pageInstance.current).toBe(<NUM_LIT>);<EOL>        });<EOL>        it( \"<STR_LIT>\", function () {<EOL>            let nbChanges =  <NUM_LIT>;<EOL>            let currentPage;<EOL>            this.pageInstance.change.subscribe((page) => {<EOL>                nbChanges++;<EOL>                 currentPage =  page;<EOL>            });<EOL>            expect(","gt":"currentPage).toBeUndefined();"}
{"input":"<s> function exists(path) {<EOL>    try {<EOL>        fs.statSync(path);<EOL>        return","gt":"true;"}
{"input":"<s> <EOL>export function pickBestDescription(...descriptions) {<EOL>    let description = '<STR_LIT>';<EOL>    for (const desc of descriptions) {<EOL>        if (desc && desc.","gt":"length > description.length) {"}
{"input":"<s> <EOL>function isFunction(fn) {<EOL>    const","gt":"functionType = typeof function () { };"}
{"input":"<s> function runClean(editor) {<EOL>    try {<EOL>        const cwd = editor.document<EOL>            ? utils.detectProjectRoot(editor.document.fileName)<EOL>            : vscode.workspace.rootPath;<EOL>        const elmStuffDir = path.join(cwd, '<STR_LIT>', '<STR_LIT>');<EOL>        rimraf(","gt":"elmStuffDir, error => {"}
{"input":"<s> function runClean(editor) {<EOL>    try {<EOL>        const cwd = editor.document<EOL>            ? utils.detectProjectRoot(editor.document.fileName)<EOL>            : vscode.workspace.rootPath;<EOL>        const elmStuffDir = path.join(cwd, '<STR_LIT>', '<STR_LIT>');<EOL>        rimraf( elmStuffDir, error => {<EOL>            if (error) {<EOL>                vscode.window.showErrorMessage('<STR_LIT>');<EOL>            }<EOL>","gt":"else {"}
{"input":"<s> function mockTracerimplementationTests() {<EOL>    describe('<STR_LIT>', () => {<EOL>        describe('<STR_LIT>', () => {<EOL>            it('<STR_LIT>', () => {<EOL>                const tracer = new MockTracer();<EOL>","gt":"const span = tracer.startSpan('<STR_LIT>');"}
{"input":"<s> function mockTracerimplementationTests() {<EOL>    describe('<STR_LIT>', () => {<EOL>        describe('<STR_LIT>', () => {<EOL>            it('<STR_LIT>', () => {<EOL>                const tracer = new MockTracer();<EOL>                 const span = tracer.startSpan('<STR_LIT>');<EOL>                span.addTags({ key: '<STR_LIT>' });<EOL>                span.finish();<EOL>                expect(() => {<EOL>                    const report = tracer.","gt":"report();"}
{"input":"<s> function mockTracerimplementationTests() {<EOL>    describe('<STR_LIT>', () => {<EOL>        describe('<STR_LIT>', () => {<EOL>            it('<STR_LIT>', () => {<EOL>                const tracer = new MockTracer();<EOL>                 const span = tracer.startSpan('<STR_LIT>');<EOL>                span.addTags({ key: '<STR_LIT>' });<EOL>                span.finish();<EOL>                expect(() => {<EOL>                    const report = tracer. report();<EOL>                    for (const span of report.spans) {<EOL>                        span.tags();<EOL>                    }<EOL>                }).to.","gt":"not.throw(Error);"}
{"input":"<s> export function mixins(...Ctors) {<EOL>    return Vue.","gt":"extend({ mixins: Ctors });"}
{"input":"<s> function triggerValidation(textDocument) {<EOL>    cleanPendingValidation(textDocument);<EOL>    pendingValidationRequests[textDocument.","gt":"uri] = setTimeout(() => {"}
{"input":"<s> function toLowerOrHover(action, text) {<EOL>    return","gt":"action === OracleAction.IsAutocomplete ? text.toLowerCase() : text;"}
{"input":"<s> export function componentFactory(Component, options = {}) {<EOL>    options.name = options.name || Component._componentTag || Component.name;<EOL>    // prototype props.<EOL>    const proto = Component.prototype;<EOL>","gt":"Object.getOwnPropertyNames(proto).forEach(function (key) {"}
{"input":"<s> export function componentFactory(Component, options = {}) {<EOL>    options.name = options.name || Component._componentTag || Component.name;<EOL>    // prototype props.<EOL>    const proto = Component.prototype;<EOL>     Object.getOwnPropertyNames(proto).forEach(function (key) {<EOL>        if (key === '<STR_LIT>') {<EOL>","gt":"return;"}
{"input":"<s> export function componentFactory(Component, options = {}) {<EOL>    options.name = options.name || Component._componentTag || Component.name;<EOL>    // prototype props.<EOL>    const proto = Component.prototype;<EOL>     Object.getOwnPropertyNames(proto).forEach(function (key) {<EOL>        if (key === '<STR_LIT>') {<EOL>             return;<EOL>        }<EOL>        // hooks<EOL>        if ($internalHooks.indexOf(","gt":"key) > -<NUM_LIT>) {"}
{"input":"<s> export function componentFactory(Component, options = {}) {<EOL>    options.name = options.name || Component._componentTag || Component.name;<EOL>    // prototype props.<EOL>    const proto = Component.prototype;<EOL>     Object.getOwnPropertyNames(proto).forEach(function (key) {<EOL>        if (key === '<STR_LIT>') {<EOL>             return;<EOL>        }<EOL>        // hooks<EOL>        if ($internalHooks.indexOf( key) > -<NUM_LIT>) {<EOL>            options[key] = proto[key];<EOL>            return;<EOL>        }<EOL>        const descriptor = Object.getOwnPropertyDescriptor(proto, key);<EOL>        if (typeof descriptor.","gt":"value === '<STR_LIT>') {"}
{"input":"<s> export function componentFactory(Component, options = {}) {<EOL>    options.name = options.name || Component._componentTag || Component.name;<EOL>    // prototype props.<EOL>    const proto = Component.prototype;<EOL>     Object.getOwnPropertyNames(proto).forEach(function (key) {<EOL>        if (key === '<STR_LIT>') {<EOL>             return;<EOL>        }<EOL>        // hooks<EOL>        if ($internalHooks.indexOf( key) > -<NUM_LIT>) {<EOL>            options[key] = proto[key];<EOL>            return;<EOL>        }<EOL>        const descriptor = Object.getOwnPropertyDescriptor(proto, key);<EOL>        if (typeof descriptor. value === '<STR_LIT>') {<EOL>            // methods<EOL>            (options.methods || (options.methods = {}))[key] = descriptor.value;<EOL>        }<EOL>        else if (descriptor.get || descriptor.set) {<EOL>            // computed properties<EOL>            (options.computed || (options.computed = {}))[key] = {<EOL>                get: descriptor.get,<EOL>                set: descriptor.set<EOL>            };<EOL>        }<EOL>    });<EOL>    (options.mixins || (options.mixins = [])).push({<EOL>        data() {<EOL>            return collectDataFromConstructor(this, Component);<EOL>        }<EOL>    });<EOL>    // decorate options<EOL>    const decorators = Component.__decorators__;<EOL>    if (decorators) {<EOL>","gt":"decorators.forEach(fn => fn(options));"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:","gt":"'<STR_LIT>',"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:  '<STR_LIT>',<EOL>    };<EOL>    const quickPickVersionOptions = {<EOL>","gt":"matchOnDescription: false,"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:  '<STR_LIT>',<EOL>    };<EOL>    const quickPickVersionOptions = {<EOL>         matchOnDescription: false,<EOL>        placeHolder: '<STR_LIT>',<EOL>    };<EOL>    return getJSON()<EOL>        .","gt":"then(transformToPackageQuickPickItems)"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:  '<STR_LIT>',<EOL>    };<EOL>    const quickPickVersionOptions = {<EOL>         matchOnDescription: false,<EOL>        placeHolder: '<STR_LIT>',<EOL>    };<EOL>    return getJSON()<EOL>        . then(transformToPackageQuickPickItems)<EOL>        .then(packages => vscode.window.showQuickPick(packages, quickPickPackageOptions))<EOL>        .then(selectedPackage => {<EOL>        if (selectedPackage ===","gt":"undefined) {"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:  '<STR_LIT>',<EOL>    };<EOL>    const quickPickVersionOptions = {<EOL>         matchOnDescription: false,<EOL>        placeHolder: '<STR_LIT>',<EOL>    };<EOL>    return getJSON()<EOL>        . then(transformToPackageQuickPickItems)<EOL>        .then(packages => vscode.window.showQuickPick(packages, quickPickPackageOptions))<EOL>        .then(selectedPackage => {<EOL>        if (selectedPackage ===  undefined) {<EOL>            return; // no package<EOL>        }<EOL>        return vscode.window<EOL>            .showQuickPick(","gt":"transformToPackageVersionQuickPickItems(selectedPackage), quickPickVersionOptions)"}
{"input":"<s> function browsePackage() {<EOL>    const quickPickPackageOptions = {<EOL>        matchOnDescription: true,<EOL>        placeHolder:  '<STR_LIT>',<EOL>    };<EOL>    const quickPickVersionOptions = {<EOL>         matchOnDescription: false,<EOL>        placeHolder: '<STR_LIT>',<EOL>    };<EOL>    return getJSON()<EOL>        . then(transformToPackageQuickPickItems)<EOL>        .then(packages => vscode.window.showQuickPick(packages, quickPickPackageOptions))<EOL>        .then(selectedPackage => {<EOL>        if (selectedPackage ===  undefined) {<EOL>            return; // no package<EOL>        }<EOL>        return vscode.window<EOL>            .showQuickPick( transformToPackageVersionQuickPickItems(selectedPackage), quickPickVersionOptions)<EOL>            .then(selectedVersion => {<EOL>            oc.show(vscode.ViewColumn.Three);<EOL>            let uri = selectedVersion<EOL>                ? vscode.Uri.parse('<STR_LIT>' +<EOL>                    selectedPackage.","gt":"label +"}
{"input":"<s> export function getComments(comments) {<EOL>    if (comments == null)<EOL>        return \"<STR_LIT>\";<EOL>    var commentStr = \"<STR_LIT>\";<EOL>    if (comments.length == <NUM_LIT>) {<EOL>        return","gt":"comments[<NUM_LIT>].content;"}
{"input":"<s> export function getComments(comments) {<EOL>    if (comments == null)<EOL>        return \"<STR_LIT>\";<EOL>    var commentStr = \"<STR_LIT>\";<EOL>    if (comments.length == <NUM_LIT>) {<EOL>        return  comments[<NUM_LIT>].content;<EOL>    }<EOL>    for (var i = <NUM_LIT>; i < comments.length; i++) {<EOL>        var comment = comments[i].content;<EOL>        var index = comment.trim().","gt":"indexOf(\"<STR_LIT>\");"}
{"input":"<s> <EOL>export function iterate(collection) {<EOL>    return","gt":"new IteratorWithOperators(toIterator(collection));"}
{"input":"<s> function getLanguagesInDocument(document, regions) {<EOL>    const result = ['<STR_LIT>'];<EOL>    for (const region of regions) {<EOL>        if (region.languageId && result.indexOf(","gt":"region.languageId) === -<NUM_LIT>) {"}
{"input":"<s> function getParameterIndex(args, maxCount, index, callBack) {<EOL>    vscode.window.showInputBox({ prompt: \"<STR_LIT>\" + (index + <NUM_LIT>), value: \"<STR_LIT>\" + (index + <NUM_LIT>) }).then(parameter => {<EOL>        args.push(parameter);<EOL>        if (index >= maxCount - <NUM_LIT>) {<EOL>            callBack(","gt":"args);"}
{"input":"<s> function getParameterIndex(args, maxCount, index, callBack) {<EOL>    vscode.window.showInputBox({ prompt: \"<STR_LIT>\" + (index + <NUM_LIT>), value: \"<STR_LIT>\" + (index + <NUM_LIT>) }).then(parameter => {<EOL>        args.push(parameter);<EOL>        if (index >= maxCount - <NUM_LIT>) {<EOL>            callBack( args);<EOL>        }<EOL>        else {<EOL>            index++;<EOL>            getParameterIndex(args,","gt":"maxCount, index, callBack);"}
{"input":"<s> export function getLogFiles() {<EOL>    const directory = path.join(getUserDataPath(), '<STR_LIT>');<EOL>    if (!fs.existsSync(directory)) {<EOL>","gt":"return [];"}
{"input":"<s> <EOL>export function generateGravatarUrl(email, size = <NUM_LIT>) {<EOL>    const input = email.trim().toLowerCase();<EOL>","gt":"const hash = crypto"}
{"input":"<s> function getIpcFriendlyError(error) {<EOL>    return {<EOL>","gt":"message: error.message || `<STR_LIT>`,"}
{"input":"<s> function filter(name) {<EOL>    if (filterRegExp) {<EOL>        return","gt":"filterRegExp.test(name);"}
{"input":"<s> <EOL>export function findMenuItemByID(menu, id) {<EOL>    const items = menu.items;<EOL>    for (const item of items) {<EOL>        // The electron type definition doesn't include the `id` field :(<EOL>        if (item.id === id) {<EOL>            return","gt":"item;"}
{"input":"<s> <EOL>export function findMenuItemByID(menu, id) {<EOL>    const items = menu.items;<EOL>    for (const item of items) {<EOL>        // The electron type definition doesn't include the `id` field :(<EOL>        if (item.id === id) {<EOL>            return  item;<EOL>        }<EOL>        // We're assuming we're working with an already created menu.<EOL>        const submenu = item.submenu;<EOL>","gt":"if (submenu) {"}
{"input":"<s> export function formatTrackTitle(title) {<EOL>","gt":"if (!title)"}
{"input":"<s> export function streamUrl(url) {<EOL>    return","gt":"url}?${CLIENT_ID_PARAM}`<STR_LIT>;"}
{"input":"<s> <EOL>export function flatten(arr, ret = []) {<EOL>    if (Array.isArray(arr)) {<EOL>        for (let i = <NUM_LIT>; i < arr.length; ++i) {<EOL>            flatten(","gt":"arr[i], ret);"}
{"input":"<s> function disallowedCharacter(value) {<EOL>    if (value.length !== <NUM_LIT>) {<EOL>        return fatalError('<STR_LIT>');<EOL>    }<EOL>    const disallowedCharacters = [<EOL>        '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> function disallowedCharacter(value) {<EOL>    if (value.length !== <NUM_LIT>) {<EOL>        return fatalError('<STR_LIT>');<EOL>    }<EOL>    const disallowedCharacters = [<EOL>        '<STR_LIT>',<EOL>         '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> function disallowedCharacter(value) {<EOL>    if (value.length !== <NUM_LIT>) {<EOL>        return fatalError('<STR_LIT>');<EOL>    }<EOL>    const disallowedCharacters = [<EOL>        '<STR_LIT>',<EOL>         '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>         '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        '<STR_LIT>',<EOL>        \"<STR_LIT>\",<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> function dtypeDL(propelDtype) {<EOL>    switch (propelDtype) {<EOL>        case \"<STR_LIT>\":<EOL>","gt":"case \"<STR_LIT>\":"}
{"input":"<s> <EOL>export function rejectOAuthRequest(error) {<EOL>    if (!oauthState) {<EOL>","gt":"fatalError('<STR_LIT>');"}
{"input":"<s> async function getResolvedInstallPath() {<EOL>    return new Promise((resolve, reject) => {<EOL>        Fs.readlink(InstalledCLIPath, (err, realpath) => {<EOL>            if (err) {<EOL>","gt":"resolve(null);"}
{"input":"<s> function readLatestMigration() {<EOL>    const angularCli = JSON.parse(fs.","gt":"readFileSync('<STR_LIT>').toString());"}
{"input":"<s> function runRule(ruleArguments, content, libNames = ['<STR_LIT>'], appNames = []) {<EOL>    const options = {<EOL>        ruleArguments: [ruleArguments],<EOL>","gt":"ruleSeverity: '<STR_LIT>',"}
{"input":"<s> export default function (options) {<EOL>    const fullPath = path.join(options.directory, toFileName(options.name), options.sourceDir);<EOL>    return chain([<EOL>        mergeWith(apply(url('<STR_LIT>'), [template({ ...options, ...names(options.name), dot: '<STR_LIT>', tmpl: '<STR_LIT>' })])),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name:","gt":"'<STR_LIT>',"}
{"input":"<s> export default function (options) {<EOL>    const fullPath = path.join(options.directory, toFileName(options.name), options.sourceDir);<EOL>    return chain([<EOL>        mergeWith(apply(url('<STR_LIT>'), [template({ ...options, ...names(options.name), dot: '<STR_LIT>', tmpl: '<STR_LIT>' })])),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name:  '<STR_LIT>',<EOL>            commonModule: false,<EOL>            flat: true,<EOL>            routing:","gt":"options.routing,"}
{"input":"<s> export default function (options) {<EOL>    const fullPath = path.join(options.directory, toFileName(options.name), options.sourceDir);<EOL>    return chain([<EOL>        mergeWith(apply(url('<STR_LIT>'), [template({ ...options, ...names(options.name), dot: '<STR_LIT>', tmpl: '<STR_LIT>' })])),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name:  '<STR_LIT>',<EOL>            commonModule: false,<EOL>            flat: true,<EOL>            routing:  options.routing,<EOL>            sourceDir: fullPath,<EOL>            spec: false<EOL>        }),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name: '<STR_LIT>',<EOL>            selector:","gt":"options.prefix}-root`<STR_LIT>,"}
{"input":"<s> export default function (options) {<EOL>    const fullPath = path.join(options.directory, toFileName(options.name), options.sourceDir);<EOL>    return chain([<EOL>        mergeWith(apply(url('<STR_LIT>'), [template({ ...options, ...names(options.name), dot: '<STR_LIT>', tmpl: '<STR_LIT>' })])),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name:  '<STR_LIT>',<EOL>            commonModule: false,<EOL>            flat: true,<EOL>            routing:  options.routing,<EOL>            sourceDir: fullPath,<EOL>            spec: false<EOL>        }),<EOL>        externalSchematic('<STR_LIT>', '<STR_LIT>', {<EOL>            name: '<STR_LIT>',<EOL>            selector: `<STR_LIT>`,<EOL>            sourceDir: fullPath,<EOL>            flat: true,<EOL>            inlineStyle: options.inlineStyle,<EOL>            inlineTemplate: options.inlineTemplate,<EOL>            spec: !options.skipTests,<EOL>","gt":"styleext: options.style,"}
{"input":"<s> function addLazyLoadedRouterConfiguration(modulePath) {<EOL>    return (host) => {<EOL>        const moduleSource = host.read(modulePath).toString('<STR_LIT>');<EOL>        const sourceFile = ts.createSourceFile(modulePath, moduleSource,","gt":"ts.ScriptTarget.Latest, true);"}
{"input":"<s> function addNgRxToPackageJson() {<EOL>    return (host) => {<EOL>        if (!host.exists('<STR_LIT>'))<EOL>            return host;<EOL>        const sourceText = host.read('<STR_LIT>').toString('<STR_LIT>');<EOL>        const json = JSON.parse(","gt":"sourceText);"}
{"input":"<s> function addNgRxToPackageJson() {<EOL>    return (host) => {<EOL>        if (!host.exists('<STR_LIT>'))<EOL>            return host;<EOL>        const sourceText = host.read('<STR_LIT>').toString('<STR_LIT>');<EOL>        const json = JSON.parse( sourceText);<EOL>        if (!json['<STR_LIT>']) {<EOL>            json['<STR_LIT>'] = {};<EOL>        }<EOL>        if (!json['<STR_LIT>']['<STR_LIT>']) {<EOL>            json['<STR_LIT>']['<STR_LIT>'] = ngrxVersion;<EOL>        }<EOL>        if (!json['<STR_LIT>']['<STR_LIT>']) {<EOL>            json['<STR_LIT>'][","gt":"'<STR_LIT>'] = routerStoreVersion;"}
{"input":"<s> function addNgRxToPackageJson() {<EOL>    return (host) => {<EOL>        if (!host.exists('<STR_LIT>'))<EOL>            return host;<EOL>        const sourceText = host.read('<STR_LIT>').toString('<STR_LIT>');<EOL>        const json = JSON.parse( sourceText);<EOL>        if (!json['<STR_LIT>']) {<EOL>            json['<STR_LIT>'] = {};<EOL>        }<EOL>        if (!json['<STR_LIT>']['<STR_LIT>']) {<EOL>            json['<STR_LIT>']['<STR_LIT>'] = ngrxVersion;<EOL>        }<EOL>        if (!json['<STR_LIT>']['<STR_LIT>']) {<EOL>            json['<STR_LIT>'][ '<STR_LIT>'] = routerStoreVersion;<EOL>        }<EOL>        if (!json['<STR_LIT>']['<STR_LIT>']) {<EOL>            json['<STR_LIT>']['<STR_LIT>'] = ngrxVersion;<EOL>        }<EOL>","gt":"if (!json['<STR_LIT>']['<STR_LIT>']) {"}
{"input":"<s> function packageOSX() {<EOL>    const dest = getOSXZipPath();<EOL>    fs.","gt":"removeSync(dest);"}
{"input":"<s> function addTasks(options, context) {<EOL>    let packageTask;<EOL>    if (!options.skipInstall) {<EOL>        packageTask = context.addTask(new NodePackageInstallTask(","gt":"options.directory));"}
{"input":"<s> export function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = \"<STR_LIT>\") {<EOL>    assert(arraysEqual(shapeA, shapeB),","gt":"errorMessagePrefix + `<STR_LIT>`);"}
{"input":"<s> <EOL>export function getGenericHostname(remoteURL) {<EOL>    const parsed = parseRemote(remoteURL);<EOL>    if (parsed) {<EOL>        return parsed.","gt":"hostname;"}
{"input":"<s> <EOL>export function getGenericUsername(hostname) {<EOL>    const key =","gt":"getKeyForUsername(hostname);"}
{"input":"<s> <EOL>export function getVersion() {<EOL>    if (!version) {<EOL>","gt":"version = getApp().getVersion();"}
{"input":"<s> function loseContext(gl) {<EOL>    if (gl != null) {<EOL>        const loseContextExtension = gl.getExtension(\"<STR_LIT>\");<EOL>        if (loseContextExtension ==","gt":"null) {"}
{"input":"<s> export function fileExists(filePath) {<EOL>    try {<EOL>","gt":"return statSync(filePath).isFile();"}
{"input":"<s> export function addDeclarationToModule(source, modulePath, symbolName) {<EOL>","gt":"return _addSymbolToNgModuleMetadata(source, modulePath, '<STR_LIT>', symbolName);"}
{"input":"<s> export function getTouchedProjects(touchedFiles) {<EOL>    const config = JSON.parse(fs.readFileSync('<STR_LIT>', '<STR_LIT>'));<EOL>","gt":"const projects = getProjectNodes(config);"}
{"input":"<s> function readLatestMigration() {<EOL>    const angularCli = JSON.parse(","gt":"fs.readFileSync('<STR_LIT>').toString());"}
{"input":"<s> function isWebGLDisjointQueryTimerEnabled(webGLVersion) {<EOL>    const gl = getWebGLRenderingContext(webGLVersion);<EOL>    const extensionName = webGLVersion === <NUM_LIT> ? \"<STR_LIT>\" :<EOL>","gt":"\"<STR_LIT>\";"}
{"input":"<s> async function getLatestRelease(options) {<EOL>    const allTags = await spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>    let releaseTags = allTags<EOL>        .split('<STR_LIT>')<EOL>        .filter(tag =>","gt":"tag.startsWith('<STR_LIT>'))"}
{"input":"<s> async function getLatestRelease(options) {<EOL>    const allTags = await spawn('<STR_LIT>', ['<STR_LIT>']);<EOL>    let releaseTags = allTags<EOL>        .split('<STR_LIT>')<EOL>        .filter(tag =>  tag.startsWith('<STR_LIT>'))<EOL>        .filter(tag => tag.indexOf('<STR_LIT>') === -<NUM_LIT>)<EOL>        .filter(tag => tag.indexOf('<STR_LIT>') === -<NUM_LIT>);<EOL>    if (options.excludeBetaReleases) {<EOL>        releaseTags = releaseTags.filter(tag => tag.indexOf('<STR_LIT>') === -<NUM_LIT>);<EOL>    }<EOL>    const releaseVersions = releaseTags.map(tag => tag.substr(","gt":"<NUM_LIT>));"}
{"input":"<s> function parseChannel(arg) {<EOL>    if (arg === '<STR_LIT>' || arg === '<STR_LIT>' || arg === '<STR_LIT>') {<EOL>        return","gt":"arg;"}
{"input":"<s> <EOL>export function lookupPreferredEmail(emails) {<EOL>    if (emails.length === <NUM_LIT>) {<EOL>        return null;<EOL>    }<EOL>    const primary = emails.","gt":"find(e => e.primary);"}
{"input":"<s> <EOL>export function lookupPreferredEmail(emails) {<EOL>    if (emails.length === <NUM_LIT>) {<EOL>        return null;<EOL>    }<EOL>    const primary = emails. find(e => e.primary);<EOL>    if (primary && isEmailPublic(primary)) {<EOL>        return primary;<EOL>    }<EOL>    const noReply = emails.find(e => e.email.toLowerCase().endsWith('<STR_LIT>'));<EOL>    if (noReply) {<EOL>","gt":"return noReply;"}
{"input":"<s> export async function externalEditorErrorHandler(error, dispatcher) {<EOL>    const e = asEditorError(error);<EOL>    if (!e) {<EOL>        return error;<EOL>    }<EOL>    const { suggestAtom, openPreferences } = e.metadata;<EOL>    await dispatcher.showPopup({<EOL>        type: PopupType.ExternalEditorFailed,<EOL>        message: e.message,<EOL>        suggestAtom,<EOL>","gt":"openPreferences,"}
{"input":"<s> <EOL>function rangeJS(limit) {<EOL>    const r = new Array(limit);<EOL>    for (let i = <NUM_LIT>; i <","gt":"limit; i++) {"}
{"input":"<s> <EOL>export async function openMergeTool(repository, path) {<EOL>","gt":"await git(['<STR_LIT>', path], repository.path, '<STR_LIT>');"}
{"input":"<s> function getSampler1D(inputInfo) {<EOL>    const texName = inputInfo.","gt":"name;"}
{"input":"<s> // Sugar for single value ops.<EOL>export function execute0(opName, inputs, attrs) {<EOL>    const handles = inputs.map((t) => t.handle);<EOL>    const","gt":"r = binding.execute(ctx, opName, attrs, handles);"}
{"input":"<s> export function getCoordsDataType(rank) {<EOL>    if (rank === <NUM_LIT>) {<EOL>        return \"<STR_LIT>\";<EOL>    }<EOL>    else if (rank === <NUM_LIT>) {<EOL>        return","gt":"\"<STR_LIT>\";"}
{"input":"<s> <EOL>export async function getIndexChanges(repository) {<EOL>    const args = ['<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>', '<STR_LIT>'];<EOL>    let result = await git([...args, '<STR_LIT>', '<STR_LIT>'], repository.path, '<STR_LIT>', {<EOL>        successExitCodes: new Set([<NUM_LIT>, <NUM_LIT>]),<EOL>    });<EOL>    // 128 from diff-index either means that the path isn't a repository or (more<EOL>    // likely) that the repository HEAD is unborn. If HEAD is unborn we'll diff<EOL>    // the index against the null tree instead.<EOL>    if (result.exitCode === <NUM_LIT>) {<EOL>        result = await git([...args, NullTreeSHA], repository.path, '<STR_LIT>');<EOL>    }<EOL>    const map = new Map();<EOL>    const pieces = result.stdout.split('<STR_LIT>');<EOL>    for (let i = <NUM_LIT>; i < pieces.length - <NUM_LIT>; i += <NUM_LIT>) {<EOL>        const","gt":"status = getNoRenameIndexStatus(pieces[i]);"}
{"input":"<s> <EOL>function createProgressProcessCallback(parser, lfsProgressPath, progressCallback) {<EOL>    return process => {<EOL>        if (lfsProgressPath) {<EOL>            const lfsParser = new GitLFSProgressParser();<EOL>            const disposable = tailByLine(lfsProgressPath, line => {<EOL>                const progress = lfsParser.parse(line);<EOL>                progressCallback(","gt":"progress);"}
{"input":"<s> export function STEP(alpha = <NUM_LIT>) {<EOL>    return","gt":"CHECK_NAN_SNIPPET + `<STR_LIT>`"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(repository, file) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(repository, file) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(repository, file) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>","gt":"'<STR_LIT>',"}
{"input":"<s> <EOL>export async function getWorkingDirectoryDiff(repository, file) {<EOL>    let successExitCodes;<EOL>    let args;<EOL>    // `--no-ext-diff` should be provided wherever we invoke `git diff` so that any<EOL>    // diff.external program configured by the user is ignored<EOL>    if (file.status === AppFileStatus.New) {<EOL>        // `git diff --no-index` seems to emulate the exit codes from `diff` irrespective of<EOL>        // whether you set --exit-code<EOL>        //<EOL>        // this is the behaviour:<EOL>        // - 0 if no changes found<EOL>        // - 1 if changes found<EOL>        // -   and error otherwise<EOL>        //<EOL>        // citation in source:<EOL>        // https://github.com/git/git/blob/1f66975deb8402131fbf7c14330d0c7cdebaeaa2/diff-no-index.c#L300<EOL>        successExitCodes = new Set([<NUM_LIT>, <NUM_LIT>]);<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else if (file.status === AppFileStatus.Renamed) {<EOL>        // NB: Technically this is incorrect, the best kind of incorrect.<EOL>        // In order to show exactly what will end up in the commit we should<EOL>        // perform a diff between the new file and the old file as it appears<EOL>        // in HEAD. By diffing against the index we won't show any changes<EOL>        // already staged to the renamed file which differs from our other diffs.<EOL>        // The closest I got to that was running hash-object and then using<EOL>        // git diff <blob> <blob> but that seems a bit excessive.<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>             '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>    else {<EOL>        args = [<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            '<STR_LIT>',<EOL>            file.path,<EOL>        ];<EOL>    }<EOL>","gt":"const { output, error } = await spawnAndComplete(args, repository.path, '<STR_LIT>', successExitCodes);"}
{"input":"<s> <EOL>export async function mergeTrailers(repository, commitMessage, trailers, unfold = false) {<EOL>    const args = ['<STR_LIT>'];<EOL>    if (unfold) {<EOL>        args.push('<STR_LIT>');<EOL>    }<EOL>    for (const trailer of trailers) {<EOL>        args.push('<STR_LIT>', `<STR_LIT>`);<EOL>    }<EOL>    const result = await git(args, repository.path, '<STR_LIT>', {<EOL>        stdin:","gt":"commitMessage,"}
{"input":"<s> <EOL>function getUserAgent() {<EOL>    const","gt":"platform = __DARWIN__ ? '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> <EOL>function mapStatus(rawStatus) {<EOL>    const status = rawStatus.trim();<EOL>    if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Modified;<EOL>    } // modified<EOL>    if (","gt":"status === '<STR_LIT>') {"}
{"input":"<s> <EOL>function mapStatus(rawStatus) {<EOL>    const status = rawStatus.trim();<EOL>    if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Modified;<EOL>    } // modified<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.New;<EOL>    } // added<EOL>    if (","gt":"status === '<STR_LIT>') {"}
{"input":"<s> <EOL>function mapStatus(rawStatus) {<EOL>    const status = rawStatus.trim();<EOL>    if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Modified;<EOL>    } // modified<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.New;<EOL>    } // added<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.Deleted;<EOL>    } // deleted<EOL>","gt":"if (status === '<STR_LIT>') {"}
{"input":"<s> <EOL>function mapStatus(rawStatus) {<EOL>    const status = rawStatus.trim();<EOL>    if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Modified;<EOL>    } // modified<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.New;<EOL>    } // added<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.Deleted;<EOL>    } // deleted<EOL>     if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Renamed;<EOL>    } // renamed<EOL>    if (status ===","gt":"'<STR_LIT>') {"}
{"input":"<s> <EOL>function mapStatus(rawStatus) {<EOL>    const status = rawStatus.trim();<EOL>    if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Modified;<EOL>    } // modified<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.New;<EOL>    } // added<EOL>    if ( status === '<STR_LIT>') {<EOL>        return AppFileStatus.Deleted;<EOL>    } // deleted<EOL>     if (status === '<STR_LIT>') {<EOL>        return AppFileStatus.Renamed;<EOL>    } // renamed<EOL>    if (status ===  '<STR_LIT>') {<EOL>        return AppFileStatus.Copied;<EOL>    } // copied<EOL>    // git log -M --name-status will return a RXXX - where XXX is a percentage<EOL>    if (status.match(/R[0-9]+/)) {<EOL>        return","gt":"AppFileStatus.Renamed;"}
{"input":"<s> function getAskPassScriptPath() {<EOL>    return","gt":"Path.resolve(__dirname, '<STR_LIT>');"}
{"input":"<s> <EOL>export function parse(label) {<EOL>    if (__DARWIN__) {<EOL>        return Darwin.parse(label);<EOL>    }<EOL>    else if (","gt":"__WIN32__) {"}
{"input":"<s> <EOL>export function parse(label) {<EOL>    if (__DARWIN__) {<EOL>        return Darwin.parse(label);<EOL>    }<EOL>    else if ( __WIN32__) {<EOL>        return Win32.parse(label);<EOL>    }<EOL>    else if (__LINUX__) {<EOL>        return Linux.parse(","gt":"label);"}
{"input":"<s> function getTextureType(gl) {<EOL>    if (!ENV.get(\"<STR_LIT>\")) {<EOL>","gt":"return gl.UNSIGNED_BYTE;"}
{"input":"<s> export async function downloadMatrixFromOutputTextureAsync(<EOL>// tslint:disable-next-line:no-any<EOL>gl, getBufferSubDataAsyncExtension, rows, columns) {<EOL>    // tslint:disable-next-line:no-any<EOL>    const gl2 = gl;<EOL>    const channelsPerPixel = <NUM_LIT>;<EOL>    const downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);<EOL>    // Allocate a pixel pack buffer so we can copy the texture to it.<EOL>    const bufferSizeBytes = downloadTarget instanceof Float32Array ?<EOL>        downloadTarget.length * <NUM_LIT> :<EOL>        downloadTarget;<EOL>    const buffer = gl.createBuffer();<EOL>    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));<EOL>    webgl_util.callAndCheck(gl, () => gl.bufferData(gl2.","gt":"PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW));"}
{"input":"<s> function deriveResponse({ to, from, page }, { type, uuid, items, max, $entities }) {<EOL>    const stored = MemoryRetrieve(`<STR_LIT>`);<EOL>    storeList({<EOL>        uuid,<EOL>        items: Object.assign((stored && stored.items) || {}, items),<EOL>        max,<EOL>","gt":"type,"}
{"input":"<s> function deriveResponse({ to, from, page }, { type, uuid, items, max, $entities }) {<EOL>    const stored = MemoryRetrieve(`<STR_LIT>`);<EOL>    storeList({<EOL>        uuid,<EOL>        items: Object.assign((stored && stored.items) || {}, items),<EOL>        max,<EOL>         type,<EOL>        $entities,<EOL>    });<EOL>    return {<EOL>","gt":"uuid,"}
{"input":"<s> function deriveResponse({ to, from, page }, { type, uuid, items, max, $entities }) {<EOL>    const stored = MemoryRetrieve(`<STR_LIT>`);<EOL>    storeList({<EOL>        uuid,<EOL>        items: Object.assign((stored && stored.items) || {}, items),<EOL>        max,<EOL>         type,<EOL>        $entities,<EOL>    });<EOL>    return {<EOL>         uuid,<EOL>        items: Object.assign({}, ...Object.keys(items)<EOL>            .filter(key => Number(key) >= from && Number(key) <= to)<EOL>            .map(key => ({ [key]: items[key] }))),<EOL>","gt":"type,"}
{"input":"<s> export function rank(url) {<EOL>    return (strip(url).","gt":"match(/\\/+/g) || '<STR_LIT>').length;"}
{"input":"<s> <EOL>function generateColor(index) {<EOL>    return BaseChartDirective.","gt":"defaultColors[index] || getRandomColor();"}
{"input":"<s> // import {setProperty} from 'angular2/ts/src/core/forms/directives/shared';<EOL>function setProperty(renderer, elementRef, propName, propValue) {<EOL>    renderer.setElementProperty(elementRef, propName,","gt":"propValue);"}
{"input":"<s> export function getDate(date, isUTC = false) {<EOL>    return isUTC ? date.","gt":"getUTCDate() : date.getDate();"}
{"input":"<s> export function calendar(date, time, formats, locale = getLocale(), config = {}) {<EOL>    // We want to compare the start of today, vs this.<EOL>    // Getting start-of-today depends on whether we're local/utc/offset or not.<EOL>    const now = time;<EOL>    const sod = startOf(cloneWithOffset(now, date, config), '<STR_LIT>', config._isUTC);<EOL>    const format = getCalendarFormat(date, sod, { _isUTC: true, _offset: <NUM_LIT> }) || '<STR_LIT>';<EOL>","gt":"let output;"}
{"input":"<s> export function daysInMonth(date) {<EOL>    return","gt":"_daysInMonth(date.getFullYear(), date.getMonth());"}
{"input":"<s> function formatReducer(state, action) {<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const formattedMonths = state.monthsModel.map((month, monthIndex) => formatDaysCalendar(month, getFormatOptions(state), monthIndex));<EOL>        return Object.assign({}, state, { formattedMonths });<EOL>    }<EOL>    // how many calendars<EOL>","gt":"const displayMonths = state.displayMonths;"}
{"input":"<s> function formatReducer(state, action) {<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const formattedMonths = state.monthsModel.map((month, monthIndex) => formatDaysCalendar(month, getFormatOptions(state), monthIndex));<EOL>        return Object.assign({}, state, { formattedMonths });<EOL>    }<EOL>    // how many calendars<EOL>     const displayMonths = state.displayMonths;<EOL>    // check initial rendering<EOL>    // use selected date on initial rendering if set<EOL>    let","gt":"viewDate = state.view.date;"}
{"input":"<s> function formatReducer(state, action) {<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const formattedMonths = state.monthsModel.map((month, monthIndex) => formatDaysCalendar(month, getFormatOptions(state), monthIndex));<EOL>        return Object.assign({}, state, { formattedMonths });<EOL>    }<EOL>    // how many calendars<EOL>     const displayMonths = state.displayMonths;<EOL>    // check initial rendering<EOL>    // use selected date on initial rendering if set<EOL>    let  viewDate = state.view.date;<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const monthsCalendar = new Array(displayMonths);<EOL>        for (let calendarIndex = <NUM_LIT>; calendarIndex < displayMonths;","gt":"calendarIndex++) {"}
{"input":"<s> function formatReducer(state, action) {<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const formattedMonths = state.monthsModel.map((month, monthIndex) => formatDaysCalendar(month, getFormatOptions(state), monthIndex));<EOL>        return Object.assign({}, state, { formattedMonths });<EOL>    }<EOL>    // how many calendars<EOL>     const displayMonths = state.displayMonths;<EOL>    // check initial rendering<EOL>    // use selected date on initial rendering if set<EOL>    let  viewDate = state.view.date;<EOL>    if (state.view.mode === '<STR_LIT>') {<EOL>        const monthsCalendar = new Array(displayMonths);<EOL>        for (let calendarIndex = <NUM_LIT>; calendarIndex < displayMonths;  calendarIndex++) {<EOL>            // todo: for unlinked calendars it will be harder<EOL>            monthsCalendar[calendarIndex] = formatMonthsCalendar(viewDate, getFormatOptions(state));<EOL>            viewDate =","gt":"shiftDate(viewDate, { year: <NUM_LIT> });"}
{"input":"<s> function getSetWeekYearHelper(date, input, week, weekday, dow, doy) {<EOL>    if (!input) {<EOL>","gt":"return getWeekYear(date);"}
{"input":"<s> export function addTimeToArrayFromToken(token, input, config) {<EOL>    if (input != null && hasOwnProp(tokens, token)) {<EOL>        tokens[token](input, config._a, config,","gt":"token);"}
{"input":"<s> export function size(value) {<EOL>    return isEmpty(value) ?","gt":"<NUM_LIT> : value.length;"}
{"input":"<s> export function formatDaysCalendar(daysCalendar, formatOptions, monthIndex) {<EOL>    return {<EOL>        month: daysCalendar.month,<EOL>        monthTitle: formatDate(daysCalendar.month, formatOptions.monthTitle, formatOptions.locale),<EOL>        yearTitle: formatDate(daysCalendar.month, formatOptions.yearTitle, formatOptions.locale),<EOL>","gt":"weekNumbers: getWeekNumbers(daysCalendar.daysMatrix, formatOptions.weekNumbers, formatOptions.locale),"}
{"input":"<s> export function formatDaysCalendar(daysCalendar, formatOptions, monthIndex) {<EOL>    return {<EOL>        month: daysCalendar.month,<EOL>        monthTitle: formatDate(daysCalendar.month, formatOptions.monthTitle, formatOptions.locale),<EOL>        yearTitle: formatDate(daysCalendar.month, formatOptions.yearTitle, formatOptions.locale),<EOL>         weekNumbers: getWeekNumbers(daysCalendar.daysMatrix, formatOptions.weekNumbers, formatOptions.locale),<EOL>        weekdays: getShiftedWeekdays(formatOptions.locale),<EOL>        weeks: daysCalendar.daysMatrix.map((week, weekIndex) => ({<EOL>            days: week.map((date, dayIndex) => ({<EOL>","gt":"date,"}
{"input":"<s> function getPrevNavButton(fixture) {<EOL>","gt":"return fixture.nativeElement.querySelector(prevNavSelector);"}
{"input":"<s> //! moment.js locale configuration<EOL>//! locale : Russian [ru]<EOL>//! author : Viktorminator : https://github.com/Viktorminator<EOL>//! Author : Menelion Elensúle : https://github.com/Oire<EOL>//! author : Коренберг Марк : https://github.com/socketpair<EOL>function plural(word, num) {<EOL>    let forms = word.split(","gt":"'<STR_LIT>');"}
{"input":"<s> export function markInvalid(config) {<EOL>    config._isValid =","gt":"false;"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||","gt":"isFuture) {"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>","gt":"return result + '<STR_LIT>';"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                 return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // an hour / in an hour / an hour ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 hours / in 9 hours / 9 hours ago<EOL>            if (","gt":"withoutSuffix || isFuture) {"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                 return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // an hour / in an hour / an hour ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 hours / in 9 hours / 9 hours ago<EOL>            if ( withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a day / in a day / a day ago<EOL>","gt":"return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                 return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // an hour / in an hour / an hour ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 hours / in 9 hours / 9 hours ago<EOL>            if ( withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a day / in a day / a day ago<EOL>             return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 days / in 9 days / 9 days ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a month / in a month / a month ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 months / in 9 months / 9 months ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' :","gt":"'<STR_LIT>');"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                 return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // an hour / in an hour / an hour ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 hours / in 9 hours / 9 hours ago<EOL>            if ( withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a day / in a day / a day ago<EOL>             return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 days / in 9 days / 9 days ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a month / in a month / a month ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 months / in 9 months / 9 months ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' :  '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case","gt":"'<STR_LIT>':"}
{"input":"<s> function translate(num, withoutSuffix, key, isFuture) {<EOL>    const result = num + '<STR_LIT>';<EOL>    switch (key) {<EOL>        case  '<STR_LIT>': // a few seconds / in a few seconds / a few seconds ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 seconds / in 9 seconds / 9 seconds ago<EOL>            if (withoutSuffix ||  isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a minute / in a minute / a minute ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 minutes / in 9 minutes / 9 minutes ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                 return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // an hour / in an hour / an hour ago<EOL>            return withoutSuffix ? '<STR_LIT>' : (isFuture ? '<STR_LIT>' : '<STR_LIT>');<EOL>        case '<STR_LIT>': // 9 hours / in 9 hours / 9 hours ago<EOL>            if ( withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a day / in a day / a day ago<EOL>             return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 days / in 9 days / 9 days ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' : '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case '<STR_LIT>': // a month / in a month / a month ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 months / in 9 months / 9 months ago<EOL>            if (withoutSuffix || isFuture) {<EOL>                return result + (plural(num) ? '<STR_LIT>' :  '<STR_LIT>');<EOL>            }<EOL>            else {<EOL>                return result + '<STR_LIT>';<EOL>            }<EOL>        // break;<EOL>        case  '<STR_LIT>': // a year / in a year / a year ago<EOL>            return (withoutSuffix || isFuture) ? '<STR_LIT>' : '<STR_LIT>';<EOL>        case '<STR_LIT>': // 9 years / in 9 years / 9 years ago<EOL>","gt":"if (withoutSuffix || isFuture) {"}
{"input":"<s> export function createLocalOrUTC(input, format, localeKey, strict, isUTC) {<EOL>    const config = {};<EOL>    let _input = input;<EOL>    // params switch -> skip; test it well<EOL>    // if (localeKey === true || localeKey === false) {<EOL>    //     strict = localeKey;<EOL>    //     localeKey = undefined;<EOL>    // }<EOL>    // todo: fail fast and return not valid date<EOL>    if ((isObject(_input) && isObjectEmpty(_input)) || (isArray(_input) && _input.length === <NUM_LIT>)) {<EOL>        _input = undefined;<EOL>    }<EOL>    // object construction must be done this way.<EOL>    // https://github.com/moment/moment/issues/1423<EOL>    // config._isAMomentObject = true;<EOL>    config._useUTC = config._isUTC = isUTC;<EOL>    config.","gt":"_l = localeKey;"}
{"input":"<s> // FORMATTING<EOL>function getYear(date, opts) {<EOL>    return getFullYear(date, opts.isUTC).","gt":"toString();"}
